
EthernetFW1_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140b4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dbc  08014384  08014384  00024384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08017140  08017140  00027140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08017144  08017144  00027144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  24000000  08017148  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000a934  24000098  080171e0  00030098  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400a9cc  080171e0  0003a9cc  2**0
                  ALLOC
  8 .lwip_sec     00000160  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032c4d  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000714f  00000000  00000000  00062d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002330  00000000  00000000  00069e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000021c0  00000000  00000000  0006c198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041836  00000000  00000000  0006e358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034a76  00000000  00000000  000afb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d084  00000000  00000000  000e4604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00251688  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009aa0  00000000  00000000  002516d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000098 	.word	0x24000098
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801436c 	.word	0x0801436c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400009c 	.word	0x2400009c
 800030c:	0801436c 	.word	0x0801436c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <DP83826E_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83826E_STATUS_OK  if OK
  *         DP83826E_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83826E_RegisterBusIO(dp83826e_Object_t *pObj, dp83826e_IOCtx_t *ioctx)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d00b      	beq.n	80003d8 <DP83826E_RegisterBusIO+0x28>
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d007      	beq.n	80003d8 <DP83826E_RegisterBusIO+0x28>
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d003      	beq.n	80003d8 <DP83826E_RegisterBusIO+0x28>
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d102      	bne.n	80003de <DP83826E_RegisterBusIO+0x2e>
  {
    return DP83826E_STATUS_ERROR;
 80003d8:	f04f 33ff 	mov.w	r3, #4294967295
 80003dc:	e014      	b.n	8000408 <DP83826E_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	685a      	ldr	r2, [r3, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	68da      	ldr	r2, [r3, #12]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	689a      	ldr	r2, [r3, #8]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	691a      	ldr	r2, [r3, #16]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	619a      	str	r2, [r3, #24]

  return DP83826E_STATUS_OK;
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <DP83826E_FindFirstPHY>:



int32_t DP83826E_FindFirstPHY(dp83826e_Object_t *pObj)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	uint32_t regvalue = 0, addr = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
	int32_t status = DP83826E_STATUS_OK;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]
	/* for later check */
	     pObj->DevAddr = DP83826E_MAX_DEV_ADDR + 1;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2220      	movs	r2, #32
 800042c:	601a      	str	r2, [r3, #0]

	     /* Get the device address from special mode register */
	     for(addr = 0; addr <= DP83826E_MAX_DEV_ADDR; addr ++)
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
 8000432:	e01c      	b.n	800046e <DP83826E_FindFirstPHY+0x5a>
	     {
	       if(pObj->IO.ReadReg(addr, DP83826E_PHYCR, &regvalue) < 0)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f107 020c 	add.w	r2, r7, #12
 800043c:	2119      	movs	r1, #25
 800043e:	6978      	ldr	r0, [r7, #20]
 8000440:	4798      	blx	r3
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	da03      	bge.n	8000450 <DP83826E_FindFirstPHY+0x3c>
	       {
	         status = DP83826E_STATUS_READ_ERROR;
 8000448:	f06f 0304 	mvn.w	r3, #4
 800044c:	613b      	str	r3, [r7, #16]
	         /* Can't read from this device address
	            continue with next address */
	         continue;
 800044e:	e00b      	b.n	8000468 <DP83826E_FindFirstPHY+0x54>
	       }

	       if((regvalue & DP83826E_PHYCR_PHY_ADDR) == addr)
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f003 031f 	and.w	r3, r3, #31
 8000456:	697a      	ldr	r2, [r7, #20]
 8000458:	429a      	cmp	r2, r3
 800045a:	d105      	bne.n	8000468 <DP83826E_FindFirstPHY+0x54>
	       {
	         pObj->DevAddr = addr;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	697a      	ldr	r2, [r7, #20]
 8000460:	601a      	str	r2, [r3, #0]
	         status = DP83826E_STATUS_OK;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
	         break;
 8000466:	e005      	b.n	8000474 <DP83826E_FindFirstPHY+0x60>
	     for(addr = 0; addr <= DP83826E_MAX_DEV_ADDR; addr ++)
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	3301      	adds	r3, #1
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	2b1f      	cmp	r3, #31
 8000472:	d9df      	bls.n	8000434 <DP83826E_FindFirstPHY+0x20>
	       }
	     }

	     if(pObj->DevAddr > DP83826E_MAX_DEV_ADDR)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b1f      	cmp	r3, #31
 800047a:	d902      	bls.n	8000482 <DP83826E_FindFirstPHY+0x6e>
	     {
	       status = DP83826E_STATUS_ADDRESS_ERROR;
 800047c:	f06f 0302 	mvn.w	r3, #2
 8000480:	613b      	str	r3, [r7, #16]
	     }

    return status;
 8000482:	693b      	ldr	r3, [r7, #16]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <DP83826E_SoftwareReset>:

int32_t DP83826E_SoftwareReset(dp83826e_Object_t *pObj)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0, regvalue = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
	int32_t status = DP83826E_STATUS_OK;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
	/* set a software reset  */
		if(pObj->IO.WriteReg(pObj->DevAddr, DP83826E_BCR, DP83826E_BCR_SOFT_RESET) >= 0)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	691b      	ldr	r3, [r3, #16]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	6810      	ldr	r0, [r2, #0]
 80004a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004ac:	2100      	movs	r1, #0
 80004ae:	4798      	blx	r3
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	db37      	blt.n	8000526 <DP83826E_SoftwareReset+0x9a>
		{
			/* get software reset status */
			if(pObj->IO.ReadReg(pObj->DevAddr, DP83826E_BCR, &regvalue) >= 0)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	6810      	ldr	r0, [r2, #0]
 80004be:	f107 020c 	add.w	r2, r7, #12
 80004c2:	2100      	movs	r1, #0
 80004c4:	4798      	blx	r3
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	db28      	blt.n	800051e <DP83826E_SoftwareReset+0x92>
			{
				tickstart = pObj->IO.GetTick();
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4798      	blx	r3
 80004d2:	4603      	mov	r3, r0
 80004d4:	613b      	str	r3, [r7, #16]
				while ((regvalue & DP83826E_BCR_SOFT_RESET) == DP83826E_BCR_SOFT_RESET)
 80004d6:	e01c      	b.n	8000512 <DP83826E_SoftwareReset+0x86>
				{
					if(pObj->IO.ReadReg(pObj->DevAddr, DP83826E_BCR, &regvalue) < 0)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	6810      	ldr	r0, [r2, #0]
 80004e0:	f107 020c 	add.w	r2, r7, #12
 80004e4:	2100      	movs	r1, #0
 80004e6:	4798      	blx	r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	da03      	bge.n	80004f6 <DP83826E_SoftwareReset+0x6a>
					{
						status = DP83826E_STATUS_READ_ERROR;
 80004ee:	f06f 0304 	mvn.w	r3, #4
 80004f2:	617b      	str	r3, [r7, #20]
						break;
 80004f4:	e01a      	b.n	800052c <DP83826E_SoftwareReset+0xa0>
					}
					else if ((pObj->IO.GetTick() - tickstart) >= DP83826E_SW_RESET_TO)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4798      	blx	r3
 80004fc:	4603      	mov	r3, r0
 80004fe:	461a      	mov	r2, r3
 8000500:	693b      	ldr	r3, [r7, #16]
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000508:	d303      	bcc.n	8000512 <DP83826E_SoftwareReset+0x86>
					{
						status = DP83826E_STATUS_RESET_TIMEOUT;
 800050a:	f06f 0301 	mvn.w	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
						break;
 8000510:	e00c      	b.n	800052c <DP83826E_SoftwareReset+0xa0>
				while ((regvalue & DP83826E_BCR_SOFT_RESET) == DP83826E_BCR_SOFT_RESET)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1dd      	bne.n	80004d8 <DP83826E_SoftwareReset+0x4c>
 800051c:	e006      	b.n	800052c <DP83826E_SoftwareReset+0xa0>
					}
				}
			}
			else
			{
				status = DP83826E_STATUS_WRITE_ERROR;
 800051e:	f06f 0303 	mvn.w	r3, #3
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e002      	b.n	800052c <DP83826E_SoftwareReset+0xa0>
			}
		}
		else
		{
			status = DP83826E_STATUS_READ_ERROR;
 8000526:	f06f 0304 	mvn.w	r3, #4
 800052a:	617b      	str	r3, [r7, #20]
		}

    return status;
 800052c:	697b      	ldr	r3, [r7, #20]

}
 800052e:	4618      	mov	r0, r3
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <DP83826E_Configure>:

int32_t DP83826E_Configure(dp83826e_Object_t *pObj)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b084      	sub	sp, #16
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
	int32_t status = DP83826E_STATUS_OK;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]

	// LED0 (orange) polarität einstellen
	pObj->IO.WriteReg(pObj->DevAddr, DP83826E_LEDCR, DP83826E_LEDCR_CONF);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	691b      	ldr	r3, [r3, #16]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	6810      	ldr	r0, [r2, #0]
 800054a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800054e:	2118      	movs	r1, #24
 8000550:	4798      	blx	r3
	// LED1 (grün) polarität einstellen
	pObj->IO.WriteReg(pObj->DevAddr, DP83826E_REGCR, DP83826E_REGCR_FUN_ADR);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	691b      	ldr	r3, [r3, #16]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	6810      	ldr	r0, [r2, #0]
 800055a:	221f      	movs	r2, #31
 800055c:	210d      	movs	r1, #13
 800055e:	4798      	blx	r3
	pObj->IO.WriteReg(pObj->DevAddr, DP83826E_ADDAR, DP83826E_LEDCFG2);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	6810      	ldr	r0, [r2, #0]
 8000568:	f240 4269 	movw	r2, #1129	; 0x469
 800056c:	210e      	movs	r1, #14
 800056e:	4798      	blx	r3
	pObj->IO.WriteReg(pObj->DevAddr, DP83826E_REGCR, DP83826E_REGCR_FUN_DATA);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	6810      	ldr	r0, [r2, #0]
 8000578:	f244 021f 	movw	r2, #16415	; 0x401f
 800057c:	210d      	movs	r1, #13
 800057e:	4798      	blx	r3
	pObj->IO.WriteReg(pObj->DevAddr, DP83826E_ADDAR, DP83826E_LEDCFG2_CONF);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	691b      	ldr	r3, [r3, #16]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	6810      	ldr	r0, [r2, #0]
 8000588:	f240 4244 	movw	r2, #1092	; 0x444
 800058c:	210e      	movs	r1, #14
 800058e:	4798      	blx	r3
	//pObj->IO.WriteReg(pObj->DevAddr, DP83826E_REGCR, DP83826E_REGCR_FUN_ADR);
	//pObj->IO.WriteReg(pObj->DevAddr, DP83826E_ADDAR, ((uint16_t)0x0468U));
	//pObj->IO.WriteReg(pObj->DevAddr, DP83826E_REGCR, DP83826E_REGCR_FUN_DATA);
	//pObj->IO.ReadReg(pObj->DevAddr, DP83826E_ADDAR, &regvalue);

    return status;
 8000590:	68fb      	ldr	r3, [r7, #12]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <DP83826E_Init>:
  *         DP83826E_STATUS_READ_ERROR if connot read register
  *         DP83826E_STATUS_WRITE_ERROR if connot write to register
  *         DP83826E_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83826E_Init(dp83826e_Object_t *pObj)
 {
 800059a:	b580      	push	{r7, lr}
 800059c:	b084      	sub	sp, #16
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
	 uint32_t tickstart = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	 int32_t status = DP83826E_STATUS_OK;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]

	if(pObj->Is_Initialized == 0)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d12e      	bne.n	8000610 <DP83826E_Init+0x76>
	{
		if(pObj->IO.Init != 0)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <DP83826E_Init+0x26>
		{
			/* GPIO and Clocks initialization */
			pObj->IO.Init();
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	4798      	blx	r3
		}

		/* Suche den PHY mit der niedrigsten Adresse */
		status = DP83826E_FindFirstPHY(pObj);
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff ff27 	bl	8000414 <DP83826E_FindFirstPHY>
 80005c6:	60f8      	str	r0, [r7, #12]
		if (status == DP83826E_STATUS_OK)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d120      	bne.n	8000610 <DP83826E_Init+0x76>
		{
			// Einmal resetten
			status = DP83826E_SoftwareReset(pObj);
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff ff5c 	bl	800048c <DP83826E_SoftwareReset>
 80005d4:	60f8      	str	r0, [r7, #12]
			if (status == DP83826E_STATUS_OK)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d119      	bne.n	8000610 <DP83826E_Init+0x76>
			{
				// und einstellen :)
				status = DP83826E_Configure(pObj);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff ffaa 	bl	8000536 <DP83826E_Configure>
 80005e2:	60f8      	str	r0, [r7, #12]
				if (status == DP83826E_STATUS_OK)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d112      	bne.n	8000610 <DP83826E_Init+0x76>
				{
					tickstart = pObj->IO.GetTick();
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4798      	blx	r3
 80005f0:	4603      	mov	r3, r0
 80005f2:	60bb      	str	r3, [r7, #8]
					while ((pObj->IO.GetTick() - tickstart) <= 2000)
 80005f4:	bf00      	nop
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4798      	blx	r3
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000608:	d9f5      	bls.n	80005f6 <DP83826E_Init+0x5c>
					{
					}
				     pObj->Is_Initialized = 1;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	605a      	str	r2, [r3, #4]
				}
			}
		}
	}
   return status;
 8000610:	68fb      	ldr	r3, [r7, #12]
 }
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <DP83826E_GetLinkState>:
  *         DP83826E_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83826E_STATUS_READ_ERROR if connot read register
  *         DP83826E_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83826E_GetLinkState(dp83826e_Object_t *pObj)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83826E_BSR, &readval) < 0)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	6810      	ldr	r0, [r2, #0]
 800062e:	f107 020c 	add.w	r2, r7, #12
 8000632:	2101      	movs	r1, #1
 8000634:	4798      	blx	r3
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	da02      	bge.n	8000642 <DP83826E_GetLinkState+0x28>
  {
    return DP83826E_STATUS_READ_ERROR;
 800063c:	f06f 0304 	mvn.w	r3, #4
 8000640:	e07c      	b.n	800073c <DP83826E_GetLinkState+0x122>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83826E_BSR, &readval) < 0)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	6810      	ldr	r0, [r2, #0]
 800064a:	f107 020c 	add.w	r2, r7, #12
 800064e:	2101      	movs	r1, #1
 8000650:	4798      	blx	r3
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	da02      	bge.n	800065e <DP83826E_GetLinkState+0x44>
  {
    return DP83826E_STATUS_READ_ERROR;
 8000658:	f06f 0304 	mvn.w	r3, #4
 800065c:	e06e      	b.n	800073c <DP83826E_GetLinkState+0x122>
  }

  if((readval & DP83826E_BSR_LINK_STATUS) == 0)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	2b00      	cmp	r3, #0
 8000666:	d101      	bne.n	800066c <DP83826E_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83826E_STATUS_LINK_DOWN;
 8000668:	2301      	movs	r3, #1
 800066a:	e067      	b.n	800073c <DP83826E_GetLinkState+0x122>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83826E_BCR, &readval) < 0)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	6810      	ldr	r0, [r2, #0]
 8000674:	f107 020c 	add.w	r2, r7, #12
 8000678:	2100      	movs	r1, #0
 800067a:	4798      	blx	r3
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	da02      	bge.n	8000688 <DP83826E_GetLinkState+0x6e>
  {
    return DP83826E_STATUS_READ_ERROR;
 8000682:	f06f 0304 	mvn.w	r3, #4
 8000686:	e059      	b.n	800073c <DP83826E_GetLinkState+0x122>
  }

  if((readval & DP83826E_BCR_AUTONEGO_EN) != DP83826E_BCR_AUTONEGO_EN)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068e:	2b00      	cmp	r3, #0
 8000690:	d11b      	bne.n	80006ca <DP83826E_GetLinkState+0xb0>
  {
    if(((readval & DP83826E_BCR_SPEED_SELECT) == DP83826E_BCR_SPEED_SELECT) && ((readval & DP83826E_BCR_DUPLEX_MODE) == DP83826E_BCR_DUPLEX_MODE))
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000698:	2b00      	cmp	r3, #0
 800069a:	d006      	beq.n	80006aa <DP83826E_GetLinkState+0x90>
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <DP83826E_GetLinkState+0x90>
    {
      return DP83826E_STATUS_100MBITS_FULLDUPLEX;
 80006a6:	2302      	movs	r3, #2
 80006a8:	e048      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    else if ((readval & DP83826E_BCR_SPEED_SELECT) == DP83826E_BCR_SPEED_SELECT)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <DP83826E_GetLinkState+0x9e>
    {
      return DP83826E_STATUS_100MBITS_HALFDUPLEX;
 80006b4:	2303      	movs	r3, #3
 80006b6:	e041      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    else if ((readval & DP83826E_BCR_DUPLEX_MODE) == DP83826E_BCR_DUPLEX_MODE)
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <DP83826E_GetLinkState+0xac>
    {
      return DP83826E_STATUS_10MBITS_FULLDUPLEX;
 80006c2:	2304      	movs	r3, #4
 80006c4:	e03a      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    else
    {
      return DP83826E_STATUS_10MBITS_HALFDUPLEX;
 80006c6:	2305      	movs	r3, #5
 80006c8:	e038      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83826E_BSR, &readval) < 0)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	6810      	ldr	r0, [r2, #0]
 80006d2:	f107 020c 	add.w	r2, r7, #12
 80006d6:	2101      	movs	r1, #1
 80006d8:	4798      	blx	r3
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	da02      	bge.n	80006e6 <DP83826E_GetLinkState+0xcc>
    {
      return DP83826E_STATUS_READ_ERROR;
 80006e0:	f06f 0304 	mvn.w	r3, #4
 80006e4:	e02a      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }

    /* Check if auto nego not done */
    if((readval & DP83826E_BSR_AUTONEGO_CPLT) == 0)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f003 0320 	and.w	r3, r3, #32
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <DP83826E_GetLinkState+0xda>
    {
      return DP83826E_STATUS_AUTONEGO_NOTDONE;
 80006f0:	2306      	movs	r3, #6
 80006f2:	e023      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    if(pObj->IO.ReadReg(pObj->DevAddr, ((uint16_t)0x0010U), &readval) < 0)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	6810      	ldr	r0, [r2, #0]
 80006fc:	f107 020c 	add.w	r2, r7, #12
 8000700:	2110      	movs	r1, #16
 8000702:	4798      	blx	r3
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	da02      	bge.n	8000710 <DP83826E_GetLinkState+0xf6>
    {
      return DP83826E_STATUS_READ_ERROR;
 800070a:	f06f 0304 	mvn.w	r3, #4
 800070e:	e015      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }


    if((readval & DP83826E_PHYSCSR_HCDSPEEDMASK) == DP83826E_PHYSCSR_100BTX_FD)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f003 031c 	and.w	r3, r3, #28
 8000716:	2b18      	cmp	r3, #24
 8000718:	d101      	bne.n	800071e <DP83826E_GetLinkState+0x104>
    {
      return DP83826E_STATUS_100MBITS_FULLDUPLEX;
 800071a:	2302      	movs	r3, #2
 800071c:	e00e      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    else if ((readval & DP83826E_PHYSCSR_HCDSPEEDMASK) == DP83826E_PHYSCSR_100BTX_HD)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f003 031c 	and.w	r3, r3, #28
 8000724:	2b08      	cmp	r3, #8
 8000726:	d101      	bne.n	800072c <DP83826E_GetLinkState+0x112>
    {
      return DP83826E_STATUS_100MBITS_HALFDUPLEX;
 8000728:	2303      	movs	r3, #3
 800072a:	e007      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    else if ((readval & DP83826E_PHYSCSR_HCDSPEEDMASK) == DP83826E_PHYSCSR_10BT_FD)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 031c 	and.w	r3, r3, #28
 8000732:	2b14      	cmp	r3, #20
 8000734:	d101      	bne.n	800073a <DP83826E_GetLinkState+0x120>
    {
      return DP83826E_STATUS_10MBITS_FULLDUPLEX;
 8000736:	2304      	movs	r3, #4
 8000738:	e000      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    else
    {
      return DP83826E_STATUS_100MBITS_FULLDUPLEX;
 800073a:	2302      	movs	r3, #2
    }
  }
}
 800073c:	4618      	mov	r0, r3
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800074a:	f000 f971 	bl	8000a30 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800074e:	4b3b      	ldr	r3, [pc, #236]	; (800083c <main+0xf8>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000756:	2b00      	cmp	r3, #0
 8000758:	d11b      	bne.n	8000792 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800075a:	f3bf 8f4f 	dsb	sy
}
 800075e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000760:	f3bf 8f6f 	isb	sy
}
 8000764:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000766:	4b35      	ldr	r3, [pc, #212]	; (800083c <main+0xf8>)
 8000768:	2200      	movs	r2, #0
 800076a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800076e:	f3bf 8f4f 	dsb	sy
}
 8000772:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000774:	f3bf 8f6f 	isb	sy
}
 8000778:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800077a:	4b30      	ldr	r3, [pc, #192]	; (800083c <main+0xf8>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a2f      	ldr	r2, [pc, #188]	; (800083c <main+0xf8>)
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000786:	f3bf 8f4f 	dsb	sy
}
 800078a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800078c:	f3bf 8f6f 	isb	sy
}
 8000790:	e000      	b.n	8000794 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000792:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <main+0xf8>)
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d138      	bne.n	8000812 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007a0:	4b26      	ldr	r3, [pc, #152]	; (800083c <main+0xf8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007a8:	f3bf 8f4f 	dsb	sy
}
 80007ac:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <main+0xf8>)
 80007b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007b4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	0b5b      	lsrs	r3, r3, #13
 80007ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007be:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	08db      	lsrs	r3, r3, #3
 80007c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007c8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	015a      	lsls	r2, r3, #5
 80007ce:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007d2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007d8:	4918      	ldr	r1, [pc, #96]	; (800083c <main+0xf8>)
 80007da:	4313      	orrs	r3, r2
 80007dc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	1e5a      	subs	r2, r3, #1
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1ef      	bne.n	80007ca <main+0x86>
    } while(sets-- != 0U);
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1e5a      	subs	r2, r3, #1
 80007ee:	60ba      	str	r2, [r7, #8]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1e5      	bne.n	80007c0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80007f4:	f3bf 8f4f 	dsb	sy
}
 80007f8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <main+0xf8>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <main+0xf8>)
 8000800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000804:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000806:	f3bf 8f4f 	dsb	sy
}
 800080a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800080c:	f3bf 8f6f 	isb	sy
}
 8000810:	e000      	b.n	8000814 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000812:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f000 fba6 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 f818 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081c:	f000 f884 	bl	8000928 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000820:	f004 fd68 	bl	80052f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <main+0xfc>)
 8000826:	2100      	movs	r1, #0
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <main+0x100>)
 800082a:	f004 fdc2 	bl	80053b2 <osThreadNew>
 800082e:	4603      	mov	r3, r0
 8000830:	4a05      	ldr	r2, [pc, #20]	; (8000848 <main+0x104>)
 8000832:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000834:	f004 fd82 	bl	800533c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000838:	e7fe      	b.n	8000838 <main+0xf4>
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00
 8000840:	08016e94 	.word	0x08016e94
 8000844:	08000a0d 	.word	0x08000a0d
 8000848:	24005e38 	.word	0x24005e38

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b09c      	sub	sp, #112	; 0x70
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	224c      	movs	r2, #76	; 0x4c
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f012 fdbd 	bl	80133da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2220      	movs	r2, #32
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f012 fdb7 	bl	80133da <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800086c:	2004      	movs	r0, #4
 800086e:	f002 fc5b 	bl	8003128 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <SystemClock_Config+0xd8>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a2a      	ldr	r2, [pc, #168]	; (8000924 <SystemClock_Config+0xd8>)
 800087c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b28      	ldr	r3, [pc, #160]	; (8000924 <SystemClock_Config+0xd8>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800088e:	bf00      	nop
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <SystemClock_Config+0xd8>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800089c:	d1f8      	bne.n	8000890 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a6:	2340      	movs	r3, #64	; 0x40
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ae:	2300      	movs	r3, #0
 80008b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b2:	2304      	movs	r3, #4
 80008b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80008b6:	2320      	movs	r3, #32
 80008b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008c6:	230c      	movs	r3, #12
 80008c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fc80 	bl	80031dc <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008e2:	f000 f909 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	233f      	movs	r3, #63	; 0x3f
 80008e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2303      	movs	r3, #3
 80008ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV8;
 80008f2:	230a      	movs	r3, #10
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f003 f814 	bl	8003938 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000916:	f000 f8ef 	bl	8000af8 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3770      	adds	r7, #112	; 0x70
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	58024800 	.word	0x58024800

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093e:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <MX_GPIO_Init+0xdc>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <MX_GPIO_Init+0xdc>)
 8000946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <MX_GPIO_Init+0xdc>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095c:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <MX_GPIO_Init+0xdc>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000962:	4a28      	ldr	r2, [pc, #160]	; (8000a04 <MX_GPIO_Init+0xdc>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <MX_GPIO_Init+0xdc>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <MX_GPIO_Init+0xdc>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	4a20      	ldr	r2, [pc, #128]	; (8000a04 <MX_GPIO_Init+0xdc>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_GPIO_Init+0xdc>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_GPIO_Init+0xdc>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099e:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <MX_GPIO_Init+0xdc>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_GPIO_Init+0xdc>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_GPIO_Init+0xdc>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <MX_GPIO_Init+0xdc>)
 80009be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_GPIO_Init+0xdc>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2140      	movs	r1, #64	; 0x40
 80009d8:	480b      	ldr	r0, [pc, #44]	; (8000a08 <MX_GPIO_Init+0xe0>)
 80009da:	f002 fb71 	bl	80030c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80009de:	2340      	movs	r3, #64	; 0x40
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_GPIO_Init+0xe0>)
 80009f6:	f002 f9bb 	bl	8002d70 <HAL_GPIO_Init>

}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	; 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	58024400 	.word	0x58024400
 8000a08:	58021c00 	.word	0x58021c00

08000a0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a14:	f003 fe3c 	bl	8004690 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <StartDefaultTask+0x20>)
 8000a1c:	f002 fb69 	bl	80030f2 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000a20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a24:	f004 fd58 	bl	80054d8 <osDelay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000a28:	e7f6      	b.n	8000a18 <StartDefaultTask+0xc>
 8000a2a:	bf00      	nop
 8000a2c:	58021c00 	.word	0x58021c00

08000a30 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a42:	f000 fbdf 	bl	8001204 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a46:	2301      	movs	r3, #1
 8000a48:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a52:	231f      	movs	r3, #31
 8000a54:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a56:	2387      	movs	r3, #135	; 0x87
 8000a58:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a62:	2301      	movs	r3, #1
 8000a64:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a66:	2301      	movs	r3, #1
 8000a68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a72:	463b      	mov	r3, r7
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fbfd 	bl	8001274 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30001000;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MPU_Config+0xa0>)
 8000a80:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000a82:	230e      	movs	r3, #14
 8000a84:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a96:	463b      	mov	r3, r7
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fbeb 	bl	8001274 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000aa2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000aa6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 8000aa8:	230b      	movs	r3, #11
 8000aaa:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fbda 	bl	8001274 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ac0:	2004      	movs	r0, #4
 8000ac2:	f000 fbb7 	bl	8001234 <HAL_MPU_Enable>

}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	30001000 	.word	0x30001000

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae6:	f000 fa79 	bl	8000fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40001000 	.word	0x40001000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x38>)
 8000b0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_MspInit+0x38>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_MspInit+0x38>)
 8000b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f06f 0001 	mvn.w	r0, #1
 8000b30:	f000 fb40 	bl	80011b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58024400 	.word	0x58024400

08000b40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b090      	sub	sp, #64	; 0x40
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	d827      	bhi.n	8000b9e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	2036      	movs	r0, #54	; 0x36
 8000b54:	f000 fb2e 	bl	80011b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b58:	2036      	movs	r0, #54	; 0x36
 8000b5a:	f000 fb45 	bl	80011e8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b5e:	4a29      	ldr	r2, [pc, #164]	; (8000c04 <HAL_InitTick+0xc4>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b64:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <HAL_InitTick+0xc8>)
 8000b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b6a:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <HAL_InitTick+0xc8>)
 8000b6c:	f043 0310 	orr.w	r3, r3, #16
 8000b70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <HAL_InitTick+0xc8>)
 8000b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b82:	f107 0210 	add.w	r2, r7, #16
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f003 fa49 	bl	8004024 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d106      	bne.n	8000baa <HAL_InitTick+0x6a>
 8000b9c:	e001      	b.n	8000ba2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e02b      	b.n	8000bfa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ba2:	f003 fa29 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8000ba6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000ba8:	e004      	b.n	8000bb4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000baa:	f003 fa25 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bb6:	4a15      	ldr	r2, [pc, #84]	; (8000c0c <HAL_InitTick+0xcc>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	0c9b      	lsrs	r3, r3, #18
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_InitTick+0xd0>)
 8000bc4:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <HAL_InitTick+0xd4>)
 8000bc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_InitTick+0xd0>)
 8000bca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bd0:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <HAL_InitTick+0xd0>)
 8000bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_InitTick+0xd0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_InitTick+0xd0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <HAL_InitTick+0xd0>)
 8000be4:	f003 fa60 	bl	80040a8 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d104      	bne.n	8000bf8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <HAL_InitTick+0xd0>)
 8000bf0:	f003 fabc 	bl	800416c <HAL_TIM_Base_Start_IT>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	e000      	b.n	8000bfa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3740      	adds	r7, #64	; 0x40
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	24000008 	.word	0x24000008
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	24005e3c 	.word	0x24005e3c
 8000c14:	40001000 	.word	0x40001000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <TIM6_DAC_IRQHandler+0x10>)
 8000c4a:	f003 fb15 	bl	8004278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	24005e3c 	.word	0x24005e3c

08000c58 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <ETH_IRQHandler+0x10>)
 8000c5e:	f000 fee9 	bl	8001a34 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	240077c0 	.word	0x240077c0

08000c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	return 1;
 8000c70:	2301      	movs	r3, #1
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_kill>:

int _kill(int pid, int sig)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <_kill+0x20>)
 8000c88:	2216      	movs	r2, #22
 8000c8a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	24005e34 	.word	0x24005e34

08000ca0 <_exit>:

void _exit (int status)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ffe5 	bl	8000c7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cb2:	e7fe      	b.n	8000cb2 <_exit+0x12>

08000cb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	e00a      	b.n	8000cdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cc6:	f3af 8000 	nop.w
 8000cca:	4601      	mov	r1, r0
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	60ba      	str	r2, [r7, #8]
 8000cd2:	b2ca      	uxtb	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbf0      	blt.n	8000cc6 <_read+0x12>
	}

return len;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	e009      	b.n	8000d14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbf1      	blt.n	8000d00 <_write+0x12>
	}
	return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_close>:

int _close(int file)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_isatty>:

int _isatty(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
	return 1;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d205      	bcs.n	8000dcc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <_sbrk+0x6c>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	371c      	adds	r7, #28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	24050000 	.word	0x24050000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	240000b4 	.word	0x240000b4
 8000df8:	2400a9d0 	.word	0x2400a9d0
 8000dfc:	24005e34 	.word	0x24005e34

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e06:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <SystemInit+0xf0>)
 8000e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0c:	4a38      	ldr	r2, [pc, #224]	; (8000ef0 <SystemInit+0xf0>)
 8000e0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <SystemInit+0xf4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d807      	bhi.n	8000e32 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e22:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <SystemInit+0xf4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f023 030f 	bic.w	r3, r3, #15
 8000e2a:	4a32      	ldr	r2, [pc, #200]	; (8000ef4 <SystemInit+0xf4>)
 8000e2c:	f043 0307 	orr.w	r3, r3, #7
 8000e30:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e32:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <SystemInit+0xf8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a30      	ldr	r2, [pc, #192]	; (8000ef8 <SystemInit+0xf8>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <SystemInit+0xf8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e44:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <SystemInit+0xf8>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	492b      	ldr	r1, [pc, #172]	; (8000ef8 <SystemInit+0xf8>)
 8000e4a:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <SystemInit+0xfc>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e50:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <SystemInit+0xf4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d007      	beq.n	8000e6c <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e5c:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <SystemInit+0xf4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f023 030f 	bic.w	r3, r3, #15
 8000e64:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <SystemInit+0xf4>)
 8000e66:	f043 0307 	orr.w	r3, r3, #7
 8000e6a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <SystemInit+0xf8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <SystemInit+0xf8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <SystemInit+0xf8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <SystemInit+0xf8>)
 8000e80:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <SystemInit+0x100>)
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <SystemInit+0xf8>)
 8000e86:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <SystemInit+0x104>)
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <SystemInit+0xf8>)
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <SystemInit+0x108>)
 8000e8e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <SystemInit+0xf8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <SystemInit+0xf8>)
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <SystemInit+0x108>)
 8000e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <SystemInit+0xf8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <SystemInit+0xf8>)
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <SystemInit+0x108>)
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <SystemInit+0xf8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <SystemInit+0xf8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <SystemInit+0xf8>)
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <SystemInit+0xf8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	661a      	str	r2, [r3, #96]	; 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <SystemInit+0xf8>)
 8000ec2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <SystemInit+0xf8>)
 8000ec8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8000ecc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <SystemInit+0xf8>)
 8000ed2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000ed6:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8000ed8:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <SystemInit+0x10c>)
 8000edc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ee0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	52002000 	.word	0x52002000
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f00:	02020200 	.word	0x02020200
 8000f04:	01ff0000 	.word	0x01ff0000
 8000f08:	01010280 	.word	0x01010280
 8000f0c:	52004000 	.word	0x52004000

08000f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f14:	f7ff ff74 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f012 fa07 	bl	8013350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f42:	f7ff fbff 	bl	8000744 <main>
  bx  lr
 8000f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f48:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000f4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f50:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8000f54:	08017148 	.word	0x08017148
  ldr r2, =_sbss
 8000f58:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8000f5c:	2400a9cc 	.word	0x2400a9cc

08000f60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC3_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f917 	bl	800119e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f70:	f002 fe98 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 8000f74:	4602      	mov	r2, r0
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_Init+0x68>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	4913      	ldr	r1, [pc, #76]	; (8000fd0 <HAL_Init+0x6c>)
 8000f82:	5ccb      	ldrb	r3, [r1, r3]
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_Init+0x68>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_Init+0x6c>)
 8000f98:	5cd3      	ldrb	r3, [r2, r3]
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <HAL_Init+0x70>)
 8000fa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_Init+0x74>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f7ff fdc6 	bl	8000b40 <HAL_InitTick>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e002      	b.n	8000fc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbe:	f7ff fda1 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	08016eb8 	.word	0x08016eb8
 8000fd4:	24000004 	.word	0x24000004
 8000fd8:	24000000 	.word	0x24000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2400000c 	.word	0x2400000c
 8001000:	24005e88 	.word	0x24005e88

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	24005e88 	.word	0x24005e88

0800101c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800102c:	4904      	ldr	r1, [pc, #16]	; (8001040 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4313      	orrs	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	58000400 	.word	0x58000400

08001044 <__NVIC_SetPriorityGrouping>:
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <__NVIC_SetPriorityGrouping+0x40>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	4313      	orrs	r3, r2
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x40>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	05fa0000 	.word	0x05fa0000

0800108c <__NVIC_GetPriorityGrouping>:
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_EnableIRQ>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0b      	blt.n	80010d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	f003 021f 	and.w	r2, r3, #31
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <__NVIC_EnableIRQ+0x38>)
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2001      	movs	r0, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff4c 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c2:	f7ff ff63 	bl	800108c <__NVIC_GetPriorityGrouping>
 80011c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f7ff ffb3 	bl	8001138 <NVIC_EncodePriority>
 80011d2:	4602      	mov	r2, r0
 80011d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff82 	bl	80010e4 <__NVIC_SetPriority>
}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff56 	bl	80010a8 <__NVIC_EnableIRQ>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001208:	f3bf 8f5f 	dmb	sy
}
 800120c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_MPU_Disable+0x28>)
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_MPU_Disable+0x28>)
 8001214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001218:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_MPU_Disable+0x2c>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00
 8001230:	e000ed90 	.word	0xe000ed90

08001234 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800123c:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_MPU_Enable+0x38>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_MPU_Enable+0x3c>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <HAL_MPU_Enable+0x3c>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001250:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001252:	f3bf 8f4f 	dsb	sy
}
 8001256:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001258:	f3bf 8f6f 	isb	sy
}
 800125c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed90 	.word	0xe000ed90
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	785a      	ldrb	r2, [r3, #1]
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_MPU_ConfigRegion+0x84>)
 8001282:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d029      	beq.n	80012e0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800128c:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <HAL_MPU_ConfigRegion+0x84>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7b1b      	ldrb	r3, [r3, #12]
 8001298:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7adb      	ldrb	r3, [r3, #11]
 800129e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7a9b      	ldrb	r3, [r3, #10]
 80012a6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7b5b      	ldrb	r3, [r3, #13]
 80012ae:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7b9b      	ldrb	r3, [r3, #14]
 80012b6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7bdb      	ldrb	r3, [r3, #15]
 80012be:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7a5b      	ldrb	r3, [r3, #9]
 80012c6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7a1b      	ldrb	r3, [r3, #8]
 80012ce:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012d0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012da:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012dc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80012de:	e005      	b.n	80012ec <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_MPU_ConfigRegion+0x84>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <HAL_MPU_ConfigRegion+0x84>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed90 	.word	0xe000ed90

080012fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e0cf      	b.n	80014ae <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001314:	2b00      	cmp	r3, #0
 8001316:	d106      	bne.n	8001326 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2223      	movs	r2, #35	; 0x23
 800131c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f003 fd3f 	bl	8004da4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	4b64      	ldr	r3, [pc, #400]	; (80014b8 <HAL_ETH_Init+0x1bc>)
 8001328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800132c:	4a62      	ldr	r2, [pc, #392]	; (80014b8 <HAL_ETH_Init+0x1bc>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <HAL_ETH_Init+0x1bc>)
 8001338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7a1b      	ldrb	r3, [r3, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d103      	bne.n	8001354 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fe65 	bl	800101c <HAL_SYSCFG_ETHInterfaceSelect>
 8001352:	e003      	b.n	800135c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001354:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001358:	f7ff fe60 	bl	800101c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800135c:	4b57      	ldr	r3, [pc, #348]	; (80014bc <HAL_ETH_Init+0x1c0>)
 800135e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001376:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001378:	f7ff fe44 	bl	8001004 <HAL_GetTick>
 800137c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800137e:	e011      	b.n	80013a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001380:	f7ff fe40 	bl	8001004 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800138e:	d909      	bls.n	80013a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2204      	movs	r2, #4
 8001394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	22e0      	movs	r2, #224	; 0xe0
 800139c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e084      	b.n	80014ae <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1e4      	bne.n	8001380 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 ff00 	bl	80021bc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013bc:	f002 fdec 	bl	8003f98 <HAL_RCC_GetHCLKFreq>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a3f      	ldr	r2, [pc, #252]	; (80014c0 <HAL_ETH_Init+0x1c4>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	0c9a      	lsrs	r2, r3, #18
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3a01      	subs	r2, #1
 80013d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f001 f8f9 	bl	80025cc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80013e6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013f6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d009      	beq.n	800141a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	22e0      	movs	r2, #224	; 0xe0
 8001412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e049      	b.n	80014ae <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001422:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <HAL_ETH_Init+0x1c8>)
 8001428:	4013      	ands	r3, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6952      	ldr	r2, [r2, #20]
 800142e:	0051      	lsls	r1, r2, #1
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	430b      	orrs	r3, r1
 8001436:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800143a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f001 f961 	bl	8002706 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f001 f9a7 	bl	8002798 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	3305      	adds	r3, #5
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	021a      	lsls	r2, r3, #8
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	3304      	adds	r3, #4
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	3303      	adds	r3, #3
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	061a      	lsls	r2, r3, #24
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	3302      	adds	r3, #2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	041b      	lsls	r3, r3, #16
 800147c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	3301      	adds	r3, #1
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001488:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001496:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001498:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2210      	movs	r2, #16
 80014a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58000400 	.word	0x58000400
 80014c0:	431bde83 	.word	0x431bde83
 80014c4:	ffff8001 	.word	0xffff8001

080014c8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d179      	bne.n	80015ce <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2223      	movs	r2, #35	; 0x23
 80014de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <HAL_ETH_Start_IT+0x110>)
 80014f6:	430b      	orrs	r3, r1
 80014f8:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <HAL_ETH_Start_IT+0x114>)
 800150a:	430b      	orrs	r3, r1
 800150c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2204      	movs	r2, #4
 8001514:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f9c3 	bl	80018a2 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0202 	orr.w	r2, r2, #2
 800152a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 0201 	orr.w	r2, r2, #1
 800154c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001558:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001568:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001574:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001584:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001590:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800159c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015a0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ac:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 80015b8:	430b      	orrs	r3, r1
 80015ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015be:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2223      	movs	r2, #35	; 0x23
 80015c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
  }
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	0c020060 	.word	0x0c020060
 80015dc:	0c20c000 	.word	0x0c20c000

080015e0 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015ee:	2b23      	cmp	r3, #35	; 0x23
 80015f0:	d13f      	bne.n	8001672 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2223      	movs	r2, #35	; 0x23
 80015f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001602:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001612:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800161e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800162e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0202 	bic.w	r2, r2, #2
 8001664:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2210      	movs	r2, #16
 800166a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
  }
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001696:	f043 0201 	orr.w	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e03a      	b.n	800171a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016aa:	2b23      	cmp	r3, #35	; 0x23
 80016ac:	d134      	bne.n	8001718 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80016b6:	2201      	movs	r2, #1
 80016b8:	6839      	ldr	r1, [r7, #0]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f001 f8ca 	bl	8002854 <ETH_Prepare_Tx_Descriptors>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016cc:	f043 0202 	orr.w	r2, r3, #2
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e01f      	b.n	800171a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80016da:	f3bf 8f4f 	dsb	sy
}
 80016de:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d904      	bls.n	80016fc <HAL_ETH_Transmit_IT+0x7c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	1f1a      	subs	r2, r3, #4
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3106      	adds	r1, #6
 8001708:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800170c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001710:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	e000      	b.n	800171a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
  }
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b088      	sub	sp, #32
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0a5      	b.n	800189a <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001754:	2b23      	cmp	r3, #35	; 0x23
 8001756:	d001      	beq.n	800175c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e09e      	b.n	800189a <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001760:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	3212      	adds	r2, #18
 8001768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001772:	f1c3 0304 	rsb	r3, r3, #4
 8001776:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001778:	e067      	b.n	800184a <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d103      	bne.n	80017aa <HAL_ETH_ReadData+0x88>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d03d      	beq.n	8001826 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00d      	beq.n	80017f0 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001800:	461a      	mov	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	b29b      	uxth	r3, r3
 8001806:	f003 fc39 	bl	800507c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	441a      	add	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3301      	adds	r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d902      	bls.n	8001838 <HAL_ETH_ReadData+0x116>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3b04      	subs	r3, #4
 8001836:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	3212      	adds	r2, #18
 800183e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001842:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db06      	blt.n	8001860 <HAL_ETH_ReadData+0x13e>
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	429a      	cmp	r2, r3
 8001858:	d202      	bcs.n	8001860 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d08c      	beq.n	800177a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	441a      	add	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f814 	bl	80018a2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d108      	bne.n	8001898 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e000      	b.n	800189a <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b088      	sub	sp, #32
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80018ae:	2301      	movs	r3, #1
 80018b0:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018b6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	3212      	adds	r2, #18
 80018be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c2:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018c8:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80018ca:	e03b      	b.n	8001944 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d112      	bne.n	80018fa <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fb9f 	bl	800501c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	74fb      	strb	r3, [r7, #19]
 80018e8:	e007      	b.n	80018fa <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	461a      	mov	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	461a      	mov	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80018fa:	7cfb      	ldrb	r3, [r7, #19]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d021      	beq.n	8001944 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001900:	f3bf 8f5f 	dmb	sy
}
 8001904:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	e003      	b.n	8001920 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800191e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d902      	bls.n	8001932 <ETH_UpdateDescriptor+0x90>
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	3b04      	subs	r3, #4
 8001930:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	3212      	adds	r2, #18
 8001938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193c:	617b      	str	r3, [r7, #20]
      desccount--;
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	3b01      	subs	r3, #1
 8001942:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <ETH_UpdateDescriptor+0xae>
 800194a:	7cfb      	ldrb	r3, [r7, #19]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1bd      	bne.n	80018cc <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	429a      	cmp	r2, r3
 8001958:	d00d      	beq.n	8001976 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001962:	461a      	mov	r2, r3
 8001964:	2300      	movs	r3, #0
 8001966:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001976:	bf00      	nop
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3318      	adds	r3, #24
 800198a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800199c:	e03f      	b.n	8001a1e <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800199e:	2301      	movs	r3, #1
 80019a0:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	3304      	adds	r3, #4
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d106      	bne.n	80019c6 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	3301      	adds	r3, #1
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80019c6:	7bbb      	ldrb	r3, [r7, #14]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d028      	beq.n	8001a1e <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68d9      	ldr	r1, [r3, #12]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db1b      	blt.n	8001a1a <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	3304      	adds	r3, #4
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fbac 	bl	800514c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	3304      	adds	r3, #4
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	3301      	adds	r3, #1
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a18:	e001      	b.n	8001a1e <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_ETH_ReleaseTxPacket+0xac>
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1b9      	bne.n	800199e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a44:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4c:	2b40      	cmp	r3, #64	; 0x40
 8001a4e:	d115      	bne.n	8001a7c <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a58:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a60:	2b40      	cmp	r3, #64	; 0x40
 8001a62:	d10b      	bne.n	8001a7c <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f248 0340 	movw	r3, #32832	; 0x8040
 8001a72:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f002 ff62 	bl	8004940 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a84:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d115      	bne.n	8001abc <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a98:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d10b      	bne.n	8001abc <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aac:	461a      	mov	r2, r3
 8001aae:	f248 0301 	movw	r3, #32769	; 0x8001
 8001ab2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f002 ff52 	bl	8004960 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ad0:	d153      	bne.n	8001b7a <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ada:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ae6:	d148      	bne.n	8001b7a <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	f043 0208 	orr.w	r2, r3, #8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b00:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b0c:	d11e      	bne.n	8001b4c <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b16:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001b1a:	f241 1302 	movw	r3, #4354	; 0x1102
 8001b1e:	4013      	ands	r3, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b3e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	22e0      	movs	r2, #224	; 0xe0
 8001b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001b4a:	e013      	b.n	8001b74 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b54:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001b58:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001b70:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f002 ff03 	bl	8004980 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001b82:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d104      	bne.n	8001b98 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d019      	beq.n	8001bcc <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	f043 0210 	orr.w	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	22e0      	movs	r2, #224	; 0xe0
 8001bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f002 fede 	bl	8004980 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b10      	cmp	r3, #16
 8001bda:	d10f      	bne.n	8001bfc <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001be4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f830 	bl	8001c54 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	d10f      	bne.n	8001c2c <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c14:	f003 020f 	and.w	r2, r3, #15
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f822 	bl	8001c68 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_ETH_IRQHandler+0x21c>)
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_ETH_IRQHandler+0x21c>)
 8001c3a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f81b 	bl	8001c7c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	58000080 	.word	0x58000080

08001c54 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e03e      	b.n	8001d30 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cba:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	055b      	lsls	r3, r3, #21
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	041b      	lsls	r3, r3, #16
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f043 030c 	orr.w	r3, r3, #12
 8001cde:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001cf2:	f7ff f987 	bl	8001004 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001cf8:	e009      	b.n	8001d0e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001cfa:	f7ff f983 	bl	8001004 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d08:	d901      	bls.n	8001d0e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e010      	b.n	8001d30 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1ed      	bne.n	8001cfa <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e03c      	b.n	8001dd4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d62:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	055b      	lsls	r3, r3, #21
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	041b      	lsls	r3, r3, #16
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f023 030c 	bic.w	r3, r3, #12
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_ETH_WritePHYRegister+0xa4>)
 8001d9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001d9e:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <HAL_ETH_WritePHYRegister+0xa4>)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001da6:	f7ff f92d 	bl	8001004 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001dac:	e009      	b.n	8001dc2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001dae:	f7ff f929 	bl	8001004 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dbc:	d901      	bls.n	8001dc2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e008      	b.n	8001dd4 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ed      	bne.n	8001dae <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40028000 	.word	0x40028000

08001de0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e1c3      	b.n	800217c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 020c 	and.w	r2, r3, #12
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf14      	ite	ne
 8001e10:	2301      	movne	r3, #1
 8001e12:	2300      	moveq	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bf0c      	ite	eq
 8001e3a:	2301      	moveq	r3, #1
 8001e3c:	2300      	movne	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	bf14      	ite	ne
 8001e56:	2301      	movne	r3, #1
 8001e58:	2300      	moveq	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bf14      	ite	ne
 8001eda:	2301      	movne	r3, #1
 8001edc:	2300      	moveq	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bf0c      	ite	eq
 8001f0e:	2301      	moveq	r3, #1
 8001f10:	2300      	movne	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bf14      	ite	ne
 8001f42:	2301      	movne	r3, #1
 8001f44:	2300      	moveq	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf0c      	ite	eq
 8001fd4:	2301      	moveq	r3, #1
 8001fd6:	2300      	movne	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf14      	ite	ne
 8001ff0:	2301      	movne	r3, #1
 8001ff2:	2300      	moveq	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	0e5b      	lsrs	r3, r3, #25
 800203e:	f003 021f 	and.w	r2, r3, #31
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf14      	ite	ne
 8002054:	2301      	movne	r3, #1
 8002056:	2300      	moveq	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 020f 	and.w	r2, r3, #15
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf14      	ite	ne
 800207e:	2301      	movne	r3, #1
 8002080:	2300      	moveq	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf0c      	ite	eq
 800209a:	2301      	moveq	r3, #1
 800209c:	2300      	movne	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	b29a      	uxth	r2, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bf14      	ite	ne
 80020f2:	2301      	movne	r3, #1
 80020f4:	2300      	moveq	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002108:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002118:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b00      	cmp	r3, #0
 800214c:	bf14      	ite	ne
 800214e:	2301      	movne	r3, #1
 8002150:	2300      	moveq	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e00b      	b.n	80021b4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d105      	bne.n	80021b2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80021a6:	6839      	ldr	r1, [r7, #0]
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f86d 	bl	8002288 <ETH_SetMACConfig>

    return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
  }
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80021d6:	f001 fedf 	bl	8003f98 <HAL_RCC_GetHCLKFreq>
 80021da:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d908      	bls.n	80021f6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d804      	bhi.n	80021f6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e027      	b.n	8002246 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d908      	bls.n	8002210 <HAL_ETH_SetMDIOClockRange+0x54>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d204      	bcs.n	8002210 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	e01a      	b.n	8002246 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4a13      	ldr	r2, [pc, #76]	; (8002260 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d303      	bcc.n	8002220 <HAL_ETH_SetMDIOClockRange+0x64>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d911      	bls.n	8002244 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d908      	bls.n	800223a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <HAL_ETH_SetMDIOClockRange+0xac>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d804      	bhi.n	800223a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e005      	b.n	8002246 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e000      	b.n	8002246 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002244:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	01312cff 	.word	0x01312cff
 800225c:	02160ebf 	.word	0x02160ebf
 8002260:	03938700 	.word	0x03938700
 8002264:	05f5e0ff 	.word	0x05f5e0ff
 8002268:	08f0d17f 	.word	0x08f0d17f

0800226c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800229a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	791b      	ldrb	r3, [r3, #4]
 80022a0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80022a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	7b1b      	ldrb	r3, [r3, #12]
 80022a8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80022aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	7b5b      	ldrb	r3, [r3, #13]
 80022b0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	7b9b      	ldrb	r3, [r3, #14]
 80022b8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80022ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	7bdb      	ldrb	r3, [r3, #15]
 80022c0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	7c12      	ldrb	r2, [r2, #16]
 80022c8:	2a00      	cmp	r2, #0
 80022ca:	d102      	bne.n	80022d2 <ETH_SetMACConfig+0x4a>
 80022cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80022d0:	e000      	b.n	80022d4 <ETH_SetMACConfig+0x4c>
 80022d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80022d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	7c52      	ldrb	r2, [r2, #17]
 80022da:	2a00      	cmp	r2, #0
 80022dc:	d102      	bne.n	80022e4 <ETH_SetMACConfig+0x5c>
 80022de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022e2:	e000      	b.n	80022e6 <ETH_SetMACConfig+0x5e>
 80022e4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80022e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	7c9b      	ldrb	r3, [r3, #18]
 80022ec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80022ee:	431a      	orrs	r2, r3
               macconf->Speed |
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80022f4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80022fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	7f1b      	ldrb	r3, [r3, #28]
 8002300:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002302:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	7f5b      	ldrb	r3, [r3, #29]
 8002308:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800230a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	7f92      	ldrb	r2, [r2, #30]
 8002310:	2a00      	cmp	r2, #0
 8002312:	d102      	bne.n	800231a <ETH_SetMACConfig+0x92>
 8002314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002318:	e000      	b.n	800231c <ETH_SetMACConfig+0x94>
 800231a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800231c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	7fdb      	ldrb	r3, [r3, #31]
 8002322:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002324:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	f892 2020 	ldrb.w	r2, [r2, #32]
 800232c:	2a00      	cmp	r2, #0
 800232e:	d102      	bne.n	8002336 <ETH_SetMACConfig+0xae>
 8002330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002334:	e000      	b.n	8002338 <ETH_SetMACConfig+0xb0>
 8002336:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002338:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800233e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002346:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002348:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <ETH_SetMACConfig+0x22c>)
 800235a:	4013      	ands	r3, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	68f9      	ldr	r1, [r7, #12]
 8002362:	430b      	orrs	r3, r1
 8002364:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002372:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002374:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800237c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800237e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002386:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002388:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002390:	2a00      	cmp	r2, #0
 8002392:	d102      	bne.n	800239a <ETH_SetMACConfig+0x112>
 8002394:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002398:	e000      	b.n	800239c <ETH_SetMACConfig+0x114>
 800239a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800239c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	4b42      	ldr	r3, [pc, #264]	; (80024b8 <ETH_SetMACConfig+0x230>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	68f9      	ldr	r1, [r7, #12]
 80023b6:	430b      	orrs	r3, r1
 80023b8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023c0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <ETH_SetMACConfig+0x234>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	68f9      	ldr	r1, [r7, #12]
 80023da:	430b      	orrs	r3, r1
 80023dc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023e4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80023f2:	2a00      	cmp	r2, #0
 80023f4:	d101      	bne.n	80023fa <ETH_SetMACConfig+0x172>
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	e000      	b.n	80023fc <ETH_SetMACConfig+0x174>
 80023fa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80023fc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002402:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800240e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002412:	4013      	ands	r3, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	68f9      	ldr	r1, [r7, #12]
 800241a:	430b      	orrs	r3, r1
 800241c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002424:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800242c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	f023 0103 	bic.w	r1, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	430a      	orrs	r2, r1
 8002446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002452:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800246e:	2a00      	cmp	r2, #0
 8002470:	d101      	bne.n	8002476 <ETH_SetMACConfig+0x1ee>
 8002472:	2240      	movs	r2, #64	; 0x40
 8002474:	e000      	b.n	8002478 <ETH_SetMACConfig+0x1f0>
 8002476:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002478:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002480:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002482:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800248a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800248c:	4313      	orrs	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002498:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	00048083 	.word	0x00048083
 80024b8:	c0f88000 	.word	0xc0f88000
 80024bc:	fffffef0 	.word	0xfffffef0

080024c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <ETH_SetDMAConfig+0xf8>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	6811      	ldr	r1, [r2, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024e6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	791b      	ldrb	r3, [r3, #4]
 80024ec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024f2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	7b1b      	ldrb	r3, [r3, #12]
 80024f8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <ETH_SetDMAConfig+0xfc>)
 800250a:	4013      	ands	r3, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	68f9      	ldr	r1, [r7, #12]
 8002512:	430b      	orrs	r3, r1
 8002514:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002518:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	7b5b      	ldrb	r3, [r3, #13]
 800251e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002524:	4313      	orrs	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002530:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <ETH_SetDMAConfig+0x100>)
 8002536:	4013      	ands	r3, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	68f9      	ldr	r1, [r7, #12]
 800253e:	430b      	orrs	r3, r1
 8002540:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002544:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	7d1b      	ldrb	r3, [r3, #20]
 8002550:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002552:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	7f5b      	ldrb	r3, [r3, #29]
 8002558:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002566:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800256a:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <ETH_SetDMAConfig+0x104>)
 800256c:	4013      	ands	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	68f9      	ldr	r1, [r7, #12]
 8002574:	430b      	orrs	r3, r1
 8002576:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800257a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	7f1b      	ldrb	r3, [r3, #28]
 8002582:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002594:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <ETH_SetDMAConfig+0x108>)
 800259a:	4013      	ands	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	430b      	orrs	r3, r1
 80025a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	ffff87fd 	.word	0xffff87fd
 80025bc:	ffff2ffe 	.word	0xffff2ffe
 80025c0:	fffec000 	.word	0xfffec000
 80025c4:	ffc0efef 	.word	0xffc0efef
 80025c8:	7fc0ffff 	.word	0x7fc0ffff

080025cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b0a4      	sub	sp, #144	; 0x90
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025da:	2300      	movs	r3, #0
 80025dc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002602:	2301      	movs	r3, #1
 8002604:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800260c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002614:	2300      	movs	r3, #0
 8002616:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002624:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002628:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800262a:	2300      	movs	r3, #0
 800262c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002630:	2300      	movs	r3, #0
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002646:	2300      	movs	r3, #0
 8002648:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800264a:	2300      	movs	r3, #0
 800264c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800264e:	2300      	movs	r3, #0
 8002650:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002664:	2320      	movs	r3, #32
 8002666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002676:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800267c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002680:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002688:	2302      	movs	r3, #2
 800268a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80026a6:	2300      	movs	r3, #0
 80026a8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff fde6 	bl	8002288 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026bc:	2301      	movs	r3, #1
 80026be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026c0:	2301      	movs	r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80026ec:	f44f 7306 	mov.w	r3, #536	; 0x218
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026f2:	f107 0308 	add.w	r3, r7, #8
 80026f6:	4619      	mov	r1, r3
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff fee1 	bl	80024c0 <ETH_SetDMAConfig>
}
 80026fe:	bf00      	nop
 8002700:	3790      	adds	r7, #144	; 0x90
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	e01d      	b.n	8002750 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68d9      	ldr	r1, [r3, #12]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2200      	movs	r2, #0
 8002730:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	3206      	adds	r2, #6
 8002746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3301      	adds	r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d9de      	bls.n	8002714 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002764:	461a      	mov	r2, r3
 8002766:	2303      	movs	r3, #3
 8002768:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002778:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002788:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e023      	b.n	80027ee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6919      	ldr	r1, [r3, #16]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2200      	movs	r2, #0
 80027c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2200      	movs	r2, #0
 80027da:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	3212      	adds	r2, #18
 80027e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3301      	adds	r3, #1
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d9d8      	bls.n	80027a6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281a:	461a      	mov	r2, r3
 800281c:	2303      	movs	r3, #3
 800281e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800282e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002842:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002854:	b480      	push	{r7}
 8002856:	b08d      	sub	sp, #52	; 0x34
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3318      	adds	r3, #24
 8002864:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800287a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800287e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002896:	d007      	beq.n	80028a8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	3304      	adds	r3, #4
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80028a8:	2302      	movs	r3, #2
 80028aa:	e259      	b.n	8002d60 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d044      	beq.n	8002942 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4b75      	ldr	r3, [pc, #468]	; (8002a94 <ETH_Prepare_Tx_Descriptors+0x240>)
 80028be:	4013      	ands	r3, r2
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028c4:	431a      	orrs	r2, r3
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d027      	beq.n	8002942 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	041b      	lsls	r3, r3, #16
 80028fe:	431a      	orrs	r2, r3
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	431a      	orrs	r2, r3
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002930:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002940:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00e      	beq.n	800296c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002954:	4013      	ands	r3, r2
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	6992      	ldr	r2, [r2, #24]
 800295a:	431a      	orrs	r2, r3
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d036      	beq.n	80029f2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002990:	f3bf 8f5f 	dmb	sy
}
 8002994:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	3301      	adds	r3, #1
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d902      	bls.n	80029b4 <ETH_Prepare_Tx_Descriptors+0x160>
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	3b04      	subs	r3, #4
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029bc:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	3301      	adds	r3, #1
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029d0:	d10f      	bne.n	80029f2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80029dc:	f3bf 8f5f 	dmb	sy
}
 80029e0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80029ee:	2302      	movs	r3, #2
 80029f0:	e1b6      	b.n	8002d60 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	3301      	adds	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	6852      	ldr	r2, [r2, #4]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	6852      	ldr	r2, [r2, #4]
 8002a38:	0412      	lsls	r2, r2, #16
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	e008      	b.n	8002a54 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	2200      	movs	r2, #0
 8002a46:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	6a3a      	ldr	r2, [r7, #32]
 8002a52:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d021      	beq.n	8002aa4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	04db      	lsls	r3, r3, #19
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	69d2      	ldr	r2, [r2, #28]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	e02e      	b.n	8002af2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002a94:	ffff0000 	.word	0xffff0000
 8002a98:	ffffc000 	.word	0xffffc000
 8002a9c:	c000ffff 	.word	0xc000ffff
 8002aa0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	4b7b      	ldr	r3, [pc, #492]	; (8002c98 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	6852      	ldr	r2, [r2, #4]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b28:	f3bf 8f5f 	dmb	sy
}
 8002b2c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80da 	beq.w	8002cfc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002b5a:	e0cf      	b.n	8002cfc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d902      	bls.n	8002b7a <ETH_Prepare_Tx_Descriptors+0x326>
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	3b04      	subs	r3, #4
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b82:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b9c:	d007      	beq.n	8002bae <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d029      	beq.n	8002c02 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bba:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc0:	e019      	b.n	8002bf6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002bc2:	f3bf 8f5f 	dmb	sy
}
 8002bc6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d902      	bls.n	8002be6 <ETH_Prepare_Tx_Descriptors+0x392>
 8002be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be2:	3b04      	subs	r3, #4
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bee:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3e1      	bcc.n	8002bc2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e0ae      	b.n	8002d60 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	3301      	adds	r3, #1
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <ETH_Prepare_Tx_Descriptors+0x448>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	6852      	ldr	r2, [r2, #4]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d012      	beq.n	8002c58 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	6852      	ldr	r2, [r2, #4]
 8002c4e:	0412      	lsls	r2, r2, #16
 8002c50:	431a      	orrs	r2, r3
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	e008      	b.n	8002c6a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	6a3a      	ldr	r2, [r7, #32]
 8002c68:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d018      	beq.n	8002ca8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	69d2      	ldr	r2, [r2, #28]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	60da      	str	r2, [r3, #12]
 8002c94:	e020      	b.n	8002cd8 <ETH_Prepare_Tx_Descriptors+0x484>
 8002c96:	bf00      	nop
 8002c98:	ffff8000 	.word	0xffff8000
 8002c9c:	ffffc000 	.word	0xffffc000
 8002ca0:	c000ffff 	.word	0xc000ffff
 8002ca4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <ETH_Prepare_Tx_Descriptors+0x518>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	6852      	ldr	r2, [r2, #4]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cde:	f3bf 8f5f 	dmb	sy
}
 8002ce2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f47f af2b 	bne.w	8002b5c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d006      	beq.n	8002d1a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	e005      	b.n	8002d26 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d36:	6979      	ldr	r1, [r7, #20]
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d46:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d48:	b672      	cpsid	i
}
 8002d4a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002d5a:	b662      	cpsie	i
}
 8002d5c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3734      	adds	r7, #52	; 0x34
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	ffff8000 	.word	0xffff8000

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d7e:	4b86      	ldr	r3, [pc, #536]	; (8002f98 <HAL_GPIO_Init+0x228>)
 8002d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d82:	e18c      	b.n	800309e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 817e 	beq.w	8003098 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d005      	beq.n	8002db4 <HAL_GPIO_Init+0x44>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d130      	bne.n	8002e16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dea:	2201      	movs	r2, #1
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	f003 0201 	and.w	r2, r3, #1
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d017      	beq.n	8002e52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d123      	bne.n	8002ea6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	08da      	lsrs	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3208      	adds	r2, #8
 8002e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	220f      	movs	r2, #15
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	08da      	lsrs	r2, r3, #3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3208      	adds	r2, #8
 8002ea0:	69b9      	ldr	r1, [r7, #24]
 8002ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 0203 	and.w	r2, r3, #3
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80d8 	beq.w	8003098 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee8:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <HAL_GPIO_Init+0x22c>)
 8002eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eee:	4a2b      	ldr	r2, [pc, #172]	; (8002f9c <HAL_GPIO_Init+0x22c>)
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ef8:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_GPIO_Init+0x22c>)
 8002efa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f06:	4a26      	ldr	r2, [pc, #152]	; (8002fa0 <HAL_GPIO_Init+0x230>)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_GPIO_Init+0x234>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d04a      	beq.n	8002fc8 <HAL_GPIO_Init+0x258>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <HAL_GPIO_Init+0x238>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d02b      	beq.n	8002f92 <HAL_GPIO_Init+0x222>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1b      	ldr	r2, [pc, #108]	; (8002fac <HAL_GPIO_Init+0x23c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d025      	beq.n	8002f8e <HAL_GPIO_Init+0x21e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_GPIO_Init+0x240>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01f      	beq.n	8002f8a <HAL_GPIO_Init+0x21a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_GPIO_Init+0x244>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d019      	beq.n	8002f86 <HAL_GPIO_Init+0x216>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_GPIO_Init+0x248>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_GPIO_Init+0x212>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <HAL_GPIO_Init+0x24c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00d      	beq.n	8002f7e <HAL_GPIO_Init+0x20e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <HAL_GPIO_Init+0x250>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <HAL_GPIO_Init+0x20a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <HAL_GPIO_Init+0x254>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_GPIO_Init+0x206>
 8002f72:	2309      	movs	r3, #9
 8002f74:	e029      	b.n	8002fca <HAL_GPIO_Init+0x25a>
 8002f76:	230a      	movs	r3, #10
 8002f78:	e027      	b.n	8002fca <HAL_GPIO_Init+0x25a>
 8002f7a:	2307      	movs	r3, #7
 8002f7c:	e025      	b.n	8002fca <HAL_GPIO_Init+0x25a>
 8002f7e:	2306      	movs	r3, #6
 8002f80:	e023      	b.n	8002fca <HAL_GPIO_Init+0x25a>
 8002f82:	2305      	movs	r3, #5
 8002f84:	e021      	b.n	8002fca <HAL_GPIO_Init+0x25a>
 8002f86:	2304      	movs	r3, #4
 8002f88:	e01f      	b.n	8002fca <HAL_GPIO_Init+0x25a>
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e01d      	b.n	8002fca <HAL_GPIO_Init+0x25a>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e01b      	b.n	8002fca <HAL_GPIO_Init+0x25a>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e019      	b.n	8002fca <HAL_GPIO_Init+0x25a>
 8002f96:	bf00      	nop
 8002f98:	58000080 	.word	0x58000080
 8002f9c:	58024400 	.word	0x58024400
 8002fa0:	58000400 	.word	0x58000400
 8002fa4:	58020000 	.word	0x58020000
 8002fa8:	58020400 	.word	0x58020400
 8002fac:	58020800 	.word	0x58020800
 8002fb0:	58020c00 	.word	0x58020c00
 8002fb4:	58021000 	.word	0x58021000
 8002fb8:	58021400 	.word	0x58021400
 8002fbc:	58021800 	.word	0x58021800
 8002fc0:	58021c00 	.word	0x58021c00
 8002fc4:	58022400 	.word	0x58022400
 8002fc8:	2300      	movs	r3, #0
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	f002 0203 	and.w	r2, r2, #3
 8002fd0:	0092      	lsls	r2, r2, #2
 8002fd2:	4093      	lsls	r3, r2
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fda:	4938      	ldr	r1, [pc, #224]	; (80030bc <HAL_GPIO_Init+0x34c>)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800300e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800303c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	3301      	adds	r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f47f ae6b 	bne.w	8002d84 <HAL_GPIO_Init+0x14>
  }
}
 80030ae:	bf00      	nop
 80030b0:	bf00      	nop
 80030b2:	3724      	adds	r7, #36	; 0x24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	58000400 	.word	0x58000400

080030c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	807b      	strh	r3, [r7, #2]
 80030cc:	4613      	mov	r3, r2
 80030ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030d0:	787b      	ldrb	r3, [r7, #1]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d6:	887a      	ldrh	r2, [r7, #2]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030dc:	e003      	b.n	80030e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030de:	887b      	ldrh	r3, [r7, #2]
 80030e0:	041a      	lsls	r2, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	619a      	str	r2, [r3, #24]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003104:	887a      	ldrh	r2, [r7, #2]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4013      	ands	r3, r2
 800310a:	041a      	lsls	r2, r3, #16
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	43d9      	mvns	r1, r3
 8003110:	887b      	ldrh	r3, [r7, #2]
 8003112:	400b      	ands	r3, r1
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	619a      	str	r2, [r3, #24]
}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	2b06      	cmp	r3, #6
 800313a:	d00a      	beq.n	8003152 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800313c:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d001      	beq.n	800314e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e03f      	b.n	80031ce <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e03d      	b.n	80031ce <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003152:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800315a:	491f      	ldr	r1, [pc, #124]	; (80031d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4313      	orrs	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003162:	f7fd ff4f 	bl	8001004 <HAL_GetTick>
 8003166:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003168:	e009      	b.n	800317e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800316a:	f7fd ff4b 	bl	8001004 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003178:	d901      	bls.n	800317e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e027      	b.n	80031ce <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318a:	d1ee      	bne.n	800316a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b1e      	cmp	r3, #30
 8003190:	d008      	beq.n	80031a4 <HAL_PWREx_ConfigSupply+0x7c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b2e      	cmp	r3, #46	; 0x2e
 8003196:	d005      	beq.n	80031a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b1d      	cmp	r3, #29
 800319c:	d002      	beq.n	80031a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b2d      	cmp	r3, #45	; 0x2d
 80031a2:	d113      	bne.n	80031cc <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80031a4:	f7fd ff2e 	bl	8001004 <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031aa:	e009      	b.n	80031c0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031ac:	f7fd ff2a 	bl	8001004 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ba:	d901      	bls.n	80031c0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e006      	b.n	80031ce <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_PWREx_ConfigSupply+0xb0>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0311 	and.w	r3, r3, #17
 80031c8:	2b11      	cmp	r3, #17
 80031ca:	d1ef      	bne.n	80031ac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	58024800 	.word	0x58024800

080031dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08c      	sub	sp, #48	; 0x30
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e39d      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8087 	beq.w	800330a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031fc:	4b88      	ldr	r3, [pc, #544]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003206:	4b86      	ldr	r3, [pc, #536]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	2b10      	cmp	r3, #16
 8003210:	d007      	beq.n	8003222 <HAL_RCC_OscConfig+0x46>
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	2b18      	cmp	r3, #24
 8003216:	d110      	bne.n	800323a <HAL_RCC_OscConfig+0x5e>
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d10b      	bne.n	800323a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003222:	4b7f      	ldr	r3, [pc, #508]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d06c      	beq.n	8003308 <HAL_RCC_OscConfig+0x12c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d168      	bne.n	8003308 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e377      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x76>
 8003244:	4b76      	ldr	r3, [pc, #472]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a75      	ldr	r2, [pc, #468]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e02e      	b.n	80032b0 <HAL_RCC_OscConfig+0xd4>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x98>
 800325a:	4b71      	ldr	r3, [pc, #452]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a70      	ldr	r2, [pc, #448]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b6e      	ldr	r3, [pc, #440]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6d      	ldr	r2, [pc, #436]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 800326c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e01d      	b.n	80032b0 <HAL_RCC_OscConfig+0xd4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0xbc>
 800327e:	4b68      	ldr	r3, [pc, #416]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a67      	ldr	r2, [pc, #412]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b65      	ldr	r3, [pc, #404]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a64      	ldr	r2, [pc, #400]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0xd4>
 8003298:	4b61      	ldr	r3, [pc, #388]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a60      	ldr	r2, [pc, #384]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b5e      	ldr	r3, [pc, #376]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a5d      	ldr	r2, [pc, #372]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 80032aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fd fea4 	bl	8001004 <HAL_GetTick>
 80032bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fd fea0 	bl	8001004 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e32b      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032d2:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe4>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fd fe90 	bl	8001004 <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fd fe8c 	bl	8001004 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e317      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032fa:	4b49      	ldr	r3, [pc, #292]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x10c>
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 808c 	beq.w	8003430 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003318:	4b41      	ldr	r3, [pc, #260]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003320:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003322:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_RCC_OscConfig+0x162>
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	2b18      	cmp	r3, #24
 8003332:	d137      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1c8>
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d132      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800333e:	4b38      	ldr	r3, [pc, #224]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x17a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e2e9      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003356:	4b32      	ldr	r3, [pc, #200]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 0219 	bic.w	r2, r3, #25
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	492f      	ldr	r1, [pc, #188]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003364:	4313      	orrs	r3, r2
 8003366:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003368:	f7fd fe4c 	bl	8001004 <HAL_GetTick>
 800336c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003370:	f7fd fe48 	bl	8001004 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e2d3      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003382:	4b27      	ldr	r3, [pc, #156]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338e:	4b24      	ldr	r3, [pc, #144]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	061b      	lsls	r3, r3, #24
 800339c:	4920      	ldr	r1, [pc, #128]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a2:	e045      	b.n	8003430 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d026      	beq.n	80033fa <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033ac:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 0219 	bic.w	r2, r3, #25
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4919      	ldr	r1, [pc, #100]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fd fe21 	bl	8001004 <HAL_GetTick>
 80033c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c6:	f7fd fe1d 	bl	8001004 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e2a8      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	061b      	lsls	r3, r3, #24
 80033f2:	490b      	ldr	r1, [pc, #44]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
 80033f8:	e01a      	b.n	8003430 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a08      	ldr	r2, [pc, #32]	; (8003420 <HAL_RCC_OscConfig+0x244>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fd fdfd 	bl	8001004 <HAL_GetTick>
 800340a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340e:	f7fd fdf9 	bl	8001004 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d903      	bls.n	8003424 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e284      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
 8003420:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003424:	4b96      	ldr	r3, [pc, #600]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ee      	bne.n	800340e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	d06a      	beq.n	8003512 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800343c:	4b90      	ldr	r3, [pc, #576]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003444:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003446:	4b8e      	ldr	r3, [pc, #568]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b08      	cmp	r3, #8
 8003450:	d007      	beq.n	8003462 <HAL_RCC_OscConfig+0x286>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b18      	cmp	r3, #24
 8003456:	d11b      	bne.n	8003490 <HAL_RCC_OscConfig+0x2b4>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d116      	bne.n	8003490 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003462:	4b87      	ldr	r3, [pc, #540]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_RCC_OscConfig+0x29e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	2b80      	cmp	r3, #128	; 0x80
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e257      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800347a:	4b81      	ldr	r3, [pc, #516]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	061b      	lsls	r3, r3, #24
 8003488:	497d      	ldr	r1, [pc, #500]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800348e:	e040      	b.n	8003512 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d023      	beq.n	80034e0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003498:	4b79      	ldr	r3, [pc, #484]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a78      	ldr	r2, [pc, #480]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 800349e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fdae 	bl	8001004 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034ac:	f7fd fdaa 	bl	8001004 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e235      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034be:	4b70      	ldr	r3, [pc, #448]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ca:	4b6d      	ldr	r3, [pc, #436]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	061b      	lsls	r3, r3, #24
 80034d8:	4969      	ldr	r1, [pc, #420]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	60cb      	str	r3, [r1, #12]
 80034de:	e018      	b.n	8003512 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034e0:	4b67      	ldr	r3, [pc, #412]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a66      	ldr	r2, [pc, #408]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 80034e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fd fd8a 	bl	8001004 <HAL_GetTick>
 80034f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034f4:	f7fd fd86 	bl	8001004 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e211      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003506:	4b5e      	ldr	r3, [pc, #376]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d036      	beq.n	800358c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d019      	beq.n	800355a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003526:	4b56      	ldr	r3, [pc, #344]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 8003528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352a:	4a55      	ldr	r2, [pc, #340]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fd fd67 	bl	8001004 <HAL_GetTick>
 8003536:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353a:	f7fd fd63 	bl	8001004 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1ee      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800354c:	4b4c      	ldr	r3, [pc, #304]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 800354e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x35e>
 8003558:	e018      	b.n	800358c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800355a:	4b49      	ldr	r3, [pc, #292]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	4a48      	ldr	r2, [pc, #288]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fd fd4d 	bl	8001004 <HAL_GetTick>
 800356a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800356e:	f7fd fd49 	bl	8001004 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e1d4      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003580:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 8003582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f0      	bne.n	800356e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d036      	beq.n	8003606 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d019      	beq.n	80035d4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035a0:	4b37      	ldr	r3, [pc, #220]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a36      	ldr	r2, [pc, #216]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 80035a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035ac:	f7fd fd2a 	bl	8001004 <HAL_GetTick>
 80035b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035b4:	f7fd fd26 	bl	8001004 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e1b1      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035c6:	4b2e      	ldr	r3, [pc, #184]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x3d8>
 80035d2:	e018      	b.n	8003606 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035d4:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a29      	ldr	r2, [pc, #164]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 80035da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035e0:	f7fd fd10 	bl	8001004 <HAL_GetTick>
 80035e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035e8:	f7fd fd0c 	bl	8001004 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e197      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035fa:	4b21      	ldr	r3, [pc, #132]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8086 	beq.w	8003720 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003614:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x4a8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1a      	ldr	r2, [pc, #104]	; (8003684 <HAL_RCC_OscConfig+0x4a8>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003620:	f7fd fcf0 	bl	8001004 <HAL_GetTick>
 8003624:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003628:	f7fd fcec 	bl	8001004 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e177      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_RCC_OscConfig+0x4a8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d106      	bne.n	800365c <HAL_RCC_OscConfig+0x480>
 800364e:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	4a0b      	ldr	r2, [pc, #44]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6713      	str	r3, [r2, #112]	; 0x70
 800365a:	e032      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e6>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d111      	bne.n	8003688 <HAL_RCC_OscConfig+0x4ac>
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a05      	ldr	r2, [pc, #20]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	6713      	str	r3, [r2, #112]	; 0x70
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	4a02      	ldr	r2, [pc, #8]	; (8003680 <HAL_RCC_OscConfig+0x4a4>)
 8003676:	f023 0304 	bic.w	r3, r3, #4
 800367a:	6713      	str	r3, [r2, #112]	; 0x70
 800367c:	e021      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e6>
 800367e:	bf00      	nop
 8003680:	58024400 	.word	0x58024400
 8003684:	58024800 	.word	0x58024800
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b05      	cmp	r3, #5
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_OscConfig+0x4ce>
 8003690:	4b83      	ldr	r3, [pc, #524]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a82      	ldr	r2, [pc, #520]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
 800369c:	4b80      	ldr	r3, [pc, #512]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	4a7f      	ldr	r2, [pc, #508]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6713      	str	r3, [r2, #112]	; 0x70
 80036a8:	e00b      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e6>
 80036aa:	4b7d      	ldr	r3, [pc, #500]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a7c      	ldr	r2, [pc, #496]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
 80036b6:	4b7a      	ldr	r3, [pc, #488]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	4a79      	ldr	r2, [pc, #484]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d015      	beq.n	80036f6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ca:	f7fd fc9b 	bl	8001004 <HAL_GetTick>
 80036ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fd fc97 	bl	8001004 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e120      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036e8:	4b6d      	ldr	r3, [pc, #436]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ee      	beq.n	80036d2 <HAL_RCC_OscConfig+0x4f6>
 80036f4:	e014      	b.n	8003720 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f6:	f7fd fc85 	bl	8001004 <HAL_GetTick>
 80036fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fd fc81 	bl	8001004 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	; 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e10a      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003714:	4b62      	ldr	r3, [pc, #392]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1ee      	bne.n	80036fe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80ff 	beq.w	8003928 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800372a:	4b5d      	ldr	r3, [pc, #372]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003732:	2b18      	cmp	r3, #24
 8003734:	f000 80ba 	beq.w	80038ac <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	2b02      	cmp	r3, #2
 800373e:	f040 8095 	bne.w	800386c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b57      	ldr	r3, [pc, #348]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a56      	ldr	r2, [pc, #344]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800374c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fd fc59 	bl	8001004 <HAL_GetTick>
 8003752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003756:	f7fd fc55 	bl	8001004 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0e0      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003768:	4b4d      	ldr	r3, [pc, #308]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003774:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003778:	4b4a      	ldr	r3, [pc, #296]	; (80038a4 <HAL_RCC_OscConfig+0x6c8>)
 800377a:	4013      	ands	r3, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003784:	0112      	lsls	r2, r2, #4
 8003786:	430a      	orrs	r2, r1
 8003788:	4945      	ldr	r1, [pc, #276]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	628b      	str	r3, [r1, #40]	; 0x28
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	3b01      	subs	r3, #1
 8003794:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379c:	3b01      	subs	r3, #1
 800379e:	025b      	lsls	r3, r3, #9
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	3b01      	subs	r3, #1
 80037aa:	041b      	lsls	r3, r3, #16
 80037ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	3b01      	subs	r3, #1
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037be:	4938      	ldr	r1, [pc, #224]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80037c4:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	4a35      	ldr	r2, [pc, #212]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037d0:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80037d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d4:	4b34      	ldr	r3, [pc, #208]	; (80038a8 <HAL_RCC_OscConfig+0x6cc>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037dc:	00d2      	lsls	r2, r2, #3
 80037de:	4930      	ldr	r1, [pc, #192]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037e4:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	f023 020c 	bic.w	r2, r3, #12
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	492b      	ldr	r1, [pc, #172]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037f6:	4b2a      	ldr	r3, [pc, #168]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	f023 0202 	bic.w	r2, r3, #2
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	4927      	ldr	r1, [pc, #156]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003804:	4313      	orrs	r3, r2
 8003806:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003808:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	4a24      	ldr	r2, [pc, #144]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 800380e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003820:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800382a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800382c:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fd fbde 	bl	8001004 <HAL_GetTick>
 8003848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384c:	f7fd fbda 	bl	8001004 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e065      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x670>
 800386a:	e05d      	b.n	8003928 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fd fbc4 	bl	8001004 <HAL_GetTick>
 800387c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003880:	f7fd fbc0 	bl	8001004 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e04b      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003892:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <HAL_RCC_OscConfig+0x6c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x6a4>
 800389e:	e043      	b.n	8003928 <HAL_RCC_OscConfig+0x74c>
 80038a0:	58024400 	.word	0x58024400
 80038a4:	fffffc0c 	.word	0xfffffc0c
 80038a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038ac:	4b21      	ldr	r3, [pc, #132]	; (8003934 <HAL_RCC_OscConfig+0x758>)
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCC_OscConfig+0x758>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d031      	beq.n	8003924 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f003 0203 	and.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d12a      	bne.n	8003924 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d122      	bne.n	8003924 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d11a      	bne.n	8003924 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	0a5b      	lsrs	r3, r3, #9
 80038f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d111      	bne.n	8003924 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d108      	bne.n	8003924 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	0e1b      	lsrs	r3, r3, #24
 8003916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3730      	adds	r7, #48	; 0x30
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	58024400 	.word	0x58024400

08003938 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e19c      	b.n	8003c86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800394c:	4b8a      	ldr	r3, [pc, #552]	; (8003b78 <HAL_RCC_ClockConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d910      	bls.n	800397c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395a:	4b87      	ldr	r3, [pc, #540]	; (8003b78 <HAL_RCC_ClockConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 020f 	bic.w	r2, r3, #15
 8003962:	4985      	ldr	r1, [pc, #532]	; (8003b78 <HAL_RCC_ClockConfig+0x240>)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b83      	ldr	r3, [pc, #524]	; (8003b78 <HAL_RCC_ClockConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e184      	b.n	8003c86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d010      	beq.n	80039aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	4b7b      	ldr	r3, [pc, #492]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003994:	429a      	cmp	r2, r3
 8003996:	d908      	bls.n	80039aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003998:	4b78      	ldr	r3, [pc, #480]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	4975      	ldr	r1, [pc, #468]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d010      	beq.n	80039d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	4b70      	ldr	r3, [pc, #448]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d908      	bls.n	80039d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039c6:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	496a      	ldr	r1, [pc, #424]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d010      	beq.n	8003a06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	4b64      	ldr	r3, [pc, #400]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d908      	bls.n	8003a06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039f4:	4b61      	ldr	r3, [pc, #388]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	495e      	ldr	r1, [pc, #376]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d010      	beq.n	8003a34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69da      	ldr	r2, [r3, #28]
 8003a16:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d908      	bls.n	8003a34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a22:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	4953      	ldr	r1, [pc, #332]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	4b4d      	ldr	r3, [pc, #308]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d908      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a50:	4b4a      	ldr	r3, [pc, #296]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f023 020f 	bic.w	r2, r3, #15
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4947      	ldr	r1, [pc, #284]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d055      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a6e:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	4940      	ldr	r1, [pc, #256]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a88:	4b3c      	ldr	r3, [pc, #240]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d121      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0f6      	b.n	8003c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d107      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aa0:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d115      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0ea      	b.n	8003c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d107      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ab8:	4b30      	ldr	r3, [pc, #192]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0de      	b.n	8003c86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ac8:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0d6      	b.n	8003c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ad8:	4b28      	ldr	r3, [pc, #160]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f023 0207 	bic.w	r2, r3, #7
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4925      	ldr	r1, [pc, #148]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aea:	f7fd fa8b 	bl	8001004 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af0:	e00a      	b.n	8003b08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af2:	f7fd fa87 	bl	8001004 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e0be      	b.n	8003c86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b08:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d1eb      	bne.n	8003af2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d010      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d208      	bcs.n	8003b48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f023 020f 	bic.w	r2, r3, #15
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	490e      	ldr	r1, [pc, #56]	; (8003b7c <HAL_RCC_ClockConfig+0x244>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_ClockConfig+0x240>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d214      	bcs.n	8003b80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <HAL_RCC_ClockConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 020f 	bic.w	r2, r3, #15
 8003b5e:	4906      	ldr	r1, [pc, #24]	; (8003b78 <HAL_RCC_ClockConfig+0x240>)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <HAL_RCC_ClockConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d005      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e086      	b.n	8003c86 <HAL_RCC_ClockConfig+0x34e>
 8003b78:	52002000 	.word	0x52002000
 8003b7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d010      	beq.n	8003bae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d208      	bcs.n	8003bae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b9c:	4b3c      	ldr	r3, [pc, #240]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	4939      	ldr	r1, [pc, #228]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d010      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d208      	bcs.n	8003bdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	492e      	ldr	r1, [pc, #184]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d010      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d208      	bcs.n	8003c0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	4922      	ldr	r1, [pc, #136]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d010      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d208      	bcs.n	8003c38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	4917      	ldr	r1, [pc, #92]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c38:	f000 f834 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	4912      	ldr	r1, [pc, #72]	; (8003c94 <HAL_RCC_ClockConfig+0x35c>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
 8003c54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c56:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <HAL_RCC_ClockConfig+0x358>)
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	4a0d      	ldr	r2, [pc, #52]	; (8003c94 <HAL_RCC_ClockConfig+0x35c>)
 8003c60:	5cd3      	ldrb	r3, [r2, r3]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6c:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <HAL_RCC_ClockConfig+0x360>)
 8003c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c70:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <HAL_RCC_ClockConfig+0x364>)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <HAL_RCC_ClockConfig+0x368>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fc ff60 	bl	8000b40 <HAL_InitTick>
 8003c80:	4603      	mov	r3, r0
 8003c82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	58024400 	.word	0x58024400
 8003c94:	08016eb8 	.word	0x08016eb8
 8003c98:	24000004 	.word	0x24000004
 8003c9c:	24000000 	.word	0x24000000
 8003ca0:	24000008 	.word	0x24000008

08003ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	; 0x24
 8003ca8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003caa:	4bb3      	ldr	r3, [pc, #716]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cb2:	2b18      	cmp	r3, #24
 8003cb4:	f200 8155 	bhi.w	8003f62 <HAL_RCC_GetSysClockFreq+0x2be>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003d25 	.word	0x08003d25
 8003cc4:	08003f63 	.word	0x08003f63
 8003cc8:	08003f63 	.word	0x08003f63
 8003ccc:	08003f63 	.word	0x08003f63
 8003cd0:	08003f63 	.word	0x08003f63
 8003cd4:	08003f63 	.word	0x08003f63
 8003cd8:	08003f63 	.word	0x08003f63
 8003cdc:	08003f63 	.word	0x08003f63
 8003ce0:	08003d4b 	.word	0x08003d4b
 8003ce4:	08003f63 	.word	0x08003f63
 8003ce8:	08003f63 	.word	0x08003f63
 8003cec:	08003f63 	.word	0x08003f63
 8003cf0:	08003f63 	.word	0x08003f63
 8003cf4:	08003f63 	.word	0x08003f63
 8003cf8:	08003f63 	.word	0x08003f63
 8003cfc:	08003f63 	.word	0x08003f63
 8003d00:	08003d51 	.word	0x08003d51
 8003d04:	08003f63 	.word	0x08003f63
 8003d08:	08003f63 	.word	0x08003f63
 8003d0c:	08003f63 	.word	0x08003f63
 8003d10:	08003f63 	.word	0x08003f63
 8003d14:	08003f63 	.word	0x08003f63
 8003d18:	08003f63 	.word	0x08003f63
 8003d1c:	08003f63 	.word	0x08003f63
 8003d20:	08003d57 	.word	0x08003d57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d24:	4b94      	ldr	r3, [pc, #592]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d009      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d30:	4b91      	ldr	r3, [pc, #580]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	08db      	lsrs	r3, r3, #3
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	4a90      	ldr	r2, [pc, #576]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003d42:	e111      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d44:	4b8d      	ldr	r3, [pc, #564]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d46:	61bb      	str	r3, [r7, #24]
    break;
 8003d48:	e10e      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d4a:	4b8d      	ldr	r3, [pc, #564]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d4c:	61bb      	str	r3, [r7, #24]
    break;
 8003d4e:	e10b      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003d50:	4b8c      	ldr	r3, [pc, #560]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d52:	61bb      	str	r3, [r7, #24]
    break;
 8003d54:	e108      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d56:	4b88      	ldr	r3, [pc, #544]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003d60:	4b85      	ldr	r3, [pc, #532]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d6c:	4b82      	ldr	r3, [pc, #520]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d76:	4b80      	ldr	r3, [pc, #512]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7a:	08db      	lsrs	r3, r3, #3
 8003d7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80e1 	beq.w	8003f5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	f000 8083 	beq.w	8003ea8 <HAL_RCC_GetSysClockFreq+0x204>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	f200 80a1 	bhi.w	8003eec <HAL_RCC_GetSysClockFreq+0x248>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x114>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d056      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003db6:	e099      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003db8:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d02d      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003dc4:	4b6c      	ldr	r3, [pc, #432]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	08db      	lsrs	r3, r3, #3
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	4a6b      	ldr	r2, [pc, #428]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	ee07 3a90 	vmov	s15, r3
 8003ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dee:	4b62      	ldr	r3, [pc, #392]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e1e:	e087      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e32:	4b51      	ldr	r3, [pc, #324]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e62:	e065      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e76:	4b40      	ldr	r3, [pc, #256]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7e:	ee07 3a90 	vmov	s15, r3
 8003e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ea6:	e043      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eba:	4b2f      	ldr	r3, [pc, #188]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ece:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eea:	e021      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efe:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	0a5b      	lsrs	r3, r3, #9
 8003f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f54:	ee17 3a90 	vmov	r3, s15
 8003f58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003f5a:	e005      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61bb      	str	r3, [r7, #24]
    break;
 8003f60:	e002      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f64:	61bb      	str	r3, [r7, #24]
    break;
 8003f66:	bf00      	nop
  }

  return sysclockfreq;
 8003f68:	69bb      	ldr	r3, [r7, #24]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3724      	adds	r7, #36	; 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	58024400 	.word	0x58024400
 8003f7c:	03d09000 	.word	0x03d09000
 8003f80:	003d0900 	.word	0x003d0900
 8003f84:	017d7840 	.word	0x017d7840
 8003f88:	46000000 	.word	0x46000000
 8003f8c:	4c742400 	.word	0x4c742400
 8003f90:	4a742400 	.word	0x4a742400
 8003f94:	4bbebc20 	.word	0x4bbebc20

08003f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f9e:	f7ff fe81 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	0a1b      	lsrs	r3, r3, #8
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	490f      	ldr	r1, [pc, #60]	; (8003fec <HAL_RCC_GetHCLKFreq+0x54>)
 8003fb0:	5ccb      	ldrb	r3, [r1, r3]
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	4a09      	ldr	r2, [pc, #36]	; (8003fec <HAL_RCC_GetHCLKFreq+0x54>)
 8003fc6:	5cd3      	ldrb	r3, [r2, r3]
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd2:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fd6:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	58024400 	.word	0x58024400
 8003fec:	08016eb8 	.word	0x08016eb8
 8003ff0:	24000004 	.word	0x24000004
 8003ff4:	24000000 	.word	0x24000000

08003ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003ffc:	f7ff ffcc 	bl	8003f98 <HAL_RCC_GetHCLKFreq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4904      	ldr	r1, [pc, #16]	; (8004020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	58024400 	.word	0x58024400
 8004020:	08016eb8 	.word	0x08016eb8

08004024 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	223f      	movs	r2, #63	; 0x3f
 8004032:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <HAL_RCC_GetClockConfig+0x7c>)
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0207 	and.w	r2, r3, #7
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004040:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <HAL_RCC_GetClockConfig+0x7c>)
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <HAL_RCC_GetClockConfig+0x7c>)
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f003 020f 	and.w	r2, r3, #15
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <HAL_RCC_GetClockConfig+0x7c>)
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004064:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <HAL_RCC_GetClockConfig+0x7c>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_RCC_GetClockConfig+0x7c>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800407c:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <HAL_RCC_GetClockConfig+0x7c>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_GetClockConfig+0x80>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 020f 	and.w	r2, r3, #15
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	601a      	str	r2, [r3, #0]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	58024400 	.word	0x58024400
 80040a4:	52002000 	.word	0x52002000

080040a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e049      	b.n	800414e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f841 	bl	8004156 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 fa0e 	bl	8004508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	d001      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e05e      	b.n	8004242 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2b      	ldr	r2, [pc, #172]	; (8004250 <HAL_TIM_Base_Start_IT+0xe4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d02c      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x94>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ae:	d027      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x94>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a27      	ldr	r2, [pc, #156]	; (8004254 <HAL_TIM_Base_Start_IT+0xe8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d022      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x94>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a26      	ldr	r2, [pc, #152]	; (8004258 <HAL_TIM_Base_Start_IT+0xec>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d01d      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a24      	ldr	r2, [pc, #144]	; (800425c <HAL_TIM_Base_Start_IT+0xf0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d018      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x94>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a23      	ldr	r2, [pc, #140]	; (8004260 <HAL_TIM_Base_Start_IT+0xf4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d013      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x94>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a21      	ldr	r2, [pc, #132]	; (8004264 <HAL_TIM_Base_Start_IT+0xf8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x94>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a20      	ldr	r2, [pc, #128]	; (8004268 <HAL_TIM_Base_Start_IT+0xfc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x94>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1e      	ldr	r2, [pc, #120]	; (800426c <HAL_TIM_Base_Start_IT+0x100>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x94>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <HAL_TIM_Base_Start_IT+0x104>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d115      	bne.n	800422c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_TIM_Base_Start_IT+0x108>)
 8004208:	4013      	ands	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b06      	cmp	r3, #6
 8004210:	d015      	beq.n	800423e <HAL_TIM_Base_Start_IT+0xd2>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004218:	d011      	beq.n	800423e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422a:	e008      	b.n	800423e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e000      	b.n	8004240 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40010000 	.word	0x40010000
 8004254:	40000400 	.word	0x40000400
 8004258:	40000800 	.word	0x40000800
 800425c:	40000c00 	.word	0x40000c00
 8004260:	40010400 	.word	0x40010400
 8004264:	40001800 	.word	0x40001800
 8004268:	40014000 	.word	0x40014000
 800426c:	4000e000 	.word	0x4000e000
 8004270:	4000e400 	.word	0x4000e400
 8004274:	00010007 	.word	0x00010007

08004278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b02      	cmp	r3, #2
 800428c:	d122      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b02      	cmp	r3, #2
 800429a:	d11b      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0202 	mvn.w	r2, #2
 80042a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f905 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
 80042c0:	e005      	b.n	80042ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f8f7 	bl	80044b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f908 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d122      	bne.n	8004328 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d11b      	bne.n	8004328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0204 	mvn.w	r2, #4
 80042f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2202      	movs	r2, #2
 80042fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f8db 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
 8004314:	e005      	b.n	8004322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f8cd 	bl	80044b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f8de 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b08      	cmp	r3, #8
 8004334:	d122      	bne.n	800437c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b08      	cmp	r3, #8
 8004342:	d11b      	bne.n	800437c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0208 	mvn.w	r2, #8
 800434c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2204      	movs	r2, #4
 8004352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8b1 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f8a3 	bl	80044b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8b4 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0310 	and.w	r3, r3, #16
 8004386:	2b10      	cmp	r3, #16
 8004388:	d122      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b10      	cmp	r3, #16
 8004396:	d11b      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0210 	mvn.w	r2, #16
 80043a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2208      	movs	r2, #8
 80043a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f887 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
 80043bc:	e005      	b.n	80043ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f879 	bl	80044b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f88a 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d10e      	bne.n	80043fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d107      	bne.n	80043fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0201 	mvn.w	r2, #1
 80043f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fc fb6c 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004406:	2b80      	cmp	r3, #128	; 0x80
 8004408:	d10e      	bne.n	8004428 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004414:	2b80      	cmp	r3, #128	; 0x80
 8004416:	d107      	bne.n	8004428 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f920 	bl	8004668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004436:	d10e      	bne.n	8004456 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b80      	cmp	r3, #128	; 0x80
 8004444:	d107      	bne.n	8004456 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800444e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f913 	bl	800467c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b40      	cmp	r3, #64	; 0x40
 8004462:	d10e      	bne.n	8004482 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d107      	bne.n	8004482 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800447a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f838 	bl	80044f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b20      	cmp	r3, #32
 800448e:	d10e      	bne.n	80044ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b20      	cmp	r3, #32
 800449c:	d107      	bne.n	80044ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f06f 0220 	mvn.w	r2, #32
 80044a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f8d3 	bl	8004654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a44      	ldr	r2, [pc, #272]	; (800462c <TIM_Base_SetConfig+0x124>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004526:	d00f      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a41      	ldr	r2, [pc, #260]	; (8004630 <TIM_Base_SetConfig+0x128>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00b      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a40      	ldr	r2, [pc, #256]	; (8004634 <TIM_Base_SetConfig+0x12c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d007      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a3f      	ldr	r2, [pc, #252]	; (8004638 <TIM_Base_SetConfig+0x130>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d003      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a3e      	ldr	r2, [pc, #248]	; (800463c <TIM_Base_SetConfig+0x134>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d108      	bne.n	800455a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a33      	ldr	r2, [pc, #204]	; (800462c <TIM_Base_SetConfig+0x124>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d027      	beq.n	80045b2 <TIM_Base_SetConfig+0xaa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d023      	beq.n	80045b2 <TIM_Base_SetConfig+0xaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a30      	ldr	r2, [pc, #192]	; (8004630 <TIM_Base_SetConfig+0x128>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01f      	beq.n	80045b2 <TIM_Base_SetConfig+0xaa>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a2f      	ldr	r2, [pc, #188]	; (8004634 <TIM_Base_SetConfig+0x12c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d01b      	beq.n	80045b2 <TIM_Base_SetConfig+0xaa>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2e      	ldr	r2, [pc, #184]	; (8004638 <TIM_Base_SetConfig+0x130>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d017      	beq.n	80045b2 <TIM_Base_SetConfig+0xaa>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2d      	ldr	r2, [pc, #180]	; (800463c <TIM_Base_SetConfig+0x134>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <TIM_Base_SetConfig+0xaa>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <TIM_Base_SetConfig+0x138>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00f      	beq.n	80045b2 <TIM_Base_SetConfig+0xaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2b      	ldr	r2, [pc, #172]	; (8004644 <TIM_Base_SetConfig+0x13c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00b      	beq.n	80045b2 <TIM_Base_SetConfig+0xaa>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <TIM_Base_SetConfig+0x140>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d007      	beq.n	80045b2 <TIM_Base_SetConfig+0xaa>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a29      	ldr	r2, [pc, #164]	; (800464c <TIM_Base_SetConfig+0x144>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d003      	beq.n	80045b2 <TIM_Base_SetConfig+0xaa>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a28      	ldr	r2, [pc, #160]	; (8004650 <TIM_Base_SetConfig+0x148>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d108      	bne.n	80045c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a10      	ldr	r2, [pc, #64]	; (800462c <TIM_Base_SetConfig+0x124>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00f      	beq.n	8004610 <TIM_Base_SetConfig+0x108>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a12      	ldr	r2, [pc, #72]	; (800463c <TIM_Base_SetConfig+0x134>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00b      	beq.n	8004610 <TIM_Base_SetConfig+0x108>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a11      	ldr	r2, [pc, #68]	; (8004640 <TIM_Base_SetConfig+0x138>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d007      	beq.n	8004610 <TIM_Base_SetConfig+0x108>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a10      	ldr	r2, [pc, #64]	; (8004644 <TIM_Base_SetConfig+0x13c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_Base_SetConfig+0x108>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a0f      	ldr	r2, [pc, #60]	; (8004648 <TIM_Base_SetConfig+0x140>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d103      	bne.n	8004618 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	615a      	str	r2, [r3, #20]
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40010000 	.word	0x40010000
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800
 8004638:	40000c00 	.word	0x40000c00
 800463c:	40010400 	.word	0x40010400
 8004640:	40014000 	.word	0x40014000
 8004644:	40014400 	.word	0x40014400
 8004648:	40014800 	.word	0x40014800
 800464c:	4000e000 	.word	0x4000e000
 8004650:	4000e400 	.word	0x4000e400

08004654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004696:	4b98      	ldr	r3, [pc, #608]	; (80048f8 <MX_LWIP_Init+0x268>)
 8004698:	22c0      	movs	r2, #192	; 0xc0
 800469a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800469c:	4b96      	ldr	r3, [pc, #600]	; (80048f8 <MX_LWIP_Init+0x268>)
 800469e:	22a8      	movs	r2, #168	; 0xa8
 80046a0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80046a2:	4b95      	ldr	r3, [pc, #596]	; (80048f8 <MX_LWIP_Init+0x268>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 80046a8:	4b93      	ldr	r3, [pc, #588]	; (80048f8 <MX_LWIP_Init+0x268>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80046ae:	4b93      	ldr	r3, [pc, #588]	; (80048fc <MX_LWIP_Init+0x26c>)
 80046b0:	22ff      	movs	r2, #255	; 0xff
 80046b2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80046b4:	4b91      	ldr	r3, [pc, #580]	; (80048fc <MX_LWIP_Init+0x26c>)
 80046b6:	22ff      	movs	r2, #255	; 0xff
 80046b8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80046ba:	4b90      	ldr	r3, [pc, #576]	; (80048fc <MX_LWIP_Init+0x26c>)
 80046bc:	22ff      	movs	r2, #255	; 0xff
 80046be:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80046c0:	4b8e      	ldr	r3, [pc, #568]	; (80048fc <MX_LWIP_Init+0x26c>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80046c6:	4b8e      	ldr	r3, [pc, #568]	; (8004900 <MX_LWIP_Init+0x270>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80046cc:	4b8c      	ldr	r3, [pc, #560]	; (8004900 <MX_LWIP_Init+0x270>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80046d2:	4b8b      	ldr	r3, [pc, #556]	; (8004900 <MX_LWIP_Init+0x270>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80046d8:	4b89      	ldr	r3, [pc, #548]	; (8004900 <MX_LWIP_Init+0x270>)
 80046da:	2200      	movs	r2, #0
 80046dc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80046de:	2100      	movs	r1, #0
 80046e0:	2000      	movs	r0, #0
 80046e2:	f004 fd43 	bl	800916c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80046e6:	4b84      	ldr	r3, [pc, #528]	; (80048f8 <MX_LWIP_Init+0x268>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	061a      	lsls	r2, r3, #24
 80046ec:	4b82      	ldr	r3, [pc, #520]	; (80048f8 <MX_LWIP_Init+0x268>)
 80046ee:	785b      	ldrb	r3, [r3, #1]
 80046f0:	041b      	lsls	r3, r3, #16
 80046f2:	431a      	orrs	r2, r3
 80046f4:	4b80      	ldr	r3, [pc, #512]	; (80048f8 <MX_LWIP_Init+0x268>)
 80046f6:	789b      	ldrb	r3, [r3, #2]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	4313      	orrs	r3, r2
 80046fc:	4a7e      	ldr	r2, [pc, #504]	; (80048f8 <MX_LWIP_Init+0x268>)
 80046fe:	78d2      	ldrb	r2, [r2, #3]
 8004700:	4313      	orrs	r3, r2
 8004702:	061a      	lsls	r2, r3, #24
 8004704:	4b7c      	ldr	r3, [pc, #496]	; (80048f8 <MX_LWIP_Init+0x268>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	0619      	lsls	r1, r3, #24
 800470a:	4b7b      	ldr	r3, [pc, #492]	; (80048f8 <MX_LWIP_Init+0x268>)
 800470c:	785b      	ldrb	r3, [r3, #1]
 800470e:	041b      	lsls	r3, r3, #16
 8004710:	4319      	orrs	r1, r3
 8004712:	4b79      	ldr	r3, [pc, #484]	; (80048f8 <MX_LWIP_Init+0x268>)
 8004714:	789b      	ldrb	r3, [r3, #2]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	430b      	orrs	r3, r1
 800471a:	4977      	ldr	r1, [pc, #476]	; (80048f8 <MX_LWIP_Init+0x268>)
 800471c:	78c9      	ldrb	r1, [r1, #3]
 800471e:	430b      	orrs	r3, r1
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004726:	431a      	orrs	r2, r3
 8004728:	4b73      	ldr	r3, [pc, #460]	; (80048f8 <MX_LWIP_Init+0x268>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	0619      	lsls	r1, r3, #24
 800472e:	4b72      	ldr	r3, [pc, #456]	; (80048f8 <MX_LWIP_Init+0x268>)
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	4319      	orrs	r1, r3
 8004736:	4b70      	ldr	r3, [pc, #448]	; (80048f8 <MX_LWIP_Init+0x268>)
 8004738:	789b      	ldrb	r3, [r3, #2]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	430b      	orrs	r3, r1
 800473e:	496e      	ldr	r1, [pc, #440]	; (80048f8 <MX_LWIP_Init+0x268>)
 8004740:	78c9      	ldrb	r1, [r1, #3]
 8004742:	430b      	orrs	r3, r1
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800474a:	431a      	orrs	r2, r3
 800474c:	4b6a      	ldr	r3, [pc, #424]	; (80048f8 <MX_LWIP_Init+0x268>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	0619      	lsls	r1, r3, #24
 8004752:	4b69      	ldr	r3, [pc, #420]	; (80048f8 <MX_LWIP_Init+0x268>)
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	041b      	lsls	r3, r3, #16
 8004758:	4319      	orrs	r1, r3
 800475a:	4b67      	ldr	r3, [pc, #412]	; (80048f8 <MX_LWIP_Init+0x268>)
 800475c:	789b      	ldrb	r3, [r3, #2]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	430b      	orrs	r3, r1
 8004762:	4965      	ldr	r1, [pc, #404]	; (80048f8 <MX_LWIP_Init+0x268>)
 8004764:	78c9      	ldrb	r1, [r1, #3]
 8004766:	430b      	orrs	r3, r1
 8004768:	0e1b      	lsrs	r3, r3, #24
 800476a:	4313      	orrs	r3, r2
 800476c:	4a65      	ldr	r2, [pc, #404]	; (8004904 <MX_LWIP_Init+0x274>)
 800476e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004770:	4b62      	ldr	r3, [pc, #392]	; (80048fc <MX_LWIP_Init+0x26c>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	061a      	lsls	r2, r3, #24
 8004776:	4b61      	ldr	r3, [pc, #388]	; (80048fc <MX_LWIP_Init+0x26c>)
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	431a      	orrs	r2, r3
 800477e:	4b5f      	ldr	r3, [pc, #380]	; (80048fc <MX_LWIP_Init+0x26c>)
 8004780:	789b      	ldrb	r3, [r3, #2]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	4313      	orrs	r3, r2
 8004786:	4a5d      	ldr	r2, [pc, #372]	; (80048fc <MX_LWIP_Init+0x26c>)
 8004788:	78d2      	ldrb	r2, [r2, #3]
 800478a:	4313      	orrs	r3, r2
 800478c:	061a      	lsls	r2, r3, #24
 800478e:	4b5b      	ldr	r3, [pc, #364]	; (80048fc <MX_LWIP_Init+0x26c>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	0619      	lsls	r1, r3, #24
 8004794:	4b59      	ldr	r3, [pc, #356]	; (80048fc <MX_LWIP_Init+0x26c>)
 8004796:	785b      	ldrb	r3, [r3, #1]
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	4319      	orrs	r1, r3
 800479c:	4b57      	ldr	r3, [pc, #348]	; (80048fc <MX_LWIP_Init+0x26c>)
 800479e:	789b      	ldrb	r3, [r3, #2]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	430b      	orrs	r3, r1
 80047a4:	4955      	ldr	r1, [pc, #340]	; (80048fc <MX_LWIP_Init+0x26c>)
 80047a6:	78c9      	ldrb	r1, [r1, #3]
 80047a8:	430b      	orrs	r3, r1
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047b0:	431a      	orrs	r2, r3
 80047b2:	4b52      	ldr	r3, [pc, #328]	; (80048fc <MX_LWIP_Init+0x26c>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	0619      	lsls	r1, r3, #24
 80047b8:	4b50      	ldr	r3, [pc, #320]	; (80048fc <MX_LWIP_Init+0x26c>)
 80047ba:	785b      	ldrb	r3, [r3, #1]
 80047bc:	041b      	lsls	r3, r3, #16
 80047be:	4319      	orrs	r1, r3
 80047c0:	4b4e      	ldr	r3, [pc, #312]	; (80048fc <MX_LWIP_Init+0x26c>)
 80047c2:	789b      	ldrb	r3, [r3, #2]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	430b      	orrs	r3, r1
 80047c8:	494c      	ldr	r1, [pc, #304]	; (80048fc <MX_LWIP_Init+0x26c>)
 80047ca:	78c9      	ldrb	r1, [r1, #3]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80047d4:	431a      	orrs	r2, r3
 80047d6:	4b49      	ldr	r3, [pc, #292]	; (80048fc <MX_LWIP_Init+0x26c>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	0619      	lsls	r1, r3, #24
 80047dc:	4b47      	ldr	r3, [pc, #284]	; (80048fc <MX_LWIP_Init+0x26c>)
 80047de:	785b      	ldrb	r3, [r3, #1]
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	4319      	orrs	r1, r3
 80047e4:	4b45      	ldr	r3, [pc, #276]	; (80048fc <MX_LWIP_Init+0x26c>)
 80047e6:	789b      	ldrb	r3, [r3, #2]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	430b      	orrs	r3, r1
 80047ec:	4943      	ldr	r1, [pc, #268]	; (80048fc <MX_LWIP_Init+0x26c>)
 80047ee:	78c9      	ldrb	r1, [r1, #3]
 80047f0:	430b      	orrs	r3, r1
 80047f2:	0e1b      	lsrs	r3, r3, #24
 80047f4:	4313      	orrs	r3, r2
 80047f6:	4a44      	ldr	r2, [pc, #272]	; (8004908 <MX_LWIP_Init+0x278>)
 80047f8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80047fa:	4b41      	ldr	r3, [pc, #260]	; (8004900 <MX_LWIP_Init+0x270>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	061a      	lsls	r2, r3, #24
 8004800:	4b3f      	ldr	r3, [pc, #252]	; (8004900 <MX_LWIP_Init+0x270>)
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	431a      	orrs	r2, r3
 8004808:	4b3d      	ldr	r3, [pc, #244]	; (8004900 <MX_LWIP_Init+0x270>)
 800480a:	789b      	ldrb	r3, [r3, #2]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	4313      	orrs	r3, r2
 8004810:	4a3b      	ldr	r2, [pc, #236]	; (8004900 <MX_LWIP_Init+0x270>)
 8004812:	78d2      	ldrb	r2, [r2, #3]
 8004814:	4313      	orrs	r3, r2
 8004816:	061a      	lsls	r2, r3, #24
 8004818:	4b39      	ldr	r3, [pc, #228]	; (8004900 <MX_LWIP_Init+0x270>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	0619      	lsls	r1, r3, #24
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <MX_LWIP_Init+0x270>)
 8004820:	785b      	ldrb	r3, [r3, #1]
 8004822:	041b      	lsls	r3, r3, #16
 8004824:	4319      	orrs	r1, r3
 8004826:	4b36      	ldr	r3, [pc, #216]	; (8004900 <MX_LWIP_Init+0x270>)
 8004828:	789b      	ldrb	r3, [r3, #2]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	430b      	orrs	r3, r1
 800482e:	4934      	ldr	r1, [pc, #208]	; (8004900 <MX_LWIP_Init+0x270>)
 8004830:	78c9      	ldrb	r1, [r1, #3]
 8004832:	430b      	orrs	r3, r1
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800483a:	431a      	orrs	r2, r3
 800483c:	4b30      	ldr	r3, [pc, #192]	; (8004900 <MX_LWIP_Init+0x270>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	0619      	lsls	r1, r3, #24
 8004842:	4b2f      	ldr	r3, [pc, #188]	; (8004900 <MX_LWIP_Init+0x270>)
 8004844:	785b      	ldrb	r3, [r3, #1]
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	4319      	orrs	r1, r3
 800484a:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <MX_LWIP_Init+0x270>)
 800484c:	789b      	ldrb	r3, [r3, #2]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	430b      	orrs	r3, r1
 8004852:	492b      	ldr	r1, [pc, #172]	; (8004900 <MX_LWIP_Init+0x270>)
 8004854:	78c9      	ldrb	r1, [r1, #3]
 8004856:	430b      	orrs	r3, r1
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800485e:	431a      	orrs	r2, r3
 8004860:	4b27      	ldr	r3, [pc, #156]	; (8004900 <MX_LWIP_Init+0x270>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	0619      	lsls	r1, r3, #24
 8004866:	4b26      	ldr	r3, [pc, #152]	; (8004900 <MX_LWIP_Init+0x270>)
 8004868:	785b      	ldrb	r3, [r3, #1]
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	4319      	orrs	r1, r3
 800486e:	4b24      	ldr	r3, [pc, #144]	; (8004900 <MX_LWIP_Init+0x270>)
 8004870:	789b      	ldrb	r3, [r3, #2]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	430b      	orrs	r3, r1
 8004876:	4922      	ldr	r1, [pc, #136]	; (8004900 <MX_LWIP_Init+0x270>)
 8004878:	78c9      	ldrb	r1, [r1, #3]
 800487a:	430b      	orrs	r3, r1
 800487c:	0e1b      	lsrs	r3, r3, #24
 800487e:	4313      	orrs	r3, r2
 8004880:	4a22      	ldr	r2, [pc, #136]	; (800490c <MX_LWIP_Init+0x27c>)
 8004882:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004884:	4b22      	ldr	r3, [pc, #136]	; (8004910 <MX_LWIP_Init+0x280>)
 8004886:	9302      	str	r3, [sp, #8]
 8004888:	4b22      	ldr	r3, [pc, #136]	; (8004914 <MX_LWIP_Init+0x284>)
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	2300      	movs	r3, #0
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	4b1e      	ldr	r3, [pc, #120]	; (800490c <MX_LWIP_Init+0x27c>)
 8004892:	4a1d      	ldr	r2, [pc, #116]	; (8004908 <MX_LWIP_Init+0x278>)
 8004894:	491b      	ldr	r1, [pc, #108]	; (8004904 <MX_LWIP_Init+0x274>)
 8004896:	4820      	ldr	r0, [pc, #128]	; (8004918 <MX_LWIP_Init+0x288>)
 8004898:	f005 faea 	bl	8009e70 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800489c:	481e      	ldr	r0, [pc, #120]	; (8004918 <MX_LWIP_Init+0x288>)
 800489e:	f005 fc99 	bl	800a1d4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80048a2:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <MX_LWIP_Init+0x288>)
 80048a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80048b4:	4818      	ldr	r0, [pc, #96]	; (8004918 <MX_LWIP_Init+0x288>)
 80048b6:	f005 fc9d 	bl	800a1f4 <netif_set_up>
 80048ba:	e002      	b.n	80048c2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80048bc:	4816      	ldr	r0, [pc, #88]	; (8004918 <MX_LWIP_Init+0x288>)
 80048be:	f005 fd05 	bl	800a2cc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80048c2:	4916      	ldr	r1, [pc, #88]	; (800491c <MX_LWIP_Init+0x28c>)
 80048c4:	4814      	ldr	r0, [pc, #80]	; (8004918 <MX_LWIP_Init+0x288>)
 80048c6:	f005 fd97 	bl	800a3f8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80048ca:	2224      	movs	r2, #36	; 0x24
 80048cc:	2100      	movs	r1, #0
 80048ce:	4814      	ldr	r0, [pc, #80]	; (8004920 <MX_LWIP_Init+0x290>)
 80048d0:	f00e fd83 	bl	80133da <memset>
  attributes.name = "EthLink";
 80048d4:	4b12      	ldr	r3, [pc, #72]	; (8004920 <MX_LWIP_Init+0x290>)
 80048d6:	4a13      	ldr	r2, [pc, #76]	; (8004924 <MX_LWIP_Init+0x294>)
 80048d8:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80048da:	4b11      	ldr	r3, [pc, #68]	; (8004920 <MX_LWIP_Init+0x290>)
 80048dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048e0:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80048e2:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <MX_LWIP_Init+0x290>)
 80048e4:	2210      	movs	r2, #16
 80048e6:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80048e8:	4a0d      	ldr	r2, [pc, #52]	; (8004920 <MX_LWIP_Init+0x290>)
 80048ea:	490b      	ldr	r1, [pc, #44]	; (8004918 <MX_LWIP_Init+0x288>)
 80048ec:	480e      	ldr	r0, [pc, #56]	; (8004928 <MX_LWIP_Init+0x298>)
 80048ee:	f000 fd60 	bl	80053b2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80048f2:	bf00      	nop
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	24005ef0 	.word	0x24005ef0
 80048fc:	24005eec 	.word	0x24005eec
 8004900:	24005e8c 	.word	0x24005e8c
 8004904:	24005ee8 	.word	0x24005ee8
 8004908:	24005ef4 	.word	0x24005ef4
 800490c:	24005ef8 	.word	0x24005ef8
 8004910:	080090a9 	.word	0x080090a9
 8004914:	08004cf9 	.word	0x08004cf9
 8004918:	24005eb4 	.word	0x24005eb4
 800491c:	0800492d 	.word	0x0800492d
 8004920:	24005e90 	.word	0x24005e90
 8004924:	08014390 	.word	0x08014390
 8004928:	08004feb 	.word	0x08004feb

0800492c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004948:	4b04      	ldr	r3, [pc, #16]	; (800495c <HAL_ETH_RxCpltCallback+0x1c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f000 ffc7 	bl	80058e0 <osSemaphoreRelease>
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	240000c0 	.word	0x240000c0

08004960 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004968:	4b04      	ldr	r3, [pc, #16]	; (800497c <HAL_ETH_TxCpltCallback+0x1c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f000 ffb7 	bl	80058e0 <osSemaphoreRelease>
}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	240000c4 	.word	0x240000c4

08004980 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fd fc6f 	bl	800226c <HAL_ETH_GetDMAError>
 800498e:	4603      	mov	r3, r0
 8004990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004994:	2b80      	cmp	r3, #128	; 0x80
 8004996:	d104      	bne.n	80049a2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004998:	4b04      	ldr	r3, [pc, #16]	; (80049ac <HAL_ETH_ErrorCallback+0x2c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f000 ff9f 	bl	80058e0 <osSemaphoreRelease>
  }
}
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	240000c0 	.word	0x240000c0

080049b0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b0aa      	sub	sp, #168	; 0xa8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  ETH_MACConfigTypeDef MACConf = {0};
 80049ca:	f107 0314 	add.w	r3, r7, #20
 80049ce:	2264      	movs	r2, #100	; 0x64
 80049d0:	2100      	movs	r1, #0
 80049d2:	4618      	mov	r0, r3
 80049d4:	f00e fd01 	bl	80133da <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80049d8:	4b53      	ldr	r3, [pc, #332]	; (8004b28 <low_level_init+0x178>)
 80049da:	4a54      	ldr	r2, [pc, #336]	; (8004b2c <low_level_init+0x17c>)
 80049dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80049de:	2300      	movs	r3, #0
 80049e0:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80049e6:	23e1      	movs	r3, #225	; 0xe1
 80049e8:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80049ee:	2300      	movs	r3, #0
 80049f0:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80049f2:	2300      	movs	r3, #0
 80049f4:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80049f6:	4a4c      	ldr	r2, [pc, #304]	; (8004b28 <low_level_init+0x178>)
 80049f8:	f107 030c 	add.w	r3, r7, #12
 80049fc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80049fe:	4b4a      	ldr	r3, [pc, #296]	; (8004b28 <low_level_init+0x178>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004a04:	4b48      	ldr	r3, [pc, #288]	; (8004b28 <low_level_init+0x178>)
 8004a06:	4a4a      	ldr	r2, [pc, #296]	; (8004b30 <low_level_init+0x180>)
 8004a08:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004a0a:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <low_level_init+0x178>)
 8004a0c:	4a49      	ldr	r2, [pc, #292]	; (8004b34 <low_level_init+0x184>)
 8004a0e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004a10:	4b45      	ldr	r3, [pc, #276]	; (8004b28 <low_level_init+0x178>)
 8004a12:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004a16:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004a18:	4843      	ldr	r0, [pc, #268]	; (8004b28 <low_level_init+0x178>)
 8004a1a:	f7fc fc6f 	bl	80012fc <HAL_ETH_Init>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004a24:	2238      	movs	r2, #56	; 0x38
 8004a26:	2100      	movs	r1, #0
 8004a28:	4843      	ldr	r0, [pc, #268]	; (8004b38 <low_level_init+0x188>)
 8004a2a:	f00e fcd6 	bl	80133da <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004a2e:	4b42      	ldr	r3, [pc, #264]	; (8004b38 <low_level_init+0x188>)
 8004a30:	2221      	movs	r2, #33	; 0x21
 8004a32:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004a34:	4b40      	ldr	r3, [pc, #256]	; (8004b38 <low_level_init+0x188>)
 8004a36:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004a3a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004a3c:	4b3e      	ldr	r3, [pc, #248]	; (8004b38 <low_level_init+0x188>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004a42:	483e      	ldr	r0, [pc, #248]	; (8004b3c <low_level_init+0x18c>)
 8004a44:	f005 f8ce 	bl	8009be4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2206      	movs	r2, #6
 8004a4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004a50:	4b35      	ldr	r3, [pc, #212]	; (8004b28 <low_level_init+0x178>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	781a      	ldrb	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004a5c:	4b32      	ldr	r3, [pc, #200]	; (8004b28 <low_level_init+0x178>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	785a      	ldrb	r2, [r3, #1]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004a68:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <low_level_init+0x178>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	789a      	ldrb	r2, [r3, #2]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004a74:	4b2c      	ldr	r3, [pc, #176]	; (8004b28 <low_level_init+0x178>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	78da      	ldrb	r2, [r3, #3]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004a80:	4b29      	ldr	r3, [pc, #164]	; (8004b28 <low_level_init+0x178>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	791a      	ldrb	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004a8c:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <low_level_init+0x178>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	795a      	ldrb	r2, [r3, #5]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004a9e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004aa6:	f043 030a 	orr.w	r3, r3, #10
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f000 fe37 	bl	800572a <osSemaphoreNew>
 8004abc:	4603      	mov	r3, r0
 8004abe:	4a20      	ldr	r2, [pc, #128]	; (8004b40 <low_level_init+0x190>)
 8004ac0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	f000 fe2f 	bl	800572a <osSemaphoreNew>
 8004acc:	4603      	mov	r3, r0
 8004ace:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <low_level_init+0x194>)
 8004ad0:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004ad2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004ad6:	2224      	movs	r2, #36	; 0x24
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f00e fc7d 	bl	80133da <memset>
  attributes.name = "EthIf";
 8004ae0:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <low_level_init+0x198>)
 8004ae2:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ae8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 8004aec:	2330      	movs	r3, #48	; 0x30
 8004aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 8004af2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004af6:	461a      	mov	r2, r3
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4814      	ldr	r0, [pc, #80]	; (8004b4c <low_level_init+0x19c>)
 8004afc:	f000 fc59 	bl	80053b2 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83826E_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8004b00:	4913      	ldr	r1, [pc, #76]	; (8004b50 <low_level_init+0x1a0>)
 8004b02:	4814      	ldr	r0, [pc, #80]	; (8004b54 <low_level_init+0x1a4>)
 8004b04:	f7fb fc54 	bl	80003b0 <DP83826E_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  DP83826E_Init(&DP83848);
 8004b08:	4812      	ldr	r0, [pc, #72]	; (8004b54 <low_level_init+0x1a4>)
 8004b0a:	f7fb fd46 	bl	800059a <DP83826E_Init>

  if (hal_eth_init_status == HAL_OK)
 8004b0e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <low_level_init+0x16e>
  {
	  ethernet_link_chk_state(netif);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fb24 	bl	8005164 <ethernet_link_chk_state>
 8004b1c:	e001      	b.n	8004b22 <low_level_init+0x172>
  }
  else
  {
    Error_Handler();
 8004b1e:	f7fb ffeb 	bl	8000af8 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004b22:	37a8      	adds	r7, #168	; 0xa8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	240077c0 	.word	0x240077c0
 8004b2c:	40028000 	.word	0x40028000
 8004b30:	30000100 	.word	0x30000100
 8004b34:	30000000 	.word	0x30000000
 8004b38:	24007870 	.word	0x24007870
 8004b3c:	08016ec8 	.word	0x08016ec8
 8004b40:	240000c0 	.word	0x240000c0
 8004b44:	240000c4 	.word	0x240000c4
 8004b48:	08014398 	.word	0x08014398
 8004b4c:	08004ca5 	.word	0x08004ca5
 8004b50:	24000010 	.word	0x24000010
 8004b54:	24007780 	.word	0x24007780

08004b58 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b092      	sub	sp, #72	; 0x48
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004b70:	f107 030c 	add.w	r3, r7, #12
 8004b74:	2230      	movs	r2, #48	; 0x30
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f00e fc2e 	bl	80133da <memset>

  for(q = p; q != NULL; q = q->next)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	643b      	str	r3, [r7, #64]	; 0x40
 8004b82:	e045      	b.n	8004c10 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d902      	bls.n	8004b90 <low_level_output+0x38>
      return ERR_IF;
 8004b8a:	f06f 030b 	mvn.w	r3, #11
 8004b8e:	e065      	b.n	8004c5c <low_level_output+0x104>

    Txbuffer[i].buffer = q->payload;
 8004b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b92:	6859      	ldr	r1, [r3, #4]
 8004b94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b96:	4613      	mov	r3, r2
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	3348      	adds	r3, #72	; 0x48
 8004ba0:	443b      	add	r3, r7
 8004ba2:	3b3c      	subs	r3, #60	; 0x3c
 8004ba4:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba8:	895b      	ldrh	r3, [r3, #10]
 8004baa:	4619      	mov	r1, r3
 8004bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bae:	4613      	mov	r3, r2
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	3348      	adds	r3, #72	; 0x48
 8004bb8:	443b      	add	r3, r7
 8004bba:	3b38      	subs	r3, #56	; 0x38
 8004bbc:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d011      	beq.n	8004be8 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc6:	1e5a      	subs	r2, r3, #1
 8004bc8:	f107 000c 	add.w	r0, r7, #12
 8004bcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bce:	460b      	mov	r3, r1
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	440b      	add	r3, r1
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	18c1      	adds	r1, r0, r3
 8004bd8:	4613      	mov	r3, r2
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	3348      	adds	r3, #72	; 0x48
 8004be2:	443b      	add	r3, r7
 8004be4:	3b34      	subs	r3, #52	; 0x34
 8004be6:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d109      	bne.n	8004c04 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8004bf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	3348      	adds	r3, #72	; 0x48
 8004bfc:	443b      	add	r3, r7
 8004bfe:	3b34      	subs	r3, #52	; 0x34
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c06:	3301      	adds	r3, #1
 8004c08:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1b6      	bne.n	8004b84 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	891b      	ldrh	r3, [r3, #8]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <low_level_output+0x10c>)
 8004c1e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004c20:	4a10      	ldr	r2, [pc, #64]	; (8004c64 <low_level_output+0x10c>)
 8004c22:	f107 030c 	add.w	r3, r7, #12
 8004c26:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004c28:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <low_level_output+0x10c>)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004c2e:	6838      	ldr	r0, [r7, #0]
 8004c30:	f006 f836 	bl	800aca0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004c34:	490b      	ldr	r1, [pc, #44]	; (8004c64 <low_level_output+0x10c>)
 8004c36:	480c      	ldr	r0, [pc, #48]	; (8004c68 <low_level_output+0x110>)
 8004c38:	f7fc fd22 	bl	8001680 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004c3c:	bf00      	nop
 8004c3e:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <low_level_output+0x114>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f04f 31ff 	mov.w	r1, #4294967295
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fdf8 	bl	800583c <osSemaphoreAcquire>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f5      	bne.n	8004c3e <low_level_output+0xe6>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004c52:	4805      	ldr	r0, [pc, #20]	; (8004c68 <low_level_output+0x110>)
 8004c54:	f7fc fe93 	bl	800197e <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004c58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3748      	adds	r7, #72	; 0x48
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	24007870 	.word	0x24007870
 8004c68:	240077c0 	.word	0x240077c0
 8004c6c:	240000c4 	.word	0x240000c4

08004c70 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004c7c:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <low_level_input+0x2c>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004c84:	f107 030c 	add.w	r3, r7, #12
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4805      	ldr	r0, [pc, #20]	; (8004ca0 <low_level_input+0x30>)
 8004c8c:	f7fc fd49 	bl	8001722 <HAL_ETH_ReadData>
  }

  return p;
 8004c90:	68fb      	ldr	r3, [r7, #12]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	240000bc 	.word	0x240000bc
 8004ca0:	240077c0 	.word	0x240077c0

08004ca4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <ethernetif_input+0x50>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fdbd 	bl	800583c <osSemaphoreAcquire>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f5      	bne.n	8004cb4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004cc8:	68b8      	ldr	r0, [r7, #8]
 8004cca:	f7ff ffd1 	bl	8004c70 <low_level_input>
 8004cce:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	4798      	blx	r3
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f005 ff34 	bl	800ab54 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1ea      	bne.n	8004cc8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004cf2:	e7df      	b.n	8004cb4 <ethernetif_input+0x10>
 8004cf4:	240000c0 	.word	0x240000c0

08004cf8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <ethernetif_init+0x1c>
 8004d06:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <ethernetif_init+0x48>)
 8004d08:	f240 220b 	movw	r2, #523	; 0x20b
 8004d0c:	490d      	ldr	r1, [pc, #52]	; (8004d44 <ethernetif_init+0x4c>)
 8004d0e:	480e      	ldr	r0, [pc, #56]	; (8004d48 <ethernetif_init+0x50>)
 8004d10:	f00e fc00 	bl	8013514 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2273      	movs	r2, #115	; 0x73
 8004d18:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2274      	movs	r2, #116	; 0x74
 8004d20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <ethernetif_init+0x54>)
 8004d28:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a08      	ldr	r2, [pc, #32]	; (8004d50 <ethernetif_init+0x58>)
 8004d2e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff fe3d 	bl	80049b0 <low_level_init>

  return ERR_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	080143a0 	.word	0x080143a0
 8004d44:	080143bc 	.word	0x080143bc
 8004d48:	080143cc 	.word	0x080143cc
 8004d4c:	08011241 	.word	0x08011241
 8004d50:	08004b59 	.word	0x08004b59

08004d54 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004d60:	68f9      	ldr	r1, [r7, #12]
 8004d62:	4809      	ldr	r0, [pc, #36]	; (8004d88 <pbuf_free_custom+0x34>)
 8004d64:	f005 f82e 	bl	8009dc4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004d68:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <pbuf_free_custom+0x38>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d107      	bne.n	8004d80 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004d70:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <pbuf_free_custom+0x38>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <pbuf_free_custom+0x3c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fdb0 	bl	80058e0 <osSemaphoreRelease>
  }
}
 8004d80:	bf00      	nop
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	08016ec8 	.word	0x08016ec8
 8004d8c:	240000bc 	.word	0x240000bc
 8004d90:	240000c0 	.word	0x240000c0

08004d94 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004d98:	f7fc f934 	bl	8001004 <HAL_GetTick>
 8004d9c:	4603      	mov	r3, r0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08e      	sub	sp, #56	; 0x38
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	605a      	str	r2, [r3, #4]
 8004db6:	609a      	str	r2, [r3, #8]
 8004db8:	60da      	str	r2, [r3, #12]
 8004dba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a5d      	ldr	r2, [pc, #372]	; (8004f38 <HAL_ETH_MspInit+0x194>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	f040 80b3 	bne.w	8004f2e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004dc8:	4b5c      	ldr	r3, [pc, #368]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004dca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004dce:	4a5b      	ldr	r2, [pc, #364]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004dd8:	4b58      	ldr	r3, [pc, #352]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004de2:	623b      	str	r3, [r7, #32]
 8004de4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004de6:	4b55      	ldr	r3, [pc, #340]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004dec:	4a53      	ldr	r2, [pc, #332]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004df6:	4b51      	ldr	r3, [pc, #324]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004e04:	4b4d      	ldr	r3, [pc, #308]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e0a:	4a4c      	ldr	r2, [pc, #304]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004e14:	4b49      	ldr	r3, [pc, #292]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004e22:	4b46      	ldr	r3, [pc, #280]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e28:	4a44      	ldr	r2, [pc, #272]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e32:	4b42      	ldr	r3, [pc, #264]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e40:	4b3e      	ldr	r3, [pc, #248]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e46:	4a3d      	ldr	r2, [pc, #244]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e48:	f043 0304 	orr.w	r3, r3, #4
 8004e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e50:	4b3a      	ldr	r3, [pc, #232]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5e:	4b37      	ldr	r3, [pc, #220]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e64:	4a35      	ldr	r2, [pc, #212]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e66:	f043 0302 	orr.w	r3, r3, #2
 8004e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e6e:	4b33      	ldr	r3, [pc, #204]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7c:	4b2f      	ldr	r3, [pc, #188]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e82:	4a2e      	ldr	r2, [pc, #184]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e8c:	4b2b      	ldr	r3, [pc, #172]	; (8004f3c <HAL_ETH_MspInit+0x198>)
 8004e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004e9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004eac:	230b      	movs	r3, #11
 8004eae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4822      	ldr	r0, [pc, #136]	; (8004f40 <HAL_ETH_MspInit+0x19c>)
 8004eb8:	f7fd ff5a 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8004ebc:	2332      	movs	r3, #50	; 0x32
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ecc:	230b      	movs	r3, #11
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	481b      	ldr	r0, [pc, #108]	; (8004f44 <HAL_ETH_MspInit+0x1a0>)
 8004ed8:	f7fd ff4a 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8004edc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eea:	2303      	movs	r3, #3
 8004eec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004eee:	230b      	movs	r3, #11
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4813      	ldr	r0, [pc, #76]	; (8004f48 <HAL_ETH_MspInit+0x1a4>)
 8004efa:	f7fd ff39 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 8004efe:	2386      	movs	r3, #134	; 0x86
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f02:	2302      	movs	r3, #2
 8004f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f0e:	230b      	movs	r3, #11
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f16:	4619      	mov	r1, r3
 8004f18:	480c      	ldr	r0, [pc, #48]	; (8004f4c <HAL_ETH_MspInit+0x1a8>)
 8004f1a:	f7fd ff29 	bl	8002d70 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2105      	movs	r1, #5
 8004f22:	203d      	movs	r0, #61	; 0x3d
 8004f24:	f7fc f946 	bl	80011b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004f28:	203d      	movs	r0, #61	; 0x3d
 8004f2a:	f7fc f95d 	bl	80011e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004f2e:	bf00      	nop
 8004f30:	3738      	adds	r7, #56	; 0x38
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40028000 	.word	0x40028000
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	58021800 	.word	0x58021800
 8004f44:	58020800 	.word	0x58020800
 8004f48:	58020400 	.word	0x58020400
 8004f4c:	58020000 	.word	0x58020000

08004f50 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004f54:	4802      	ldr	r0, [pc, #8]	; (8004f60 <ETH_PHY_IO_Init+0x10>)
 8004f56:	f7fd f931 	bl	80021bc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	240077c0 	.word	0x240077c0

08004f64 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return 0;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	68f9      	ldr	r1, [r7, #12]
 8004f86:	4807      	ldr	r0, [pc, #28]	; (8004fa4 <ETH_PHY_IO_ReadReg+0x30>)
 8004f88:	f7fc fe82 	bl	8001c90 <HAL_ETH_ReadPHYRegister>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004f92:	f04f 33ff 	mov.w	r3, #4294967295
 8004f96:	e000      	b.n	8004f9a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	240077c0 	.word	0x240077c0

08004fa8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	68f9      	ldr	r1, [r7, #12]
 8004fba:	4807      	ldr	r0, [pc, #28]	; (8004fd8 <ETH_PHY_IO_WriteReg+0x30>)
 8004fbc:	f7fc febc 	bl	8001d38 <HAL_ETH_WritePHYRegister>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fca:	e000      	b.n	8004fce <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	240077c0 	.word	0x240077c0

08004fdc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004fe0:	f7fc f810 	bl	8001004 <HAL_GetTick>
 8004fe4:	4603      	mov	r3, r0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b0a0      	sub	sp, #128	; 0x80
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004ff2:	f107 0308 	add.w	r3, r7, #8
 8004ff6:	2264      	movs	r2, #100	; 0x64
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f00e f9ed 	bl	80133da <memset>
  int32_t PHYLinkState = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	67bb      	str	r3, [r7, #120]	; 0x78
 8005008:	2300      	movs	r3, #0
 800500a:	677b      	str	r3, [r7, #116]	; 0x74
 800500c:	2300      	movs	r3, #0
 800500e:	673b      	str	r3, [r7, #112]	; 0x70

  struct netif *netif = (struct netif *) argument;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	66fb      	str	r3, [r7, #108]	; 0x6c
/* USER CODE BEGIN ETH link init */
  for(;;)
  {
	  ethernet_link_chk_state(netif);
 8005014:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005016:	f000 f8a5 	bl	8005164 <ethernet_link_chk_state>
 800501a:	e7fb      	b.n	8005014 <ethernet_link_thread+0x2a>

0800501c <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af02      	add	r7, sp, #8
 8005022:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005024:	4812      	ldr	r0, [pc, #72]	; (8005070 <HAL_ETH_RxAllocateCallback+0x54>)
 8005026:	f004 fe59 	bl	8009cdc <memp_malloc_pool>
 800502a:	60f8      	str	r0, [r7, #12]
  if (p)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d014      	beq.n	800505c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f103 0220 	add.w	r2, r3, #32
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4a0d      	ldr	r2, [pc, #52]	; (8005074 <HAL_ETH_RxAllocateCallback+0x58>)
 8005040:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800504a:	9201      	str	r2, [sp, #4]
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2241      	movs	r2, #65	; 0x41
 8005052:	2100      	movs	r1, #0
 8005054:	2000      	movs	r0, #0
 8005056:	f005 fbc3 	bl	800a7e0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800505a:	e005      	b.n	8005068 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <HAL_ETH_RxAllocateCallback+0x5c>)
 800505e:	2201      	movs	r2, #1
 8005060:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	08016ec8 	.word	0x08016ec8
 8005074:	08004d55 	.word	0x08004d55
 8005078:	240000bc 	.word	0x240000bc

0800507c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800507c:	b480      	push	{r7}
 800507e:	b08d      	sub	sp, #52	; 0x34
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3b20      	subs	r3, #32
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	2200      	movs	r2, #0
 80050a6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	887a      	ldrh	r2, [r7, #2]
 80050ac:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	e003      	b.n	80050c6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ca:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d2:	e009      	b.n	80050e8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	891a      	ldrh	r2, [r3, #8]
 80050d8:	887b      	ldrh	r3, [r7, #2]
 80050da:	4413      	add	r3, r2
 80050dc:	b29a      	uxth	r2, r3
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f2      	bne.n	80050d4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80050ee:	887b      	ldrh	r3, [r7, #2]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	623a      	str	r2, [r7, #32]
 80050f4:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	dd1d      	ble.n	8005138 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	f003 021f 	and.w	r2, r3, #31
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800510c:	f3bf 8f4f 	dsb	sy
}
 8005110:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005112:	4a0d      	ldr	r2, [pc, #52]	; (8005148 <HAL_ETH_RxLinkCallback+0xcc>)
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	3320      	adds	r3, #32
 800511e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	3b20      	subs	r3, #32
 8005124:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	dcf2      	bgt.n	8005112 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800512c:	f3bf 8f4f 	dsb	sy
}
 8005130:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005132:	f3bf 8f6f 	isb	sy
}
 8005136:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005138:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800513a:	bf00      	nop
 800513c:	3734      	adds	r7, #52	; 0x34
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	e000ed00 	.word	0xe000ed00

0800514c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f005 fcfd 	bl	800ab54 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <ethernet_link_chk_state>:

/* USER CODE BEGIN 8 */

void ethernet_link_chk_state(struct netif *netif)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b0a0      	sub	sp, #128	; 0x80
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800516c:	2300      	movs	r3, #0
 800516e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005170:	2300      	movs	r3, #0
 8005172:	67bb      	str	r3, [r7, #120]	; 0x78
 8005174:	2300      	movs	r3, #0
 8005176:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83826E_GetLinkState(&DP83848);
 8005178:	483a      	ldr	r0, [pc, #232]	; (8005264 <ethernet_link_chk_state+0x100>)
 800517a:	f7fb fa4e 	bl	800061a <DP83826E_GetLinkState>
 800517e:	4603      	mov	r3, r0
 8005180:	673b      	str	r3, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83826E_STATUS_LINK_DOWN))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005188:	089b      	lsrs	r3, r3, #2
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00c      	beq.n	80051ae <ethernet_link_chk_state+0x4a>
 8005194:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005196:	2b01      	cmp	r3, #1
 8005198:	d809      	bhi.n	80051ae <ethernet_link_chk_state+0x4a>
  {
    HAL_ETH_Stop(&heth);
 800519a:	4833      	ldr	r0, [pc, #204]	; (8005268 <ethernet_link_chk_state+0x104>)
 800519c:	f7fc fa20 	bl	80015e0 <HAL_ETH_Stop>
    netif_set_down(netif);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f005 f893 	bl	800a2cc <netif_set_down>
    netif_set_link_down(netif);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f005 f8f6 	bl	800a398 <netif_set_link_down>
      HAL_ETH_Start_IT(&heth);
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }
}
 80051ac:	e055      	b.n	800525a <ethernet_link_chk_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83826E_STATUS_LINK_DOWN))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d14e      	bne.n	800525a <ethernet_link_chk_state+0xf6>
 80051bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d94b      	bls.n	800525a <ethernet_link_chk_state+0xf6>
    switch (PHYLinkState)
 80051c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051c4:	3b02      	subs	r3, #2
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d82a      	bhi.n	8005220 <ethernet_link_chk_state+0xbc>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <ethernet_link_chk_state+0x6c>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051f3 	.word	0x080051f3
 80051d8:	08005203 	.word	0x08005203
 80051dc:	08005213 	.word	0x08005213
      duplex = ETH_FULLDUPLEX_MODE;
 80051e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80051e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80051ec:	2301      	movs	r3, #1
 80051ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80051f0:	e017      	b.n	8005222 <ethernet_link_chk_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80051f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80051fc:	2301      	movs	r3, #1
 80051fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005200:	e00f      	b.n	8005222 <ethernet_link_chk_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 8005202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005206:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005208:	2300      	movs	r3, #0
 800520a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800520c:	2301      	movs	r3, #1
 800520e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005210:	e007      	b.n	8005222 <ethernet_link_chk_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 8005212:	2300      	movs	r3, #0
 8005214:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005216:	2300      	movs	r3, #0
 8005218:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800521a:	2301      	movs	r3, #1
 800521c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800521e:	e000      	b.n	8005222 <ethernet_link_chk_state+0xbe>
      break;
 8005220:	bf00      	nop
    if(linkchanged)
 8005222:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d018      	beq.n	800525a <ethernet_link_chk_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005228:	f107 030c 	add.w	r3, r7, #12
 800522c:	4619      	mov	r1, r3
 800522e:	480e      	ldr	r0, [pc, #56]	; (8005268 <ethernet_link_chk_state+0x104>)
 8005230:	f7fc fdd6 	bl	8001de0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8005238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800523a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800523c:	f107 030c 	add.w	r3, r7, #12
 8005240:	4619      	mov	r1, r3
 8005242:	4809      	ldr	r0, [pc, #36]	; (8005268 <ethernet_link_chk_state+0x104>)
 8005244:	f7fc ffa0 	bl	8002188 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005248:	4807      	ldr	r0, [pc, #28]	; (8005268 <ethernet_link_chk_state+0x104>)
 800524a:	f7fc f93d 	bl	80014c8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f004 ffd0 	bl	800a1f4 <netif_set_up>
      netif_set_link_up(netif);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f005 f86b 	bl	800a330 <netif_set_link_up>
}
 800525a:	bf00      	nop
 800525c:	3780      	adds	r7, #128	; 0x80
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	24007780 	.word	0x24007780
 8005268:	240077c0 	.word	0x240077c0

0800526c <__NVIC_SetPriority>:
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	6039      	str	r1, [r7, #0]
 8005276:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800527c:	2b00      	cmp	r3, #0
 800527e:	db0a      	blt.n	8005296 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	b2da      	uxtb	r2, r3
 8005284:	490c      	ldr	r1, [pc, #48]	; (80052b8 <__NVIC_SetPriority+0x4c>)
 8005286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800528a:	0112      	lsls	r2, r2, #4
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	440b      	add	r3, r1
 8005290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005294:	e00a      	b.n	80052ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	b2da      	uxtb	r2, r3
 800529a:	4908      	ldr	r1, [pc, #32]	; (80052bc <__NVIC_SetPriority+0x50>)
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	3b04      	subs	r3, #4
 80052a4:	0112      	lsls	r2, r2, #4
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	440b      	add	r3, r1
 80052aa:	761a      	strb	r2, [r3, #24]
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	e000e100 	.word	0xe000e100
 80052bc:	e000ed00 	.word	0xe000ed00

080052c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80052c4:	4b05      	ldr	r3, [pc, #20]	; (80052dc <SysTick_Handler+0x1c>)
 80052c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80052c8:	f002 fc96 	bl	8007bf8 <xTaskGetSchedulerState>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d001      	beq.n	80052d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80052d2:	f003 fb79 	bl	80089c8 <xPortSysTickHandler>
  }
}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	e000e010 	.word	0xe000e010

080052e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80052e4:	2100      	movs	r1, #0
 80052e6:	f06f 0004 	mvn.w	r0, #4
 80052ea:	f7ff ffbf 	bl	800526c <__NVIC_SetPriority>
#endif
}
 80052ee:	bf00      	nop
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052fa:	f3ef 8305 	mrs	r3, IPSR
 80052fe:	603b      	str	r3, [r7, #0]
  return(result);
 8005300:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005306:	f06f 0305 	mvn.w	r3, #5
 800530a:	607b      	str	r3, [r7, #4]
 800530c:	e00c      	b.n	8005328 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800530e:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <osKernelInitialize+0x44>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d105      	bne.n	8005322 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005316:	4b08      	ldr	r3, [pc, #32]	; (8005338 <osKernelInitialize+0x44>)
 8005318:	2201      	movs	r2, #1
 800531a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800531c:	2300      	movs	r3, #0
 800531e:	607b      	str	r3, [r7, #4]
 8005320:	e002      	b.n	8005328 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005322:	f04f 33ff 	mov.w	r3, #4294967295
 8005326:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005328:	687b      	ldr	r3, [r7, #4]
}
 800532a:	4618      	mov	r0, r3
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	240000c8 	.word	0x240000c8

0800533c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005342:	f3ef 8305 	mrs	r3, IPSR
 8005346:	603b      	str	r3, [r7, #0]
  return(result);
 8005348:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <osKernelStart+0x1a>
    stat = osErrorISR;
 800534e:	f06f 0305 	mvn.w	r3, #5
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	e010      	b.n	8005378 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <osKernelStart+0x48>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d109      	bne.n	8005372 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800535e:	f7ff ffbf 	bl	80052e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <osKernelStart+0x48>)
 8005364:	2202      	movs	r2, #2
 8005366:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005368:	f001 ffc8 	bl	80072fc <vTaskStartScheduler>
      stat = osOK;
 800536c:	2300      	movs	r3, #0
 800536e:	607b      	str	r3, [r7, #4]
 8005370:	e002      	b.n	8005378 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005372:	f04f 33ff 	mov.w	r3, #4294967295
 8005376:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005378:	687b      	ldr	r3, [r7, #4]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	240000c8 	.word	0x240000c8

08005388 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800538e:	f3ef 8305 	mrs	r3, IPSR
 8005392:	603b      	str	r3, [r7, #0]
  return(result);
 8005394:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800539a:	f002 f8db 	bl	8007554 <xTaskGetTickCountFromISR>
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	e002      	b.n	80053a8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80053a2:	f002 f8c7 	bl	8007534 <xTaskGetTickCount>
 80053a6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80053a8:	687b      	ldr	r3, [r7, #4]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b08e      	sub	sp, #56	; 0x38
 80053b6:	af04      	add	r7, sp, #16
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c2:	f3ef 8305 	mrs	r3, IPSR
 80053c6:	617b      	str	r3, [r7, #20]
  return(result);
 80053c8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d17f      	bne.n	80054ce <osThreadNew+0x11c>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d07c      	beq.n	80054ce <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80053d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053da:	2318      	movs	r3, #24
 80053dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d045      	beq.n	800547a <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <osThreadNew+0x4a>
        name = attr->name;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <osThreadNew+0x70>
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	2b38      	cmp	r3, #56	; 0x38
 8005414:	d805      	bhi.n	8005422 <osThreadNew+0x70>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <osThreadNew+0x74>
        return (NULL);
 8005422:	2300      	movs	r3, #0
 8005424:	e054      	b.n	80054d0 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	089b      	lsrs	r3, r3, #2
 8005434:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00e      	beq.n	800545c <osThreadNew+0xaa>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2bbb      	cmp	r3, #187	; 0xbb
 8005444:	d90a      	bls.n	800545c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800544a:	2b00      	cmp	r3, #0
 800544c:	d006      	beq.n	800545c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <osThreadNew+0xaa>
        mem = 1;
 8005456:	2301      	movs	r3, #1
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	e010      	b.n	800547e <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10c      	bne.n	800547e <osThreadNew+0xcc>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d108      	bne.n	800547e <osThreadNew+0xcc>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d104      	bne.n	800547e <osThreadNew+0xcc>
          mem = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	e001      	b.n	800547e <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d110      	bne.n	80054a6 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800548c:	9202      	str	r2, [sp, #8]
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	6a3a      	ldr	r2, [r7, #32]
 8005498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f001 fd42 	bl	8006f24 <xTaskCreateStatic>
 80054a0:	4603      	mov	r3, r0
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	e013      	b.n	80054ce <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d110      	bne.n	80054ce <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	f107 0310 	add.w	r3, r7, #16
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f001 fd8d 	bl	8006fde <xTaskCreate>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d001      	beq.n	80054ce <osThreadNew+0x11c>
            hTask = NULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054ce:	693b      	ldr	r3, [r7, #16]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3728      	adds	r7, #40	; 0x28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054e0:	f3ef 8305 	mrs	r3, IPSR
 80054e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80054e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <osDelay+0x1c>
    stat = osErrorISR;
 80054ec:	f06f 0305 	mvn.w	r3, #5
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	e007      	b.n	8005504 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <osDelay+0x2c>
      vTaskDelay(ticks);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f001 fec8 	bl	8007294 <vTaskDelay>
    }
  }

  return (stat);
 8005504:	68fb      	ldr	r3, [r7, #12]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800550e:	b580      	push	{r7, lr}
 8005510:	b088      	sub	sp, #32
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800551a:	f3ef 8305 	mrs	r3, IPSR
 800551e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005520:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005522:	2b00      	cmp	r3, #0
 8005524:	d174      	bne.n	8005610 <osMutexNew+0x102>
    if (attr != NULL) {
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <osMutexNew+0x26>
      type = attr->attr_bits;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	e001      	b.n	8005538 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <osMutexNew+0x3a>
      rmtx = 1U;
 8005542:	2301      	movs	r3, #1
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e001      	b.n	800554c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d15c      	bne.n	8005610 <osMutexNew+0x102>
      mem = -1;
 8005556:	f04f 33ff 	mov.w	r3, #4294967295
 800555a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d015      	beq.n	800558e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d006      	beq.n	8005578 <osMutexNew+0x6a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2b4f      	cmp	r3, #79	; 0x4f
 8005570:	d902      	bls.n	8005578 <osMutexNew+0x6a>
          mem = 1;
 8005572:	2301      	movs	r3, #1
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	e00c      	b.n	8005592 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d108      	bne.n	8005592 <osMutexNew+0x84>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <osMutexNew+0x84>
            mem = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	e001      	b.n	8005592 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d112      	bne.n	80055be <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	4619      	mov	r1, r3
 80055a4:	2004      	movs	r0, #4
 80055a6:	f000 fd68 	bl	800607a <xQueueCreateMutexStatic>
 80055aa:	61f8      	str	r0, [r7, #28]
 80055ac:	e016      	b.n	80055dc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	4619      	mov	r1, r3
 80055b4:	2001      	movs	r0, #1
 80055b6:	f000 fd60 	bl	800607a <xQueueCreateMutexStatic>
 80055ba:	61f8      	str	r0, [r7, #28]
 80055bc:	e00e      	b.n	80055dc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10b      	bne.n	80055dc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d004      	beq.n	80055d4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80055ca:	2004      	movs	r0, #4
 80055cc:	f000 fd3d 	bl	800604a <xQueueCreateMutex>
 80055d0:	61f8      	str	r0, [r7, #28]
 80055d2:	e003      	b.n	80055dc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80055d4:	2001      	movs	r0, #1
 80055d6:	f000 fd38 	bl	800604a <xQueueCreateMutex>
 80055da:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00c      	beq.n	80055fc <osMutexNew+0xee>
        if (attr != NULL) {
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <osMutexNew+0xe2>
          name = attr->name;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	e001      	b.n	80055f4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80055f4:	68f9      	ldr	r1, [r7, #12]
 80055f6:	69f8      	ldr	r0, [r7, #28]
 80055f8:	f001 fc0c 	bl	8006e14 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d006      	beq.n	8005610 <osMutexNew+0x102>
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005610:	69fb      	ldr	r3, [r7, #28]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800561a:	b580      	push	{r7, lr}
 800561c:	b086      	sub	sp, #24
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005638:	f3ef 8305 	mrs	r3, IPSR
 800563c:	60bb      	str	r3, [r7, #8]
  return(result);
 800563e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005644:	f06f 0305 	mvn.w	r3, #5
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	e02c      	b.n	80056a6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005652:	f06f 0303 	mvn.w	r3, #3
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	e025      	b.n	80056a6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d011      	beq.n	8005684 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	6938      	ldr	r0, [r7, #16]
 8005664:	f000 fd58 	bl	8006118 <xQueueTakeMutexRecursive>
 8005668:	4603      	mov	r3, r0
 800566a:	2b01      	cmp	r3, #1
 800566c:	d01b      	beq.n	80056a6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005674:	f06f 0301 	mvn.w	r3, #1
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	e014      	b.n	80056a6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800567c:	f06f 0302 	mvn.w	r3, #2
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e010      	b.n	80056a6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	6938      	ldr	r0, [r7, #16]
 8005688:	f001 f8ec 	bl	8006864 <xQueueSemaphoreTake>
 800568c:	4603      	mov	r3, r0
 800568e:	2b01      	cmp	r3, #1
 8005690:	d009      	beq.n	80056a6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005698:	f06f 0301 	mvn.w	r3, #1
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	e002      	b.n	80056a6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80056a0:	f06f 0302 	mvn.w	r3, #2
 80056a4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80056a6:	697b      	ldr	r3, [r7, #20]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056cc:	f3ef 8305 	mrs	r3, IPSR
 80056d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80056d2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80056d8:	f06f 0305 	mvn.w	r3, #5
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	e01f      	b.n	8005720 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80056e6:	f06f 0303 	mvn.w	r3, #3
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	e018      	b.n	8005720 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80056f4:	6938      	ldr	r0, [r7, #16]
 80056f6:	f000 fcdb 	bl	80060b0 <xQueueGiveMutexRecursive>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d00f      	beq.n	8005720 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005700:	f06f 0302 	mvn.w	r3, #2
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	e00b      	b.n	8005720 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005708:	2300      	movs	r3, #0
 800570a:	2200      	movs	r2, #0
 800570c:	2100      	movs	r1, #0
 800570e:	6938      	ldr	r0, [r7, #16]
 8005710:	f000 fda2 	bl	8006258 <xQueueGenericSend>
 8005714:	4603      	mov	r3, r0
 8005716:	2b01      	cmp	r3, #1
 8005718:	d002      	beq.n	8005720 <osMutexRelease+0x70>
        stat = osErrorResource;
 800571a:	f06f 0302 	mvn.w	r3, #2
 800571e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005720:	697b      	ldr	r3, [r7, #20]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800572a:	b580      	push	{r7, lr}
 800572c:	b08a      	sub	sp, #40	; 0x28
 800572e:	af02      	add	r7, sp, #8
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800573a:	f3ef 8305 	mrs	r3, IPSR
 800573e:	613b      	str	r3, [r7, #16]
  return(result);
 8005740:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005742:	2b00      	cmp	r3, #0
 8005744:	d175      	bne.n	8005832 <osSemaphoreNew+0x108>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d072      	beq.n	8005832 <osSemaphoreNew+0x108>
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	429a      	cmp	r2, r3
 8005752:	d86e      	bhi.n	8005832 <osSemaphoreNew+0x108>
    mem = -1;
 8005754:	f04f 33ff 	mov.w	r3, #4294967295
 8005758:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d015      	beq.n	800578c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d006      	beq.n	8005776 <osSemaphoreNew+0x4c>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b4f      	cmp	r3, #79	; 0x4f
 800576e:	d902      	bls.n	8005776 <osSemaphoreNew+0x4c>
        mem = 1;
 8005770:	2301      	movs	r3, #1
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	e00c      	b.n	8005790 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d108      	bne.n	8005790 <osSemaphoreNew+0x66>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d104      	bne.n	8005790 <osSemaphoreNew+0x66>
          mem = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	e001      	b.n	8005790 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d04c      	beq.n	8005832 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d128      	bne.n	80057f0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d10a      	bne.n	80057ba <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2203      	movs	r2, #3
 80057aa:	9200      	str	r2, [sp, #0]
 80057ac:	2200      	movs	r2, #0
 80057ae:	2100      	movs	r1, #0
 80057b0:	2001      	movs	r0, #1
 80057b2:	f000 fb5b 	bl	8005e6c <xQueueGenericCreateStatic>
 80057b6:	61f8      	str	r0, [r7, #28]
 80057b8:	e005      	b.n	80057c6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80057ba:	2203      	movs	r2, #3
 80057bc:	2100      	movs	r1, #0
 80057be:	2001      	movs	r0, #1
 80057c0:	f000 fbcc 	bl	8005f5c <xQueueGenericCreate>
 80057c4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d022      	beq.n	8005812 <osSemaphoreNew+0xe8>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01f      	beq.n	8005812 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80057d2:	2300      	movs	r3, #0
 80057d4:	2200      	movs	r2, #0
 80057d6:	2100      	movs	r1, #0
 80057d8:	69f8      	ldr	r0, [r7, #28]
 80057da:	f000 fd3d 	bl	8006258 <xQueueGenericSend>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d016      	beq.n	8005812 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80057e4:	69f8      	ldr	r0, [r7, #28]
 80057e6:	f001 f9c9 	bl	8006b7c <vQueueDelete>
            hSemaphore = NULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
 80057ee:	e010      	b.n	8005812 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d108      	bne.n	8005808 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	461a      	mov	r2, r3
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fcc0 	bl	8006184 <xQueueCreateCountingSemaphoreStatic>
 8005804:	61f8      	str	r0, [r7, #28]
 8005806:	e004      	b.n	8005812 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 fcf1 	bl	80061f2 <xQueueCreateCountingSemaphore>
 8005810:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00c      	beq.n	8005832 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <osSemaphoreNew+0xfc>
          name = attr->name;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	e001      	b.n	800582a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800582a:	6979      	ldr	r1, [r7, #20]
 800582c:	69f8      	ldr	r0, [r7, #28]
 800582e:	f001 faf1 	bl	8006e14 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005832:	69fb      	ldr	r3, [r7, #28]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3720      	adds	r7, #32
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d103      	bne.n	800585c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005854:	f06f 0303 	mvn.w	r3, #3
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e039      	b.n	80058d0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585c:	f3ef 8305 	mrs	r3, IPSR
 8005860:	60fb      	str	r3, [r7, #12]
  return(result);
 8005862:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005864:	2b00      	cmp	r3, #0
 8005866:	d022      	beq.n	80058ae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800586e:	f06f 0303 	mvn.w	r3, #3
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	e02c      	b.n	80058d0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005876:	2300      	movs	r3, #0
 8005878:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800587a:	f107 0308 	add.w	r3, r7, #8
 800587e:	461a      	mov	r2, r3
 8005880:	2100      	movs	r1, #0
 8005882:	6938      	ldr	r0, [r7, #16]
 8005884:	f001 f8fa 	bl	8006a7c <xQueueReceiveFromISR>
 8005888:	4603      	mov	r3, r0
 800588a:	2b01      	cmp	r3, #1
 800588c:	d003      	beq.n	8005896 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800588e:	f06f 0302 	mvn.w	r3, #2
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e01c      	b.n	80058d0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d019      	beq.n	80058d0 <osSemaphoreAcquire+0x94>
 800589c:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <osSemaphoreAcquire+0xa0>)
 800589e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	e010      	b.n	80058d0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6938      	ldr	r0, [r7, #16]
 80058b2:	f000 ffd7 	bl	8006864 <xQueueSemaphoreTake>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d009      	beq.n	80058d0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80058c2:	f06f 0301 	mvn.w	r3, #1
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e002      	b.n	80058d0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80058ca:	f06f 0302 	mvn.w	r3, #2
 80058ce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80058d0:	697b      	ldr	r3, [r7, #20]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d103      	bne.n	80058fe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80058f6:	f06f 0303 	mvn.w	r3, #3
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e02c      	b.n	8005958 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058fe:	f3ef 8305 	mrs	r3, IPSR
 8005902:	60fb      	str	r3, [r7, #12]
  return(result);
 8005904:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005906:	2b00      	cmp	r3, #0
 8005908:	d01a      	beq.n	8005940 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800590a:	2300      	movs	r3, #0
 800590c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800590e:	f107 0308 	add.w	r3, r7, #8
 8005912:	4619      	mov	r1, r3
 8005914:	6938      	ldr	r0, [r7, #16]
 8005916:	f000 fe38 	bl	800658a <xQueueGiveFromISR>
 800591a:	4603      	mov	r3, r0
 800591c:	2b01      	cmp	r3, #1
 800591e:	d003      	beq.n	8005928 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005920:	f06f 0302 	mvn.w	r3, #2
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	e017      	b.n	8005958 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d014      	beq.n	8005958 <osSemaphoreRelease+0x78>
 800592e:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <osSemaphoreRelease+0x84>)
 8005930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	e00b      	b.n	8005958 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005940:	2300      	movs	r3, #0
 8005942:	2200      	movs	r2, #0
 8005944:	2100      	movs	r1, #0
 8005946:	6938      	ldr	r0, [r7, #16]
 8005948:	f000 fc86 	bl	8006258 <xQueueGenericSend>
 800594c:	4603      	mov	r3, r0
 800594e:	2b01      	cmp	r3, #1
 8005950:	d002      	beq.n	8005958 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005952:	f06f 0302 	mvn.w	r3, #2
 8005956:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005958:	697b      	ldr	r3, [r7, #20]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	; 0x28
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005978:	f3ef 8305 	mrs	r3, IPSR
 800597c:	613b      	str	r3, [r7, #16]
  return(result);
 800597e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005980:	2b00      	cmp	r3, #0
 8005982:	d15f      	bne.n	8005a44 <osMessageQueueNew+0xdc>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d05c      	beq.n	8005a44 <osMessageQueueNew+0xdc>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d059      	beq.n	8005a44 <osMessageQueueNew+0xdc>
    mem = -1;
 8005990:	f04f 33ff 	mov.w	r3, #4294967295
 8005994:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d029      	beq.n	80059f0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d012      	beq.n	80059ca <osMessageQueueNew+0x62>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b4f      	cmp	r3, #79	; 0x4f
 80059aa:	d90e      	bls.n	80059ca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695a      	ldr	r2, [r3, #20]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d302      	bcc.n	80059ca <osMessageQueueNew+0x62>
        mem = 1;
 80059c4:	2301      	movs	r3, #1
 80059c6:	61bb      	str	r3, [r7, #24]
 80059c8:	e014      	b.n	80059f4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d110      	bne.n	80059f4 <osMessageQueueNew+0x8c>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10c      	bne.n	80059f4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d108      	bne.n	80059f4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d104      	bne.n	80059f4 <osMessageQueueNew+0x8c>
          mem = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	e001      	b.n	80059f4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d10b      	bne.n	8005a12 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2100      	movs	r1, #0
 8005a04:	9100      	str	r1, [sp, #0]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 fa2f 	bl	8005e6c <xQueueGenericCreateStatic>
 8005a0e:	61f8      	str	r0, [r7, #28]
 8005a10:	e008      	b.n	8005a24 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d105      	bne.n	8005a24 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005a18:	2200      	movs	r2, #0
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fa9d 	bl	8005f5c <xQueueGenericCreate>
 8005a22:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00c      	beq.n	8005a44 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e001      	b.n	8005a3c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005a3c:	6979      	ldr	r1, [r7, #20]
 8005a3e:	69f8      	ldr	r0, [r7, #28]
 8005a40:	f001 f9e8 	bl	8006e14 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005a44:	69fb      	ldr	r3, [r7, #28]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a68:	f3ef 8305 	mrs	r3, IPSR
 8005a6c:	617b      	str	r3, [r7, #20]
  return(result);
 8005a6e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d028      	beq.n	8005ac6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <osMessageQueuePut+0x36>
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <osMessageQueuePut+0x36>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005a86:	f06f 0303 	mvn.w	r3, #3
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	e038      	b.n	8005b00 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005a92:	f107 0210 	add.w	r2, r7, #16
 8005a96:	2300      	movs	r3, #0
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	69b8      	ldr	r0, [r7, #24]
 8005a9c:	f000 fcda 	bl	8006454 <xQueueGenericSendFromISR>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d003      	beq.n	8005aae <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005aa6:	f06f 0302 	mvn.w	r3, #2
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	e028      	b.n	8005b00 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d025      	beq.n	8005b00 <osMessageQueuePut+0xb0>
 8005ab4:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <osMessageQueuePut+0xbc>)
 8005ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	e01c      	b.n	8005b00 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <osMessageQueuePut+0x82>
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d103      	bne.n	8005ada <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005ad2:	f06f 0303 	mvn.w	r3, #3
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	e012      	b.n	8005b00 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005ada:	2300      	movs	r3, #0
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	69b8      	ldr	r0, [r7, #24]
 8005ae2:	f000 fbb9 	bl	8006258 <xQueueGenericSend>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d009      	beq.n	8005b00 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005af2:	f06f 0301 	mvn.w	r3, #1
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	e002      	b.n	8005b00 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005afa:	f06f 0302 	mvn.w	r3, #2
 8005afe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005b00:	69fb      	ldr	r3, [r7, #28]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	e000ed04 	.word	0xe000ed04

08005b10 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b26:	f3ef 8305 	mrs	r3, IPSR
 8005b2a:	617b      	str	r3, [r7, #20]
  return(result);
 8005b2c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d028      	beq.n	8005b84 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <osMessageQueueGet+0x34>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <osMessageQueueGet+0x34>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005b44:	f06f 0303 	mvn.w	r3, #3
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	e037      	b.n	8005bbc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005b50:	f107 0310 	add.w	r3, r7, #16
 8005b54:	461a      	mov	r2, r3
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	69b8      	ldr	r0, [r7, #24]
 8005b5a:	f000 ff8f 	bl	8006a7c <xQueueReceiveFromISR>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d003      	beq.n	8005b6c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005b64:	f06f 0302 	mvn.w	r3, #2
 8005b68:	61fb      	str	r3, [r7, #28]
 8005b6a:	e027      	b.n	8005bbc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d024      	beq.n	8005bbc <osMessageQueueGet+0xac>
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <osMessageQueueGet+0xb8>)
 8005b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	e01b      	b.n	8005bbc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <osMessageQueueGet+0x80>
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005b90:	f06f 0303 	mvn.w	r3, #3
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	e011      	b.n	8005bbc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	69b8      	ldr	r0, [r7, #24]
 8005b9e:	f000 fd81 	bl	80066a4 <xQueueReceive>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d009      	beq.n	8005bbc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005bae:	f06f 0301 	mvn.w	r3, #1
 8005bb2:	61fb      	str	r3, [r7, #28]
 8005bb4:	e002      	b.n	8005bbc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005bb6:	f06f 0302 	mvn.w	r3, #2
 8005bba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005bbc:	69fb      	ldr	r3, [r7, #28]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4a07      	ldr	r2, [pc, #28]	; (8005bf8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005bdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4a06      	ldr	r2, [pc, #24]	; (8005bfc <vApplicationGetIdleTaskMemory+0x30>)
 8005be2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bea:	601a      	str	r2, [r3, #0]
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	240000cc 	.word	0x240000cc
 8005bfc:	24000188 	.word	0x24000188

08005c00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4a07      	ldr	r2, [pc, #28]	; (8005c2c <vApplicationGetTimerTaskMemory+0x2c>)
 8005c10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4a06      	ldr	r2, [pc, #24]	; (8005c30 <vApplicationGetTimerTaskMemory+0x30>)
 8005c16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c1e:	601a      	str	r2, [r3, #0]
}
 8005c20:	bf00      	nop
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	24000988 	.word	0x24000988
 8005c30:	24000a44 	.word	0x24000a44

08005c34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f103 0208 	add.w	r2, r3, #8
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f103 0208 	add.w	r2, r3, #8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f103 0208 	add.w	r2, r3, #8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	601a      	str	r2, [r3, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d103      	bne.n	8005cf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e00c      	b.n	8005d10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e002      	b.n	8005d04 <vListInsert+0x2e>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d2f6      	bcs.n	8005cfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	601a      	str	r2, [r3, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6892      	ldr	r2, [r2, #8]
 8005d5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6852      	ldr	r2, [r2, #4]
 8005d68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d103      	bne.n	8005d7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	1e5a      	subs	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dc6:	f002 fd6d 	bl	80088a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	68f9      	ldr	r1, [r7, #12]
 8005dd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dd6:	fb01 f303 	mul.w	r3, r1, r3
 8005dda:	441a      	add	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	3b01      	subs	r3, #1
 8005df8:	68f9      	ldr	r1, [r7, #12]
 8005dfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	441a      	add	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	22ff      	movs	r2, #255	; 0xff
 8005e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	22ff      	movs	r2, #255	; 0xff
 8005e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d114      	bne.n	8005e46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01a      	beq.n	8005e5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3310      	adds	r3, #16
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f001 fd13 	bl	8007854 <xTaskRemoveFromEventList>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d012      	beq.n	8005e5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e34:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <xQueueGenericReset+0xcc>)
 8005e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	e009      	b.n	8005e5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3310      	adds	r3, #16
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fef2 	bl	8005c34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3324      	adds	r3, #36	; 0x24
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff feed 	bl	8005c34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e5a:	f002 fd53 	bl	8008904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e5e:	2301      	movs	r3, #1
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08e      	sub	sp, #56	; 0x38
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <xQueueGenericCreateStatic+0x52>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <xQueueGenericCreateStatic+0x56>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <xQueueGenericCreateStatic+0x58>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	623b      	str	r3, [r7, #32]
}
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <xQueueGenericCreateStatic+0x7e>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <xQueueGenericCreateStatic+0x82>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <xQueueGenericCreateStatic+0x84>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	61fb      	str	r3, [r7, #28]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f0a:	2350      	movs	r3, #80	; 0x50
 8005f0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b50      	cmp	r3, #80	; 0x50
 8005f12:	d00a      	beq.n	8005f2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	61bb      	str	r3, [r7, #24]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00d      	beq.n	8005f52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4613      	mov	r3, r2
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 f83f 	bl	8005fd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3730      	adds	r7, #48	; 0x30
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	; 0x28
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	613b      	str	r3, [r7, #16]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	3350      	adds	r3, #80	; 0x50
 8005f94:	4618      	mov	r0, r3
 8005f96:	f002 fda7 	bl	8008ae8 <pvPortMalloc>
 8005f9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d011      	beq.n	8005fc6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	3350      	adds	r3, #80	; 0x50
 8005faa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fb4:	79fa      	ldrb	r2, [r7, #7]
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 f805 	bl	8005fd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
	}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d103      	bne.n	8005fec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e002      	b.n	8005ff2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ffe:	2101      	movs	r1, #1
 8006000:	69b8      	ldr	r0, [r7, #24]
 8006002:	f7ff fecb 	bl	8005d9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	78fa      	ldrb	r2, [r7, #3]
 800600a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800600e:	bf00      	nop
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00e      	beq.n	8006042 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006036:	2300      	movs	r3, #0
 8006038:	2200      	movs	r2, #0
 800603a:	2100      	movs	r1, #0
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f90b 	bl	8006258 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800604a:	b580      	push	{r7, lr}
 800604c:	b086      	sub	sp, #24
 800604e:	af00      	add	r7, sp, #0
 8006050:	4603      	mov	r3, r0
 8006052:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006054:	2301      	movs	r3, #1
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	461a      	mov	r2, r3
 8006060:	6939      	ldr	r1, [r7, #16]
 8006062:	6978      	ldr	r0, [r7, #20]
 8006064:	f7ff ff7a 	bl	8005f5c <xQueueGenericCreate>
 8006068:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff ffd3 	bl	8006016 <prvInitialiseMutex>

		return xNewQueue;
 8006070:	68fb      	ldr	r3, [r7, #12]
	}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800607a:	b580      	push	{r7, lr}
 800607c:	b088      	sub	sp, #32
 800607e:	af02      	add	r7, sp, #8
 8006080:	4603      	mov	r3, r0
 8006082:	6039      	str	r1, [r7, #0]
 8006084:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006086:	2301      	movs	r3, #1
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	2300      	movs	r3, #0
 800608c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2200      	movs	r2, #0
 8006096:	6939      	ldr	r1, [r7, #16]
 8006098:	6978      	ldr	r0, [r7, #20]
 800609a:	f7ff fee7 	bl	8005e6c <xQueueGenericCreateStatic>
 800609e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7ff ffb8 	bl	8006016 <prvInitialiseMutex>

		return xNewQueue;
 80060a6:	68fb      	ldr	r3, [r7, #12]
	}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10a      	bne.n	80060d8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	60fb      	str	r3, [r7, #12]
}
 80060d4:	bf00      	nop
 80060d6:	e7fe      	b.n	80060d6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	689c      	ldr	r4, [r3, #8]
 80060dc:	f001 fd7c 	bl	8007bd8 <xTaskGetCurrentTaskHandle>
 80060e0:	4603      	mov	r3, r0
 80060e2:	429c      	cmp	r4, r3
 80060e4:	d111      	bne.n	800610a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	1e5a      	subs	r2, r3, #1
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d105      	bne.n	8006104 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80060f8:	2300      	movs	r3, #0
 80060fa:	2200      	movs	r2, #0
 80060fc:	2100      	movs	r1, #0
 80060fe:	6938      	ldr	r0, [r7, #16]
 8006100:	f000 f8aa 	bl	8006258 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006104:	2301      	movs	r3, #1
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	e001      	b.n	800610e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800610e:	697b      	ldr	r3, [r7, #20]
	}
 8006110:	4618      	mov	r0, r3
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	bd90      	pop	{r4, r7, pc}

08006118 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	60fb      	str	r3, [r7, #12]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	689c      	ldr	r4, [r3, #8]
 8006146:	f001 fd47 	bl	8007bd8 <xTaskGetCurrentTaskHandle>
 800614a:	4603      	mov	r3, r0
 800614c:	429c      	cmp	r4, r3
 800614e:	d107      	bne.n	8006160 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800615a:	2301      	movs	r3, #1
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	e00c      	b.n	800617a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	6938      	ldr	r0, [r7, #16]
 8006164:	f000 fb7e 	bl	8006864 <xQueueSemaphoreTake>
 8006168:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d004      	beq.n	800617a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800617a:	697b      	ldr	r3, [r7, #20]
	}
 800617c:	4618      	mov	r0, r3
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	bd90      	pop	{r4, r7, pc}

08006184 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08a      	sub	sp, #40	; 0x28
 8006188:	af02      	add	r7, sp, #8
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10a      	bne.n	80061ac <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	61bb      	str	r3, [r7, #24]
}
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d90a      	bls.n	80061ca <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	617b      	str	r3, [r7, #20]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80061ca:	2302      	movs	r3, #2
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	2100      	movs	r1, #0
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff fe49 	bl	8005e6c <xQueueGenericCreateStatic>
 80061da:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80061e8:	69fb      	ldr	r3, [r7, #28]
	}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3720      	adds	r7, #32
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b086      	sub	sp, #24
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	613b      	str	r3, [r7, #16]
}
 8006214:	bf00      	nop
 8006216:	e7fe      	b.n	8006216 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	429a      	cmp	r2, r3
 800621e:	d90a      	bls.n	8006236 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006236:	2202      	movs	r2, #2
 8006238:	2100      	movs	r1, #0
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff fe8e 	bl	8005f5c <xQueueGenericCreate>
 8006240:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800624e:	697b      	ldr	r3, [r7, #20]
	}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08e      	sub	sp, #56	; 0x38
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006266:	2300      	movs	r3, #0
 8006268:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10a      	bne.n	800628a <xQueueGenericSend+0x32>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006286:	bf00      	nop
 8006288:	e7fe      	b.n	8006288 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d103      	bne.n	8006298 <xQueueGenericSend+0x40>
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <xQueueGenericSend+0x44>
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <xQueueGenericSend+0x46>
 800629c:	2300      	movs	r3, #0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <xQueueGenericSend+0x60>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d103      	bne.n	80062c6 <xQueueGenericSend+0x6e>
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <xQueueGenericSend+0x72>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <xQueueGenericSend+0x74>
 80062ca:	2300      	movs	r3, #0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	623b      	str	r3, [r7, #32]
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062e6:	f001 fc87 	bl	8007bf8 <xTaskGetSchedulerState>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d102      	bne.n	80062f6 <xQueueGenericSend+0x9e>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <xQueueGenericSend+0xa2>
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <xQueueGenericSend+0xa4>
 80062fa:	2300      	movs	r3, #0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <xQueueGenericSend+0xbe>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	61fb      	str	r3, [r7, #28]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006316:	f002 fac5 	bl	80088a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006322:	429a      	cmp	r2, r3
 8006324:	d302      	bcc.n	800632c <xQueueGenericSend+0xd4>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d129      	bne.n	8006380 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006332:	f000 fc5e 	bl	8006bf2 <prvCopyDataToQueue>
 8006336:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d010      	beq.n	8006362 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	3324      	adds	r3, #36	; 0x24
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fa85 	bl	8007854 <xTaskRemoveFromEventList>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d013      	beq.n	8006378 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006350:	4b3f      	ldr	r3, [pc, #252]	; (8006450 <xQueueGenericSend+0x1f8>)
 8006352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	e00a      	b.n	8006378 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006368:	4b39      	ldr	r3, [pc, #228]	; (8006450 <xQueueGenericSend+0x1f8>)
 800636a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006378:	f002 fac4 	bl	8008904 <vPortExitCritical>
				return pdPASS;
 800637c:	2301      	movs	r3, #1
 800637e:	e063      	b.n	8006448 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d103      	bne.n	800638e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006386:	f002 fabd 	bl	8008904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800638a:	2300      	movs	r3, #0
 800638c:	e05c      	b.n	8006448 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800638e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006390:	2b00      	cmp	r3, #0
 8006392:	d106      	bne.n	80063a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006394:	f107 0314 	add.w	r3, r7, #20
 8006398:	4618      	mov	r0, r3
 800639a:	f001 fabf 	bl	800791c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800639e:	2301      	movs	r3, #1
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063a2:	f002 faaf 	bl	8008904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063a6:	f001 f819 	bl	80073dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063aa:	f002 fa7b 	bl	80088a4 <vPortEnterCritical>
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063b4:	b25b      	sxtb	r3, r3
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ba:	d103      	bne.n	80063c4 <xQueueGenericSend+0x16c>
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ca:	b25b      	sxtb	r3, r3
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d103      	bne.n	80063da <xQueueGenericSend+0x182>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063da:	f002 fa93 	bl	8008904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063de:	1d3a      	adds	r2, r7, #4
 80063e0:	f107 0314 	add.w	r3, r7, #20
 80063e4:	4611      	mov	r1, r2
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 faae 	bl	8007948 <xTaskCheckForTimeOut>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d124      	bne.n	800643c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063f4:	f000 fcf5 	bl	8006de2 <prvIsQueueFull>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d018      	beq.n	8006430 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	3310      	adds	r3, #16
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	4611      	mov	r1, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f001 f9d4 	bl	80077b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800640c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800640e:	f000 fc80 	bl	8006d12 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006412:	f000 fff1 	bl	80073f8 <xTaskResumeAll>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	f47f af7c 	bne.w	8006316 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <xQueueGenericSend+0x1f8>)
 8006420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	e772      	b.n	8006316 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006432:	f000 fc6e 	bl	8006d12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006436:	f000 ffdf 	bl	80073f8 <xTaskResumeAll>
 800643a:	e76c      	b.n	8006316 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800643c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800643e:	f000 fc68 	bl	8006d12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006442:	f000 ffd9 	bl	80073f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006446:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006448:	4618      	mov	r0, r3
 800644a:	3738      	adds	r7, #56	; 0x38
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	e000ed04 	.word	0xe000ed04

08006454 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b090      	sub	sp, #64	; 0x40
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d103      	bne.n	8006490 <xQueueGenericSendFromISR+0x3c>
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <xQueueGenericSendFromISR+0x40>
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <xQueueGenericSendFromISR+0x42>
 8006494:	2300      	movs	r3, #0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d103      	bne.n	80064be <xQueueGenericSendFromISR+0x6a>
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <xQueueGenericSendFromISR+0x6e>
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <xQueueGenericSendFromISR+0x70>
 80064c2:	2300      	movs	r3, #0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	623b      	str	r3, [r7, #32]
}
 80064da:	bf00      	nop
 80064dc:	e7fe      	b.n	80064dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064de:	f002 fac3 	bl	8008a68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064e2:	f3ef 8211 	mrs	r2, BASEPRI
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	61fa      	str	r2, [r7, #28]
 80064f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006506:	429a      	cmp	r2, r3
 8006508:	d302      	bcc.n	8006510 <xQueueGenericSendFromISR+0xbc>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d12f      	bne.n	8006570 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006526:	f000 fb64 	bl	8006bf2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800652a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006532:	d112      	bne.n	800655a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	2b00      	cmp	r3, #0
 800653a:	d016      	beq.n	800656a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653e:	3324      	adds	r3, #36	; 0x24
 8006540:	4618      	mov	r0, r3
 8006542:	f001 f987 	bl	8007854 <xTaskRemoveFromEventList>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00e      	beq.n	800656a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	e007      	b.n	800656a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800655a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800655e:	3301      	adds	r3, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	b25a      	sxtb	r2, r3
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800656a:	2301      	movs	r3, #1
 800656c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800656e:	e001      	b.n	8006574 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006570:	2300      	movs	r3, #0
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006576:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800657e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006582:	4618      	mov	r0, r3
 8006584:	3740      	adds	r7, #64	; 0x40
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b08e      	sub	sp, #56	; 0x38
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	623b      	str	r3, [r7, #32]
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	61fb      	str	r3, [r7, #28]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <xQueueGiveFromISR+0x58>
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <xQueueGiveFromISR+0x5c>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <xQueueGiveFromISR+0x5e>
 80065e6:	2300      	movs	r3, #0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10a      	bne.n	8006602 <xQueueGiveFromISR+0x78>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	61bb      	str	r3, [r7, #24]
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006602:	f002 fa31 	bl	8008a68 <vPortValidateInterruptPriority>
	__asm volatile
 8006606:	f3ef 8211 	mrs	r2, BASEPRI
 800660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	617a      	str	r2, [r7, #20]
 800661c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800661e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006620:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800662e:	429a      	cmp	r2, r3
 8006630:	d22b      	bcs.n	800668a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006644:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664c:	d112      	bne.n	8006674 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	2b00      	cmp	r3, #0
 8006654:	d016      	beq.n	8006684 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	3324      	adds	r3, #36	; 0x24
 800665a:	4618      	mov	r0, r3
 800665c:	f001 f8fa 	bl	8007854 <xTaskRemoveFromEventList>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00e      	beq.n	8006684 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2201      	movs	r2, #1
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e007      	b.n	8006684 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006678:	3301      	adds	r3, #1
 800667a:	b2db      	uxtb	r3, r3
 800667c:	b25a      	sxtb	r2, r3
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006684:	2301      	movs	r3, #1
 8006686:	637b      	str	r3, [r7, #52]	; 0x34
 8006688:	e001      	b.n	800668e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800668a:	2300      	movs	r3, #0
 800668c:	637b      	str	r3, [r7, #52]	; 0x34
 800668e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006690:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f383 8811 	msr	BASEPRI, r3
}
 8006698:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800669c:	4618      	mov	r0, r3
 800669e:	3738      	adds	r7, #56	; 0x38
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08c      	sub	sp, #48	; 0x30
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066b0:	2300      	movs	r3, #0
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10a      	bne.n	80066d4 <xQueueReceive+0x30>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	623b      	str	r3, [r7, #32]
}
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d103      	bne.n	80066e2 <xQueueReceive+0x3e>
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <xQueueReceive+0x42>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <xQueueReceive+0x44>
 80066e6:	2300      	movs	r3, #0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <xQueueReceive+0x5e>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	61fb      	str	r3, [r7, #28]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006702:	f001 fa79 	bl	8007bf8 <xTaskGetSchedulerState>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d102      	bne.n	8006712 <xQueueReceive+0x6e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <xQueueReceive+0x72>
 8006712:	2301      	movs	r3, #1
 8006714:	e000      	b.n	8006718 <xQueueReceive+0x74>
 8006716:	2300      	movs	r3, #0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <xQueueReceive+0x8e>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	61bb      	str	r3, [r7, #24]
}
 800672e:	bf00      	nop
 8006730:	e7fe      	b.n	8006730 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006732:	f002 f8b7 	bl	80088a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01f      	beq.n	8006782 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006742:	68b9      	ldr	r1, [r7, #8]
 8006744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006746:	f000 fabe 	bl	8006cc6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	1e5a      	subs	r2, r3, #1
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00f      	beq.n	800677a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	3310      	adds	r3, #16
 800675e:	4618      	mov	r0, r3
 8006760:	f001 f878 	bl	8007854 <xTaskRemoveFromEventList>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800676a:	4b3d      	ldr	r3, [pc, #244]	; (8006860 <xQueueReceive+0x1bc>)
 800676c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800677a:	f002 f8c3 	bl	8008904 <vPortExitCritical>
				return pdPASS;
 800677e:	2301      	movs	r3, #1
 8006780:	e069      	b.n	8006856 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d103      	bne.n	8006790 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006788:	f002 f8bc 	bl	8008904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800678c:	2300      	movs	r3, #0
 800678e:	e062      	b.n	8006856 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d106      	bne.n	80067a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006796:	f107 0310 	add.w	r3, r7, #16
 800679a:	4618      	mov	r0, r3
 800679c:	f001 f8be 	bl	800791c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067a0:	2301      	movs	r3, #1
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067a4:	f002 f8ae 	bl	8008904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067a8:	f000 fe18 	bl	80073dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ac:	f002 f87a 	bl	80088a4 <vPortEnterCritical>
 80067b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b6:	b25b      	sxtb	r3, r3
 80067b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067bc:	d103      	bne.n	80067c6 <xQueueReceive+0x122>
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067cc:	b25b      	sxtb	r3, r3
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d2:	d103      	bne.n	80067dc <xQueueReceive+0x138>
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067dc:	f002 f892 	bl	8008904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067e0:	1d3a      	adds	r2, r7, #4
 80067e2:	f107 0310 	add.w	r3, r7, #16
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f001 f8ad 	bl	8007948 <xTaskCheckForTimeOut>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d123      	bne.n	800683c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f6:	f000 fade 	bl	8006db6 <prvIsQueueEmpty>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d017      	beq.n	8006830 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	3324      	adds	r3, #36	; 0x24
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	4611      	mov	r1, r2
 8006808:	4618      	mov	r0, r3
 800680a:	f000 ffd3 	bl	80077b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800680e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006810:	f000 fa7f 	bl	8006d12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006814:	f000 fdf0 	bl	80073f8 <xTaskResumeAll>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d189      	bne.n	8006732 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800681e:	4b10      	ldr	r3, [pc, #64]	; (8006860 <xQueueReceive+0x1bc>)
 8006820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	e780      	b.n	8006732 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006832:	f000 fa6e 	bl	8006d12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006836:	f000 fddf 	bl	80073f8 <xTaskResumeAll>
 800683a:	e77a      	b.n	8006732 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800683c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800683e:	f000 fa68 	bl	8006d12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006842:	f000 fdd9 	bl	80073f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006848:	f000 fab5 	bl	8006db6 <prvIsQueueEmpty>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	f43f af6f 	beq.w	8006732 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006854:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006856:	4618      	mov	r0, r3
 8006858:	3730      	adds	r7, #48	; 0x30
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08e      	sub	sp, #56	; 0x38
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800686e:	2300      	movs	r3, #0
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006876:	2300      	movs	r3, #0
 8006878:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	623b      	str	r3, [r7, #32]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	61fb      	str	r3, [r7, #28]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068b4:	f001 f9a0 	bl	8007bf8 <xTaskGetSchedulerState>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <xQueueSemaphoreTake+0x60>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <xQueueSemaphoreTake+0x64>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <xQueueSemaphoreTake+0x66>
 80068c8:	2300      	movs	r3, #0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	61bb      	str	r3, [r7, #24]
}
 80068e0:	bf00      	nop
 80068e2:	e7fe      	b.n	80068e2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068e4:	f001 ffde 	bl	80088a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d024      	beq.n	800693e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80068f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f6:	1e5a      	subs	r2, r3, #1
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d104      	bne.n	800690e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006904:	f001 faee 	bl	8007ee4 <pvTaskIncrementMutexHeldCount>
 8006908:	4602      	mov	r2, r0
 800690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00f      	beq.n	8006936 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	3310      	adds	r3, #16
 800691a:	4618      	mov	r0, r3
 800691c:	f000 ff9a 	bl	8007854 <xTaskRemoveFromEventList>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d007      	beq.n	8006936 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006926:	4b54      	ldr	r3, [pc, #336]	; (8006a78 <xQueueSemaphoreTake+0x214>)
 8006928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006936:	f001 ffe5 	bl	8008904 <vPortExitCritical>
				return pdPASS;
 800693a:	2301      	movs	r3, #1
 800693c:	e097      	b.n	8006a6e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d111      	bne.n	8006968 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	617b      	str	r3, [r7, #20]
}
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006960:	f001 ffd0 	bl	8008904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006964:	2300      	movs	r3, #0
 8006966:	e082      	b.n	8006a6e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800696e:	f107 030c 	add.w	r3, r7, #12
 8006972:	4618      	mov	r0, r3
 8006974:	f000 ffd2 	bl	800791c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006978:	2301      	movs	r3, #1
 800697a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800697c:	f001 ffc2 	bl	8008904 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006980:	f000 fd2c 	bl	80073dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006984:	f001 ff8e 	bl	80088a4 <vPortEnterCritical>
 8006988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800698e:	b25b      	sxtb	r3, r3
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d103      	bne.n	800699e <xQueueSemaphoreTake+0x13a>
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a4:	b25b      	sxtb	r3, r3
 80069a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069aa:	d103      	bne.n	80069b4 <xQueueSemaphoreTake+0x150>
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b4:	f001 ffa6 	bl	8008904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069b8:	463a      	mov	r2, r7
 80069ba:	f107 030c 	add.w	r3, r7, #12
 80069be:	4611      	mov	r1, r2
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 ffc1 	bl	8007948 <xTaskCheckForTimeOut>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d132      	bne.n	8006a32 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069ce:	f000 f9f2 	bl	8006db6 <prvIsQueueEmpty>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d026      	beq.n	8006a26 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80069e0:	f001 ff60 	bl	80088a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 f923 	bl	8007c34 <xTaskPriorityInherit>
 80069ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80069f0:	f001 ff88 	bl	8008904 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f6:	3324      	adds	r3, #36	; 0x24
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	4611      	mov	r1, r2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 fed9 	bl	80077b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a04:	f000 f985 	bl	8006d12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a08:	f000 fcf6 	bl	80073f8 <xTaskResumeAll>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f47f af68 	bne.w	80068e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006a14:	4b18      	ldr	r3, [pc, #96]	; (8006a78 <xQueueSemaphoreTake+0x214>)
 8006a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	e75e      	b.n	80068e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a28:	f000 f973 	bl	8006d12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a2c:	f000 fce4 	bl	80073f8 <xTaskResumeAll>
 8006a30:	e758      	b.n	80068e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a34:	f000 f96d 	bl	8006d12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a38:	f000 fcde 	bl	80073f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a3e:	f000 f9ba 	bl	8006db6 <prvIsQueueEmpty>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f43f af4d 	beq.w	80068e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00d      	beq.n	8006a6c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006a50:	f001 ff28 	bl	80088a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a56:	f000 f8b4 	bl	8006bc2 <prvGetDisinheritPriorityAfterTimeout>
 8006a5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a62:	4618      	mov	r0, r3
 8006a64:	f001 f9bc 	bl	8007de0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a68:	f001 ff4c 	bl	8008904 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3738      	adds	r7, #56	; 0x38
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08e      	sub	sp, #56	; 0x38
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	623b      	str	r3, [r7, #32]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d103      	bne.n	8006ab6 <xQueueReceiveFromISR+0x3a>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <xQueueReceiveFromISR+0x3e>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <xQueueReceiveFromISR+0x40>
 8006aba:	2300      	movs	r3, #0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	61fb      	str	r3, [r7, #28]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ad6:	f001 ffc7 	bl	8008a68 <vPortValidateInterruptPriority>
	__asm volatile
 8006ada:	f3ef 8211 	mrs	r2, BASEPRI
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	61ba      	str	r2, [r7, #24]
 8006af0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006af2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d02f      	beq.n	8006b62 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b10:	f000 f8d9 	bl	8006cc6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	1e5a      	subs	r2, r3, #1
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006b1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b24:	d112      	bne.n	8006b4c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d016      	beq.n	8006b5c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	3310      	adds	r3, #16
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fe8e 	bl	8007854 <xTaskRemoveFromEventList>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00e      	beq.n	8006b5c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e007      	b.n	8006b5c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b50:	3301      	adds	r3, #1
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	b25a      	sxtb	r2, r3
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b60:	e001      	b.n	8006b66 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f383 8811 	msr	BASEPRI, r3
}
 8006b70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3738      	adds	r7, #56	; 0x38
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <vQueueDelete+0x28>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	60bb      	str	r3, [r7, #8]
}
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 f95f 	bl	8006e68 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f002 f863 	bl	8008c80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d006      	beq.n	8006be0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	e001      	b.n	8006be4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006be4:	68fb      	ldr	r3, [r7, #12]
	}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b086      	sub	sp, #24
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10d      	bne.n	8006c2c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d14d      	bne.n	8006cb4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 f871 	bl	8007d04 <xTaskPriorityDisinherit>
 8006c22:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	609a      	str	r2, [r3, #8]
 8006c2a:	e043      	b.n	8006cb4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d119      	bne.n	8006c66 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6858      	ldr	r0, [r3, #4]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	f00c fbbe 	bl	80133be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	441a      	add	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d32b      	bcc.n	8006cb4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	605a      	str	r2, [r3, #4]
 8006c64:	e026      	b.n	8006cb4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68d8      	ldr	r0, [r3, #12]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	f00c fba4 	bl	80133be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	425b      	negs	r3, r3
 8006c80:	441a      	add	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d207      	bcs.n	8006ca2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	689a      	ldr	r2, [r3, #8]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	425b      	negs	r3, r3
 8006c9c:	441a      	add	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d105      	bne.n	8006cb4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006cbc:	697b      	ldr	r3, [r7, #20]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d018      	beq.n	8006d0a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	441a      	add	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d303      	bcc.n	8006cfa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68d9      	ldr	r1, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	461a      	mov	r2, r3
 8006d04:	6838      	ldr	r0, [r7, #0]
 8006d06:	f00c fb5a 	bl	80133be <memcpy>
	}
}
 8006d0a:	bf00      	nop
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d1a:	f001 fdc3 	bl	80088a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d24:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d26:	e011      	b.n	8006d4c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d012      	beq.n	8006d56 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3324      	adds	r3, #36	; 0x24
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fd8d 	bl	8007854 <xTaskRemoveFromEventList>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d40:	f000 fe64 	bl	8007a0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	dce9      	bgt.n	8006d28 <prvUnlockQueue+0x16>
 8006d54:	e000      	b.n	8006d58 <prvUnlockQueue+0x46>
					break;
 8006d56:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	22ff      	movs	r2, #255	; 0xff
 8006d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d60:	f001 fdd0 	bl	8008904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d64:	f001 fd9e 	bl	80088a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d6e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d70:	e011      	b.n	8006d96 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d012      	beq.n	8006da0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3310      	adds	r3, #16
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fd68 	bl	8007854 <xTaskRemoveFromEventList>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d8a:	f000 fe3f 	bl	8007a0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dce9      	bgt.n	8006d72 <prvUnlockQueue+0x60>
 8006d9e:	e000      	b.n	8006da2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006da0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	22ff      	movs	r2, #255	; 0xff
 8006da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006daa:	f001 fdab 	bl	8008904 <vPortExitCritical>
}
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006dbe:	f001 fd71 	bl	80088a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d102      	bne.n	8006dd0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	e001      	b.n	8006dd4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dd4:	f001 fd96 	bl	8008904 <vPortExitCritical>

	return xReturn;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006dea:	f001 fd5b 	bl	80088a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d102      	bne.n	8006e00 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	e001      	b.n	8006e04 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e04:	f001 fd7e 	bl	8008904 <vPortExitCritical>

	return xReturn;
 8006e08:	68fb      	ldr	r3, [r7, #12]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	e014      	b.n	8006e4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e24:	4a0f      	ldr	r2, [pc, #60]	; (8006e64 <vQueueAddToRegistry+0x50>)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10b      	bne.n	8006e48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e30:	490c      	ldr	r1, [pc, #48]	; (8006e64 <vQueueAddToRegistry+0x50>)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e3a:	4a0a      	ldr	r2, [pc, #40]	; (8006e64 <vQueueAddToRegistry+0x50>)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4413      	add	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e46:	e006      	b.n	8006e56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b07      	cmp	r3, #7
 8006e52:	d9e7      	bls.n	8006e24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	240078a8 	.word	0x240078a8

08006e68 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	e016      	b.n	8006ea4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006e76:	4a10      	ldr	r2, [pc, #64]	; (8006eb8 <vQueueUnregisterQueue+0x50>)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	4413      	add	r3, r2
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d10b      	bne.n	8006e9e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006e86:	4a0c      	ldr	r2, [pc, #48]	; (8006eb8 <vQueueUnregisterQueue+0x50>)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006e90:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <vQueueUnregisterQueue+0x50>)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	00db      	lsls	r3, r3, #3
 8006e96:	4413      	add	r3, r2
 8006e98:	2200      	movs	r2, #0
 8006e9a:	605a      	str	r2, [r3, #4]
				break;
 8006e9c:	e006      	b.n	8006eac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b07      	cmp	r3, #7
 8006ea8:	d9e5      	bls.n	8006e76 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006eaa:	bf00      	nop
 8006eac:	bf00      	nop
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	240078a8 	.word	0x240078a8

08006ebc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ecc:	f001 fcea 	bl	80088a4 <vPortEnterCritical>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ed6:	b25b      	sxtb	r3, r3
 8006ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006edc:	d103      	bne.n	8006ee6 <vQueueWaitForMessageRestricted+0x2a>
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eec:	b25b      	sxtb	r3, r3
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef2:	d103      	bne.n	8006efc <vQueueWaitForMessageRestricted+0x40>
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006efc:	f001 fd02 	bl	8008904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d106      	bne.n	8006f16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	3324      	adds	r3, #36	; 0x24
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	68b9      	ldr	r1, [r7, #8]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 fc73 	bl	80077fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f16:	6978      	ldr	r0, [r7, #20]
 8006f18:	f7ff fefb 	bl	8006d12 <prvUnlockQueue>
	}
 8006f1c:	bf00      	nop
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08e      	sub	sp, #56	; 0x38
 8006f28:	af04      	add	r7, sp, #16
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	623b      	str	r3, [r7, #32]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <xTaskCreateStatic+0x46>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	61fb      	str	r3, [r7, #28]
}
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f6a:	23bc      	movs	r3, #188	; 0xbc
 8006f6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2bbc      	cmp	r3, #188	; 0xbc
 8006f72:	d00a      	beq.n	8006f8a <xTaskCreateStatic+0x66>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	61bb      	str	r3, [r7, #24]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d01e      	beq.n	8006fd0 <xTaskCreateStatic+0xac>
 8006f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01b      	beq.n	8006fd0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006faa:	2300      	movs	r3, #0
 8006fac:	9303      	str	r3, [sp, #12]
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	9302      	str	r3, [sp, #8]
 8006fb2:	f107 0314 	add.w	r3, r7, #20
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f850 	bl	8007068 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fca:	f000 f8f3 	bl	80071b4 <prvAddNewTaskToReadyList>
 8006fce:	e001      	b.n	8006fd4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fd4:	697b      	ldr	r3, [r7, #20]
	}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3728      	adds	r7, #40	; 0x28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b08c      	sub	sp, #48	; 0x30
 8006fe2:	af04      	add	r7, sp, #16
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	603b      	str	r3, [r7, #0]
 8006fea:	4613      	mov	r3, r2
 8006fec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 fd78 	bl	8008ae8 <pvPortMalloc>
 8006ff8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00e      	beq.n	800701e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007000:	20bc      	movs	r0, #188	; 0xbc
 8007002:	f001 fd71 	bl	8008ae8 <pvPortMalloc>
 8007006:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
 8007014:	e005      	b.n	8007022 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007016:	6978      	ldr	r0, [r7, #20]
 8007018:	f001 fe32 	bl	8008c80 <vPortFree>
 800701c:	e001      	b.n	8007022 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d017      	beq.n	8007058 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007030:	88fa      	ldrh	r2, [r7, #6]
 8007032:	2300      	movs	r3, #0
 8007034:	9303      	str	r3, [sp, #12]
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	9302      	str	r3, [sp, #8]
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f80e 	bl	8007068 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800704c:	69f8      	ldr	r0, [r7, #28]
 800704e:	f000 f8b1 	bl	80071b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007052:	2301      	movs	r3, #1
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	e002      	b.n	800705e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007058:	f04f 33ff 	mov.w	r3, #4294967295
 800705c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800705e:	69bb      	ldr	r3, [r7, #24]
	}
 8007060:	4618      	mov	r0, r3
 8007062:	3720      	adds	r7, #32
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	461a      	mov	r2, r3
 8007080:	21a5      	movs	r1, #165	; 0xa5
 8007082:	f00c f9aa 	bl	80133da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007090:	440b      	add	r3, r1
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	f023 0307 	bic.w	r3, r3, #7
 800709e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	617b      	str	r3, [r7, #20]
}
 80070bc:	bf00      	nop
 80070be:	e7fe      	b.n	80070be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01f      	beq.n	8007106 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070c6:	2300      	movs	r3, #0
 80070c8:	61fb      	str	r3, [r7, #28]
 80070ca:	e012      	b.n	80070f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	4413      	add	r3, r2
 80070d2:	7819      	ldrb	r1, [r3, #0]
 80070d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	3334      	adds	r3, #52	; 0x34
 80070dc:	460a      	mov	r2, r1
 80070de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	4413      	add	r3, r2
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d006      	beq.n	80070fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	3301      	adds	r3, #1
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	2b0f      	cmp	r3, #15
 80070f6:	d9e9      	bls.n	80070cc <prvInitialiseNewTask+0x64>
 80070f8:	e000      	b.n	80070fc <prvInitialiseNewTask+0x94>
			{
				break;
 80070fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007104:	e003      	b.n	800710e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	2b37      	cmp	r3, #55	; 0x37
 8007112:	d901      	bls.n	8007118 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007114:	2337      	movs	r3, #55	; 0x37
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800711c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007122:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	2200      	movs	r2, #0
 8007128:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	3304      	adds	r3, #4
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe fda0 	bl	8005c74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	3318      	adds	r3, #24
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe fd9b 	bl	8005c74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007142:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007152:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	2200      	movs	r2, #0
 8007160:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	3354      	adds	r3, #84	; 0x54
 8007168:	2260      	movs	r2, #96	; 0x60
 800716a:	2100      	movs	r1, #0
 800716c:	4618      	mov	r0, r3
 800716e:	f00c f934 	bl	80133da <memset>
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	4a0c      	ldr	r2, [pc, #48]	; (80071a8 <prvInitialiseNewTask+0x140>)
 8007176:	659a      	str	r2, [r3, #88]	; 0x58
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	4a0c      	ldr	r2, [pc, #48]	; (80071ac <prvInitialiseNewTask+0x144>)
 800717c:	65da      	str	r2, [r3, #92]	; 0x5c
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	4a0b      	ldr	r2, [pc, #44]	; (80071b0 <prvInitialiseNewTask+0x148>)
 8007182:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	68f9      	ldr	r1, [r7, #12]
 8007188:	69b8      	ldr	r0, [r7, #24]
 800718a:	f001 fa61 	bl	8008650 <pxPortInitialiseStack>
 800718e:	4602      	mov	r2, r0
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071a0:	bf00      	nop
 80071a2:	3720      	adds	r7, #32
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	08017018 	.word	0x08017018
 80071ac:	08017038 	.word	0x08017038
 80071b0:	08016ff8 	.word	0x08016ff8

080071b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071bc:	f001 fb72 	bl	80088a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071c0:	4b2d      	ldr	r3, [pc, #180]	; (8007278 <prvAddNewTaskToReadyList+0xc4>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3301      	adds	r3, #1
 80071c6:	4a2c      	ldr	r2, [pc, #176]	; (8007278 <prvAddNewTaskToReadyList+0xc4>)
 80071c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071ca:	4b2c      	ldr	r3, [pc, #176]	; (800727c <prvAddNewTaskToReadyList+0xc8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d109      	bne.n	80071e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071d2:	4a2a      	ldr	r2, [pc, #168]	; (800727c <prvAddNewTaskToReadyList+0xc8>)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071d8:	4b27      	ldr	r3, [pc, #156]	; (8007278 <prvAddNewTaskToReadyList+0xc4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d110      	bne.n	8007202 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071e0:	f000 fc38 	bl	8007a54 <prvInitialiseTaskLists>
 80071e4:	e00d      	b.n	8007202 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071e6:	4b26      	ldr	r3, [pc, #152]	; (8007280 <prvAddNewTaskToReadyList+0xcc>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071ee:	4b23      	ldr	r3, [pc, #140]	; (800727c <prvAddNewTaskToReadyList+0xc8>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d802      	bhi.n	8007202 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071fc:	4a1f      	ldr	r2, [pc, #124]	; (800727c <prvAddNewTaskToReadyList+0xc8>)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007202:	4b20      	ldr	r3, [pc, #128]	; (8007284 <prvAddNewTaskToReadyList+0xd0>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3301      	adds	r3, #1
 8007208:	4a1e      	ldr	r2, [pc, #120]	; (8007284 <prvAddNewTaskToReadyList+0xd0>)
 800720a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800720c:	4b1d      	ldr	r3, [pc, #116]	; (8007284 <prvAddNewTaskToReadyList+0xd0>)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007218:	4b1b      	ldr	r3, [pc, #108]	; (8007288 <prvAddNewTaskToReadyList+0xd4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	429a      	cmp	r2, r3
 800721e:	d903      	bls.n	8007228 <prvAddNewTaskToReadyList+0x74>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	4a18      	ldr	r2, [pc, #96]	; (8007288 <prvAddNewTaskToReadyList+0xd4>)
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722c:	4613      	mov	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4a15      	ldr	r2, [pc, #84]	; (800728c <prvAddNewTaskToReadyList+0xd8>)
 8007236:	441a      	add	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3304      	adds	r3, #4
 800723c:	4619      	mov	r1, r3
 800723e:	4610      	mov	r0, r2
 8007240:	f7fe fd25 	bl	8005c8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007244:	f001 fb5e 	bl	8008904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007248:	4b0d      	ldr	r3, [pc, #52]	; (8007280 <prvAddNewTaskToReadyList+0xcc>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00e      	beq.n	800726e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007250:	4b0a      	ldr	r3, [pc, #40]	; (800727c <prvAddNewTaskToReadyList+0xc8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725a:	429a      	cmp	r2, r3
 800725c:	d207      	bcs.n	800726e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800725e:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <prvAddNewTaskToReadyList+0xdc>)
 8007260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	24001f18 	.word	0x24001f18
 800727c:	24001a44 	.word	0x24001a44
 8007280:	24001f24 	.word	0x24001f24
 8007284:	24001f34 	.word	0x24001f34
 8007288:	24001f20 	.word	0x24001f20
 800728c:	24001a48 	.word	0x24001a48
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d017      	beq.n	80072d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072a6:	4b13      	ldr	r3, [pc, #76]	; (80072f4 <vTaskDelay+0x60>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <vTaskDelay+0x30>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	60bb      	str	r3, [r7, #8]
}
 80072c0:	bf00      	nop
 80072c2:	e7fe      	b.n	80072c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80072c4:	f000 f88a 	bl	80073dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072c8:	2100      	movs	r1, #0
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fe1e 	bl	8007f0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072d0:	f000 f892 	bl	80073f8 <xTaskResumeAll>
 80072d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d107      	bne.n	80072ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80072dc:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <vTaskDelay+0x64>)
 80072de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	24001f40 	.word	0x24001f40
 80072f8:	e000ed04 	.word	0xe000ed04

080072fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08a      	sub	sp, #40	; 0x28
 8007300:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007306:	2300      	movs	r3, #0
 8007308:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800730a:	463a      	mov	r2, r7
 800730c:	1d39      	adds	r1, r7, #4
 800730e:	f107 0308 	add.w	r3, r7, #8
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fc5a 	bl	8005bcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	9202      	str	r2, [sp, #8]
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	2300      	movs	r3, #0
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	2300      	movs	r3, #0
 8007328:	460a      	mov	r2, r1
 800732a:	4924      	ldr	r1, [pc, #144]	; (80073bc <vTaskStartScheduler+0xc0>)
 800732c:	4824      	ldr	r0, [pc, #144]	; (80073c0 <vTaskStartScheduler+0xc4>)
 800732e:	f7ff fdf9 	bl	8006f24 <xTaskCreateStatic>
 8007332:	4603      	mov	r3, r0
 8007334:	4a23      	ldr	r2, [pc, #140]	; (80073c4 <vTaskStartScheduler+0xc8>)
 8007336:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007338:	4b22      	ldr	r3, [pc, #136]	; (80073c4 <vTaskStartScheduler+0xc8>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007340:	2301      	movs	r3, #1
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e001      	b.n	800734a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d102      	bne.n	8007356 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007350:	f000 fe30 	bl	8007fb4 <xTimerCreateTimerTask>
 8007354:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d11b      	bne.n	8007394 <vTaskStartScheduler+0x98>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	613b      	str	r3, [r7, #16]
}
 800736e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007370:	4b15      	ldr	r3, [pc, #84]	; (80073c8 <vTaskStartScheduler+0xcc>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3354      	adds	r3, #84	; 0x54
 8007376:	4a15      	ldr	r2, [pc, #84]	; (80073cc <vTaskStartScheduler+0xd0>)
 8007378:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800737a:	4b15      	ldr	r3, [pc, #84]	; (80073d0 <vTaskStartScheduler+0xd4>)
 800737c:	f04f 32ff 	mov.w	r2, #4294967295
 8007380:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007382:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <vTaskStartScheduler+0xd8>)
 8007384:	2201      	movs	r2, #1
 8007386:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007388:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <vTaskStartScheduler+0xdc>)
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800738e:	f001 f9e7 	bl	8008760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007392:	e00e      	b.n	80073b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739a:	d10a      	bne.n	80073b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	60fb      	str	r3, [r7, #12]
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <vTaskStartScheduler+0xb4>
}
 80073b2:	bf00      	nop
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	080143f4 	.word	0x080143f4
 80073c0:	08007a25 	.word	0x08007a25
 80073c4:	24001f3c 	.word	0x24001f3c
 80073c8:	24001a44 	.word	0x24001a44
 80073cc:	24000034 	.word	0x24000034
 80073d0:	24001f38 	.word	0x24001f38
 80073d4:	24001f24 	.word	0x24001f24
 80073d8:	24001f1c 	.word	0x24001f1c

080073dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073e0:	4b04      	ldr	r3, [pc, #16]	; (80073f4 <vTaskSuspendAll+0x18>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	4a03      	ldr	r2, [pc, #12]	; (80073f4 <vTaskSuspendAll+0x18>)
 80073e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073ea:	bf00      	nop
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	24001f40 	.word	0x24001f40

080073f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007402:	2300      	movs	r3, #0
 8007404:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007406:	4b42      	ldr	r3, [pc, #264]	; (8007510 <xTaskResumeAll+0x118>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <xTaskResumeAll+0x2c>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	603b      	str	r3, [r7, #0]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007424:	f001 fa3e 	bl	80088a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007428:	4b39      	ldr	r3, [pc, #228]	; (8007510 <xTaskResumeAll+0x118>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3b01      	subs	r3, #1
 800742e:	4a38      	ldr	r2, [pc, #224]	; (8007510 <xTaskResumeAll+0x118>)
 8007430:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007432:	4b37      	ldr	r3, [pc, #220]	; (8007510 <xTaskResumeAll+0x118>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d162      	bne.n	8007500 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800743a:	4b36      	ldr	r3, [pc, #216]	; (8007514 <xTaskResumeAll+0x11c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d05e      	beq.n	8007500 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007442:	e02f      	b.n	80074a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007444:	4b34      	ldr	r3, [pc, #208]	; (8007518 <xTaskResumeAll+0x120>)
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3318      	adds	r3, #24
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe fc79 	bl	8005d48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3304      	adds	r3, #4
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fc74 	bl	8005d48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007464:	4b2d      	ldr	r3, [pc, #180]	; (800751c <xTaskResumeAll+0x124>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	429a      	cmp	r2, r3
 800746a:	d903      	bls.n	8007474 <xTaskResumeAll+0x7c>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	4a2a      	ldr	r2, [pc, #168]	; (800751c <xTaskResumeAll+0x124>)
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007478:	4613      	mov	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4a27      	ldr	r2, [pc, #156]	; (8007520 <xTaskResumeAll+0x128>)
 8007482:	441a      	add	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3304      	adds	r3, #4
 8007488:	4619      	mov	r1, r3
 800748a:	4610      	mov	r0, r2
 800748c:	f7fe fbff 	bl	8005c8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007494:	4b23      	ldr	r3, [pc, #140]	; (8007524 <xTaskResumeAll+0x12c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	429a      	cmp	r2, r3
 800749c:	d302      	bcc.n	80074a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800749e:	4b22      	ldr	r3, [pc, #136]	; (8007528 <xTaskResumeAll+0x130>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074a4:	4b1c      	ldr	r3, [pc, #112]	; (8007518 <xTaskResumeAll+0x120>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1cb      	bne.n	8007444 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074b2:	f000 fb71 	bl	8007b98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074b6:	4b1d      	ldr	r3, [pc, #116]	; (800752c <xTaskResumeAll+0x134>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d010      	beq.n	80074e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074c2:	f000 f859 	bl	8007578 <xTaskIncrementTick>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80074cc:	4b16      	ldr	r3, [pc, #88]	; (8007528 <xTaskResumeAll+0x130>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1f1      	bne.n	80074c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80074de:	4b13      	ldr	r3, [pc, #76]	; (800752c <xTaskResumeAll+0x134>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074e4:	4b10      	ldr	r3, [pc, #64]	; (8007528 <xTaskResumeAll+0x130>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d009      	beq.n	8007500 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074ec:	2301      	movs	r3, #1
 80074ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074f0:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <xTaskResumeAll+0x138>)
 80074f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007500:	f001 fa00 	bl	8008904 <vPortExitCritical>

	return xAlreadyYielded;
 8007504:	68bb      	ldr	r3, [r7, #8]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	24001f40 	.word	0x24001f40
 8007514:	24001f18 	.word	0x24001f18
 8007518:	24001ed8 	.word	0x24001ed8
 800751c:	24001f20 	.word	0x24001f20
 8007520:	24001a48 	.word	0x24001a48
 8007524:	24001a44 	.word	0x24001a44
 8007528:	24001f2c 	.word	0x24001f2c
 800752c:	24001f28 	.word	0x24001f28
 8007530:	e000ed04 	.word	0xe000ed04

08007534 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800753a:	4b05      	ldr	r3, [pc, #20]	; (8007550 <xTaskGetTickCount+0x1c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007540:	687b      	ldr	r3, [r7, #4]
}
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	24001f1c 	.word	0x24001f1c

08007554 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800755a:	f001 fa85 	bl	8008a68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800755e:	2300      	movs	r3, #0
 8007560:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007562:	4b04      	ldr	r3, [pc, #16]	; (8007574 <xTaskGetTickCountFromISR+0x20>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007568:	683b      	ldr	r3, [r7, #0]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	24001f1c 	.word	0x24001f1c

08007578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800757e:	2300      	movs	r3, #0
 8007580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007582:	4b4f      	ldr	r3, [pc, #316]	; (80076c0 <xTaskIncrementTick+0x148>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 808f 	bne.w	80076aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800758c:	4b4d      	ldr	r3, [pc, #308]	; (80076c4 <xTaskIncrementTick+0x14c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3301      	adds	r3, #1
 8007592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007594:	4a4b      	ldr	r2, [pc, #300]	; (80076c4 <xTaskIncrementTick+0x14c>)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d120      	bne.n	80075e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80075a0:	4b49      	ldr	r3, [pc, #292]	; (80076c8 <xTaskIncrementTick+0x150>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	603b      	str	r3, [r7, #0]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <xTaskIncrementTick+0x46>
 80075c0:	4b41      	ldr	r3, [pc, #260]	; (80076c8 <xTaskIncrementTick+0x150>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	4b41      	ldr	r3, [pc, #260]	; (80076cc <xTaskIncrementTick+0x154>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a3f      	ldr	r2, [pc, #252]	; (80076c8 <xTaskIncrementTick+0x150>)
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	4a3f      	ldr	r2, [pc, #252]	; (80076cc <xTaskIncrementTick+0x154>)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	4b3e      	ldr	r3, [pc, #248]	; (80076d0 <xTaskIncrementTick+0x158>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3301      	adds	r3, #1
 80075da:	4a3d      	ldr	r2, [pc, #244]	; (80076d0 <xTaskIncrementTick+0x158>)
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	f000 fadb 	bl	8007b98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075e2:	4b3c      	ldr	r3, [pc, #240]	; (80076d4 <xTaskIncrementTick+0x15c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d349      	bcc.n	8007680 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ec:	4b36      	ldr	r3, [pc, #216]	; (80076c8 <xTaskIncrementTick+0x150>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d104      	bne.n	8007600 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f6:	4b37      	ldr	r3, [pc, #220]	; (80076d4 <xTaskIncrementTick+0x15c>)
 80075f8:	f04f 32ff 	mov.w	r2, #4294967295
 80075fc:	601a      	str	r2, [r3, #0]
					break;
 80075fe:	e03f      	b.n	8007680 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007600:	4b31      	ldr	r3, [pc, #196]	; (80076c8 <xTaskIncrementTick+0x150>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	429a      	cmp	r2, r3
 8007616:	d203      	bcs.n	8007620 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007618:	4a2e      	ldr	r2, [pc, #184]	; (80076d4 <xTaskIncrementTick+0x15c>)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800761e:	e02f      	b.n	8007680 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	3304      	adds	r3, #4
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe fb8f 	bl	8005d48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762e:	2b00      	cmp	r3, #0
 8007630:	d004      	beq.n	800763c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	3318      	adds	r3, #24
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe fb86 	bl	8005d48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <xTaskIncrementTick+0x160>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d903      	bls.n	8007650 <xTaskIncrementTick+0xd8>
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	4a22      	ldr	r2, [pc, #136]	; (80076d8 <xTaskIncrementTick+0x160>)
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	4613      	mov	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4a1f      	ldr	r2, [pc, #124]	; (80076dc <xTaskIncrementTick+0x164>)
 800765e:	441a      	add	r2, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	3304      	adds	r3, #4
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f7fe fb11 	bl	8005c8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007670:	4b1b      	ldr	r3, [pc, #108]	; (80076e0 <xTaskIncrementTick+0x168>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007676:	429a      	cmp	r2, r3
 8007678:	d3b8      	bcc.n	80075ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800767a:	2301      	movs	r3, #1
 800767c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800767e:	e7b5      	b.n	80075ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007680:	4b17      	ldr	r3, [pc, #92]	; (80076e0 <xTaskIncrementTick+0x168>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007686:	4915      	ldr	r1, [pc, #84]	; (80076dc <xTaskIncrementTick+0x164>)
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d901      	bls.n	800769c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007698:	2301      	movs	r3, #1
 800769a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800769c:	4b11      	ldr	r3, [pc, #68]	; (80076e4 <xTaskIncrementTick+0x16c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d007      	beq.n	80076b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80076a4:	2301      	movs	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	e004      	b.n	80076b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076aa:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <xTaskIncrementTick+0x170>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3301      	adds	r3, #1
 80076b0:	4a0d      	ldr	r2, [pc, #52]	; (80076e8 <xTaskIncrementTick+0x170>)
 80076b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076b4:	697b      	ldr	r3, [r7, #20]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	24001f40 	.word	0x24001f40
 80076c4:	24001f1c 	.word	0x24001f1c
 80076c8:	24001ed0 	.word	0x24001ed0
 80076cc:	24001ed4 	.word	0x24001ed4
 80076d0:	24001f30 	.word	0x24001f30
 80076d4:	24001f38 	.word	0x24001f38
 80076d8:	24001f20 	.word	0x24001f20
 80076dc:	24001a48 	.word	0x24001a48
 80076e0:	24001a44 	.word	0x24001a44
 80076e4:	24001f2c 	.word	0x24001f2c
 80076e8:	24001f28 	.word	0x24001f28

080076ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076f2:	4b2a      	ldr	r3, [pc, #168]	; (800779c <vTaskSwitchContext+0xb0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076fa:	4b29      	ldr	r3, [pc, #164]	; (80077a0 <vTaskSwitchContext+0xb4>)
 80076fc:	2201      	movs	r2, #1
 80076fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007700:	e046      	b.n	8007790 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007702:	4b27      	ldr	r3, [pc, #156]	; (80077a0 <vTaskSwitchContext+0xb4>)
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007708:	4b26      	ldr	r3, [pc, #152]	; (80077a4 <vTaskSwitchContext+0xb8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	e010      	b.n	8007732 <vTaskSwitchContext+0x46>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10a      	bne.n	800772c <vTaskSwitchContext+0x40>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	607b      	str	r3, [r7, #4]
}
 8007728:	bf00      	nop
 800772a:	e7fe      	b.n	800772a <vTaskSwitchContext+0x3e>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3b01      	subs	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	491d      	ldr	r1, [pc, #116]	; (80077a8 <vTaskSwitchContext+0xbc>)
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	440b      	add	r3, r1
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d0e4      	beq.n	8007710 <vTaskSwitchContext+0x24>
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4613      	mov	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4a15      	ldr	r2, [pc, #84]	; (80077a8 <vTaskSwitchContext+0xbc>)
 8007752:	4413      	add	r3, r2
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	605a      	str	r2, [r3, #4]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	3308      	adds	r3, #8
 8007768:	429a      	cmp	r2, r3
 800776a:	d104      	bne.n	8007776 <vTaskSwitchContext+0x8a>
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	605a      	str	r2, [r3, #4]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	4a0b      	ldr	r2, [pc, #44]	; (80077ac <vTaskSwitchContext+0xc0>)
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <vTaskSwitchContext+0xb8>)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007786:	4b09      	ldr	r3, [pc, #36]	; (80077ac <vTaskSwitchContext+0xc0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3354      	adds	r3, #84	; 0x54
 800778c:	4a08      	ldr	r2, [pc, #32]	; (80077b0 <vTaskSwitchContext+0xc4>)
 800778e:	6013      	str	r3, [r2, #0]
}
 8007790:	bf00      	nop
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	24001f40 	.word	0x24001f40
 80077a0:	24001f2c 	.word	0x24001f2c
 80077a4:	24001f20 	.word	0x24001f20
 80077a8:	24001a48 	.word	0x24001a48
 80077ac:	24001a44 	.word	0x24001a44
 80077b0:	24000034 	.word	0x24000034

080077b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10a      	bne.n	80077da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	60fb      	str	r3, [r7, #12]
}
 80077d6:	bf00      	nop
 80077d8:	e7fe      	b.n	80077d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077da:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <vTaskPlaceOnEventList+0x44>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3318      	adds	r3, #24
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fe fa77 	bl	8005cd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077e8:	2101      	movs	r1, #1
 80077ea:	6838      	ldr	r0, [r7, #0]
 80077ec:	f000 fb8e 	bl	8007f0c <prvAddCurrentTaskToDelayedList>
}
 80077f0:	bf00      	nop
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	24001a44 	.word	0x24001a44

080077fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	617b      	str	r3, [r7, #20]
}
 8007820:	bf00      	nop
 8007822:	e7fe      	b.n	8007822 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007824:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <vTaskPlaceOnEventListRestricted+0x54>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3318      	adds	r3, #24
 800782a:	4619      	mov	r1, r3
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7fe fa2e 	bl	8005c8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007838:	f04f 33ff 	mov.w	r3, #4294967295
 800783c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f000 fb63 	bl	8007f0c <prvAddCurrentTaskToDelayedList>
	}
 8007846:	bf00      	nop
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	24001a44 	.word	0x24001a44

08007854 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	60fb      	str	r3, [r7, #12]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	3318      	adds	r3, #24
 8007884:	4618      	mov	r0, r3
 8007886:	f7fe fa5f 	bl	8005d48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800788a:	4b1e      	ldr	r3, [pc, #120]	; (8007904 <xTaskRemoveFromEventList+0xb0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d11d      	bne.n	80078ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	3304      	adds	r3, #4
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe fa56 	bl	8005d48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a0:	4b19      	ldr	r3, [pc, #100]	; (8007908 <xTaskRemoveFromEventList+0xb4>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d903      	bls.n	80078b0 <xTaskRemoveFromEventList+0x5c>
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	4a16      	ldr	r2, [pc, #88]	; (8007908 <xTaskRemoveFromEventList+0xb4>)
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4a13      	ldr	r2, [pc, #76]	; (800790c <xTaskRemoveFromEventList+0xb8>)
 80078be:	441a      	add	r2, r3
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4619      	mov	r1, r3
 80078c6:	4610      	mov	r0, r2
 80078c8:	f7fe f9e1 	bl	8005c8e <vListInsertEnd>
 80078cc:	e005      	b.n	80078da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	3318      	adds	r3, #24
 80078d2:	4619      	mov	r1, r3
 80078d4:	480e      	ldr	r0, [pc, #56]	; (8007910 <xTaskRemoveFromEventList+0xbc>)
 80078d6:	f7fe f9da 	bl	8005c8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078de:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <xTaskRemoveFromEventList+0xc0>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d905      	bls.n	80078f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078e8:	2301      	movs	r3, #1
 80078ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078ec:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <xTaskRemoveFromEventList+0xc4>)
 80078ee:	2201      	movs	r2, #1
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	e001      	b.n	80078f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078f8:	697b      	ldr	r3, [r7, #20]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	24001f40 	.word	0x24001f40
 8007908:	24001f20 	.word	0x24001f20
 800790c:	24001a48 	.word	0x24001a48
 8007910:	24001ed8 	.word	0x24001ed8
 8007914:	24001a44 	.word	0x24001a44
 8007918:	24001f2c 	.word	0x24001f2c

0800791c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007924:	4b06      	ldr	r3, [pc, #24]	; (8007940 <vTaskInternalSetTimeOutState+0x24>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800792c:	4b05      	ldr	r3, [pc, #20]	; (8007944 <vTaskInternalSetTimeOutState+0x28>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	605a      	str	r2, [r3, #4]
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	24001f30 	.word	0x24001f30
 8007944:	24001f1c 	.word	0x24001f1c

08007948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	613b      	str	r3, [r7, #16]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	60fb      	str	r3, [r7, #12]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800798a:	f000 ff8b 	bl	80088a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800798e:	4b1d      	ldr	r3, [pc, #116]	; (8007a04 <xTaskCheckForTimeOut+0xbc>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a6:	d102      	bne.n	80079ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	61fb      	str	r3, [r7, #28]
 80079ac:	e023      	b.n	80079f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	4b15      	ldr	r3, [pc, #84]	; (8007a08 <xTaskCheckForTimeOut+0xc0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d007      	beq.n	80079ca <xTaskCheckForTimeOut+0x82>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d302      	bcc.n	80079ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079c4:	2301      	movs	r3, #1
 80079c6:	61fb      	str	r3, [r7, #28]
 80079c8:	e015      	b.n	80079f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d20b      	bcs.n	80079ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	1ad2      	subs	r2, r2, r3
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff ff9b 	bl	800791c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079e6:	2300      	movs	r3, #0
 80079e8:	61fb      	str	r3, [r7, #28]
 80079ea:	e004      	b.n	80079f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079f2:	2301      	movs	r3, #1
 80079f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079f6:	f000 ff85 	bl	8008904 <vPortExitCritical>

	return xReturn;
 80079fa:	69fb      	ldr	r3, [r7, #28]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3720      	adds	r7, #32
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	24001f1c 	.word	0x24001f1c
 8007a08:	24001f30 	.word	0x24001f30

08007a0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a10:	4b03      	ldr	r3, [pc, #12]	; (8007a20 <vTaskMissedYield+0x14>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
}
 8007a16:	bf00      	nop
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	24001f2c 	.word	0x24001f2c

08007a24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a2c:	f000 f852 	bl	8007ad4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a30:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <prvIdleTask+0x28>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d9f9      	bls.n	8007a2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <prvIdleTask+0x2c>)
 8007a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a48:	e7f0      	b.n	8007a2c <prvIdleTask+0x8>
 8007a4a:	bf00      	nop
 8007a4c:	24001a48 	.word	0x24001a48
 8007a50:	e000ed04 	.word	0xe000ed04

08007a54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	607b      	str	r3, [r7, #4]
 8007a5e:	e00c      	b.n	8007a7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4a12      	ldr	r2, [pc, #72]	; (8007ab4 <prvInitialiseTaskLists+0x60>)
 8007a6c:	4413      	add	r3, r2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe f8e0 	bl	8005c34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3301      	adds	r3, #1
 8007a78:	607b      	str	r3, [r7, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b37      	cmp	r3, #55	; 0x37
 8007a7e:	d9ef      	bls.n	8007a60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a80:	480d      	ldr	r0, [pc, #52]	; (8007ab8 <prvInitialiseTaskLists+0x64>)
 8007a82:	f7fe f8d7 	bl	8005c34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a86:	480d      	ldr	r0, [pc, #52]	; (8007abc <prvInitialiseTaskLists+0x68>)
 8007a88:	f7fe f8d4 	bl	8005c34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a8c:	480c      	ldr	r0, [pc, #48]	; (8007ac0 <prvInitialiseTaskLists+0x6c>)
 8007a8e:	f7fe f8d1 	bl	8005c34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a92:	480c      	ldr	r0, [pc, #48]	; (8007ac4 <prvInitialiseTaskLists+0x70>)
 8007a94:	f7fe f8ce 	bl	8005c34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a98:	480b      	ldr	r0, [pc, #44]	; (8007ac8 <prvInitialiseTaskLists+0x74>)
 8007a9a:	f7fe f8cb 	bl	8005c34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a9e:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <prvInitialiseTaskLists+0x78>)
 8007aa0:	4a05      	ldr	r2, [pc, #20]	; (8007ab8 <prvInitialiseTaskLists+0x64>)
 8007aa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007aa4:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <prvInitialiseTaskLists+0x7c>)
 8007aa6:	4a05      	ldr	r2, [pc, #20]	; (8007abc <prvInitialiseTaskLists+0x68>)
 8007aa8:	601a      	str	r2, [r3, #0]
}
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	24001a48 	.word	0x24001a48
 8007ab8:	24001ea8 	.word	0x24001ea8
 8007abc:	24001ebc 	.word	0x24001ebc
 8007ac0:	24001ed8 	.word	0x24001ed8
 8007ac4:	24001eec 	.word	0x24001eec
 8007ac8:	24001f04 	.word	0x24001f04
 8007acc:	24001ed0 	.word	0x24001ed0
 8007ad0:	24001ed4 	.word	0x24001ed4

08007ad4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ada:	e019      	b.n	8007b10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007adc:	f000 fee2 	bl	80088a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae0:	4b10      	ldr	r3, [pc, #64]	; (8007b24 <prvCheckTasksWaitingTermination+0x50>)
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fe f92b 	bl	8005d48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007af2:	4b0d      	ldr	r3, [pc, #52]	; (8007b28 <prvCheckTasksWaitingTermination+0x54>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	4a0b      	ldr	r2, [pc, #44]	; (8007b28 <prvCheckTasksWaitingTermination+0x54>)
 8007afa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007afc:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <prvCheckTasksWaitingTermination+0x58>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	4a0a      	ldr	r2, [pc, #40]	; (8007b2c <prvCheckTasksWaitingTermination+0x58>)
 8007b04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b06:	f000 fefd 	bl	8008904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f810 	bl	8007b30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b10:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <prvCheckTasksWaitingTermination+0x58>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e1      	bne.n	8007adc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	24001eec 	.word	0x24001eec
 8007b28:	24001f18 	.word	0x24001f18
 8007b2c:	24001f00 	.word	0x24001f00

08007b30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3354      	adds	r3, #84	; 0x54
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f00b fd4d 	bl	80135dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d108      	bne.n	8007b5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	4618      	mov	r0, r3
 8007b52:	f001 f895 	bl	8008c80 <vPortFree>
				vPortFree( pxTCB );
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 f892 	bl	8008c80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b5c:	e018      	b.n	8007b90 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d103      	bne.n	8007b70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f889 	bl	8008c80 <vPortFree>
	}
 8007b6e:	e00f      	b.n	8007b90 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d00a      	beq.n	8007b90 <prvDeleteTCB+0x60>
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	60fb      	str	r3, [r7, #12]
}
 8007b8c:	bf00      	nop
 8007b8e:	e7fe      	b.n	8007b8e <prvDeleteTCB+0x5e>
	}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b9e:	4b0c      	ldr	r3, [pc, #48]	; (8007bd0 <prvResetNextTaskUnblockTime+0x38>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d104      	bne.n	8007bb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <prvResetNextTaskUnblockTime+0x3c>)
 8007baa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bb0:	e008      	b.n	8007bc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb2:	4b07      	ldr	r3, [pc, #28]	; (8007bd0 <prvResetNextTaskUnblockTime+0x38>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	4a04      	ldr	r2, [pc, #16]	; (8007bd4 <prvResetNextTaskUnblockTime+0x3c>)
 8007bc2:	6013      	str	r3, [r2, #0]
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	24001ed0 	.word	0x24001ed0
 8007bd4:	24001f38 	.word	0x24001f38

08007bd8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007bde:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <xTaskGetCurrentTaskHandle+0x1c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007be4:	687b      	ldr	r3, [r7, #4]
	}
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	24001a44 	.word	0x24001a44

08007bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <xTaskGetSchedulerState+0x34>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c06:	2301      	movs	r3, #1
 8007c08:	607b      	str	r3, [r7, #4]
 8007c0a:	e008      	b.n	8007c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c0c:	4b08      	ldr	r3, [pc, #32]	; (8007c30 <xTaskGetSchedulerState+0x38>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c14:	2302      	movs	r3, #2
 8007c16:	607b      	str	r3, [r7, #4]
 8007c18:	e001      	b.n	8007c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c1e:	687b      	ldr	r3, [r7, #4]
	}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	24001f24 	.word	0x24001f24
 8007c30:	24001f40 	.word	0x24001f40

08007c34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d051      	beq.n	8007cee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4e:	4b2a      	ldr	r3, [pc, #168]	; (8007cf8 <xTaskPriorityInherit+0xc4>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d241      	bcs.n	8007cdc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	db06      	blt.n	8007c6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c60:	4b25      	ldr	r3, [pc, #148]	; (8007cf8 <xTaskPriorityInherit+0xc4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6959      	ldr	r1, [r3, #20]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c76:	4613      	mov	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4a1f      	ldr	r2, [pc, #124]	; (8007cfc <xTaskPriorityInherit+0xc8>)
 8007c80:	4413      	add	r3, r2
 8007c82:	4299      	cmp	r1, r3
 8007c84:	d122      	bne.n	8007ccc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe f85c 	bl	8005d48 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c90:	4b19      	ldr	r3, [pc, #100]	; (8007cf8 <xTaskPriorityInherit+0xc4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9e:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <xTaskPriorityInherit+0xcc>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d903      	bls.n	8007cae <xTaskPriorityInherit+0x7a>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	4a15      	ldr	r2, [pc, #84]	; (8007d00 <xTaskPriorityInherit+0xcc>)
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4a10      	ldr	r2, [pc, #64]	; (8007cfc <xTaskPriorityInherit+0xc8>)
 8007cbc:	441a      	add	r2, r3
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	f7fd ffe2 	bl	8005c8e <vListInsertEnd>
 8007cca:	e004      	b.n	8007cd6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ccc:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <xTaskPriorityInherit+0xc4>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e008      	b.n	8007cee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ce0:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <xTaskPriorityInherit+0xc4>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d201      	bcs.n	8007cee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007cea:	2301      	movs	r3, #1
 8007cec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cee:	68fb      	ldr	r3, [r7, #12]
	}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	24001a44 	.word	0x24001a44
 8007cfc:	24001a48 	.word	0x24001a48
 8007d00:	24001f20 	.word	0x24001f20

08007d04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d10:	2300      	movs	r3, #0
 8007d12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d056      	beq.n	8007dc8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d1a:	4b2e      	ldr	r3, [pc, #184]	; (8007dd4 <xTaskPriorityDisinherit+0xd0>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d00a      	beq.n	8007d3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	60fb      	str	r3, [r7, #12]
}
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10a      	bne.n	8007d58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	60bb      	str	r3, [r7, #8]
}
 8007d54:	bf00      	nop
 8007d56:	e7fe      	b.n	8007d56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5c:	1e5a      	subs	r2, r3, #1
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d02c      	beq.n	8007dc8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d128      	bne.n	8007dc8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fd ffe4 	bl	8005d48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d98:	4b0f      	ldr	r3, [pc, #60]	; (8007dd8 <xTaskPriorityDisinherit+0xd4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d903      	bls.n	8007da8 <xTaskPriorityDisinherit+0xa4>
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	4a0c      	ldr	r2, [pc, #48]	; (8007dd8 <xTaskPriorityDisinherit+0xd4>)
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <xTaskPriorityDisinherit+0xd8>)
 8007db6:	441a      	add	r2, r3
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	f7fd ff65 	bl	8005c8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007dc8:	697b      	ldr	r3, [r7, #20]
	}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	24001a44 	.word	0x24001a44
 8007dd8:	24001f20 	.word	0x24001f20
 8007ddc:	24001a48 	.word	0x24001a48

08007de0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007dee:	2301      	movs	r3, #1
 8007df0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d06a      	beq.n	8007ece <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	60fb      	str	r3, [r7, #12]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d902      	bls.n	8007e26 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	61fb      	str	r3, [r7, #28]
 8007e24:	e002      	b.n	8007e2c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d04b      	beq.n	8007ece <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d146      	bne.n	8007ece <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e40:	4b25      	ldr	r3, [pc, #148]	; (8007ed8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d10a      	bne.n	8007e60 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	60bb      	str	r3, [r7, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	69fa      	ldr	r2, [r7, #28]
 8007e6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	db04      	blt.n	8007e7e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	6959      	ldr	r1, [r3, #20]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	4613      	mov	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4a13      	ldr	r2, [pc, #76]	; (8007edc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007e8e:	4413      	add	r3, r2
 8007e90:	4299      	cmp	r1, r3
 8007e92:	d11c      	bne.n	8007ece <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	3304      	adds	r3, #4
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fd ff55 	bl	8005d48 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea2:	4b0f      	ldr	r3, [pc, #60]	; (8007ee0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d903      	bls.n	8007eb2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	4a0c      	ldr	r2, [pc, #48]	; (8007ee0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4a07      	ldr	r2, [pc, #28]	; (8007edc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ec0:	441a      	add	r2, r3
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4610      	mov	r0, r2
 8007eca:	f7fd fee0 	bl	8005c8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ece:	bf00      	nop
 8007ed0:	3720      	adds	r7, #32
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	24001a44 	.word	0x24001a44
 8007edc:	24001a48 	.word	0x24001a48
 8007ee0:	24001f20 	.word	0x24001f20

08007ee4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ee4:	b480      	push	{r7}
 8007ee6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007ee8:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ef0:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ef6:	3201      	adds	r2, #1
 8007ef8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007efa:	4b03      	ldr	r3, [pc, #12]	; (8007f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8007efc:	681b      	ldr	r3, [r3, #0]
	}
 8007efe:	4618      	mov	r0, r3
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	24001a44 	.word	0x24001a44

08007f0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f16:	4b21      	ldr	r3, [pc, #132]	; (8007f9c <prvAddCurrentTaskToDelayedList+0x90>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f1c:	4b20      	ldr	r3, [pc, #128]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3304      	adds	r3, #4
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fd ff10 	bl	8005d48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2e:	d10a      	bne.n	8007f46 <prvAddCurrentTaskToDelayedList+0x3a>
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d007      	beq.n	8007f46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f36:	4b1a      	ldr	r3, [pc, #104]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4819      	ldr	r0, [pc, #100]	; (8007fa4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f40:	f7fd fea5 	bl	8005c8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f44:	e026      	b.n	8007f94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f4e:	4b14      	ldr	r3, [pc, #80]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d209      	bcs.n	8007f72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f5e:	4b12      	ldr	r3, [pc, #72]	; (8007fa8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3304      	adds	r3, #4
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	f7fd feb3 	bl	8005cd6 <vListInsert>
}
 8007f70:	e010      	b.n	8007f94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f72:	4b0e      	ldr	r3, [pc, #56]	; (8007fac <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	4b0a      	ldr	r3, [pc, #40]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f7fd fea9 	bl	8005cd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f84:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d202      	bcs.n	8007f94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f8e:	4a08      	ldr	r2, [pc, #32]	; (8007fb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6013      	str	r3, [r2, #0]
}
 8007f94:	bf00      	nop
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	24001f1c 	.word	0x24001f1c
 8007fa0:	24001a44 	.word	0x24001a44
 8007fa4:	24001f04 	.word	0x24001f04
 8007fa8:	24001ed4 	.word	0x24001ed4
 8007fac:	24001ed0 	.word	0x24001ed0
 8007fb0:	24001f38 	.word	0x24001f38

08007fb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08a      	sub	sp, #40	; 0x28
 8007fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007fbe:	f000 fb07 	bl	80085d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fc2:	4b1c      	ldr	r3, [pc, #112]	; (8008034 <xTimerCreateTimerTask+0x80>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d021      	beq.n	800800e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007fd2:	1d3a      	adds	r2, r7, #4
 8007fd4:	f107 0108 	add.w	r1, r7, #8
 8007fd8:	f107 030c 	add.w	r3, r7, #12
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fd fe0f 	bl	8005c00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	9202      	str	r2, [sp, #8]
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	2302      	movs	r3, #2
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	460a      	mov	r2, r1
 8007ff4:	4910      	ldr	r1, [pc, #64]	; (8008038 <xTimerCreateTimerTask+0x84>)
 8007ff6:	4811      	ldr	r0, [pc, #68]	; (800803c <xTimerCreateTimerTask+0x88>)
 8007ff8:	f7fe ff94 	bl	8006f24 <xTaskCreateStatic>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	4a10      	ldr	r2, [pc, #64]	; (8008040 <xTimerCreateTimerTask+0x8c>)
 8008000:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008002:	4b0f      	ldr	r3, [pc, #60]	; (8008040 <xTimerCreateTimerTask+0x8c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800800a:	2301      	movs	r3, #1
 800800c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	613b      	str	r3, [r7, #16]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800802a:	697b      	ldr	r3, [r7, #20]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	24001f74 	.word	0x24001f74
 8008038:	080143fc 	.word	0x080143fc
 800803c:	08008179 	.word	0x08008179
 8008040:	24001f78 	.word	0x24001f78

08008044 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08a      	sub	sp, #40	; 0x28
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008052:	2300      	movs	r3, #0
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <xTimerGenericCommand+0x2e>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	623b      	str	r3, [r7, #32]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008072:	4b1a      	ldr	r3, [pc, #104]	; (80080dc <xTimerGenericCommand+0x98>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d02a      	beq.n	80080d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2b05      	cmp	r3, #5
 800808a:	dc18      	bgt.n	80080be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800808c:	f7ff fdb4 	bl	8007bf8 <xTaskGetSchedulerState>
 8008090:	4603      	mov	r3, r0
 8008092:	2b02      	cmp	r3, #2
 8008094:	d109      	bne.n	80080aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008096:	4b11      	ldr	r3, [pc, #68]	; (80080dc <xTimerGenericCommand+0x98>)
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	f107 0110 	add.w	r1, r7, #16
 800809e:	2300      	movs	r3, #0
 80080a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a2:	f7fe f8d9 	bl	8006258 <xQueueGenericSend>
 80080a6:	6278      	str	r0, [r7, #36]	; 0x24
 80080a8:	e012      	b.n	80080d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080aa:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <xTimerGenericCommand+0x98>)
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	f107 0110 	add.w	r1, r7, #16
 80080b2:	2300      	movs	r3, #0
 80080b4:	2200      	movs	r2, #0
 80080b6:	f7fe f8cf 	bl	8006258 <xQueueGenericSend>
 80080ba:	6278      	str	r0, [r7, #36]	; 0x24
 80080bc:	e008      	b.n	80080d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080be:	4b07      	ldr	r3, [pc, #28]	; (80080dc <xTimerGenericCommand+0x98>)
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	f107 0110 	add.w	r1, r7, #16
 80080c6:	2300      	movs	r3, #0
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	f7fe f9c3 	bl	8006454 <xQueueGenericSendFromISR>
 80080ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3728      	adds	r7, #40	; 0x28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	24001f74 	.word	0x24001f74

080080e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ea:	4b22      	ldr	r3, [pc, #136]	; (8008174 <prvProcessExpiredTimer+0x94>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fd fe25 	bl	8005d48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008104:	f003 0304 	and.w	r3, r3, #4
 8008108:	2b00      	cmp	r3, #0
 800810a:	d022      	beq.n	8008152 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	699a      	ldr	r2, [r3, #24]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	18d1      	adds	r1, r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	6978      	ldr	r0, [r7, #20]
 800811a:	f000 f8d1 	bl	80082c0 <prvInsertTimerInActiveList>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d01f      	beq.n	8008164 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008124:	2300      	movs	r3, #0
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	2300      	movs	r3, #0
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	2100      	movs	r1, #0
 800812e:	6978      	ldr	r0, [r7, #20]
 8008130:	f7ff ff88 	bl	8008044 <xTimerGenericCommand>
 8008134:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d113      	bne.n	8008164 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	60fb      	str	r3, [r7, #12]
}
 800814e:	bf00      	nop
 8008150:	e7fe      	b.n	8008150 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008158:	f023 0301 	bic.w	r3, r3, #1
 800815c:	b2da      	uxtb	r2, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	6978      	ldr	r0, [r7, #20]
 800816a:	4798      	blx	r3
}
 800816c:	bf00      	nop
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	24001f6c 	.word	0x24001f6c

08008178 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008180:	f107 0308 	add.w	r3, r7, #8
 8008184:	4618      	mov	r0, r3
 8008186:	f000 f857 	bl	8008238 <prvGetNextExpireTime>
 800818a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4619      	mov	r1, r3
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f803 	bl	800819c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008196:	f000 f8d5 	bl	8008344 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800819a:	e7f1      	b.n	8008180 <prvTimerTask+0x8>

0800819c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081a6:	f7ff f919 	bl	80073dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081aa:	f107 0308 	add.w	r3, r7, #8
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 f866 	bl	8008280 <prvSampleTimeNow>
 80081b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d130      	bne.n	800821e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10a      	bne.n	80081d8 <prvProcessTimerOrBlockTask+0x3c>
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d806      	bhi.n	80081d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081ca:	f7ff f915 	bl	80073f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081ce:	68f9      	ldr	r1, [r7, #12]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7ff ff85 	bl	80080e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081d6:	e024      	b.n	8008222 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d008      	beq.n	80081f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081de:	4b13      	ldr	r3, [pc, #76]	; (800822c <prvProcessTimerOrBlockTask+0x90>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <prvProcessTimerOrBlockTask+0x50>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e000      	b.n	80081ee <prvProcessTimerOrBlockTask+0x52>
 80081ec:	2300      	movs	r3, #0
 80081ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081f0:	4b0f      	ldr	r3, [pc, #60]	; (8008230 <prvProcessTimerOrBlockTask+0x94>)
 80081f2:	6818      	ldr	r0, [r3, #0]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	4619      	mov	r1, r3
 80081fe:	f7fe fe5d 	bl	8006ebc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008202:	f7ff f8f9 	bl	80073f8 <xTaskResumeAll>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800820c:	4b09      	ldr	r3, [pc, #36]	; (8008234 <prvProcessTimerOrBlockTask+0x98>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	f3bf 8f6f 	isb	sy
}
 800821c:	e001      	b.n	8008222 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800821e:	f7ff f8eb 	bl	80073f8 <xTaskResumeAll>
}
 8008222:	bf00      	nop
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	24001f70 	.word	0x24001f70
 8008230:	24001f74 	.word	0x24001f74
 8008234:	e000ed04 	.word	0xe000ed04

08008238 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008240:	4b0e      	ldr	r3, [pc, #56]	; (800827c <prvGetNextExpireTime+0x44>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <prvGetNextExpireTime+0x16>
 800824a:	2201      	movs	r2, #1
 800824c:	e000      	b.n	8008250 <prvGetNextExpireTime+0x18>
 800824e:	2200      	movs	r2, #0
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d105      	bne.n	8008268 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800825c:	4b07      	ldr	r3, [pc, #28]	; (800827c <prvGetNextExpireTime+0x44>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	e001      	b.n	800826c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008268:	2300      	movs	r3, #0
 800826a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800826c:	68fb      	ldr	r3, [r7, #12]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	24001f6c 	.word	0x24001f6c

08008280 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008288:	f7ff f954 	bl	8007534 <xTaskGetTickCount>
 800828c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800828e:	4b0b      	ldr	r3, [pc, #44]	; (80082bc <prvSampleTimeNow+0x3c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	429a      	cmp	r2, r3
 8008296:	d205      	bcs.n	80082a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008298:	f000 f936 	bl	8008508 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	e002      	b.n	80082aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082aa:	4a04      	ldr	r2, [pc, #16]	; (80082bc <prvSampleTimeNow+0x3c>)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082b0:	68fb      	ldr	r3, [r7, #12]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	24001f7c 	.word	0x24001f7c

080082c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d812      	bhi.n	800830c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	1ad2      	subs	r2, r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d302      	bcc.n	80082fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082f4:	2301      	movs	r3, #1
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	e01b      	b.n	8008332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082fa:	4b10      	ldr	r3, [pc, #64]	; (800833c <prvInsertTimerInActiveList+0x7c>)
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3304      	adds	r3, #4
 8008302:	4619      	mov	r1, r3
 8008304:	4610      	mov	r0, r2
 8008306:	f7fd fce6 	bl	8005cd6 <vListInsert>
 800830a:	e012      	b.n	8008332 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d206      	bcs.n	8008322 <prvInsertTimerInActiveList+0x62>
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	429a      	cmp	r2, r3
 800831a:	d302      	bcc.n	8008322 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800831c:	2301      	movs	r3, #1
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e007      	b.n	8008332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008322:	4b07      	ldr	r3, [pc, #28]	; (8008340 <prvInsertTimerInActiveList+0x80>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3304      	adds	r3, #4
 800832a:	4619      	mov	r1, r3
 800832c:	4610      	mov	r0, r2
 800832e:	f7fd fcd2 	bl	8005cd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008332:	697b      	ldr	r3, [r7, #20]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	24001f70 	.word	0x24001f70
 8008340:	24001f6c 	.word	0x24001f6c

08008344 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08e      	sub	sp, #56	; 0x38
 8008348:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800834a:	e0ca      	b.n	80084e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	da18      	bge.n	8008384 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008352:	1d3b      	adds	r3, r7, #4
 8008354:	3304      	adds	r3, #4
 8008356:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10a      	bne.n	8008374 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	61fb      	str	r3, [r7, #28]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800837a:	6850      	ldr	r0, [r2, #4]
 800837c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800837e:	6892      	ldr	r2, [r2, #8]
 8008380:	4611      	mov	r1, r2
 8008382:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f2c0 80aa 	blt.w	80084e0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d004      	beq.n	80083a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	3304      	adds	r3, #4
 800839c:	4618      	mov	r0, r3
 800839e:	f7fd fcd3 	bl	8005d48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083a2:	463b      	mov	r3, r7
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff ff6b 	bl	8008280 <prvSampleTimeNow>
 80083aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b09      	cmp	r3, #9
 80083b0:	f200 8097 	bhi.w	80084e2 <prvProcessReceivedCommands+0x19e>
 80083b4:	a201      	add	r2, pc, #4	; (adr r2, 80083bc <prvProcessReceivedCommands+0x78>)
 80083b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ba:	bf00      	nop
 80083bc:	080083e5 	.word	0x080083e5
 80083c0:	080083e5 	.word	0x080083e5
 80083c4:	080083e5 	.word	0x080083e5
 80083c8:	08008459 	.word	0x08008459
 80083cc:	0800846d 	.word	0x0800846d
 80083d0:	080084b7 	.word	0x080084b7
 80083d4:	080083e5 	.word	0x080083e5
 80083d8:	080083e5 	.word	0x080083e5
 80083dc:	08008459 	.word	0x08008459
 80083e0:	0800846d 	.word	0x0800846d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083ea:	f043 0301 	orr.w	r3, r3, #1
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	18d1      	adds	r1, r2, r3
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008404:	f7ff ff5c 	bl	80082c0 <prvInsertTimerInActiveList>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d069      	beq.n	80084e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008414:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b00      	cmp	r3, #0
 8008422:	d05e      	beq.n	80084e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	441a      	add	r2, r3
 800842c:	2300      	movs	r3, #0
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	2300      	movs	r3, #0
 8008432:	2100      	movs	r1, #0
 8008434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008436:	f7ff fe05 	bl	8008044 <xTimerGenericCommand>
 800843a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d14f      	bne.n	80084e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	61bb      	str	r3, [r7, #24]
}
 8008454:	bf00      	nop
 8008456:	e7fe      	b.n	8008456 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800845e:	f023 0301 	bic.w	r3, r3, #1
 8008462:	b2da      	uxtb	r2, r3
 8008464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800846a:	e03a      	b.n	80084e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008472:	f043 0301 	orr.w	r3, r3, #1
 8008476:	b2da      	uxtb	r2, r3
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10a      	bne.n	80084a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	617b      	str	r3, [r7, #20]
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	699a      	ldr	r2, [r3, #24]
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	18d1      	adds	r1, r2, r3
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b0:	f7ff ff06 	bl	80082c0 <prvInsertTimerInActiveList>
					break;
 80084b4:	e015      	b.n	80084e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d103      	bne.n	80084cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80084c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c6:	f000 fbdb 	bl	8008c80 <vPortFree>
 80084ca:	e00a      	b.n	80084e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084d2:	f023 0301 	bic.w	r3, r3, #1
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084de:	e000      	b.n	80084e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80084e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084e2:	4b08      	ldr	r3, [pc, #32]	; (8008504 <prvProcessReceivedCommands+0x1c0>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	1d39      	adds	r1, r7, #4
 80084e8:	2200      	movs	r2, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe f8da 	bl	80066a4 <xQueueReceive>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f47f af2a 	bne.w	800834c <prvProcessReceivedCommands+0x8>
	}
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
 80084fc:	3730      	adds	r7, #48	; 0x30
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	24001f74 	.word	0x24001f74

08008508 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800850e:	e048      	b.n	80085a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008510:	4b2d      	ldr	r3, [pc, #180]	; (80085c8 <prvSwitchTimerLists+0xc0>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800851a:	4b2b      	ldr	r3, [pc, #172]	; (80085c8 <prvSwitchTimerLists+0xc0>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3304      	adds	r3, #4
 8008528:	4618      	mov	r0, r3
 800852a:	f7fd fc0d 	bl	8005d48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d02e      	beq.n	80085a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	4413      	add	r3, r2
 800854c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	429a      	cmp	r2, r3
 8008554:	d90e      	bls.n	8008574 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008562:	4b19      	ldr	r3, [pc, #100]	; (80085c8 <prvSwitchTimerLists+0xc0>)
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3304      	adds	r3, #4
 800856a:	4619      	mov	r1, r3
 800856c:	4610      	mov	r0, r2
 800856e:	f7fd fbb2 	bl	8005cd6 <vListInsert>
 8008572:	e016      	b.n	80085a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008574:	2300      	movs	r3, #0
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	2300      	movs	r3, #0
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	2100      	movs	r1, #0
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f7ff fd60 	bl	8008044 <xTimerGenericCommand>
 8008584:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10a      	bne.n	80085a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	603b      	str	r3, [r7, #0]
}
 800859e:	bf00      	nop
 80085a0:	e7fe      	b.n	80085a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085a2:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <prvSwitchTimerLists+0xc0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1b1      	bne.n	8008510 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085ac:	4b06      	ldr	r3, [pc, #24]	; (80085c8 <prvSwitchTimerLists+0xc0>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085b2:	4b06      	ldr	r3, [pc, #24]	; (80085cc <prvSwitchTimerLists+0xc4>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a04      	ldr	r2, [pc, #16]	; (80085c8 <prvSwitchTimerLists+0xc0>)
 80085b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085ba:	4a04      	ldr	r2, [pc, #16]	; (80085cc <prvSwitchTimerLists+0xc4>)
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	6013      	str	r3, [r2, #0]
}
 80085c0:	bf00      	nop
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	24001f6c 	.word	0x24001f6c
 80085cc:	24001f70 	.word	0x24001f70

080085d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085d6:	f000 f965 	bl	80088a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085da:	4b15      	ldr	r3, [pc, #84]	; (8008630 <prvCheckForValidListAndQueue+0x60>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d120      	bne.n	8008624 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085e2:	4814      	ldr	r0, [pc, #80]	; (8008634 <prvCheckForValidListAndQueue+0x64>)
 80085e4:	f7fd fb26 	bl	8005c34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80085e8:	4813      	ldr	r0, [pc, #76]	; (8008638 <prvCheckForValidListAndQueue+0x68>)
 80085ea:	f7fd fb23 	bl	8005c34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80085ee:	4b13      	ldr	r3, [pc, #76]	; (800863c <prvCheckForValidListAndQueue+0x6c>)
 80085f0:	4a10      	ldr	r2, [pc, #64]	; (8008634 <prvCheckForValidListAndQueue+0x64>)
 80085f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085f4:	4b12      	ldr	r3, [pc, #72]	; (8008640 <prvCheckForValidListAndQueue+0x70>)
 80085f6:	4a10      	ldr	r2, [pc, #64]	; (8008638 <prvCheckForValidListAndQueue+0x68>)
 80085f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085fa:	2300      	movs	r3, #0
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	4b11      	ldr	r3, [pc, #68]	; (8008644 <prvCheckForValidListAndQueue+0x74>)
 8008600:	4a11      	ldr	r2, [pc, #68]	; (8008648 <prvCheckForValidListAndQueue+0x78>)
 8008602:	2110      	movs	r1, #16
 8008604:	200a      	movs	r0, #10
 8008606:	f7fd fc31 	bl	8005e6c <xQueueGenericCreateStatic>
 800860a:	4603      	mov	r3, r0
 800860c:	4a08      	ldr	r2, [pc, #32]	; (8008630 <prvCheckForValidListAndQueue+0x60>)
 800860e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <prvCheckForValidListAndQueue+0x60>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008618:	4b05      	ldr	r3, [pc, #20]	; (8008630 <prvCheckForValidListAndQueue+0x60>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	490b      	ldr	r1, [pc, #44]	; (800864c <prvCheckForValidListAndQueue+0x7c>)
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe fbf8 	bl	8006e14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008624:	f000 f96e 	bl	8008904 <vPortExitCritical>
}
 8008628:	bf00      	nop
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	24001f74 	.word	0x24001f74
 8008634:	24001f44 	.word	0x24001f44
 8008638:	24001f58 	.word	0x24001f58
 800863c:	24001f6c 	.word	0x24001f6c
 8008640:	24001f70 	.word	0x24001f70
 8008644:	24002020 	.word	0x24002020
 8008648:	24001f80 	.word	0x24001f80
 800864c:	08014404 	.word	0x08014404

08008650 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3b04      	subs	r3, #4
 8008660:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3b04      	subs	r3, #4
 800866e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f023 0201 	bic.w	r2, r3, #1
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3b04      	subs	r3, #4
 800867e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008680:	4a0c      	ldr	r2, [pc, #48]	; (80086b4 <pxPortInitialiseStack+0x64>)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3b14      	subs	r3, #20
 800868a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3b04      	subs	r3, #4
 8008696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f06f 0202 	mvn.w	r2, #2
 800869e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	3b20      	subs	r3, #32
 80086a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086a6:	68fb      	ldr	r3, [r7, #12]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	080086b9 	.word	0x080086b9

080086b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <prvTaskExitError+0x54>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ca:	d00a      	beq.n	80086e2 <prvTaskExitError+0x2a>
	__asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	60fb      	str	r3, [r7, #12]
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <prvTaskExitError+0x28>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	60bb      	str	r3, [r7, #8]
}
 80086f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086f6:	bf00      	nop
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0fc      	beq.n	80086f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086fe:	bf00      	nop
 8008700:	bf00      	nop
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	24000024 	.word	0x24000024

08008710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008710:	4b07      	ldr	r3, [pc, #28]	; (8008730 <pxCurrentTCBConst2>)
 8008712:	6819      	ldr	r1, [r3, #0]
 8008714:	6808      	ldr	r0, [r1, #0]
 8008716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871a:	f380 8809 	msr	PSP, r0
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f04f 0000 	mov.w	r0, #0
 8008726:	f380 8811 	msr	BASEPRI, r0
 800872a:	4770      	bx	lr
 800872c:	f3af 8000 	nop.w

08008730 <pxCurrentTCBConst2>:
 8008730:	24001a44 	.word	0x24001a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop

08008738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008738:	4808      	ldr	r0, [pc, #32]	; (800875c <prvPortStartFirstTask+0x24>)
 800873a:	6800      	ldr	r0, [r0, #0]
 800873c:	6800      	ldr	r0, [r0, #0]
 800873e:	f380 8808 	msr	MSP, r0
 8008742:	f04f 0000 	mov.w	r0, #0
 8008746:	f380 8814 	msr	CONTROL, r0
 800874a:	b662      	cpsie	i
 800874c:	b661      	cpsie	f
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	df00      	svc	0
 8008758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800875a:	bf00      	nop
 800875c:	e000ed08 	.word	0xe000ed08

08008760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008766:	4b46      	ldr	r3, [pc, #280]	; (8008880 <xPortStartScheduler+0x120>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a46      	ldr	r2, [pc, #280]	; (8008884 <xPortStartScheduler+0x124>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d10a      	bne.n	8008786 <xPortStartScheduler+0x26>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	613b      	str	r3, [r7, #16]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008786:	4b3e      	ldr	r3, [pc, #248]	; (8008880 <xPortStartScheduler+0x120>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a3f      	ldr	r2, [pc, #252]	; (8008888 <xPortStartScheduler+0x128>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d10a      	bne.n	80087a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	60fb      	str	r3, [r7, #12]
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087a6:	4b39      	ldr	r3, [pc, #228]	; (800888c <xPortStartScheduler+0x12c>)
 80087a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	22ff      	movs	r2, #255	; 0xff
 80087b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	4b31      	ldr	r3, [pc, #196]	; (8008890 <xPortStartScheduler+0x130>)
 80087cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087ce:	4b31      	ldr	r3, [pc, #196]	; (8008894 <xPortStartScheduler+0x134>)
 80087d0:	2207      	movs	r2, #7
 80087d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087d4:	e009      	b.n	80087ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80087d6:	4b2f      	ldr	r3, [pc, #188]	; (8008894 <xPortStartScheduler+0x134>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3b01      	subs	r3, #1
 80087dc:	4a2d      	ldr	r2, [pc, #180]	; (8008894 <xPortStartScheduler+0x134>)
 80087de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087ea:	78fb      	ldrb	r3, [r7, #3]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f2:	2b80      	cmp	r3, #128	; 0x80
 80087f4:	d0ef      	beq.n	80087d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087f6:	4b27      	ldr	r3, [pc, #156]	; (8008894 <xPortStartScheduler+0x134>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f1c3 0307 	rsb	r3, r3, #7
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d00a      	beq.n	8008818 <xPortStartScheduler+0xb8>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	60bb      	str	r3, [r7, #8]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008818:	4b1e      	ldr	r3, [pc, #120]	; (8008894 <xPortStartScheduler+0x134>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	021b      	lsls	r3, r3, #8
 800881e:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <xPortStartScheduler+0x134>)
 8008820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008822:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <xPortStartScheduler+0x134>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800882a:	4a1a      	ldr	r2, [pc, #104]	; (8008894 <xPortStartScheduler+0x134>)
 800882c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	b2da      	uxtb	r2, r3
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008836:	4b18      	ldr	r3, [pc, #96]	; (8008898 <xPortStartScheduler+0x138>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a17      	ldr	r2, [pc, #92]	; (8008898 <xPortStartScheduler+0x138>)
 800883c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008842:	4b15      	ldr	r3, [pc, #84]	; (8008898 <xPortStartScheduler+0x138>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a14      	ldr	r2, [pc, #80]	; (8008898 <xPortStartScheduler+0x138>)
 8008848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800884c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800884e:	f000 f8dd 	bl	8008a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008852:	4b12      	ldr	r3, [pc, #72]	; (800889c <xPortStartScheduler+0x13c>)
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008858:	f000 f8fc 	bl	8008a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800885c:	4b10      	ldr	r3, [pc, #64]	; (80088a0 <xPortStartScheduler+0x140>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a0f      	ldr	r2, [pc, #60]	; (80088a0 <xPortStartScheduler+0x140>)
 8008862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008868:	f7ff ff66 	bl	8008738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800886c:	f7fe ff3e 	bl	80076ec <vTaskSwitchContext>
	prvTaskExitError();
 8008870:	f7ff ff22 	bl	80086b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	e000ed00 	.word	0xe000ed00
 8008884:	410fc271 	.word	0x410fc271
 8008888:	410fc270 	.word	0x410fc270
 800888c:	e000e400 	.word	0xe000e400
 8008890:	24002070 	.word	0x24002070
 8008894:	24002074 	.word	0x24002074
 8008898:	e000ed20 	.word	0xe000ed20
 800889c:	24000024 	.word	0x24000024
 80088a0:	e000ef34 	.word	0xe000ef34

080088a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	607b      	str	r3, [r7, #4]
}
 80088bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088be:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <vPortEnterCritical+0x58>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3301      	adds	r3, #1
 80088c4:	4a0d      	ldr	r2, [pc, #52]	; (80088fc <vPortEnterCritical+0x58>)
 80088c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088c8:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <vPortEnterCritical+0x58>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d10f      	bne.n	80088f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <vPortEnterCritical+0x5c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	603b      	str	r3, [r7, #0]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <vPortEnterCritical+0x4a>
	}
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	24000024 	.word	0x24000024
 8008900:	e000ed04 	.word	0xe000ed04

08008904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800890a:	4b12      	ldr	r3, [pc, #72]	; (8008954 <vPortExitCritical+0x50>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <vPortExitCritical+0x24>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	607b      	str	r3, [r7, #4]
}
 8008924:	bf00      	nop
 8008926:	e7fe      	b.n	8008926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <vPortExitCritical+0x50>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3b01      	subs	r3, #1
 800892e:	4a09      	ldr	r2, [pc, #36]	; (8008954 <vPortExitCritical+0x50>)
 8008930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008932:	4b08      	ldr	r3, [pc, #32]	; (8008954 <vPortExitCritical+0x50>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d105      	bne.n	8008946 <vPortExitCritical+0x42>
 800893a:	2300      	movs	r3, #0
 800893c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	f383 8811 	msr	BASEPRI, r3
}
 8008944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	24000024 	.word	0x24000024
	...

08008960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008960:	f3ef 8009 	mrs	r0, PSP
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	4b15      	ldr	r3, [pc, #84]	; (80089c0 <pxCurrentTCBConst>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	f01e 0f10 	tst.w	lr, #16
 8008970:	bf08      	it	eq
 8008972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897a:	6010      	str	r0, [r2, #0]
 800897c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008984:	f380 8811 	msr	BASEPRI, r0
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f7fe feac 	bl	80076ec <vTaskSwitchContext>
 8008994:	f04f 0000 	mov.w	r0, #0
 8008998:	f380 8811 	msr	BASEPRI, r0
 800899c:	bc09      	pop	{r0, r3}
 800899e:	6819      	ldr	r1, [r3, #0]
 80089a0:	6808      	ldr	r0, [r1, #0]
 80089a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a6:	f01e 0f10 	tst.w	lr, #16
 80089aa:	bf08      	it	eq
 80089ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089b0:	f380 8809 	msr	PSP, r0
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	f3af 8000 	nop.w

080089c0 <pxCurrentTCBConst>:
 80089c0:	24001a44 	.word	0x24001a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop

080089c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	607b      	str	r3, [r7, #4]
}
 80089e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089e2:	f7fe fdc9 	bl	8007578 <xTaskIncrementTick>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d003      	beq.n	80089f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089ec:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <xPortSysTickHandler+0x40>)
 80089ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	2300      	movs	r3, #0
 80089f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	f383 8811 	msr	BASEPRI, r3
}
 80089fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	e000ed04 	.word	0xe000ed04

08008a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a10:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <vPortSetupTimerInterrupt+0x34>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a16:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <vPortSetupTimerInterrupt+0x38>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <vPortSetupTimerInterrupt+0x3c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a0a      	ldr	r2, [pc, #40]	; (8008a4c <vPortSetupTimerInterrupt+0x40>)
 8008a22:	fba2 2303 	umull	r2, r3, r2, r3
 8008a26:	099b      	lsrs	r3, r3, #6
 8008a28:	4a09      	ldr	r2, [pc, #36]	; (8008a50 <vPortSetupTimerInterrupt+0x44>)
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a2e:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <vPortSetupTimerInterrupt+0x34>)
 8008a30:	2207      	movs	r2, #7
 8008a32:	601a      	str	r2, [r3, #0]
}
 8008a34:	bf00      	nop
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	e000e010 	.word	0xe000e010
 8008a44:	e000e018 	.word	0xe000e018
 8008a48:	24000000 	.word	0x24000000
 8008a4c:	10624dd3 	.word	0x10624dd3
 8008a50:	e000e014 	.word	0xe000e014

08008a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a64 <vPortEnableVFP+0x10>
 8008a58:	6801      	ldr	r1, [r0, #0]
 8008a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a5e:	6001      	str	r1, [r0, #0]
 8008a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a62:	bf00      	nop
 8008a64:	e000ed88 	.word	0xe000ed88

08008a68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a6e:	f3ef 8305 	mrs	r3, IPSR
 8008a72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b0f      	cmp	r3, #15
 8008a78:	d914      	bls.n	8008aa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a7a:	4a17      	ldr	r2, [pc, #92]	; (8008ad8 <vPortValidateInterruptPriority+0x70>)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4413      	add	r3, r2
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a84:	4b15      	ldr	r3, [pc, #84]	; (8008adc <vPortValidateInterruptPriority+0x74>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	7afa      	ldrb	r2, [r7, #11]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d20a      	bcs.n	8008aa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	607b      	str	r3, [r7, #4]
}
 8008aa0:	bf00      	nop
 8008aa2:	e7fe      	b.n	8008aa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008aa4:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <vPortValidateInterruptPriority+0x78>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008aac:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <vPortValidateInterruptPriority+0x7c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d90a      	bls.n	8008aca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	603b      	str	r3, [r7, #0]
}
 8008ac6:	bf00      	nop
 8008ac8:	e7fe      	b.n	8008ac8 <vPortValidateInterruptPriority+0x60>
	}
 8008aca:	bf00      	nop
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	e000e3f0 	.word	0xe000e3f0
 8008adc:	24002070 	.word	0x24002070
 8008ae0:	e000ed0c 	.word	0xe000ed0c
 8008ae4:	24002074 	.word	0x24002074

08008ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08a      	sub	sp, #40	; 0x28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008af4:	f7fe fc72 	bl	80073dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008af8:	4b5b      	ldr	r3, [pc, #364]	; (8008c68 <pvPortMalloc+0x180>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b00:	f000 f920 	bl	8008d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b04:	4b59      	ldr	r3, [pc, #356]	; (8008c6c <pvPortMalloc+0x184>)
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f040 8093 	bne.w	8008c38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01d      	beq.n	8008b54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b18:	2208      	movs	r2, #8
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d014      	beq.n	8008b54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f023 0307 	bic.w	r3, r3, #7
 8008b30:	3308      	adds	r3, #8
 8008b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00a      	beq.n	8008b54 <pvPortMalloc+0x6c>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	617b      	str	r3, [r7, #20]
}
 8008b50:	bf00      	nop
 8008b52:	e7fe      	b.n	8008b52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d06e      	beq.n	8008c38 <pvPortMalloc+0x150>
 8008b5a:	4b45      	ldr	r3, [pc, #276]	; (8008c70 <pvPortMalloc+0x188>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d869      	bhi.n	8008c38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b64:	4b43      	ldr	r3, [pc, #268]	; (8008c74 <pvPortMalloc+0x18c>)
 8008b66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b68:	4b42      	ldr	r3, [pc, #264]	; (8008c74 <pvPortMalloc+0x18c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b6e:	e004      	b.n	8008b7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d903      	bls.n	8008b8c <pvPortMalloc+0xa4>
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1f1      	bne.n	8008b70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b8c:	4b36      	ldr	r3, [pc, #216]	; (8008c68 <pvPortMalloc+0x180>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d050      	beq.n	8008c38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2208      	movs	r2, #8
 8008b9c:	4413      	add	r3, r2
 8008b9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	2308      	movs	r3, #8
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d91f      	bls.n	8008bf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <pvPortMalloc+0xf8>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	613b      	str	r3, [r7, #16]
}
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	1ad2      	subs	r2, r2, r3
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bf2:	69b8      	ldr	r0, [r7, #24]
 8008bf4:	f000 f908 	bl	8008e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bf8:	4b1d      	ldr	r3, [pc, #116]	; (8008c70 <pvPortMalloc+0x188>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	4a1b      	ldr	r2, [pc, #108]	; (8008c70 <pvPortMalloc+0x188>)
 8008c04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c06:	4b1a      	ldr	r3, [pc, #104]	; (8008c70 <pvPortMalloc+0x188>)
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4b1b      	ldr	r3, [pc, #108]	; (8008c78 <pvPortMalloc+0x190>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d203      	bcs.n	8008c1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c12:	4b17      	ldr	r3, [pc, #92]	; (8008c70 <pvPortMalloc+0x188>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a18      	ldr	r2, [pc, #96]	; (8008c78 <pvPortMalloc+0x190>)
 8008c18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	685a      	ldr	r2, [r3, #4]
 8008c1e:	4b13      	ldr	r3, [pc, #76]	; (8008c6c <pvPortMalloc+0x184>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	431a      	orrs	r2, r3
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c2e:	4b13      	ldr	r3, [pc, #76]	; (8008c7c <pvPortMalloc+0x194>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	4a11      	ldr	r2, [pc, #68]	; (8008c7c <pvPortMalloc+0x194>)
 8008c36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c38:	f7fe fbde 	bl	80073f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	f003 0307 	and.w	r3, r3, #7
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00a      	beq.n	8008c5c <pvPortMalloc+0x174>
	__asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	60fb      	str	r3, [r7, #12]
}
 8008c58:	bf00      	nop
 8008c5a:	e7fe      	b.n	8008c5a <pvPortMalloc+0x172>
	return pvReturn;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3728      	adds	r7, #40	; 0x28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	24005c80 	.word	0x24005c80
 8008c6c:	24005c94 	.word	0x24005c94
 8008c70:	24005c84 	.word	0x24005c84
 8008c74:	24005c78 	.word	0x24005c78
 8008c78:	24005c88 	.word	0x24005c88
 8008c7c:	24005c8c 	.word	0x24005c8c

08008c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d04d      	beq.n	8008d2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c92:	2308      	movs	r3, #8
 8008c94:	425b      	negs	r3, r3
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	4413      	add	r3, r2
 8008c9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	4b24      	ldr	r3, [pc, #144]	; (8008d38 <vPortFree+0xb8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10a      	bne.n	8008cc4 <vPortFree+0x44>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	60fb      	str	r3, [r7, #12]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00a      	beq.n	8008ce2 <vPortFree+0x62>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	60bb      	str	r3, [r7, #8]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	4b14      	ldr	r3, [pc, #80]	; (8008d38 <vPortFree+0xb8>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4013      	ands	r3, r2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01e      	beq.n	8008d2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d11a      	bne.n	8008d2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	4b0e      	ldr	r3, [pc, #56]	; (8008d38 <vPortFree+0xb8>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	43db      	mvns	r3, r3
 8008d02:	401a      	ands	r2, r3
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d08:	f7fe fb68 	bl	80073dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <vPortFree+0xbc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4413      	add	r3, r2
 8008d16:	4a09      	ldr	r2, [pc, #36]	; (8008d3c <vPortFree+0xbc>)
 8008d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d1a:	6938      	ldr	r0, [r7, #16]
 8008d1c:	f000 f874 	bl	8008e08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d20:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <vPortFree+0xc0>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3301      	adds	r3, #1
 8008d26:	4a06      	ldr	r2, [pc, #24]	; (8008d40 <vPortFree+0xc0>)
 8008d28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d2a:	f7fe fb65 	bl	80073f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d2e:	bf00      	nop
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	24005c94 	.word	0x24005c94
 8008d3c:	24005c84 	.word	0x24005c84
 8008d40:	24005c90 	.word	0x24005c90

08008d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d50:	4b27      	ldr	r3, [pc, #156]	; (8008df0 <prvHeapInit+0xac>)
 8008d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00c      	beq.n	8008d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3307      	adds	r3, #7
 8008d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f023 0307 	bic.w	r3, r3, #7
 8008d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	4a1f      	ldr	r2, [pc, #124]	; (8008df0 <prvHeapInit+0xac>)
 8008d74:	4413      	add	r3, r2
 8008d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d7c:	4a1d      	ldr	r2, [pc, #116]	; (8008df4 <prvHeapInit+0xb0>)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d82:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <prvHeapInit+0xb0>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d90:	2208      	movs	r2, #8
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 0307 	bic.w	r3, r3, #7
 8008d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	4a15      	ldr	r2, [pc, #84]	; (8008df8 <prvHeapInit+0xb4>)
 8008da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008da6:	4b14      	ldr	r3, [pc, #80]	; (8008df8 <prvHeapInit+0xb4>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2200      	movs	r2, #0
 8008dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dae:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <prvHeapInit+0xb4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	1ad2      	subs	r2, r2, r3
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008dc4:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <prvHeapInit+0xb4>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4a0a      	ldr	r2, [pc, #40]	; (8008dfc <prvHeapInit+0xb8>)
 8008dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	4a09      	ldr	r2, [pc, #36]	; (8008e00 <prvHeapInit+0xbc>)
 8008dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ddc:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <prvHeapInit+0xc0>)
 8008dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008de2:	601a      	str	r2, [r3, #0]
}
 8008de4:	bf00      	nop
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	24002078 	.word	0x24002078
 8008df4:	24005c78 	.word	0x24005c78
 8008df8:	24005c80 	.word	0x24005c80
 8008dfc:	24005c88 	.word	0x24005c88
 8008e00:	24005c84 	.word	0x24005c84
 8008e04:	24005c94 	.word	0x24005c94

08008e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e10:	4b28      	ldr	r3, [pc, #160]	; (8008eb4 <prvInsertBlockIntoFreeList+0xac>)
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	e002      	b.n	8008e1c <prvInsertBlockIntoFreeList+0x14>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d8f7      	bhi.n	8008e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	4413      	add	r3, r2
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d108      	bne.n	8008e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	441a      	add	r2, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	441a      	add	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d118      	bne.n	8008e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4b15      	ldr	r3, [pc, #84]	; (8008eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d00d      	beq.n	8008e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	441a      	add	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	e008      	b.n	8008e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e86:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	e003      	b.n	8008e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d002      	beq.n	8008ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ea6:	bf00      	nop
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	24005c78 	.word	0x24005c78
 8008eb8:	24005c80 	.word	0x24005c80

08008ebc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008ec6:	f007 fb7d 	bl	80105c4 <sys_timeouts_sleeptime>
 8008eca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed2:	d10b      	bne.n	8008eec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008ed4:	4813      	ldr	r0, [pc, #76]	; (8008f24 <tcpip_timeouts_mbox_fetch+0x68>)
 8008ed6:	f00a f8fa 	bl	80130ce <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8008eda:	2200      	movs	r2, #0
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f00a f882 	bl	8012fe8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008ee4:	480f      	ldr	r0, [pc, #60]	; (8008f24 <tcpip_timeouts_mbox_fetch+0x68>)
 8008ee6:	f00a f8e3 	bl	80130b0 <sys_mutex_lock>
    return;
 8008eea:	e018      	b.n	8008f1e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d102      	bne.n	8008ef8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008ef2:	f007 fb2d 	bl	8010550 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008ef6:	e7e6      	b.n	8008ec6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008ef8:	480a      	ldr	r0, [pc, #40]	; (8008f24 <tcpip_timeouts_mbox_fetch+0x68>)
 8008efa:	f00a f8e8 	bl	80130ce <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f00a f870 	bl	8012fe8 <sys_arch_mbox_fetch>
 8008f08:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8008f0a:	4806      	ldr	r0, [pc, #24]	; (8008f24 <tcpip_timeouts_mbox_fetch+0x68>)
 8008f0c:	f00a f8d0 	bl	80130b0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f16:	d102      	bne.n	8008f1e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008f18:	f007 fb1a 	bl	8010550 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008f1c:	e7d3      	b.n	8008ec6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	240078e8 	.word	0x240078e8

08008f28 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8008f30:	4810      	ldr	r0, [pc, #64]	; (8008f74 <tcpip_thread+0x4c>)
 8008f32:	f00a f8bd 	bl	80130b0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008f36:	4b10      	ldr	r3, [pc, #64]	; (8008f78 <tcpip_thread+0x50>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8008f3e:	4b0e      	ldr	r3, [pc, #56]	; (8008f78 <tcpip_thread+0x50>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a0e      	ldr	r2, [pc, #56]	; (8008f7c <tcpip_thread+0x54>)
 8008f44:	6812      	ldr	r2, [r2, #0]
 8008f46:	4610      	mov	r0, r2
 8008f48:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008f4a:	f107 030c 	add.w	r3, r7, #12
 8008f4e:	4619      	mov	r1, r3
 8008f50:	480b      	ldr	r0, [pc, #44]	; (8008f80 <tcpip_thread+0x58>)
 8008f52:	f7ff ffb3 	bl	8008ebc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d106      	bne.n	8008f6a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008f5c:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <tcpip_thread+0x5c>)
 8008f5e:	2291      	movs	r2, #145	; 0x91
 8008f60:	4909      	ldr	r1, [pc, #36]	; (8008f88 <tcpip_thread+0x60>)
 8008f62:	480a      	ldr	r0, [pc, #40]	; (8008f8c <tcpip_thread+0x64>)
 8008f64:	f00a fad6 	bl	8013514 <iprintf>
      continue;
 8008f68:	e003      	b.n	8008f72 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 f80f 	bl	8008f90 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008f72:	e7ea      	b.n	8008f4a <tcpip_thread+0x22>
 8008f74:	240078e8 	.word	0x240078e8
 8008f78:	24005c98 	.word	0x24005c98
 8008f7c:	24005c9c 	.word	0x24005c9c
 8008f80:	24005ca0 	.word	0x24005ca0
 8008f84:	0801440c 	.word	0x0801440c
 8008f88:	0801443c 	.word	0x0801443c
 8008f8c:	0801445c 	.word	0x0801445c

08008f90 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d026      	beq.n	8008fee <tcpip_thread_handle_msg+0x5e>
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	dc2b      	bgt.n	8008ffc <tcpip_thread_handle_msg+0x6c>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <tcpip_thread_handle_msg+0x1e>
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d015      	beq.n	8008fd8 <tcpip_thread_handle_msg+0x48>
 8008fac:	e026      	b.n	8008ffc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	6850      	ldr	r0, [r2, #4]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	6892      	ldr	r2, [r2, #8]
 8008fba:	4611      	mov	r1, r2
 8008fbc:	4798      	blx	r3
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d004      	beq.n	8008fce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f001 fdc3 	bl	800ab54 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008fce:	6879      	ldr	r1, [r7, #4]
 8008fd0:	2009      	movs	r0, #9
 8008fd2:	f000 ff1b 	bl	8009e0c <memp_free>
      break;
 8008fd6:	e018      	b.n	800900a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	6892      	ldr	r2, [r2, #8]
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008fe4:	6879      	ldr	r1, [r7, #4]
 8008fe6:	2008      	movs	r0, #8
 8008fe8:	f000 ff10 	bl	8009e0c <memp_free>
      break;
 8008fec:	e00d      	b.n	800900a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	6892      	ldr	r2, [r2, #8]
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	4798      	blx	r3
      break;
 8008ffa:	e006      	b.n	800900a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008ffc:	4b05      	ldr	r3, [pc, #20]	; (8009014 <tcpip_thread_handle_msg+0x84>)
 8008ffe:	22cf      	movs	r2, #207	; 0xcf
 8009000:	4905      	ldr	r1, [pc, #20]	; (8009018 <tcpip_thread_handle_msg+0x88>)
 8009002:	4806      	ldr	r0, [pc, #24]	; (800901c <tcpip_thread_handle_msg+0x8c>)
 8009004:	f00a fa86 	bl	8013514 <iprintf>
      break;
 8009008:	bf00      	nop
  }
}
 800900a:	bf00      	nop
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	0801440c 	.word	0x0801440c
 8009018:	0801443c 	.word	0x0801443c
 800901c:	0801445c 	.word	0x0801445c

08009020 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800902c:	481a      	ldr	r0, [pc, #104]	; (8009098 <tcpip_inpkt+0x78>)
 800902e:	f00a f80c 	bl	801304a <sys_mbox_valid>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d105      	bne.n	8009044 <tcpip_inpkt+0x24>
 8009038:	4b18      	ldr	r3, [pc, #96]	; (800909c <tcpip_inpkt+0x7c>)
 800903a:	22fc      	movs	r2, #252	; 0xfc
 800903c:	4918      	ldr	r1, [pc, #96]	; (80090a0 <tcpip_inpkt+0x80>)
 800903e:	4819      	ldr	r0, [pc, #100]	; (80090a4 <tcpip_inpkt+0x84>)
 8009040:	f00a fa68 	bl	8013514 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009044:	2009      	movs	r0, #9
 8009046:	f000 fe6b 	bl	8009d20 <memp_malloc>
 800904a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d102      	bne.n	8009058 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009052:	f04f 33ff 	mov.w	r3, #4294967295
 8009056:	e01a      	b.n	800908e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009070:	6979      	ldr	r1, [r7, #20]
 8009072:	4809      	ldr	r0, [pc, #36]	; (8009098 <tcpip_inpkt+0x78>)
 8009074:	f009 ff9e 	bl	8012fb4 <sys_mbox_trypost>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d006      	beq.n	800908c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800907e:	6979      	ldr	r1, [r7, #20]
 8009080:	2009      	movs	r0, #9
 8009082:	f000 fec3 	bl	8009e0c <memp_free>
    return ERR_MEM;
 8009086:	f04f 33ff 	mov.w	r3, #4294967295
 800908a:	e000      	b.n	800908e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800908c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	24005ca0 	.word	0x24005ca0
 800909c:	0801440c 	.word	0x0801440c
 80090a0:	08014484 	.word	0x08014484
 80090a4:	0801445c 	.word	0x0801445c

080090a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090b8:	f003 0318 	and.w	r3, r3, #24
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d006      	beq.n	80090ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80090c0:	4a08      	ldr	r2, [pc, #32]	; (80090e4 <tcpip_input+0x3c>)
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff ffab 	bl	8009020 <tcpip_inpkt>
 80090ca:	4603      	mov	r3, r0
 80090cc:	e005      	b.n	80090da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80090ce:	4a06      	ldr	r2, [pc, #24]	; (80090e8 <tcpip_input+0x40>)
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7ff ffa4 	bl	8009020 <tcpip_inpkt>
 80090d8:	4603      	mov	r3, r0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	08012dd5 	.word	0x08012dd5
 80090e8:	08011cdd 	.word	0x08011cdd

080090ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80090f6:	4819      	ldr	r0, [pc, #100]	; (800915c <tcpip_try_callback+0x70>)
 80090f8:	f009 ffa7 	bl	801304a <sys_mbox_valid>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d106      	bne.n	8009110 <tcpip_try_callback+0x24>
 8009102:	4b17      	ldr	r3, [pc, #92]	; (8009160 <tcpip_try_callback+0x74>)
 8009104:	f240 125d 	movw	r2, #349	; 0x15d
 8009108:	4916      	ldr	r1, [pc, #88]	; (8009164 <tcpip_try_callback+0x78>)
 800910a:	4817      	ldr	r0, [pc, #92]	; (8009168 <tcpip_try_callback+0x7c>)
 800910c:	f00a fa02 	bl	8013514 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009110:	2008      	movs	r0, #8
 8009112:	f000 fe05 	bl	8009d20 <memp_malloc>
 8009116:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d102      	bne.n	8009124 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800911e:	f04f 33ff 	mov.w	r3, #4294967295
 8009122:	e017      	b.n	8009154 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2201      	movs	r2, #1
 8009128:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009136:	68f9      	ldr	r1, [r7, #12]
 8009138:	4808      	ldr	r0, [pc, #32]	; (800915c <tcpip_try_callback+0x70>)
 800913a:	f009 ff3b 	bl	8012fb4 <sys_mbox_trypost>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d006      	beq.n	8009152 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009144:	68f9      	ldr	r1, [r7, #12]
 8009146:	2008      	movs	r0, #8
 8009148:	f000 fe60 	bl	8009e0c <memp_free>
    return ERR_MEM;
 800914c:	f04f 33ff 	mov.w	r3, #4294967295
 8009150:	e000      	b.n	8009154 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	24005ca0 	.word	0x24005ca0
 8009160:	0801440c 	.word	0x0801440c
 8009164:	08014484 	.word	0x08014484
 8009168:	0801445c 	.word	0x0801445c

0800916c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af02      	add	r7, sp, #8
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009176:	f000 f92d 	bl	80093d4 <lwip_init>

  tcpip_init_done = initfunc;
 800917a:	4a17      	ldr	r2, [pc, #92]	; (80091d8 <tcpip_init+0x6c>)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009180:	4a16      	ldr	r2, [pc, #88]	; (80091dc <tcpip_init+0x70>)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009186:	2106      	movs	r1, #6
 8009188:	4815      	ldr	r0, [pc, #84]	; (80091e0 <tcpip_init+0x74>)
 800918a:	f009 fef9 	bl	8012f80 <sys_mbox_new>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d006      	beq.n	80091a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009194:	4b13      	ldr	r3, [pc, #76]	; (80091e4 <tcpip_init+0x78>)
 8009196:	f240 2261 	movw	r2, #609	; 0x261
 800919a:	4913      	ldr	r1, [pc, #76]	; (80091e8 <tcpip_init+0x7c>)
 800919c:	4813      	ldr	r0, [pc, #76]	; (80091ec <tcpip_init+0x80>)
 800919e:	f00a f9b9 	bl	8013514 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80091a2:	4813      	ldr	r0, [pc, #76]	; (80091f0 <tcpip_init+0x84>)
 80091a4:	f009 ff6e 	bl	8013084 <sys_mutex_new>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d006      	beq.n	80091bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80091ae:	4b0d      	ldr	r3, [pc, #52]	; (80091e4 <tcpip_init+0x78>)
 80091b0:	f240 2265 	movw	r2, #613	; 0x265
 80091b4:	490f      	ldr	r1, [pc, #60]	; (80091f4 <tcpip_init+0x88>)
 80091b6:	480d      	ldr	r0, [pc, #52]	; (80091ec <tcpip_init+0x80>)
 80091b8:	f00a f9ac 	bl	8013514 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80091bc:	2318      	movs	r3, #24
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091c4:	2200      	movs	r2, #0
 80091c6:	490c      	ldr	r1, [pc, #48]	; (80091f8 <tcpip_init+0x8c>)
 80091c8:	480c      	ldr	r0, [pc, #48]	; (80091fc <tcpip_init+0x90>)
 80091ca:	f009 ff8d 	bl	80130e8 <sys_thread_new>
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	24005c98 	.word	0x24005c98
 80091dc:	24005c9c 	.word	0x24005c9c
 80091e0:	24005ca0 	.word	0x24005ca0
 80091e4:	0801440c 	.word	0x0801440c
 80091e8:	08014494 	.word	0x08014494
 80091ec:	0801445c 	.word	0x0801445c
 80091f0:	240078e8 	.word	0x240078e8
 80091f4:	080144b8 	.word	0x080144b8
 80091f8:	08008f29 	.word	0x08008f29
 80091fc:	080144dc 	.word	0x080144dc

08009200 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800920a:	88fb      	ldrh	r3, [r7, #6]
 800920c:	021b      	lsls	r3, r3, #8
 800920e:	b21a      	sxth	r2, r3
 8009210:	88fb      	ldrh	r3, [r7, #6]
 8009212:	0a1b      	lsrs	r3, r3, #8
 8009214:	b29b      	uxth	r3, r3
 8009216:	b21b      	sxth	r3, r3
 8009218:	4313      	orrs	r3, r2
 800921a:	b21b      	sxth	r3, r3
 800921c:	b29b      	uxth	r3, r3
}
 800921e:	4618      	mov	r0, r3
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	061a      	lsls	r2, r3, #24
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800923e:	431a      	orrs	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	0a1b      	lsrs	r3, r3, #8
 8009244:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009248:	431a      	orrs	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	0e1b      	lsrs	r3, r3, #24
 800924e:	4313      	orrs	r3, r2
}
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800925c:	b480      	push	{r7}
 800925e:	b089      	sub	sp, #36	; 0x24
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800926a:	2300      	movs	r3, #0
 800926c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800926e:	2300      	movs	r3, #0
 8009270:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00d      	beq.n	800929c <lwip_standard_chksum+0x40>
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	dd0a      	ble.n	800929c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	1c53      	adds	r3, r2, #1
 800928a:	61fb      	str	r3, [r7, #28]
 800928c:	f107 030e 	add.w	r3, r7, #14
 8009290:	3301      	adds	r3, #1
 8009292:	7812      	ldrb	r2, [r2, #0]
 8009294:	701a      	strb	r2, [r3, #0]
    len--;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	3b01      	subs	r3, #1
 800929a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80092a0:	e00a      	b.n	80092b8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	1c9a      	adds	r2, r3, #2
 80092a6:	61ba      	str	r2, [r7, #24]
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	4413      	add	r3, r2
 80092b0:	617b      	str	r3, [r7, #20]
    len -= 2;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	3b02      	subs	r3, #2
 80092b6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	dcf1      	bgt.n	80092a2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	dd04      	ble.n	80092ce <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80092c4:	f107 030e 	add.w	r3, r7, #14
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	7812      	ldrb	r2, [r2, #0]
 80092cc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80092ce:	89fb      	ldrh	r3, [r7, #14]
 80092d0:	461a      	mov	r2, r3
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	4413      	add	r3, r2
 80092d6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	0c1a      	lsrs	r2, r3, #16
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	4413      	add	r3, r2
 80092e2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	0c1a      	lsrs	r2, r3, #16
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	4413      	add	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d007      	beq.n	8009306 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	021b      	lsls	r3, r3, #8
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	0a1b      	lsrs	r3, r3, #8
 8009300:	b2db      	uxtb	r3, r3
 8009302:	4313      	orrs	r3, r2
 8009304:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	b29b      	uxth	r3, r3
}
 800930a:	4618      	mov	r0, r3
 800930c:	3724      	adds	r7, #36	; 0x24
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b082      	sub	sp, #8
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	460b      	mov	r3, r1
 8009320:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8009322:	887b      	ldrh	r3, [r7, #2]
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff ff98 	bl	800925c <lwip_standard_chksum>
 800932c:	4603      	mov	r3, r0
 800932e:	43db      	mvns	r3, r3
 8009330:	b29b      	uxth	r3, r3
}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b086      	sub	sp, #24
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	613b      	str	r3, [r7, #16]
 800934e:	e02b      	b.n	80093a8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	895b      	ldrh	r3, [r3, #10]
 8009358:	4619      	mov	r1, r3
 800935a:	4610      	mov	r0, r2
 800935c:	f7ff ff7e 	bl	800925c <lwip_standard_chksum>
 8009360:	4603      	mov	r3, r0
 8009362:	461a      	mov	r2, r3
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	4413      	add	r3, r2
 8009368:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	0c1a      	lsrs	r2, r3, #16
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	b29b      	uxth	r3, r3
 8009372:	4413      	add	r3, r2
 8009374:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	895b      	ldrh	r3, [r3, #10]
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	b29b      	uxth	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00e      	beq.n	80093a2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	bf0c      	ite	eq
 800938a:	2301      	moveq	r3, #1
 800938c:	2300      	movne	r3, #0
 800938e:	b2db      	uxtb	r3, r3
 8009390:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	021b      	lsls	r3, r3, #8
 8009396:	b29a      	uxth	r2, r3
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	0a1b      	lsrs	r3, r3, #8
 800939c:	b2db      	uxtb	r3, r3
 800939e:	4313      	orrs	r3, r2
 80093a0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	613b      	str	r3, [r7, #16]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1d0      	bne.n	8009350 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d007      	beq.n	80093c4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	021b      	lsls	r3, r3, #8
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	0a1b      	lsrs	r3, r3, #8
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	4313      	orrs	r3, r2
 80093c2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	43db      	mvns	r3, r3
 80093ca:	b29b      	uxth	r3, r3
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80093de:	f009 fe45 	bl	801306c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80093e2:	f000 f8d5 	bl	8009590 <mem_init>
  memp_init();
 80093e6:	f000 fc2d 	bl	8009c44 <memp_init>
  pbuf_init();
  netif_init();
 80093ea:	f000 fd39 	bl	8009e60 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80093ee:	f007 f921 	bl	8010634 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80093f2:	f001 fe49 	bl	800b088 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80093f6:	f007 f863 	bl	80104c0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800940e:	4b05      	ldr	r3, [pc, #20]	; (8009424 <ptr_to_mem+0x20>)
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	88fb      	ldrh	r3, [r7, #6]
 8009414:	4413      	add	r3, r2
}
 8009416:	4618      	mov	r0, r3
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	24005ca4 	.word	0x24005ca4

08009428 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009430:	4b05      	ldr	r3, [pc, #20]	; (8009448 <mem_to_ptr+0x20>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	b29b      	uxth	r3, r3
}
 800943a:	4618      	mov	r0, r3
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	24005ca4 	.word	0x24005ca4

0800944c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800944c:	b590      	push	{r4, r7, lr}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009454:	4b45      	ldr	r3, [pc, #276]	; (800956c <plug_holes+0x120>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	429a      	cmp	r2, r3
 800945c:	d206      	bcs.n	800946c <plug_holes+0x20>
 800945e:	4b44      	ldr	r3, [pc, #272]	; (8009570 <plug_holes+0x124>)
 8009460:	f240 12df 	movw	r2, #479	; 0x1df
 8009464:	4943      	ldr	r1, [pc, #268]	; (8009574 <plug_holes+0x128>)
 8009466:	4844      	ldr	r0, [pc, #272]	; (8009578 <plug_holes+0x12c>)
 8009468:	f00a f854 	bl	8013514 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800946c:	4b43      	ldr	r3, [pc, #268]	; (800957c <plug_holes+0x130>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	429a      	cmp	r2, r3
 8009474:	d306      	bcc.n	8009484 <plug_holes+0x38>
 8009476:	4b3e      	ldr	r3, [pc, #248]	; (8009570 <plug_holes+0x124>)
 8009478:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800947c:	4940      	ldr	r1, [pc, #256]	; (8009580 <plug_holes+0x134>)
 800947e:	483e      	ldr	r0, [pc, #248]	; (8009578 <plug_holes+0x12c>)
 8009480:	f00a f848 	bl	8013514 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	791b      	ldrb	r3, [r3, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d006      	beq.n	800949a <plug_holes+0x4e>
 800948c:	4b38      	ldr	r3, [pc, #224]	; (8009570 <plug_holes+0x124>)
 800948e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009492:	493c      	ldr	r1, [pc, #240]	; (8009584 <plug_holes+0x138>)
 8009494:	4838      	ldr	r0, [pc, #224]	; (8009578 <plug_holes+0x12c>)
 8009496:	f00a f83d 	bl	8013514 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80094a2:	d906      	bls.n	80094b2 <plug_holes+0x66>
 80094a4:	4b32      	ldr	r3, [pc, #200]	; (8009570 <plug_holes+0x124>)
 80094a6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80094aa:	4937      	ldr	r1, [pc, #220]	; (8009588 <plug_holes+0x13c>)
 80094ac:	4832      	ldr	r0, [pc, #200]	; (8009578 <plug_holes+0x12c>)
 80094ae:	f00a f831 	bl	8013514 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff ffa4 	bl	8009404 <ptr_to_mem>
 80094bc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d024      	beq.n	8009510 <plug_holes+0xc4>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	791b      	ldrb	r3, [r3, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d120      	bne.n	8009510 <plug_holes+0xc4>
 80094ce:	4b2b      	ldr	r3, [pc, #172]	; (800957c <plug_holes+0x130>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d01b      	beq.n	8009510 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80094d8:	4b2c      	ldr	r3, [pc, #176]	; (800958c <plug_holes+0x140>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d102      	bne.n	80094e8 <plug_holes+0x9c>
      lfree = mem;
 80094e2:	4a2a      	ldr	r2, [pc, #168]	; (800958c <plug_holes+0x140>)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	881a      	ldrh	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	881b      	ldrh	r3, [r3, #0]
 80094f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80094f8:	d00a      	beq.n	8009510 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	4618      	mov	r0, r3
 8009500:	f7ff ff80 	bl	8009404 <ptr_to_mem>
 8009504:	4604      	mov	r4, r0
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7ff ff8e 	bl	8009428 <mem_to_ptr>
 800950c:	4603      	mov	r3, r0
 800950e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	885b      	ldrh	r3, [r3, #2]
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff ff75 	bl	8009404 <ptr_to_mem>
 800951a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	429a      	cmp	r2, r3
 8009522:	d01f      	beq.n	8009564 <plug_holes+0x118>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	791b      	ldrb	r3, [r3, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d11b      	bne.n	8009564 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800952c:	4b17      	ldr	r3, [pc, #92]	; (800958c <plug_holes+0x140>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	429a      	cmp	r2, r3
 8009534:	d102      	bne.n	800953c <plug_holes+0xf0>
      lfree = pmem;
 8009536:	4a15      	ldr	r2, [pc, #84]	; (800958c <plug_holes+0x140>)
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	881a      	ldrh	r2, [r3, #0]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	881b      	ldrh	r3, [r3, #0]
 8009548:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800954c:	d00a      	beq.n	8009564 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	4618      	mov	r0, r3
 8009554:	f7ff ff56 	bl	8009404 <ptr_to_mem>
 8009558:	4604      	mov	r4, r0
 800955a:	68b8      	ldr	r0, [r7, #8]
 800955c:	f7ff ff64 	bl	8009428 <mem_to_ptr>
 8009560:	4603      	mov	r3, r0
 8009562:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009564:	bf00      	nop
 8009566:	3714      	adds	r7, #20
 8009568:	46bd      	mov	sp, r7
 800956a:	bd90      	pop	{r4, r7, pc}
 800956c:	24005ca4 	.word	0x24005ca4
 8009570:	080144ec 	.word	0x080144ec
 8009574:	0801451c 	.word	0x0801451c
 8009578:	08014534 	.word	0x08014534
 800957c:	24005ca8 	.word	0x24005ca8
 8009580:	0801455c 	.word	0x0801455c
 8009584:	08014578 	.word	0x08014578
 8009588:	08014594 	.word	0x08014594
 800958c:	24005cb0 	.word	0x24005cb0

08009590 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009596:	4b1d      	ldr	r3, [pc, #116]	; (800960c <mem_init+0x7c>)
 8009598:	4a1d      	ldr	r2, [pc, #116]	; (8009610 <mem_init+0x80>)
 800959a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800959c:	4b1b      	ldr	r3, [pc, #108]	; (800960c <mem_init+0x7c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80095a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80095b6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80095ba:	f7ff ff23 	bl	8009404 <ptr_to_mem>
 80095be:	4603      	mov	r3, r0
 80095c0:	4a14      	ldr	r2, [pc, #80]	; (8009614 <mem_init+0x84>)
 80095c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80095c4:	4b13      	ldr	r3, [pc, #76]	; (8009614 <mem_init+0x84>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2201      	movs	r2, #1
 80095ca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80095cc:	4b11      	ldr	r3, [pc, #68]	; (8009614 <mem_init+0x84>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80095d4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80095d6:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <mem_init+0x84>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80095de:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80095e0:	4b0a      	ldr	r3, [pc, #40]	; (800960c <mem_init+0x7c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a0c      	ldr	r2, [pc, #48]	; (8009618 <mem_init+0x88>)
 80095e6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80095e8:	480c      	ldr	r0, [pc, #48]	; (800961c <mem_init+0x8c>)
 80095ea:	f009 fd4b 	bl	8013084 <sys_mutex_new>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d006      	beq.n	8009602 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80095f4:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <mem_init+0x90>)
 80095f6:	f240 221f 	movw	r2, #543	; 0x21f
 80095fa:	490a      	ldr	r1, [pc, #40]	; (8009624 <mem_init+0x94>)
 80095fc:	480a      	ldr	r0, [pc, #40]	; (8009628 <mem_init+0x98>)
 80095fe:	f009 ff89 	bl	8013514 <iprintf>
  }
}
 8009602:	bf00      	nop
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	24005ca4 	.word	0x24005ca4
 8009610:	30001000 	.word	0x30001000
 8009614:	24005ca8 	.word	0x24005ca8
 8009618:	24005cb0 	.word	0x24005cb0
 800961c:	24005cac 	.word	0x24005cac
 8009620:	080144ec 	.word	0x080144ec
 8009624:	080145c0 	.word	0x080145c0
 8009628:	08014534 	.word	0x08014534

0800962c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff fef7 	bl	8009428 <mem_to_ptr>
 800963a:	4603      	mov	r3, r0
 800963c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	4618      	mov	r0, r3
 8009644:	f7ff fede 	bl	8009404 <ptr_to_mem>
 8009648:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	885b      	ldrh	r3, [r3, #2]
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff fed8 	bl	8009404 <ptr_to_mem>
 8009654:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800965e:	d818      	bhi.n	8009692 <mem_link_valid+0x66>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	885b      	ldrh	r3, [r3, #2]
 8009664:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009668:	d813      	bhi.n	8009692 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800966e:	8afa      	ldrh	r2, [r7, #22]
 8009670:	429a      	cmp	r2, r3
 8009672:	d004      	beq.n	800967e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	8afa      	ldrh	r2, [r7, #22]
 800967a:	429a      	cmp	r2, r3
 800967c:	d109      	bne.n	8009692 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800967e:	4b08      	ldr	r3, [pc, #32]	; (80096a0 <mem_link_valid+0x74>)
 8009680:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	429a      	cmp	r2, r3
 8009686:	d006      	beq.n	8009696 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	885b      	ldrh	r3, [r3, #2]
 800968c:	8afa      	ldrh	r2, [r7, #22]
 800968e:	429a      	cmp	r2, r3
 8009690:	d001      	beq.n	8009696 <mem_link_valid+0x6a>
    return 0;
 8009692:	2300      	movs	r3, #0
 8009694:	e000      	b.n	8009698 <mem_link_valid+0x6c>
  }
  return 1;
 8009696:	2301      	movs	r3, #1
}
 8009698:	4618      	mov	r0, r3
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	24005ca8 	.word	0x24005ca8

080096a4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d070      	beq.n	8009794 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f003 0303 	and.w	r3, r3, #3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00d      	beq.n	80096d8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80096bc:	4b37      	ldr	r3, [pc, #220]	; (800979c <mem_free+0xf8>)
 80096be:	f240 2273 	movw	r2, #627	; 0x273
 80096c2:	4937      	ldr	r1, [pc, #220]	; (80097a0 <mem_free+0xfc>)
 80096c4:	4837      	ldr	r0, [pc, #220]	; (80097a4 <mem_free+0x100>)
 80096c6:	f009 ff25 	bl	8013514 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80096ca:	f009 fd2d 	bl	8013128 <sys_arch_protect>
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f009 fd37 	bl	8013144 <sys_arch_unprotect>
    return;
 80096d6:	e05e      	b.n	8009796 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	3b08      	subs	r3, #8
 80096dc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80096de:	4b32      	ldr	r3, [pc, #200]	; (80097a8 <mem_free+0x104>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	69fa      	ldr	r2, [r7, #28]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d306      	bcc.n	80096f6 <mem_free+0x52>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f103 020c 	add.w	r2, r3, #12
 80096ee:	4b2f      	ldr	r3, [pc, #188]	; (80097ac <mem_free+0x108>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d90d      	bls.n	8009712 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80096f6:	4b29      	ldr	r3, [pc, #164]	; (800979c <mem_free+0xf8>)
 80096f8:	f240 227f 	movw	r2, #639	; 0x27f
 80096fc:	492c      	ldr	r1, [pc, #176]	; (80097b0 <mem_free+0x10c>)
 80096fe:	4829      	ldr	r0, [pc, #164]	; (80097a4 <mem_free+0x100>)
 8009700:	f009 ff08 	bl	8013514 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009704:	f009 fd10 	bl	8013128 <sys_arch_protect>
 8009708:	6138      	str	r0, [r7, #16]
 800970a:	6938      	ldr	r0, [r7, #16]
 800970c:	f009 fd1a 	bl	8013144 <sys_arch_unprotect>
    return;
 8009710:	e041      	b.n	8009796 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009712:	4828      	ldr	r0, [pc, #160]	; (80097b4 <mem_free+0x110>)
 8009714:	f009 fccc 	bl	80130b0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	791b      	ldrb	r3, [r3, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d110      	bne.n	8009742 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009720:	4b1e      	ldr	r3, [pc, #120]	; (800979c <mem_free+0xf8>)
 8009722:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009726:	4924      	ldr	r1, [pc, #144]	; (80097b8 <mem_free+0x114>)
 8009728:	481e      	ldr	r0, [pc, #120]	; (80097a4 <mem_free+0x100>)
 800972a:	f009 fef3 	bl	8013514 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800972e:	4821      	ldr	r0, [pc, #132]	; (80097b4 <mem_free+0x110>)
 8009730:	f009 fccd 	bl	80130ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009734:	f009 fcf8 	bl	8013128 <sys_arch_protect>
 8009738:	6178      	str	r0, [r7, #20]
 800973a:	6978      	ldr	r0, [r7, #20]
 800973c:	f009 fd02 	bl	8013144 <sys_arch_unprotect>
    return;
 8009740:	e029      	b.n	8009796 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009742:	69f8      	ldr	r0, [r7, #28]
 8009744:	f7ff ff72 	bl	800962c <mem_link_valid>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d110      	bne.n	8009770 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800974e:	4b13      	ldr	r3, [pc, #76]	; (800979c <mem_free+0xf8>)
 8009750:	f240 2295 	movw	r2, #661	; 0x295
 8009754:	4919      	ldr	r1, [pc, #100]	; (80097bc <mem_free+0x118>)
 8009756:	4813      	ldr	r0, [pc, #76]	; (80097a4 <mem_free+0x100>)
 8009758:	f009 fedc 	bl	8013514 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800975c:	4815      	ldr	r0, [pc, #84]	; (80097b4 <mem_free+0x110>)
 800975e:	f009 fcb6 	bl	80130ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009762:	f009 fce1 	bl	8013128 <sys_arch_protect>
 8009766:	61b8      	str	r0, [r7, #24]
 8009768:	69b8      	ldr	r0, [r7, #24]
 800976a:	f009 fceb 	bl	8013144 <sys_arch_unprotect>
    return;
 800976e:	e012      	b.n	8009796 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	2200      	movs	r2, #0
 8009774:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009776:	4b12      	ldr	r3, [pc, #72]	; (80097c0 <mem_free+0x11c>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	69fa      	ldr	r2, [r7, #28]
 800977c:	429a      	cmp	r2, r3
 800977e:	d202      	bcs.n	8009786 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009780:	4a0f      	ldr	r2, [pc, #60]	; (80097c0 <mem_free+0x11c>)
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009786:	69f8      	ldr	r0, [r7, #28]
 8009788:	f7ff fe60 	bl	800944c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800978c:	4809      	ldr	r0, [pc, #36]	; (80097b4 <mem_free+0x110>)
 800978e:	f009 fc9e 	bl	80130ce <sys_mutex_unlock>
 8009792:	e000      	b.n	8009796 <mem_free+0xf2>
    return;
 8009794:	bf00      	nop
}
 8009796:	3720      	adds	r7, #32
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	080144ec 	.word	0x080144ec
 80097a0:	080145dc 	.word	0x080145dc
 80097a4:	08014534 	.word	0x08014534
 80097a8:	24005ca4 	.word	0x24005ca4
 80097ac:	24005ca8 	.word	0x24005ca8
 80097b0:	08014600 	.word	0x08014600
 80097b4:	24005cac 	.word	0x24005cac
 80097b8:	0801461c 	.word	0x0801461c
 80097bc:	08014644 	.word	0x08014644
 80097c0:	24005cb0 	.word	0x24005cb0

080097c4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80097d0:	887b      	ldrh	r3, [r7, #2]
 80097d2:	3303      	adds	r3, #3
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	f023 0303 	bic.w	r3, r3, #3
 80097da:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80097dc:	8bfb      	ldrh	r3, [r7, #30]
 80097de:	2b0b      	cmp	r3, #11
 80097e0:	d801      	bhi.n	80097e6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80097e2:	230c      	movs	r3, #12
 80097e4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80097e6:	8bfb      	ldrh	r3, [r7, #30]
 80097e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80097ec:	d803      	bhi.n	80097f6 <mem_trim+0x32>
 80097ee:	8bfa      	ldrh	r2, [r7, #30]
 80097f0:	887b      	ldrh	r3, [r7, #2]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d201      	bcs.n	80097fa <mem_trim+0x36>
    return NULL;
 80097f6:	2300      	movs	r3, #0
 80097f8:	e0d8      	b.n	80099ac <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80097fa:	4b6e      	ldr	r3, [pc, #440]	; (80099b4 <mem_trim+0x1f0>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	429a      	cmp	r2, r3
 8009802:	d304      	bcc.n	800980e <mem_trim+0x4a>
 8009804:	4b6c      	ldr	r3, [pc, #432]	; (80099b8 <mem_trim+0x1f4>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	429a      	cmp	r2, r3
 800980c:	d306      	bcc.n	800981c <mem_trim+0x58>
 800980e:	4b6b      	ldr	r3, [pc, #428]	; (80099bc <mem_trim+0x1f8>)
 8009810:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009814:	496a      	ldr	r1, [pc, #424]	; (80099c0 <mem_trim+0x1fc>)
 8009816:	486b      	ldr	r0, [pc, #428]	; (80099c4 <mem_trim+0x200>)
 8009818:	f009 fe7c 	bl	8013514 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800981c:	4b65      	ldr	r3, [pc, #404]	; (80099b4 <mem_trim+0x1f0>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	429a      	cmp	r2, r3
 8009824:	d304      	bcc.n	8009830 <mem_trim+0x6c>
 8009826:	4b64      	ldr	r3, [pc, #400]	; (80099b8 <mem_trim+0x1f4>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	429a      	cmp	r2, r3
 800982e:	d307      	bcc.n	8009840 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009830:	f009 fc7a 	bl	8013128 <sys_arch_protect>
 8009834:	60b8      	str	r0, [r7, #8]
 8009836:	68b8      	ldr	r0, [r7, #8]
 8009838:	f009 fc84 	bl	8013144 <sys_arch_unprotect>
    return rmem;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	e0b5      	b.n	80099ac <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3b08      	subs	r3, #8
 8009844:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009846:	69b8      	ldr	r0, [r7, #24]
 8009848:	f7ff fdee 	bl	8009428 <mem_to_ptr>
 800984c:	4603      	mov	r3, r0
 800984e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	881a      	ldrh	r2, [r3, #0]
 8009854:	8afb      	ldrh	r3, [r7, #22]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	b29b      	uxth	r3, r3
 800985a:	3b08      	subs	r3, #8
 800985c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800985e:	8bfa      	ldrh	r2, [r7, #30]
 8009860:	8abb      	ldrh	r3, [r7, #20]
 8009862:	429a      	cmp	r2, r3
 8009864:	d906      	bls.n	8009874 <mem_trim+0xb0>
 8009866:	4b55      	ldr	r3, [pc, #340]	; (80099bc <mem_trim+0x1f8>)
 8009868:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800986c:	4956      	ldr	r1, [pc, #344]	; (80099c8 <mem_trim+0x204>)
 800986e:	4855      	ldr	r0, [pc, #340]	; (80099c4 <mem_trim+0x200>)
 8009870:	f009 fe50 	bl	8013514 <iprintf>
  if (newsize > size) {
 8009874:	8bfa      	ldrh	r2, [r7, #30]
 8009876:	8abb      	ldrh	r3, [r7, #20]
 8009878:	429a      	cmp	r2, r3
 800987a:	d901      	bls.n	8009880 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800987c:	2300      	movs	r3, #0
 800987e:	e095      	b.n	80099ac <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009880:	8bfa      	ldrh	r2, [r7, #30]
 8009882:	8abb      	ldrh	r3, [r7, #20]
 8009884:	429a      	cmp	r2, r3
 8009886:	d101      	bne.n	800988c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	e08f      	b.n	80099ac <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800988c:	484f      	ldr	r0, [pc, #316]	; (80099cc <mem_trim+0x208>)
 800988e:	f009 fc0f 	bl	80130b0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	4618      	mov	r0, r3
 8009898:	f7ff fdb4 	bl	8009404 <ptr_to_mem>
 800989c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	791b      	ldrb	r3, [r3, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d13f      	bne.n	8009926 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80098ae:	d106      	bne.n	80098be <mem_trim+0xfa>
 80098b0:	4b42      	ldr	r3, [pc, #264]	; (80099bc <mem_trim+0x1f8>)
 80098b2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80098b6:	4946      	ldr	r1, [pc, #280]	; (80099d0 <mem_trim+0x20c>)
 80098b8:	4842      	ldr	r0, [pc, #264]	; (80099c4 <mem_trim+0x200>)
 80098ba:	f009 fe2b 	bl	8013514 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80098c4:	8afa      	ldrh	r2, [r7, #22]
 80098c6:	8bfb      	ldrh	r3, [r7, #30]
 80098c8:	4413      	add	r3, r2
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	3308      	adds	r3, #8
 80098ce:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80098d0:	4b40      	ldr	r3, [pc, #256]	; (80099d4 <mem_trim+0x210>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d106      	bne.n	80098e8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80098da:	89fb      	ldrh	r3, [r7, #14]
 80098dc:	4618      	mov	r0, r3
 80098de:	f7ff fd91 	bl	8009404 <ptr_to_mem>
 80098e2:	4603      	mov	r3, r0
 80098e4:	4a3b      	ldr	r2, [pc, #236]	; (80099d4 <mem_trim+0x210>)
 80098e6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80098e8:	89fb      	ldrh	r3, [r7, #14]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7ff fd8a 	bl	8009404 <ptr_to_mem>
 80098f0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	2200      	movs	r2, #0
 80098f6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	89ba      	ldrh	r2, [r7, #12]
 80098fc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	8afa      	ldrh	r2, [r7, #22]
 8009902:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	89fa      	ldrh	r2, [r7, #14]
 8009908:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009912:	d047      	beq.n	80099a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	4618      	mov	r0, r3
 800991a:	f7ff fd73 	bl	8009404 <ptr_to_mem>
 800991e:	4602      	mov	r2, r0
 8009920:	89fb      	ldrh	r3, [r7, #14]
 8009922:	8053      	strh	r3, [r2, #2]
 8009924:	e03e      	b.n	80099a4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009926:	8bfb      	ldrh	r3, [r7, #30]
 8009928:	f103 0214 	add.w	r2, r3, #20
 800992c:	8abb      	ldrh	r3, [r7, #20]
 800992e:	429a      	cmp	r2, r3
 8009930:	d838      	bhi.n	80099a4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009932:	8afa      	ldrh	r2, [r7, #22]
 8009934:	8bfb      	ldrh	r3, [r7, #30]
 8009936:	4413      	add	r3, r2
 8009938:	b29b      	uxth	r3, r3
 800993a:	3308      	adds	r3, #8
 800993c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009946:	d106      	bne.n	8009956 <mem_trim+0x192>
 8009948:	4b1c      	ldr	r3, [pc, #112]	; (80099bc <mem_trim+0x1f8>)
 800994a:	f240 3216 	movw	r2, #790	; 0x316
 800994e:	4920      	ldr	r1, [pc, #128]	; (80099d0 <mem_trim+0x20c>)
 8009950:	481c      	ldr	r0, [pc, #112]	; (80099c4 <mem_trim+0x200>)
 8009952:	f009 fddf 	bl	8013514 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009956:	89fb      	ldrh	r3, [r7, #14]
 8009958:	4618      	mov	r0, r3
 800995a:	f7ff fd53 	bl	8009404 <ptr_to_mem>
 800995e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009960:	4b1c      	ldr	r3, [pc, #112]	; (80099d4 <mem_trim+0x210>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	429a      	cmp	r2, r3
 8009968:	d202      	bcs.n	8009970 <mem_trim+0x1ac>
      lfree = mem2;
 800996a:	4a1a      	ldr	r2, [pc, #104]	; (80099d4 <mem_trim+0x210>)
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	2200      	movs	r2, #0
 8009974:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	881a      	ldrh	r2, [r3, #0]
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	8afa      	ldrh	r2, [r7, #22]
 8009982:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	89fa      	ldrh	r2, [r7, #14]
 8009988:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009992:	d007      	beq.n	80099a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff fd33 	bl	8009404 <ptr_to_mem>
 800999e:	4602      	mov	r2, r0
 80099a0:	89fb      	ldrh	r3, [r7, #14]
 80099a2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80099a4:	4809      	ldr	r0, [pc, #36]	; (80099cc <mem_trim+0x208>)
 80099a6:	f009 fb92 	bl	80130ce <sys_mutex_unlock>
  return rmem;
 80099aa:	687b      	ldr	r3, [r7, #4]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3720      	adds	r7, #32
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	24005ca4 	.word	0x24005ca4
 80099b8:	24005ca8 	.word	0x24005ca8
 80099bc:	080144ec 	.word	0x080144ec
 80099c0:	08014678 	.word	0x08014678
 80099c4:	08014534 	.word	0x08014534
 80099c8:	08014690 	.word	0x08014690
 80099cc:	24005cac 	.word	0x24005cac
 80099d0:	080146b0 	.word	0x080146b0
 80099d4:	24005cb0 	.word	0x24005cb0

080099d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80099e2:	88fb      	ldrh	r3, [r7, #6]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d101      	bne.n	80099ec <mem_malloc+0x14>
    return NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	e0e2      	b.n	8009bb2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80099ec:	88fb      	ldrh	r3, [r7, #6]
 80099ee:	3303      	adds	r3, #3
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	f023 0303 	bic.w	r3, r3, #3
 80099f6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80099f8:	8bbb      	ldrh	r3, [r7, #28]
 80099fa:	2b0b      	cmp	r3, #11
 80099fc:	d801      	bhi.n	8009a02 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80099fe:	230c      	movs	r3, #12
 8009a00:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009a02:	8bbb      	ldrh	r3, [r7, #28]
 8009a04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a08:	d803      	bhi.n	8009a12 <mem_malloc+0x3a>
 8009a0a:	8bba      	ldrh	r2, [r7, #28]
 8009a0c:	88fb      	ldrh	r3, [r7, #6]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d201      	bcs.n	8009a16 <mem_malloc+0x3e>
    return NULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	e0cd      	b.n	8009bb2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009a16:	4869      	ldr	r0, [pc, #420]	; (8009bbc <mem_malloc+0x1e4>)
 8009a18:	f009 fb4a 	bl	80130b0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009a1c:	4b68      	ldr	r3, [pc, #416]	; (8009bc0 <mem_malloc+0x1e8>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7ff fd01 	bl	8009428 <mem_to_ptr>
 8009a26:	4603      	mov	r3, r0
 8009a28:	83fb      	strh	r3, [r7, #30]
 8009a2a:	e0b7      	b.n	8009b9c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009a2c:	8bfb      	ldrh	r3, [r7, #30]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7ff fce8 	bl	8009404 <ptr_to_mem>
 8009a34:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	791b      	ldrb	r3, [r3, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f040 80a7 	bne.w	8009b8e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	461a      	mov	r2, r3
 8009a46:	8bfb      	ldrh	r3, [r7, #30]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	f1a3 0208 	sub.w	r2, r3, #8
 8009a4e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009a50:	429a      	cmp	r2, r3
 8009a52:	f0c0 809c 	bcc.w	8009b8e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	8bfb      	ldrh	r3, [r7, #30]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	f1a3 0208 	sub.w	r2, r3, #8
 8009a64:	8bbb      	ldrh	r3, [r7, #28]
 8009a66:	3314      	adds	r3, #20
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d333      	bcc.n	8009ad4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009a6c:	8bfa      	ldrh	r2, [r7, #30]
 8009a6e:	8bbb      	ldrh	r3, [r7, #28]
 8009a70:	4413      	add	r3, r2
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	3308      	adds	r3, #8
 8009a76:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009a78:	8a7b      	ldrh	r3, [r7, #18]
 8009a7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a7e:	d106      	bne.n	8009a8e <mem_malloc+0xb6>
 8009a80:	4b50      	ldr	r3, [pc, #320]	; (8009bc4 <mem_malloc+0x1ec>)
 8009a82:	f240 3287 	movw	r2, #903	; 0x387
 8009a86:	4950      	ldr	r1, [pc, #320]	; (8009bc8 <mem_malloc+0x1f0>)
 8009a88:	4850      	ldr	r0, [pc, #320]	; (8009bcc <mem_malloc+0x1f4>)
 8009a8a:	f009 fd43 	bl	8013514 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009a8e:	8a7b      	ldrh	r3, [r7, #18]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7ff fcb7 	bl	8009404 <ptr_to_mem>
 8009a96:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	881a      	ldrh	r2, [r3, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	8bfa      	ldrh	r2, [r7, #30]
 8009aaa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	8a7a      	ldrh	r2, [r7, #18]
 8009ab0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ac0:	d00b      	beq.n	8009ada <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7ff fc9c 	bl	8009404 <ptr_to_mem>
 8009acc:	4602      	mov	r2, r0
 8009ace:	8a7b      	ldrh	r3, [r7, #18]
 8009ad0:	8053      	strh	r3, [r2, #2]
 8009ad2:	e002      	b.n	8009ada <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009ada:	4b39      	ldr	r3, [pc, #228]	; (8009bc0 <mem_malloc+0x1e8>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d127      	bne.n	8009b34 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8009ae4:	4b36      	ldr	r3, [pc, #216]	; (8009bc0 <mem_malloc+0x1e8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009aea:	e005      	b.n	8009af8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff fc87 	bl	8009404 <ptr_to_mem>
 8009af6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	791b      	ldrb	r3, [r3, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d004      	beq.n	8009b0a <mem_malloc+0x132>
 8009b00:	4b33      	ldr	r3, [pc, #204]	; (8009bd0 <mem_malloc+0x1f8>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	69ba      	ldr	r2, [r7, #24]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d1f0      	bne.n	8009aec <mem_malloc+0x114>
          }
          lfree = cur;
 8009b0a:	4a2d      	ldr	r2, [pc, #180]	; (8009bc0 <mem_malloc+0x1e8>)
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009b10:	4b2b      	ldr	r3, [pc, #172]	; (8009bc0 <mem_malloc+0x1e8>)
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	4b2e      	ldr	r3, [pc, #184]	; (8009bd0 <mem_malloc+0x1f8>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d00b      	beq.n	8009b34 <mem_malloc+0x15c>
 8009b1c:	4b28      	ldr	r3, [pc, #160]	; (8009bc0 <mem_malloc+0x1e8>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	791b      	ldrb	r3, [r3, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d006      	beq.n	8009b34 <mem_malloc+0x15c>
 8009b26:	4b27      	ldr	r3, [pc, #156]	; (8009bc4 <mem_malloc+0x1ec>)
 8009b28:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009b2c:	4929      	ldr	r1, [pc, #164]	; (8009bd4 <mem_malloc+0x1fc>)
 8009b2e:	4827      	ldr	r0, [pc, #156]	; (8009bcc <mem_malloc+0x1f4>)
 8009b30:	f009 fcf0 	bl	8013514 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009b34:	4821      	ldr	r0, [pc, #132]	; (8009bbc <mem_malloc+0x1e4>)
 8009b36:	f009 faca 	bl	80130ce <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009b3a:	8bba      	ldrh	r2, [r7, #28]
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	4413      	add	r3, r2
 8009b40:	3308      	adds	r3, #8
 8009b42:	4a23      	ldr	r2, [pc, #140]	; (8009bd0 <mem_malloc+0x1f8>)
 8009b44:	6812      	ldr	r2, [r2, #0]
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d906      	bls.n	8009b58 <mem_malloc+0x180>
 8009b4a:	4b1e      	ldr	r3, [pc, #120]	; (8009bc4 <mem_malloc+0x1ec>)
 8009b4c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009b50:	4921      	ldr	r1, [pc, #132]	; (8009bd8 <mem_malloc+0x200>)
 8009b52:	481e      	ldr	r0, [pc, #120]	; (8009bcc <mem_malloc+0x1f4>)
 8009b54:	f009 fcde 	bl	8013514 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d006      	beq.n	8009b70 <mem_malloc+0x198>
 8009b62:	4b18      	ldr	r3, [pc, #96]	; (8009bc4 <mem_malloc+0x1ec>)
 8009b64:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009b68:	491c      	ldr	r1, [pc, #112]	; (8009bdc <mem_malloc+0x204>)
 8009b6a:	4818      	ldr	r0, [pc, #96]	; (8009bcc <mem_malloc+0x1f4>)
 8009b6c:	f009 fcd2 	bl	8013514 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	f003 0303 	and.w	r3, r3, #3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d006      	beq.n	8009b88 <mem_malloc+0x1b0>
 8009b7a:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <mem_malloc+0x1ec>)
 8009b7c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009b80:	4917      	ldr	r1, [pc, #92]	; (8009be0 <mem_malloc+0x208>)
 8009b82:	4812      	ldr	r0, [pc, #72]	; (8009bcc <mem_malloc+0x1f4>)
 8009b84:	f009 fcc6 	bl	8013514 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	3308      	adds	r3, #8
 8009b8c:	e011      	b.n	8009bb2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8009b8e:	8bfb      	ldrh	r3, [r7, #30]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7ff fc37 	bl	8009404 <ptr_to_mem>
 8009b96:	4603      	mov	r3, r0
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009b9c:	8bfa      	ldrh	r2, [r7, #30]
 8009b9e:	8bbb      	ldrh	r3, [r7, #28]
 8009ba0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	f4ff af41 	bcc.w	8009a2c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009baa:	4804      	ldr	r0, [pc, #16]	; (8009bbc <mem_malloc+0x1e4>)
 8009bac:	f009 fa8f 	bl	80130ce <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3720      	adds	r7, #32
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	24005cac 	.word	0x24005cac
 8009bc0:	24005cb0 	.word	0x24005cb0
 8009bc4:	080144ec 	.word	0x080144ec
 8009bc8:	080146b0 	.word	0x080146b0
 8009bcc:	08014534 	.word	0x08014534
 8009bd0:	24005ca8 	.word	0x24005ca8
 8009bd4:	080146c4 	.word	0x080146c4
 8009bd8:	080146e0 	.word	0x080146e0
 8009bdc:	08014710 	.word	0x08014710
 8009be0:	08014740 	.word	0x08014740

08009be4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	3303      	adds	r3, #3
 8009bfa:	f023 0303 	bic.w	r3, r3, #3
 8009bfe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009c00:	2300      	movs	r3, #0
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	e011      	b.n	8009c2a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	4413      	add	r3, r2
 8009c22:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3301      	adds	r3, #1
 8009c28:	60fb      	str	r3, [r7, #12]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	885b      	ldrh	r3, [r3, #2]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	4293      	cmp	r3, r2
 8009c34:	dbe7      	blt.n	8009c06 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009c36:	bf00      	nop
 8009c38:	bf00      	nop
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	80fb      	strh	r3, [r7, #6]
 8009c4e:	e009      	b.n	8009c64 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009c50:	88fb      	ldrh	r3, [r7, #6]
 8009c52:	4a08      	ldr	r2, [pc, #32]	; (8009c74 <memp_init+0x30>)
 8009c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff ffc3 	bl	8009be4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009c5e:	88fb      	ldrh	r3, [r7, #6]
 8009c60:	3301      	adds	r3, #1
 8009c62:	80fb      	strh	r3, [r7, #6]
 8009c64:	88fb      	ldrh	r3, [r7, #6]
 8009c66:	2b0c      	cmp	r3, #12
 8009c68:	d9f2      	bls.n	8009c50 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009c6a:	bf00      	nop
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	08016f70 	.word	0x08016f70

08009c78 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009c80:	f009 fa52 	bl	8013128 <sys_arch_protect>
 8009c84:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d015      	beq.n	8009cc0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	6812      	ldr	r2, [r2, #0]
 8009c9c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	f003 0303 	and.w	r3, r3, #3
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d006      	beq.n	8009cb6 <do_memp_malloc_pool+0x3e>
 8009ca8:	4b09      	ldr	r3, [pc, #36]	; (8009cd0 <do_memp_malloc_pool+0x58>)
 8009caa:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009cae:	4909      	ldr	r1, [pc, #36]	; (8009cd4 <do_memp_malloc_pool+0x5c>)
 8009cb0:	4809      	ldr	r0, [pc, #36]	; (8009cd8 <do_memp_malloc_pool+0x60>)
 8009cb2:	f009 fc2f 	bl	8013514 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f009 fa44 	bl	8013144 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	e003      	b.n	8009cc8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f009 fa3f 	bl	8013144 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	08014764 	.word	0x08014764
 8009cd4:	08014794 	.word	0x08014794
 8009cd8:	080147b8 	.word	0x080147b8

08009cdc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d106      	bne.n	8009cf8 <memp_malloc_pool+0x1c>
 8009cea:	4b0a      	ldr	r3, [pc, #40]	; (8009d14 <memp_malloc_pool+0x38>)
 8009cec:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009cf0:	4909      	ldr	r1, [pc, #36]	; (8009d18 <memp_malloc_pool+0x3c>)
 8009cf2:	480a      	ldr	r0, [pc, #40]	; (8009d1c <memp_malloc_pool+0x40>)
 8009cf4:	f009 fc0e 	bl	8013514 <iprintf>
  if (desc == NULL) {
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <memp_malloc_pool+0x26>
    return NULL;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e003      	b.n	8009d0a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7ff ffb8 	bl	8009c78 <do_memp_malloc_pool>
 8009d08:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	08014764 	.word	0x08014764
 8009d18:	080147e0 	.word	0x080147e0
 8009d1c:	080147b8 	.word	0x080147b8

08009d20 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	2b0c      	cmp	r3, #12
 8009d2e:	d908      	bls.n	8009d42 <memp_malloc+0x22>
 8009d30:	4b0a      	ldr	r3, [pc, #40]	; (8009d5c <memp_malloc+0x3c>)
 8009d32:	f240 1257 	movw	r2, #343	; 0x157
 8009d36:	490a      	ldr	r1, [pc, #40]	; (8009d60 <memp_malloc+0x40>)
 8009d38:	480a      	ldr	r0, [pc, #40]	; (8009d64 <memp_malloc+0x44>)
 8009d3a:	f009 fbeb 	bl	8013514 <iprintf>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e008      	b.n	8009d54 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009d42:	79fb      	ldrb	r3, [r7, #7]
 8009d44:	4a08      	ldr	r2, [pc, #32]	; (8009d68 <memp_malloc+0x48>)
 8009d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7ff ff94 	bl	8009c78 <do_memp_malloc_pool>
 8009d50:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009d52:	68fb      	ldr	r3, [r7, #12]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	08014764 	.word	0x08014764
 8009d60:	080147f4 	.word	0x080147f4
 8009d64:	080147b8 	.word	0x080147b8
 8009d68:	08016f70 	.word	0x08016f70

08009d6c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	f003 0303 	and.w	r3, r3, #3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d006      	beq.n	8009d8e <do_memp_free_pool+0x22>
 8009d80:	4b0d      	ldr	r3, [pc, #52]	; (8009db8 <do_memp_free_pool+0x4c>)
 8009d82:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009d86:	490d      	ldr	r1, [pc, #52]	; (8009dbc <do_memp_free_pool+0x50>)
 8009d88:	480d      	ldr	r0, [pc, #52]	; (8009dc0 <do_memp_free_pool+0x54>)
 8009d8a:	f009 fbc3 	bl	8013514 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009d92:	f009 f9c9 	bl	8013128 <sys_arch_protect>
 8009d96:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009daa:	68b8      	ldr	r0, [r7, #8]
 8009dac:	f009 f9ca 	bl	8013144 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009db0:	bf00      	nop
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	08014764 	.word	0x08014764
 8009dbc:	08014814 	.word	0x08014814
 8009dc0:	080147b8 	.word	0x080147b8

08009dc4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d106      	bne.n	8009de2 <memp_free_pool+0x1e>
 8009dd4:	4b0a      	ldr	r3, [pc, #40]	; (8009e00 <memp_free_pool+0x3c>)
 8009dd6:	f240 1295 	movw	r2, #405	; 0x195
 8009dda:	490a      	ldr	r1, [pc, #40]	; (8009e04 <memp_free_pool+0x40>)
 8009ddc:	480a      	ldr	r0, [pc, #40]	; (8009e08 <memp_free_pool+0x44>)
 8009dde:	f009 fb99 	bl	8013514 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d007      	beq.n	8009df8 <memp_free_pool+0x34>
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d004      	beq.n	8009df8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7ff ffbb 	bl	8009d6c <do_memp_free_pool>
 8009df6:	e000      	b.n	8009dfa <memp_free_pool+0x36>
    return;
 8009df8:	bf00      	nop
}
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	08014764 	.word	0x08014764
 8009e04:	080147e0 	.word	0x080147e0
 8009e08:	080147b8 	.word	0x080147b8

08009e0c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	4603      	mov	r3, r0
 8009e14:	6039      	str	r1, [r7, #0]
 8009e16:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	2b0c      	cmp	r3, #12
 8009e1c:	d907      	bls.n	8009e2e <memp_free+0x22>
 8009e1e:	4b0c      	ldr	r3, [pc, #48]	; (8009e50 <memp_free+0x44>)
 8009e20:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009e24:	490b      	ldr	r1, [pc, #44]	; (8009e54 <memp_free+0x48>)
 8009e26:	480c      	ldr	r0, [pc, #48]	; (8009e58 <memp_free+0x4c>)
 8009e28:	f009 fb74 	bl	8013514 <iprintf>
 8009e2c:	e00c      	b.n	8009e48 <memp_free+0x3c>

  if (mem == NULL) {
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d008      	beq.n	8009e46 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	4a09      	ldr	r2, [pc, #36]	; (8009e5c <memp_free+0x50>)
 8009e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7ff ff94 	bl	8009d6c <do_memp_free_pool>
 8009e44:	e000      	b.n	8009e48 <memp_free+0x3c>
    return;
 8009e46:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	08014764 	.word	0x08014764
 8009e54:	08014834 	.word	0x08014834
 8009e58:	080147b8 	.word	0x080147b8
 8009e5c:	08016f70 	.word	0x08016f70

08009e60 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009e60:	b480      	push	{r7}
 8009e62:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009e64:	bf00      	nop
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
	...

08009e70 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d108      	bne.n	8009e96 <netif_add+0x26>
 8009e84:	4b57      	ldr	r3, [pc, #348]	; (8009fe4 <netif_add+0x174>)
 8009e86:	f240 1227 	movw	r2, #295	; 0x127
 8009e8a:	4957      	ldr	r1, [pc, #348]	; (8009fe8 <netif_add+0x178>)
 8009e8c:	4857      	ldr	r0, [pc, #348]	; (8009fec <netif_add+0x17c>)
 8009e8e:	f009 fb41 	bl	8013514 <iprintf>
 8009e92:	2300      	movs	r3, #0
 8009e94:	e0a2      	b.n	8009fdc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d108      	bne.n	8009eae <netif_add+0x3e>
 8009e9c:	4b51      	ldr	r3, [pc, #324]	; (8009fe4 <netif_add+0x174>)
 8009e9e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009ea2:	4953      	ldr	r1, [pc, #332]	; (8009ff0 <netif_add+0x180>)
 8009ea4:	4851      	ldr	r0, [pc, #324]	; (8009fec <netif_add+0x17c>)
 8009ea6:	f009 fb35 	bl	8013514 <iprintf>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e096      	b.n	8009fdc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009eb4:	4b4f      	ldr	r3, [pc, #316]	; (8009ff4 <netif_add+0x184>)
 8009eb6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009ebe:	4b4d      	ldr	r3, [pc, #308]	; (8009ff4 <netif_add+0x184>)
 8009ec0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009ec8:	4b4a      	ldr	r3, [pc, #296]	; (8009ff4 <netif_add+0x184>)
 8009eca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	4a45      	ldr	r2, [pc, #276]	; (8009ff8 <netif_add+0x188>)
 8009ee2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6a3a      	ldr	r2, [r7, #32]
 8009efc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009efe:	4b3f      	ldr	r3, [pc, #252]	; (8009ffc <netif_add+0x18c>)
 8009f00:	781a      	ldrb	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f0c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	68b9      	ldr	r1, [r7, #8]
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 f913 	bl	800a140 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	4798      	blx	r3
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <netif_add+0xba>
    return NULL;
 8009f26:	2300      	movs	r3, #0
 8009f28:	e058      	b.n	8009fdc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f30:	2bff      	cmp	r3, #255	; 0xff
 8009f32:	d103      	bne.n	8009f3c <netif_add+0xcc>
        netif->num = 0;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009f40:	4b2f      	ldr	r3, [pc, #188]	; (800a000 <netif_add+0x190>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	617b      	str	r3, [r7, #20]
 8009f46:	e02b      	b.n	8009fa0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d106      	bne.n	8009f5e <netif_add+0xee>
 8009f50:	4b24      	ldr	r3, [pc, #144]	; (8009fe4 <netif_add+0x174>)
 8009f52:	f240 128b 	movw	r2, #395	; 0x18b
 8009f56:	492b      	ldr	r1, [pc, #172]	; (800a004 <netif_add+0x194>)
 8009f58:	4824      	ldr	r0, [pc, #144]	; (8009fec <netif_add+0x17c>)
 8009f5a:	f009 fadb 	bl	8013514 <iprintf>
        num_netifs++;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	3301      	adds	r3, #1
 8009f62:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	2bff      	cmp	r3, #255	; 0xff
 8009f68:	dd06      	ble.n	8009f78 <netif_add+0x108>
 8009f6a:	4b1e      	ldr	r3, [pc, #120]	; (8009fe4 <netif_add+0x174>)
 8009f6c:	f240 128d 	movw	r2, #397	; 0x18d
 8009f70:	4925      	ldr	r1, [pc, #148]	; (800a008 <netif_add+0x198>)
 8009f72:	481e      	ldr	r0, [pc, #120]	; (8009fec <netif_add+0x17c>)
 8009f74:	f009 face 	bl	8013514 <iprintf>
        if (netif2->num == netif->num) {
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d108      	bne.n	8009f9a <netif_add+0x12a>
          netif->num++;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f8e:	3301      	adds	r3, #1
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009f98:	e005      	b.n	8009fa6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	617b      	str	r3, [r7, #20]
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1d0      	bne.n	8009f48 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1be      	bne.n	8009f2a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fb2:	2bfe      	cmp	r3, #254	; 0xfe
 8009fb4:	d103      	bne.n	8009fbe <netif_add+0x14e>
    netif_num = 0;
 8009fb6:	4b11      	ldr	r3, [pc, #68]	; (8009ffc <netif_add+0x18c>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	701a      	strb	r2, [r3, #0]
 8009fbc:	e006      	b.n	8009fcc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <netif_add+0x18c>)
 8009fca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009fcc:	4b0c      	ldr	r3, [pc, #48]	; (800a000 <netif_add+0x190>)
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009fd4:	4a0a      	ldr	r2, [pc, #40]	; (800a000 <netif_add+0x190>)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009fda:	68fb      	ldr	r3, [r7, #12]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	08014850 	.word	0x08014850
 8009fe8:	080148e4 	.word	0x080148e4
 8009fec:	080148a0 	.word	0x080148a0
 8009ff0:	08014900 	.word	0x08014900
 8009ff4:	08016fe4 	.word	0x08016fe4
 8009ff8:	0800a41b 	.word	0x0800a41b
 8009ffc:	24005ce8 	.word	0x24005ce8
 800a000:	2400a99c 	.word	0x2400a99c
 800a004:	08014924 	.word	0x08014924
 800a008:	08014938 	.word	0x08014938

0800a00c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f002 fb7d 	bl	800c718 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f006 fc91 	bl	8010948 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d106      	bne.n	800a050 <netif_do_set_ipaddr+0x20>
 800a042:	4b1d      	ldr	r3, [pc, #116]	; (800a0b8 <netif_do_set_ipaddr+0x88>)
 800a044:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a048:	491c      	ldr	r1, [pc, #112]	; (800a0bc <netif_do_set_ipaddr+0x8c>)
 800a04a:	481d      	ldr	r0, [pc, #116]	; (800a0c0 <netif_do_set_ipaddr+0x90>)
 800a04c:	f009 fa62 	bl	8013514 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d106      	bne.n	800a064 <netif_do_set_ipaddr+0x34>
 800a056:	4b18      	ldr	r3, [pc, #96]	; (800a0b8 <netif_do_set_ipaddr+0x88>)
 800a058:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a05c:	4917      	ldr	r1, [pc, #92]	; (800a0bc <netif_do_set_ipaddr+0x8c>)
 800a05e:	4818      	ldr	r0, [pc, #96]	; (800a0c0 <netif_do_set_ipaddr+0x90>)
 800a060:	f009 fa58 	bl	8013514 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3304      	adds	r3, #4
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d01c      	beq.n	800a0ac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	3304      	adds	r3, #4
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a082:	f107 0314 	add.w	r3, r7, #20
 800a086:	4619      	mov	r1, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff ffbf 	bl	800a00c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <netif_do_set_ipaddr+0x6a>
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	e000      	b.n	800a09c <netif_do_set_ipaddr+0x6c>
 800a09a:	2300      	movs	r3, #0
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 f8d2 	bl	800a24c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e000      	b.n	800a0ae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3718      	adds	r7, #24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	08014850 	.word	0x08014850
 800a0bc:	08014968 	.word	0x08014968
 800a0c0:	080148a0 	.word	0x080148a0

0800a0c4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	3308      	adds	r3, #8
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d00a      	beq.n	800a0f4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <netif_do_set_netmask+0x26>
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	e000      	b.n	800a0ec <netif_do_set_netmask+0x28>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e000      	b.n	800a0f6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a102:	b480      	push	{r7}
 800a104:	b085      	sub	sp, #20
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	330c      	adds	r3, #12
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d00a      	beq.n	800a132 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <netif_do_set_gw+0x26>
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	e000      	b.n	800a12a <netif_do_set_gw+0x28>
 800a128:	2300      	movs	r3, #0
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a12e:	2301      	movs	r3, #1
 800a130:	e000      	b.n	800a134 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3714      	adds	r7, #20
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a152:	2300      	movs	r3, #0
 800a154:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a15c:	4b1c      	ldr	r3, [pc, #112]	; (800a1d0 <netif_set_addr+0x90>)
 800a15e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a166:	4b1a      	ldr	r3, [pc, #104]	; (800a1d0 <netif_set_addr+0x90>)
 800a168:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a170:	4b17      	ldr	r3, [pc, #92]	; (800a1d0 <netif_set_addr+0x90>)
 800a172:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <netif_set_addr+0x42>
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <netif_set_addr+0x46>
 800a182:	2301      	movs	r3, #1
 800a184:	e000      	b.n	800a188 <netif_set_addr+0x48>
 800a186:	2300      	movs	r3, #0
 800a188:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d006      	beq.n	800a19e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a190:	f107 0310 	add.w	r3, r7, #16
 800a194:	461a      	mov	r2, r3
 800a196:	68b9      	ldr	r1, [r7, #8]
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f7ff ff49 	bl	800a030 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a19e:	69fa      	ldr	r2, [r7, #28]
 800a1a0:	6879      	ldr	r1, [r7, #4]
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f7ff ff8e 	bl	800a0c4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a1a8:	69ba      	ldr	r2, [r7, #24]
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7ff ffa8 	bl	800a102 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d106      	bne.n	800a1c6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a1b8:	f107 0310 	add.w	r3, r7, #16
 800a1bc:	461a      	mov	r2, r3
 800a1be:	68b9      	ldr	r1, [r7, #8]
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f7ff ff35 	bl	800a030 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a1c6:	bf00      	nop
 800a1c8:	3720      	adds	r7, #32
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	08016fe4 	.word	0x08016fe4

0800a1d4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a1dc:	4a04      	ldr	r2, [pc, #16]	; (800a1f0 <netif_set_default+0x1c>)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a1e2:	bf00      	nop
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	2400a9a0 	.word	0x2400a9a0

0800a1f4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d107      	bne.n	800a212 <netif_set_up+0x1e>
 800a202:	4b0f      	ldr	r3, [pc, #60]	; (800a240 <netif_set_up+0x4c>)
 800a204:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a208:	490e      	ldr	r1, [pc, #56]	; (800a244 <netif_set_up+0x50>)
 800a20a:	480f      	ldr	r0, [pc, #60]	; (800a248 <netif_set_up+0x54>)
 800a20c:	f009 f982 	bl	8013514 <iprintf>
 800a210:	e013      	b.n	800a23a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a218:	f003 0301 	and.w	r3, r3, #1
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10c      	bne.n	800a23a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a226:	f043 0301 	orr.w	r3, r3, #1
 800a22a:	b2da      	uxtb	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a232:	2103      	movs	r1, #3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f809 	bl	800a24c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	08014850 	.word	0x08014850
 800a244:	080149d8 	.word	0x080149d8
 800a248:	080148a0 	.word	0x080148a0

0800a24c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d106      	bne.n	800a26c <netif_issue_reports+0x20>
 800a25e:	4b18      	ldr	r3, [pc, #96]	; (800a2c0 <netif_issue_reports+0x74>)
 800a260:	f240 326d 	movw	r2, #877	; 0x36d
 800a264:	4917      	ldr	r1, [pc, #92]	; (800a2c4 <netif_issue_reports+0x78>)
 800a266:	4818      	ldr	r0, [pc, #96]	; (800a2c8 <netif_issue_reports+0x7c>)
 800a268:	f009 f954 	bl	8013514 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a272:	f003 0304 	and.w	r3, r3, #4
 800a276:	2b00      	cmp	r3, #0
 800a278:	d01e      	beq.n	800a2b8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a280:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a284:	2b00      	cmp	r3, #0
 800a286:	d017      	beq.n	800a2b8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	f003 0301 	and.w	r3, r3, #1
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d013      	beq.n	800a2ba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3304      	adds	r3, #4
 800a296:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00e      	beq.n	800a2ba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2a2:	f003 0308 	and.w	r3, r3, #8
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d007      	beq.n	800a2ba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f007 fab3 	bl	801181c <etharp_request>
 800a2b6:	e000      	b.n	800a2ba <netif_issue_reports+0x6e>
    return;
 800a2b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	08014850 	.word	0x08014850
 800a2c4:	080149f4 	.word	0x080149f4
 800a2c8:	080148a0 	.word	0x080148a0

0800a2cc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d107      	bne.n	800a2ea <netif_set_down+0x1e>
 800a2da:	4b12      	ldr	r3, [pc, #72]	; (800a324 <netif_set_down+0x58>)
 800a2dc:	f240 329b 	movw	r2, #923	; 0x39b
 800a2e0:	4911      	ldr	r1, [pc, #68]	; (800a328 <netif_set_down+0x5c>)
 800a2e2:	4812      	ldr	r0, [pc, #72]	; (800a32c <netif_set_down+0x60>)
 800a2e4:	f009 f916 	bl	8013514 <iprintf>
 800a2e8:	e019      	b.n	800a31e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d012      	beq.n	800a31e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2fe:	f023 0301 	bic.w	r3, r3, #1
 800a302:	b2da      	uxtb	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a310:	f003 0308 	and.w	r3, r3, #8
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f006 fe3d 	bl	8010f98 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	08014850 	.word	0x08014850
 800a328:	08014a18 	.word	0x08014a18
 800a32c:	080148a0 	.word	0x080148a0

0800a330 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d107      	bne.n	800a34e <netif_set_link_up+0x1e>
 800a33e:	4b13      	ldr	r3, [pc, #76]	; (800a38c <netif_set_link_up+0x5c>)
 800a340:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a344:	4912      	ldr	r1, [pc, #72]	; (800a390 <netif_set_link_up+0x60>)
 800a346:	4813      	ldr	r0, [pc, #76]	; (800a394 <netif_set_link_up+0x64>)
 800a348:	f009 f8e4 	bl	8013514 <iprintf>
 800a34c:	e01b      	b.n	800a386 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a354:	f003 0304 	and.w	r3, r3, #4
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d114      	bne.n	800a386 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a362:	f043 0304 	orr.w	r3, r3, #4
 800a366:	b2da      	uxtb	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a36e:	2103      	movs	r1, #3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7ff ff6b 	bl	800a24c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	69db      	ldr	r3, [r3, #28]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <netif_set_link_up+0x56>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	08014850 	.word	0x08014850
 800a390:	08014a38 	.word	0x08014a38
 800a394:	080148a0 	.word	0x080148a0

0800a398 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d107      	bne.n	800a3b6 <netif_set_link_down+0x1e>
 800a3a6:	4b11      	ldr	r3, [pc, #68]	; (800a3ec <netif_set_link_down+0x54>)
 800a3a8:	f240 4206 	movw	r2, #1030	; 0x406
 800a3ac:	4910      	ldr	r1, [pc, #64]	; (800a3f0 <netif_set_link_down+0x58>)
 800a3ae:	4811      	ldr	r0, [pc, #68]	; (800a3f4 <netif_set_link_down+0x5c>)
 800a3b0:	f009 f8b0 	bl	8013514 <iprintf>
 800a3b4:	e017      	b.n	800a3e6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3bc:	f003 0304 	and.w	r3, r3, #4
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d010      	beq.n	800a3e6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3ca:	f023 0304 	bic.w	r3, r3, #4
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	69db      	ldr	r3, [r3, #28]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d003      	beq.n	800a3e6 <netif_set_link_down+0x4e>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	69db      	ldr	r3, [r3, #28]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	08014850 	.word	0x08014850
 800a3f0:	08014a5c 	.word	0x08014a5c
 800a3f4:	080148a0 	.word	0x080148a0

0800a3f8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	61da      	str	r2, [r3, #28]
  }
}
 800a40e:	bf00      	nop
 800a410:	370c      	adds	r7, #12
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b085      	sub	sp, #20
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	60b9      	str	r1, [r7, #8]
 800a424:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a426:	f06f 030b 	mvn.w	r3, #11
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
	...

0800a438 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	4603      	mov	r3, r0
 800a440:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a442:	79fb      	ldrb	r3, [r7, #7]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d013      	beq.n	800a470 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a448:	4b0d      	ldr	r3, [pc, #52]	; (800a480 <netif_get_by_index+0x48>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	e00c      	b.n	800a46a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a456:	3301      	adds	r3, #1
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	79fa      	ldrb	r2, [r7, #7]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d101      	bne.n	800a464 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	e006      	b.n	800a472 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	60fb      	str	r3, [r7, #12]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1ef      	bne.n	800a450 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	2400a99c 	.word	0x2400a99c

0800a484 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a48a:	f008 fe4d 	bl	8013128 <sys_arch_protect>
 800a48e:	6038      	str	r0, [r7, #0]
 800a490:	4b0d      	ldr	r3, [pc, #52]	; (800a4c8 <pbuf_free_ooseq+0x44>)
 800a492:	2200      	movs	r2, #0
 800a494:	701a      	strb	r2, [r3, #0]
 800a496:	6838      	ldr	r0, [r7, #0]
 800a498:	f008 fe54 	bl	8013144 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a49c:	4b0b      	ldr	r3, [pc, #44]	; (800a4cc <pbuf_free_ooseq+0x48>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	607b      	str	r3, [r7, #4]
 800a4a2:	e00a      	b.n	800a4ba <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d003      	beq.n	800a4b4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f002 f971 	bl	800c794 <tcp_free_ooseq>
      return;
 800a4b2:	e005      	b.n	800a4c0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	607b      	str	r3, [r7, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1f1      	bne.n	800a4a4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	2400a9a4 	.word	0x2400a9a4
 800a4cc:	2400a9ac 	.word	0x2400a9ac

0800a4d0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a4d8:	f7ff ffd4 	bl	800a484 <pbuf_free_ooseq>
}
 800a4dc:	bf00      	nop
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a4ea:	f008 fe1d 	bl	8013128 <sys_arch_protect>
 800a4ee:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a4f0:	4b0f      	ldr	r3, [pc, #60]	; (800a530 <pbuf_pool_is_empty+0x4c>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a4f6:	4b0e      	ldr	r3, [pc, #56]	; (800a530 <pbuf_pool_is_empty+0x4c>)
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f008 fe21 	bl	8013144 <sys_arch_unprotect>

  if (!queued) {
 800a502:	78fb      	ldrb	r3, [r7, #3]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10f      	bne.n	800a528 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a508:	2100      	movs	r1, #0
 800a50a:	480a      	ldr	r0, [pc, #40]	; (800a534 <pbuf_pool_is_empty+0x50>)
 800a50c:	f7fe fdee 	bl	80090ec <tcpip_try_callback>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d008      	beq.n	800a528 <pbuf_pool_is_empty+0x44>
 800a516:	f008 fe07 	bl	8013128 <sys_arch_protect>
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	4b04      	ldr	r3, [pc, #16]	; (800a530 <pbuf_pool_is_empty+0x4c>)
 800a51e:	2200      	movs	r2, #0
 800a520:	701a      	strb	r2, [r3, #0]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f008 fe0e 	bl	8013144 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a528:	bf00      	nop
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	2400a9a4 	.word	0x2400a9a4
 800a534:	0800a4d1 	.word	0x0800a4d1

0800a538 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	4611      	mov	r1, r2
 800a544:	461a      	mov	r2, r3
 800a546:	460b      	mov	r3, r1
 800a548:	80fb      	strh	r3, [r7, #6]
 800a54a:	4613      	mov	r3, r2
 800a54c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	88fa      	ldrh	r2, [r7, #6]
 800a55e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	88ba      	ldrh	r2, [r7, #4]
 800a564:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a566:	8b3b      	ldrh	r3, [r7, #24]
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	7f3a      	ldrb	r2, [r7, #28]
 800a572:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2201      	movs	r2, #1
 800a578:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	73da      	strb	r2, [r3, #15]
}
 800a580:	bf00      	nop
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08c      	sub	sp, #48	; 0x30
 800a590:	af02      	add	r7, sp, #8
 800a592:	4603      	mov	r3, r0
 800a594:	71fb      	strb	r3, [r7, #7]
 800a596:	460b      	mov	r3, r1
 800a598:	80bb      	strh	r3, [r7, #4]
 800a59a:	4613      	mov	r3, r2
 800a59c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a59e:	79fb      	ldrb	r3, [r7, #7]
 800a5a0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a5a2:	887b      	ldrh	r3, [r7, #2]
 800a5a4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a5a8:	d07f      	beq.n	800a6aa <pbuf_alloc+0x11e>
 800a5aa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a5ae:	f300 80c8 	bgt.w	800a742 <pbuf_alloc+0x1b6>
 800a5b2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a5b6:	d010      	beq.n	800a5da <pbuf_alloc+0x4e>
 800a5b8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a5bc:	f300 80c1 	bgt.w	800a742 <pbuf_alloc+0x1b6>
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d002      	beq.n	800a5ca <pbuf_alloc+0x3e>
 800a5c4:	2b41      	cmp	r3, #65	; 0x41
 800a5c6:	f040 80bc 	bne.w	800a742 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a5ca:	887a      	ldrh	r2, [r7, #2]
 800a5cc:	88bb      	ldrh	r3, [r7, #4]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	f000 f8d1 	bl	800a778 <pbuf_alloc_reference>
 800a5d6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a5d8:	e0bd      	b.n	800a756 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a5e2:	88bb      	ldrh	r3, [r7, #4]
 800a5e4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a5e6:	200c      	movs	r0, #12
 800a5e8:	f7ff fb9a 	bl	8009d20 <memp_malloc>
 800a5ec:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d109      	bne.n	800a608 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a5f4:	f7ff ff76 	bl	800a4e4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a5fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a600:	f000 faa8 	bl	800ab54 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a604:	2300      	movs	r3, #0
 800a606:	e0a7      	b.n	800a758 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a608:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a60a:	3303      	adds	r3, #3
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	f023 0303 	bic.w	r3, r3, #3
 800a612:	b29b      	uxth	r3, r3
 800a614:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a618:	b29b      	uxth	r3, r3
 800a61a:	8b7a      	ldrh	r2, [r7, #26]
 800a61c:	4293      	cmp	r3, r2
 800a61e:	bf28      	it	cs
 800a620:	4613      	movcs	r3, r2
 800a622:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a624:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a626:	3310      	adds	r3, #16
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	4413      	add	r3, r2
 800a62c:	3303      	adds	r3, #3
 800a62e:	f023 0303 	bic.w	r3, r3, #3
 800a632:	4618      	mov	r0, r3
 800a634:	89f9      	ldrh	r1, [r7, #14]
 800a636:	8b7a      	ldrh	r2, [r7, #26]
 800a638:	2300      	movs	r3, #0
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	887b      	ldrh	r3, [r7, #2]
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	460b      	mov	r3, r1
 800a642:	4601      	mov	r1, r0
 800a644:	6938      	ldr	r0, [r7, #16]
 800a646:	f7ff ff77 	bl	800a538 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	f003 0303 	and.w	r3, r3, #3
 800a652:	2b00      	cmp	r3, #0
 800a654:	d006      	beq.n	800a664 <pbuf_alloc+0xd8>
 800a656:	4b42      	ldr	r3, [pc, #264]	; (800a760 <pbuf_alloc+0x1d4>)
 800a658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a65c:	4941      	ldr	r1, [pc, #260]	; (800a764 <pbuf_alloc+0x1d8>)
 800a65e:	4842      	ldr	r0, [pc, #264]	; (800a768 <pbuf_alloc+0x1dc>)
 800a660:	f008 ff58 	bl	8013514 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a664:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a666:	3303      	adds	r3, #3
 800a668:	f023 0303 	bic.w	r3, r3, #3
 800a66c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a670:	d106      	bne.n	800a680 <pbuf_alloc+0xf4>
 800a672:	4b3b      	ldr	r3, [pc, #236]	; (800a760 <pbuf_alloc+0x1d4>)
 800a674:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a678:	493c      	ldr	r1, [pc, #240]	; (800a76c <pbuf_alloc+0x1e0>)
 800a67a:	483b      	ldr	r0, [pc, #236]	; (800a768 <pbuf_alloc+0x1dc>)
 800a67c:	f008 ff4a 	bl	8013514 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	2b00      	cmp	r3, #0
 800a684:	d102      	bne.n	800a68c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	627b      	str	r3, [r7, #36]	; 0x24
 800a68a:	e002      	b.n	800a692 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a696:	8b7a      	ldrh	r2, [r7, #26]
 800a698:	89fb      	ldrh	r3, [r7, #14]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a6a2:	8b7b      	ldrh	r3, [r7, #26]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d19e      	bne.n	800a5e6 <pbuf_alloc+0x5a>
      break;
 800a6a8:	e055      	b.n	800a756 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a6aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6ac:	3303      	adds	r3, #3
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	f023 0303 	bic.w	r3, r3, #3
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	88bb      	ldrh	r3, [r7, #4]
 800a6b8:	3303      	adds	r3, #3
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	f023 0303 	bic.w	r3, r3, #3
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	4413      	add	r3, r2
 800a6c4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a6c6:	8b3b      	ldrh	r3, [r7, #24]
 800a6c8:	3310      	adds	r3, #16
 800a6ca:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a6cc:	8b3a      	ldrh	r2, [r7, #24]
 800a6ce:	88bb      	ldrh	r3, [r7, #4]
 800a6d0:	3303      	adds	r3, #3
 800a6d2:	f023 0303 	bic.w	r3, r3, #3
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d306      	bcc.n	800a6e8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a6da:	8afa      	ldrh	r2, [r7, #22]
 800a6dc:	88bb      	ldrh	r3, [r7, #4]
 800a6de:	3303      	adds	r3, #3
 800a6e0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d201      	bcs.n	800a6ec <pbuf_alloc+0x160>
        return NULL;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e035      	b.n	800a758 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a6ec:	8afb      	ldrh	r3, [r7, #22]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff f972 	bl	80099d8 <mem_malloc>
 800a6f4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <pbuf_alloc+0x174>
        return NULL;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	e02b      	b.n	800a758 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a700:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a702:	3310      	adds	r3, #16
 800a704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a706:	4413      	add	r3, r2
 800a708:	3303      	adds	r3, #3
 800a70a:	f023 0303 	bic.w	r3, r3, #3
 800a70e:	4618      	mov	r0, r3
 800a710:	88b9      	ldrh	r1, [r7, #4]
 800a712:	88ba      	ldrh	r2, [r7, #4]
 800a714:	2300      	movs	r3, #0
 800a716:	9301      	str	r3, [sp, #4]
 800a718:	887b      	ldrh	r3, [r7, #2]
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	460b      	mov	r3, r1
 800a71e:	4601      	mov	r1, r0
 800a720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a722:	f7ff ff09 	bl	800a538 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	f003 0303 	and.w	r3, r3, #3
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d010      	beq.n	800a754 <pbuf_alloc+0x1c8>
 800a732:	4b0b      	ldr	r3, [pc, #44]	; (800a760 <pbuf_alloc+0x1d4>)
 800a734:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a738:	490d      	ldr	r1, [pc, #52]	; (800a770 <pbuf_alloc+0x1e4>)
 800a73a:	480b      	ldr	r0, [pc, #44]	; (800a768 <pbuf_alloc+0x1dc>)
 800a73c:	f008 feea 	bl	8013514 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a740:	e008      	b.n	800a754 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a742:	4b07      	ldr	r3, [pc, #28]	; (800a760 <pbuf_alloc+0x1d4>)
 800a744:	f240 1227 	movw	r2, #295	; 0x127
 800a748:	490a      	ldr	r1, [pc, #40]	; (800a774 <pbuf_alloc+0x1e8>)
 800a74a:	4807      	ldr	r0, [pc, #28]	; (800a768 <pbuf_alloc+0x1dc>)
 800a74c:	f008 fee2 	bl	8013514 <iprintf>
      return NULL;
 800a750:	2300      	movs	r3, #0
 800a752:	e001      	b.n	800a758 <pbuf_alloc+0x1cc>
      break;
 800a754:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3728      	adds	r7, #40	; 0x28
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	08014a80 	.word	0x08014a80
 800a764:	08014ab0 	.word	0x08014ab0
 800a768:	08014ae0 	.word	0x08014ae0
 800a76c:	08014b08 	.word	0x08014b08
 800a770:	08014b3c 	.word	0x08014b3c
 800a774:	08014b68 	.word	0x08014b68

0800a778 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af02      	add	r7, sp, #8
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	460b      	mov	r3, r1
 800a782:	807b      	strh	r3, [r7, #2]
 800a784:	4613      	mov	r3, r2
 800a786:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a788:	883b      	ldrh	r3, [r7, #0]
 800a78a:	2b41      	cmp	r3, #65	; 0x41
 800a78c:	d009      	beq.n	800a7a2 <pbuf_alloc_reference+0x2a>
 800a78e:	883b      	ldrh	r3, [r7, #0]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d006      	beq.n	800a7a2 <pbuf_alloc_reference+0x2a>
 800a794:	4b0f      	ldr	r3, [pc, #60]	; (800a7d4 <pbuf_alloc_reference+0x5c>)
 800a796:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a79a:	490f      	ldr	r1, [pc, #60]	; (800a7d8 <pbuf_alloc_reference+0x60>)
 800a79c:	480f      	ldr	r0, [pc, #60]	; (800a7dc <pbuf_alloc_reference+0x64>)
 800a79e:	f008 feb9 	bl	8013514 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a7a2:	200b      	movs	r0, #11
 800a7a4:	f7ff fabc 	bl	8009d20 <memp_malloc>
 800a7a8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e00b      	b.n	800a7cc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a7b4:	8879      	ldrh	r1, [r7, #2]
 800a7b6:	887a      	ldrh	r2, [r7, #2]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	9301      	str	r3, [sp, #4]
 800a7bc:	883b      	ldrh	r3, [r7, #0]
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	6879      	ldr	r1, [r7, #4]
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f7ff feb7 	bl	800a538 <pbuf_init_alloced_pbuf>
  return p;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	08014a80 	.word	0x08014a80
 800a7d8:	08014b84 	.word	0x08014b84
 800a7dc:	08014ae0 	.word	0x08014ae0

0800a7e0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af02      	add	r7, sp, #8
 800a7e6:	607b      	str	r3, [r7, #4]
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73fb      	strb	r3, [r7, #15]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	81bb      	strh	r3, [r7, #12]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
 800a7f6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a7f8:	8a7b      	ldrh	r3, [r7, #18]
 800a7fa:	3303      	adds	r3, #3
 800a7fc:	f023 0203 	bic.w	r2, r3, #3
 800a800:	89bb      	ldrh	r3, [r7, #12]
 800a802:	441a      	add	r2, r3
 800a804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a806:	429a      	cmp	r2, r3
 800a808:	d901      	bls.n	800a80e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	e018      	b.n	800a840 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a80e:	6a3b      	ldr	r3, [r7, #32]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d007      	beq.n	800a824 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a814:	8a7b      	ldrh	r3, [r7, #18]
 800a816:	3303      	adds	r3, #3
 800a818:	f023 0303 	bic.w	r3, r3, #3
 800a81c:	6a3a      	ldr	r2, [r7, #32]
 800a81e:	4413      	add	r3, r2
 800a820:	617b      	str	r3, [r7, #20]
 800a822:	e001      	b.n	800a828 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a824:	2300      	movs	r3, #0
 800a826:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	89b9      	ldrh	r1, [r7, #12]
 800a82c:	89ba      	ldrh	r2, [r7, #12]
 800a82e:	2302      	movs	r3, #2
 800a830:	9301      	str	r3, [sp, #4]
 800a832:	897b      	ldrh	r3, [r7, #10]
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	460b      	mov	r3, r1
 800a838:	6979      	ldr	r1, [r7, #20]
 800a83a:	f7ff fe7d 	bl	800a538 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a83e:	687b      	ldr	r3, [r7, #4]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d106      	bne.n	800a868 <pbuf_realloc+0x20>
 800a85a:	4b3a      	ldr	r3, [pc, #232]	; (800a944 <pbuf_realloc+0xfc>)
 800a85c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a860:	4939      	ldr	r1, [pc, #228]	; (800a948 <pbuf_realloc+0x100>)
 800a862:	483a      	ldr	r0, [pc, #232]	; (800a94c <pbuf_realloc+0x104>)
 800a864:	f008 fe56 	bl	8013514 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	891b      	ldrh	r3, [r3, #8]
 800a86c:	887a      	ldrh	r2, [r7, #2]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d263      	bcs.n	800a93a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	891a      	ldrh	r2, [r3, #8]
 800a876:	887b      	ldrh	r3, [r7, #2]
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a87c:	887b      	ldrh	r3, [r7, #2]
 800a87e:	817b      	strh	r3, [r7, #10]
  q = p;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a884:	e018      	b.n	800a8b8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	895b      	ldrh	r3, [r3, #10]
 800a88a:	897a      	ldrh	r2, [r7, #10]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	891a      	ldrh	r2, [r3, #8]
 800a894:	893b      	ldrh	r3, [r7, #8]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	b29a      	uxth	r2, r3
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d106      	bne.n	800a8b8 <pbuf_realloc+0x70>
 800a8aa:	4b26      	ldr	r3, [pc, #152]	; (800a944 <pbuf_realloc+0xfc>)
 800a8ac:	f240 12af 	movw	r2, #431	; 0x1af
 800a8b0:	4927      	ldr	r1, [pc, #156]	; (800a950 <pbuf_realloc+0x108>)
 800a8b2:	4826      	ldr	r0, [pc, #152]	; (800a94c <pbuf_realloc+0x104>)
 800a8b4:	f008 fe2e 	bl	8013514 <iprintf>
  while (rem_len > q->len) {
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	895b      	ldrh	r3, [r3, #10]
 800a8bc:	897a      	ldrh	r2, [r7, #10]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d8e1      	bhi.n	800a886 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	7b1b      	ldrb	r3, [r3, #12]
 800a8c6:	f003 030f 	and.w	r3, r3, #15
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d121      	bne.n	800a912 <pbuf_realloc+0xca>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	895b      	ldrh	r3, [r3, #10]
 800a8d2:	897a      	ldrh	r2, [r7, #10]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d01c      	beq.n	800a912 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	7b5b      	ldrb	r3, [r3, #13]
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d116      	bne.n	800a912 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	897b      	ldrh	r3, [r7, #10]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f7fe ff64 	bl	80097c4 <mem_trim>
 800a8fc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d106      	bne.n	800a912 <pbuf_realloc+0xca>
 800a904:	4b0f      	ldr	r3, [pc, #60]	; (800a944 <pbuf_realloc+0xfc>)
 800a906:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a90a:	4912      	ldr	r1, [pc, #72]	; (800a954 <pbuf_realloc+0x10c>)
 800a90c:	480f      	ldr	r0, [pc, #60]	; (800a94c <pbuf_realloc+0x104>)
 800a90e:	f008 fe01 	bl	8013514 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	897a      	ldrh	r2, [r7, #10]
 800a916:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	895a      	ldrh	r2, [r3, #10]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d004      	beq.n	800a932 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f000 f911 	bl	800ab54 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2200      	movs	r2, #0
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	e000      	b.n	800a93c <pbuf_realloc+0xf4>
    return;
 800a93a:	bf00      	nop

}
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	08014a80 	.word	0x08014a80
 800a948:	08014b98 	.word	0x08014b98
 800a94c:	08014ae0 	.word	0x08014ae0
 800a950:	08014bb0 	.word	0x08014bb0
 800a954:	08014bc8 	.word	0x08014bc8

0800a958 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	4613      	mov	r3, r2
 800a964:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d106      	bne.n	800a97a <pbuf_add_header_impl+0x22>
 800a96c:	4b2b      	ldr	r3, [pc, #172]	; (800aa1c <pbuf_add_header_impl+0xc4>)
 800a96e:	f240 12df 	movw	r2, #479	; 0x1df
 800a972:	492b      	ldr	r1, [pc, #172]	; (800aa20 <pbuf_add_header_impl+0xc8>)
 800a974:	482b      	ldr	r0, [pc, #172]	; (800aa24 <pbuf_add_header_impl+0xcc>)
 800a976:	f008 fdcd 	bl	8013514 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d003      	beq.n	800a988 <pbuf_add_header_impl+0x30>
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a986:	d301      	bcc.n	800a98c <pbuf_add_header_impl+0x34>
    return 1;
 800a988:	2301      	movs	r3, #1
 800a98a:	e043      	b.n	800aa14 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <pbuf_add_header_impl+0x3e>
    return 0;
 800a992:	2300      	movs	r3, #0
 800a994:	e03e      	b.n	800aa14 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	891a      	ldrh	r2, [r3, #8]
 800a99e:	8a7b      	ldrh	r3, [r7, #18]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	8a7a      	ldrh	r2, [r7, #18]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d901      	bls.n	800a9ae <pbuf_add_header_impl+0x56>
    return 1;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e032      	b.n	800aa14 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	7b1b      	ldrb	r3, [r3, #12]
 800a9b2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a9b4:	8a3b      	ldrh	r3, [r7, #16]
 800a9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00c      	beq.n	800a9d8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	425b      	negs	r3, r3
 800a9c6:	4413      	add	r3, r2
 800a9c8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	3310      	adds	r3, #16
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d20d      	bcs.n	800a9f0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e01d      	b.n	800aa14 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a9d8:	79fb      	ldrb	r3, [r7, #7]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d006      	beq.n	800a9ec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	685a      	ldr	r2, [r3, #4]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	425b      	negs	r3, r3
 800a9e6:	4413      	add	r3, r2
 800a9e8:	617b      	str	r3, [r7, #20]
 800a9ea:	e001      	b.n	800a9f0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e011      	b.n	800aa14 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	895a      	ldrh	r2, [r3, #10]
 800a9fa:	8a7b      	ldrh	r3, [r7, #18]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	891a      	ldrh	r2, [r3, #8]
 800aa08:	8a7b      	ldrh	r3, [r7, #18]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	811a      	strh	r2, [r3, #8]


  return 0;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	08014a80 	.word	0x08014a80
 800aa20:	08014be4 	.word	0x08014be4
 800aa24:	08014ae0 	.word	0x08014ae0

0800aa28 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800aa32:	2200      	movs	r2, #0
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7ff ff8e 	bl	800a958 <pbuf_add_header_impl>
 800aa3c:	4603      	mov	r3, r0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
	...

0800aa48 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d106      	bne.n	800aa66 <pbuf_remove_header+0x1e>
 800aa58:	4b20      	ldr	r3, [pc, #128]	; (800aadc <pbuf_remove_header+0x94>)
 800aa5a:	f240 224b 	movw	r2, #587	; 0x24b
 800aa5e:	4920      	ldr	r1, [pc, #128]	; (800aae0 <pbuf_remove_header+0x98>)
 800aa60:	4820      	ldr	r0, [pc, #128]	; (800aae4 <pbuf_remove_header+0x9c>)
 800aa62:	f008 fd57 	bl	8013514 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d003      	beq.n	800aa74 <pbuf_remove_header+0x2c>
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa72:	d301      	bcc.n	800aa78 <pbuf_remove_header+0x30>
    return 1;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e02c      	b.n	800aad2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d101      	bne.n	800aa82 <pbuf_remove_header+0x3a>
    return 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e027      	b.n	800aad2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	895b      	ldrh	r3, [r3, #10]
 800aa8a:	89fa      	ldrh	r2, [r7, #14]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d908      	bls.n	800aaa2 <pbuf_remove_header+0x5a>
 800aa90:	4b12      	ldr	r3, [pc, #72]	; (800aadc <pbuf_remove_header+0x94>)
 800aa92:	f240 2255 	movw	r2, #597	; 0x255
 800aa96:	4914      	ldr	r1, [pc, #80]	; (800aae8 <pbuf_remove_header+0xa0>)
 800aa98:	4812      	ldr	r0, [pc, #72]	; (800aae4 <pbuf_remove_header+0x9c>)
 800aa9a:	f008 fd3b 	bl	8013514 <iprintf>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e017      	b.n	800aad2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685a      	ldr	r2, [r3, #4]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	441a      	add	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	895a      	ldrh	r2, [r3, #10]
 800aab8:	89fb      	ldrh	r3, [r7, #14]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	891a      	ldrh	r2, [r3, #8]
 800aac6:	89fb      	ldrh	r3, [r7, #14]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	08014a80 	.word	0x08014a80
 800aae0:	08014be4 	.word	0x08014be4
 800aae4:	08014ae0 	.word	0x08014ae0
 800aae8:	08014bf0 	.word	0x08014bf0

0800aaec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	807b      	strh	r3, [r7, #2]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800aafc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	da08      	bge.n	800ab16 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ab04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab08:	425b      	negs	r3, r3
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7ff ff9b 	bl	800aa48 <pbuf_remove_header>
 800ab12:	4603      	mov	r3, r0
 800ab14:	e007      	b.n	800ab26 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ab16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab1a:	787a      	ldrb	r2, [r7, #1]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7ff ff1a 	bl	800a958 <pbuf_add_header_impl>
 800ab24:	4603      	mov	r3, r0
  }
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b082      	sub	sp, #8
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ab3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	4619      	mov	r1, r3
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f7ff ffd2 	bl	800aaec <pbuf_header_impl>
 800ab48:	4603      	mov	r3, r0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b088      	sub	sp, #32
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10b      	bne.n	800ab7a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d106      	bne.n	800ab76 <pbuf_free+0x22>
 800ab68:	4b3b      	ldr	r3, [pc, #236]	; (800ac58 <pbuf_free+0x104>)
 800ab6a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ab6e:	493b      	ldr	r1, [pc, #236]	; (800ac5c <pbuf_free+0x108>)
 800ab70:	483b      	ldr	r0, [pc, #236]	; (800ac60 <pbuf_free+0x10c>)
 800ab72:	f008 fccf 	bl	8013514 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	e069      	b.n	800ac4e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ab7e:	e062      	b.n	800ac46 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ab80:	f008 fad2 	bl	8013128 <sys_arch_protect>
 800ab84:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	7b9b      	ldrb	r3, [r3, #14]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d106      	bne.n	800ab9c <pbuf_free+0x48>
 800ab8e:	4b32      	ldr	r3, [pc, #200]	; (800ac58 <pbuf_free+0x104>)
 800ab90:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ab94:	4933      	ldr	r1, [pc, #204]	; (800ac64 <pbuf_free+0x110>)
 800ab96:	4832      	ldr	r0, [pc, #200]	; (800ac60 <pbuf_free+0x10c>)
 800ab98:	f008 fcbc 	bl	8013514 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	7b9b      	ldrb	r3, [r3, #14]
 800aba0:	3b01      	subs	r3, #1
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	739a      	strb	r2, [r3, #14]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	7b9b      	ldrb	r3, [r3, #14]
 800abac:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800abae:	69b8      	ldr	r0, [r7, #24]
 800abb0:	f008 fac8 	bl	8013144 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800abb4:	7dfb      	ldrb	r3, [r7, #23]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d143      	bne.n	800ac42 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	7b1b      	ldrb	r3, [r3, #12]
 800abc4:	f003 030f 	and.w	r3, r3, #15
 800abc8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	7b5b      	ldrb	r3, [r3, #13]
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d011      	beq.n	800abfa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d106      	bne.n	800abf0 <pbuf_free+0x9c>
 800abe2:	4b1d      	ldr	r3, [pc, #116]	; (800ac58 <pbuf_free+0x104>)
 800abe4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800abe8:	491f      	ldr	r1, [pc, #124]	; (800ac68 <pbuf_free+0x114>)
 800abea:	481d      	ldr	r0, [pc, #116]	; (800ac60 <pbuf_free+0x10c>)
 800abec:	f008 fc92 	bl	8013514 <iprintf>
        pc->custom_free_function(p);
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	691b      	ldr	r3, [r3, #16]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	4798      	blx	r3
 800abf8:	e01d      	b.n	800ac36 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d104      	bne.n	800ac0a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ac00:	6879      	ldr	r1, [r7, #4]
 800ac02:	200c      	movs	r0, #12
 800ac04:	f7ff f902 	bl	8009e0c <memp_free>
 800ac08:	e015      	b.n	800ac36 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d104      	bne.n	800ac1a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ac10:	6879      	ldr	r1, [r7, #4]
 800ac12:	200b      	movs	r0, #11
 800ac14:	f7ff f8fa 	bl	8009e0c <memp_free>
 800ac18:	e00d      	b.n	800ac36 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d103      	bne.n	800ac28 <pbuf_free+0xd4>
          mem_free(p);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f7fe fd3f 	bl	80096a4 <mem_free>
 800ac26:	e006      	b.n	800ac36 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ac28:	4b0b      	ldr	r3, [pc, #44]	; (800ac58 <pbuf_free+0x104>)
 800ac2a:	f240 320f 	movw	r2, #783	; 0x30f
 800ac2e:	490f      	ldr	r1, [pc, #60]	; (800ac6c <pbuf_free+0x118>)
 800ac30:	480b      	ldr	r0, [pc, #44]	; (800ac60 <pbuf_free+0x10c>)
 800ac32:	f008 fc6f 	bl	8013514 <iprintf>
        }
      }
      count++;
 800ac36:	7ffb      	ldrb	r3, [r7, #31]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	607b      	str	r3, [r7, #4]
 800ac40:	e001      	b.n	800ac46 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d199      	bne.n	800ab80 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ac4c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3720      	adds	r7, #32
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	08014a80 	.word	0x08014a80
 800ac5c:	08014be4 	.word	0x08014be4
 800ac60:	08014ae0 	.word	0x08014ae0
 800ac64:	08014c10 	.word	0x08014c10
 800ac68:	08014c28 	.word	0x08014c28
 800ac6c:	08014c4c 	.word	0x08014c4c

0800ac70 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ac7c:	e005      	b.n	800ac8a <pbuf_clen+0x1a>
    ++len;
 800ac7e:	89fb      	ldrh	r3, [r7, #14]
 800ac80:	3301      	adds	r3, #1
 800ac82:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1f6      	bne.n	800ac7e <pbuf_clen+0xe>
  }
  return len;
 800ac90:	89fb      	ldrh	r3, [r7, #14]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3714      	adds	r7, #20
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
	...

0800aca0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d016      	beq.n	800acdc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800acae:	f008 fa3b 	bl	8013128 <sys_arch_protect>
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	7b9b      	ldrb	r3, [r3, #14]
 800acb8:	3301      	adds	r3, #1
 800acba:	b2da      	uxtb	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	739a      	strb	r2, [r3, #14]
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f008 fa3f 	bl	8013144 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	7b9b      	ldrb	r3, [r3, #14]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d106      	bne.n	800acdc <pbuf_ref+0x3c>
 800acce:	4b05      	ldr	r3, [pc, #20]	; (800ace4 <pbuf_ref+0x44>)
 800acd0:	f240 3242 	movw	r2, #834	; 0x342
 800acd4:	4904      	ldr	r1, [pc, #16]	; (800ace8 <pbuf_ref+0x48>)
 800acd6:	4805      	ldr	r0, [pc, #20]	; (800acec <pbuf_ref+0x4c>)
 800acd8:	f008 fc1c 	bl	8013514 <iprintf>
  }
}
 800acdc:	bf00      	nop
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	08014a80 	.word	0x08014a80
 800ace8:	08014c60 	.word	0x08014c60
 800acec:	08014ae0 	.word	0x08014ae0

0800acf0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <pbuf_cat+0x16>
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d107      	bne.n	800ad16 <pbuf_cat+0x26>
 800ad06:	4b20      	ldr	r3, [pc, #128]	; (800ad88 <pbuf_cat+0x98>)
 800ad08:	f240 3259 	movw	r2, #857	; 0x359
 800ad0c:	491f      	ldr	r1, [pc, #124]	; (800ad8c <pbuf_cat+0x9c>)
 800ad0e:	4820      	ldr	r0, [pc, #128]	; (800ad90 <pbuf_cat+0xa0>)
 800ad10:	f008 fc00 	bl	8013514 <iprintf>
 800ad14:	e034      	b.n	800ad80 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	60fb      	str	r3, [r7, #12]
 800ad1a:	e00a      	b.n	800ad32 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	891a      	ldrh	r2, [r3, #8]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	891b      	ldrh	r3, [r3, #8]
 800ad24:	4413      	add	r3, r2
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	60fb      	str	r3, [r7, #12]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1f0      	bne.n	800ad1c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	891a      	ldrh	r2, [r3, #8]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	895b      	ldrh	r3, [r3, #10]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d006      	beq.n	800ad54 <pbuf_cat+0x64>
 800ad46:	4b10      	ldr	r3, [pc, #64]	; (800ad88 <pbuf_cat+0x98>)
 800ad48:	f240 3262 	movw	r2, #866	; 0x362
 800ad4c:	4911      	ldr	r1, [pc, #68]	; (800ad94 <pbuf_cat+0xa4>)
 800ad4e:	4810      	ldr	r0, [pc, #64]	; (800ad90 <pbuf_cat+0xa0>)
 800ad50:	f008 fbe0 	bl	8013514 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d006      	beq.n	800ad6a <pbuf_cat+0x7a>
 800ad5c:	4b0a      	ldr	r3, [pc, #40]	; (800ad88 <pbuf_cat+0x98>)
 800ad5e:	f240 3263 	movw	r2, #867	; 0x363
 800ad62:	490d      	ldr	r1, [pc, #52]	; (800ad98 <pbuf_cat+0xa8>)
 800ad64:	480a      	ldr	r0, [pc, #40]	; (800ad90 <pbuf_cat+0xa0>)
 800ad66:	f008 fbd5 	bl	8013514 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	891a      	ldrh	r2, [r3, #8]
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	891b      	ldrh	r3, [r3, #8]
 800ad72:	4413      	add	r3, r2
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	08014a80 	.word	0x08014a80
 800ad8c:	08014c74 	.word	0x08014c74
 800ad90:	08014ae0 	.word	0x08014ae0
 800ad94:	08014cac 	.word	0x08014cac
 800ad98:	08014cdc 	.word	0x08014cdc

0800ad9c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ada6:	2300      	movs	r3, #0
 800ada8:	617b      	str	r3, [r7, #20]
 800adaa:	2300      	movs	r3, #0
 800adac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d008      	beq.n	800adc6 <pbuf_copy+0x2a>
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d005      	beq.n	800adc6 <pbuf_copy+0x2a>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	891a      	ldrh	r2, [r3, #8]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	891b      	ldrh	r3, [r3, #8]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d209      	bcs.n	800adda <pbuf_copy+0x3e>
 800adc6:	4b57      	ldr	r3, [pc, #348]	; (800af24 <pbuf_copy+0x188>)
 800adc8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800adcc:	4956      	ldr	r1, [pc, #344]	; (800af28 <pbuf_copy+0x18c>)
 800adce:	4857      	ldr	r0, [pc, #348]	; (800af2c <pbuf_copy+0x190>)
 800add0:	f008 fba0 	bl	8013514 <iprintf>
 800add4:	f06f 030f 	mvn.w	r3, #15
 800add8:	e09f      	b.n	800af1a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	895b      	ldrh	r3, [r3, #10]
 800adde:	461a      	mov	r2, r3
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	1ad2      	subs	r2, r2, r3
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	895b      	ldrh	r3, [r3, #10]
 800ade8:	4619      	mov	r1, r3
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	1acb      	subs	r3, r1, r3
 800adee:	429a      	cmp	r2, r3
 800adf0:	d306      	bcc.n	800ae00 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	895b      	ldrh	r3, [r3, #10]
 800adf6:	461a      	mov	r2, r3
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	60fb      	str	r3, [r7, #12]
 800adfe:	e005      	b.n	800ae0c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	895b      	ldrh	r3, [r3, #10]
 800ae04:	461a      	mov	r2, r3
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685a      	ldr	r2, [r3, #4]
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	18d0      	adds	r0, r2, r3
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	685a      	ldr	r2, [r3, #4]
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	f008 facd 	bl	80133be <memcpy>
    offset_to += len;
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	4413      	add	r3, r2
 800ae2a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	4413      	add	r3, r2
 800ae32:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	895b      	ldrh	r3, [r3, #10]
 800ae38:	461a      	mov	r2, r3
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d906      	bls.n	800ae4e <pbuf_copy+0xb2>
 800ae40:	4b38      	ldr	r3, [pc, #224]	; (800af24 <pbuf_copy+0x188>)
 800ae42:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ae46:	493a      	ldr	r1, [pc, #232]	; (800af30 <pbuf_copy+0x194>)
 800ae48:	4838      	ldr	r0, [pc, #224]	; (800af2c <pbuf_copy+0x190>)
 800ae4a:	f008 fb63 	bl	8013514 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	895b      	ldrh	r3, [r3, #10]
 800ae52:	461a      	mov	r2, r3
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d906      	bls.n	800ae68 <pbuf_copy+0xcc>
 800ae5a:	4b32      	ldr	r3, [pc, #200]	; (800af24 <pbuf_copy+0x188>)
 800ae5c:	f240 32da 	movw	r2, #986	; 0x3da
 800ae60:	4934      	ldr	r1, [pc, #208]	; (800af34 <pbuf_copy+0x198>)
 800ae62:	4832      	ldr	r0, [pc, #200]	; (800af2c <pbuf_copy+0x190>)
 800ae64:	f008 fb56 	bl	8013514 <iprintf>
    if (offset_from >= p_from->len) {
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	895b      	ldrh	r3, [r3, #10]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d304      	bcc.n	800ae7e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ae74:	2300      	movs	r3, #0
 800ae76:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	895b      	ldrh	r3, [r3, #10]
 800ae82:	461a      	mov	r2, r3
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d114      	bne.n	800aeb4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10c      	bne.n	800aeb4 <pbuf_copy+0x118>
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d009      	beq.n	800aeb4 <pbuf_copy+0x118>
 800aea0:	4b20      	ldr	r3, [pc, #128]	; (800af24 <pbuf_copy+0x188>)
 800aea2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800aea6:	4924      	ldr	r1, [pc, #144]	; (800af38 <pbuf_copy+0x19c>)
 800aea8:	4820      	ldr	r0, [pc, #128]	; (800af2c <pbuf_copy+0x190>)
 800aeaa:	f008 fb33 	bl	8013514 <iprintf>
 800aeae:	f06f 030f 	mvn.w	r3, #15
 800aeb2:	e032      	b.n	800af1a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d013      	beq.n	800aee2 <pbuf_copy+0x146>
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	895a      	ldrh	r2, [r3, #10]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	891b      	ldrh	r3, [r3, #8]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d10d      	bne.n	800aee2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d009      	beq.n	800aee2 <pbuf_copy+0x146>
 800aece:	4b15      	ldr	r3, [pc, #84]	; (800af24 <pbuf_copy+0x188>)
 800aed0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800aed4:	4919      	ldr	r1, [pc, #100]	; (800af3c <pbuf_copy+0x1a0>)
 800aed6:	4815      	ldr	r0, [pc, #84]	; (800af2c <pbuf_copy+0x190>)
 800aed8:	f008 fb1c 	bl	8013514 <iprintf>
 800aedc:	f06f 0305 	mvn.w	r3, #5
 800aee0:	e01b      	b.n	800af1a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d013      	beq.n	800af10 <pbuf_copy+0x174>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	895a      	ldrh	r2, [r3, #10]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	891b      	ldrh	r3, [r3, #8]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d10d      	bne.n	800af10 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d009      	beq.n	800af10 <pbuf_copy+0x174>
 800aefc:	4b09      	ldr	r3, [pc, #36]	; (800af24 <pbuf_copy+0x188>)
 800aefe:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800af02:	490e      	ldr	r1, [pc, #56]	; (800af3c <pbuf_copy+0x1a0>)
 800af04:	4809      	ldr	r0, [pc, #36]	; (800af2c <pbuf_copy+0x190>)
 800af06:	f008 fb05 	bl	8013514 <iprintf>
 800af0a:	f06f 0305 	mvn.w	r3, #5
 800af0e:	e004      	b.n	800af1a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	f47f af61 	bne.w	800adda <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	08014a80 	.word	0x08014a80
 800af28:	08014d28 	.word	0x08014d28
 800af2c:	08014ae0 	.word	0x08014ae0
 800af30:	08014d58 	.word	0x08014d58
 800af34:	08014d70 	.word	0x08014d70
 800af38:	08014d8c 	.word	0x08014d8c
 800af3c:	08014d9c 	.word	0x08014d9c

0800af40 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b088      	sub	sp, #32
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	4611      	mov	r1, r2
 800af4c:	461a      	mov	r2, r3
 800af4e:	460b      	mov	r3, r1
 800af50:	80fb      	strh	r3, [r7, #6]
 800af52:	4613      	mov	r3, r2
 800af54:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d108      	bne.n	800af76 <pbuf_copy_partial+0x36>
 800af64:	4b2b      	ldr	r3, [pc, #172]	; (800b014 <pbuf_copy_partial+0xd4>)
 800af66:	f240 420a 	movw	r2, #1034	; 0x40a
 800af6a:	492b      	ldr	r1, [pc, #172]	; (800b018 <pbuf_copy_partial+0xd8>)
 800af6c:	482b      	ldr	r0, [pc, #172]	; (800b01c <pbuf_copy_partial+0xdc>)
 800af6e:	f008 fad1 	bl	8013514 <iprintf>
 800af72:	2300      	movs	r3, #0
 800af74:	e04a      	b.n	800b00c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d108      	bne.n	800af8e <pbuf_copy_partial+0x4e>
 800af7c:	4b25      	ldr	r3, [pc, #148]	; (800b014 <pbuf_copy_partial+0xd4>)
 800af7e:	f240 420b 	movw	r2, #1035	; 0x40b
 800af82:	4927      	ldr	r1, [pc, #156]	; (800b020 <pbuf_copy_partial+0xe0>)
 800af84:	4825      	ldr	r0, [pc, #148]	; (800b01c <pbuf_copy_partial+0xdc>)
 800af86:	f008 fac5 	bl	8013514 <iprintf>
 800af8a:	2300      	movs	r3, #0
 800af8c:	e03e      	b.n	800b00c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	61fb      	str	r3, [r7, #28]
 800af92:	e034      	b.n	800affe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800af94:	88bb      	ldrh	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00a      	beq.n	800afb0 <pbuf_copy_partial+0x70>
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	895b      	ldrh	r3, [r3, #10]
 800af9e:	88ba      	ldrh	r2, [r7, #4]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d305      	bcc.n	800afb0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	895b      	ldrh	r3, [r3, #10]
 800afa8:	88ba      	ldrh	r2, [r7, #4]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	80bb      	strh	r3, [r7, #4]
 800afae:	e023      	b.n	800aff8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	895a      	ldrh	r2, [r3, #10]
 800afb4:	88bb      	ldrh	r3, [r7, #4]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800afba:	8b3a      	ldrh	r2, [r7, #24]
 800afbc:	88fb      	ldrh	r3, [r7, #6]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d901      	bls.n	800afc6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800afc2:	88fb      	ldrh	r3, [r7, #6]
 800afc4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800afc6:	8b7b      	ldrh	r3, [r7, #26]
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	18d0      	adds	r0, r2, r3
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	88bb      	ldrh	r3, [r7, #4]
 800afd2:	4413      	add	r3, r2
 800afd4:	8b3a      	ldrh	r2, [r7, #24]
 800afd6:	4619      	mov	r1, r3
 800afd8:	f008 f9f1 	bl	80133be <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800afdc:	8afa      	ldrh	r2, [r7, #22]
 800afde:	8b3b      	ldrh	r3, [r7, #24]
 800afe0:	4413      	add	r3, r2
 800afe2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800afe4:	8b7a      	ldrh	r2, [r7, #26]
 800afe6:	8b3b      	ldrh	r3, [r7, #24]
 800afe8:	4413      	add	r3, r2
 800afea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800afec:	88fa      	ldrh	r2, [r7, #6]
 800afee:	8b3b      	ldrh	r3, [r7, #24]
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	61fb      	str	r3, [r7, #28]
 800affe:	88fb      	ldrh	r3, [r7, #6]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d002      	beq.n	800b00a <pbuf_copy_partial+0xca>
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1c4      	bne.n	800af94 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b00a:	8afb      	ldrh	r3, [r7, #22]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3720      	adds	r7, #32
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	08014a80 	.word	0x08014a80
 800b018:	08014dc8 	.word	0x08014dc8
 800b01c:	08014ae0 	.word	0x08014ae0
 800b020:	08014de8 	.word	0x08014de8

0800b024 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	4603      	mov	r3, r0
 800b02c:	603a      	str	r2, [r7, #0]
 800b02e:	71fb      	strb	r3, [r7, #7]
 800b030:	460b      	mov	r3, r1
 800b032:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	8919      	ldrh	r1, [r3, #8]
 800b038:	88ba      	ldrh	r2, [r7, #4]
 800b03a:	79fb      	ldrb	r3, [r7, #7]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7ff faa5 	bl	800a58c <pbuf_alloc>
 800b042:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <pbuf_clone+0x2a>
    return NULL;
 800b04a:	2300      	movs	r3, #0
 800b04c:	e011      	b.n	800b072 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f7ff fea3 	bl	800ad9c <pbuf_copy>
 800b056:	4603      	mov	r3, r0
 800b058:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b05a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d006      	beq.n	800b070 <pbuf_clone+0x4c>
 800b062:	4b06      	ldr	r3, [pc, #24]	; (800b07c <pbuf_clone+0x58>)
 800b064:	f240 5224 	movw	r2, #1316	; 0x524
 800b068:	4905      	ldr	r1, [pc, #20]	; (800b080 <pbuf_clone+0x5c>)
 800b06a:	4806      	ldr	r0, [pc, #24]	; (800b084 <pbuf_clone+0x60>)
 800b06c:	f008 fa52 	bl	8013514 <iprintf>
  return q;
 800b070:	68fb      	ldr	r3, [r7, #12]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	08014a80 	.word	0x08014a80
 800b080:	08014ef4 	.word	0x08014ef4
 800b084:	08014ae0 	.word	0x08014ae0

0800b088 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b08c:	f008 fa5a 	bl	8013544 <rand>
 800b090:	4603      	mov	r3, r0
 800b092:	b29b      	uxth	r3, r3
 800b094:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b098:	b29b      	uxth	r3, r3
 800b09a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	4b01      	ldr	r3, [pc, #4]	; (800b0a8 <tcp_init+0x20>)
 800b0a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b0a4:	bf00      	nop
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	24000028 	.word	0x24000028

0800b0ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	7d1b      	ldrb	r3, [r3, #20]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d105      	bne.n	800b0c8 <tcp_free+0x1c>
 800b0bc:	4b06      	ldr	r3, [pc, #24]	; (800b0d8 <tcp_free+0x2c>)
 800b0be:	22d4      	movs	r2, #212	; 0xd4
 800b0c0:	4906      	ldr	r1, [pc, #24]	; (800b0dc <tcp_free+0x30>)
 800b0c2:	4807      	ldr	r0, [pc, #28]	; (800b0e0 <tcp_free+0x34>)
 800b0c4:	f008 fa26 	bl	8013514 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b0c8:	6879      	ldr	r1, [r7, #4]
 800b0ca:	2001      	movs	r0, #1
 800b0cc:	f7fe fe9e 	bl	8009e0c <memp_free>
}
 800b0d0:	bf00      	nop
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	08014f80 	.word	0x08014f80
 800b0dc:	08014fb0 	.word	0x08014fb0
 800b0e0:	08014fc4 	.word	0x08014fc4

0800b0e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	7d1b      	ldrb	r3, [r3, #20]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d105      	bne.n	800b100 <tcp_free_listen+0x1c>
 800b0f4:	4b06      	ldr	r3, [pc, #24]	; (800b110 <tcp_free_listen+0x2c>)
 800b0f6:	22df      	movs	r2, #223	; 0xdf
 800b0f8:	4906      	ldr	r1, [pc, #24]	; (800b114 <tcp_free_listen+0x30>)
 800b0fa:	4807      	ldr	r0, [pc, #28]	; (800b118 <tcp_free_listen+0x34>)
 800b0fc:	f008 fa0a 	bl	8013514 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b100:	6879      	ldr	r1, [r7, #4]
 800b102:	2002      	movs	r0, #2
 800b104:	f7fe fe82 	bl	8009e0c <memp_free>
}
 800b108:	bf00      	nop
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	08014f80 	.word	0x08014f80
 800b114:	08014fec 	.word	0x08014fec
 800b118:	08014fc4 	.word	0x08014fc4

0800b11c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b120:	f000 fea2 	bl	800be68 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b124:	4b07      	ldr	r3, [pc, #28]	; (800b144 <tcp_tmr+0x28>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	3301      	adds	r3, #1
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	4b05      	ldr	r3, [pc, #20]	; (800b144 <tcp_tmr+0x28>)
 800b12e:	701a      	strb	r2, [r3, #0]
 800b130:	4b04      	ldr	r3, [pc, #16]	; (800b144 <tcp_tmr+0x28>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	f003 0301 	and.w	r3, r3, #1
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b13c:	f000 fb54 	bl	800b7e8 <tcp_slowtmr>
  }
}
 800b140:	bf00      	nop
 800b142:	bd80      	pop	{r7, pc}
 800b144:	24005ce9 	.word	0x24005ce9

0800b148 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d105      	bne.n	800b164 <tcp_remove_listener+0x1c>
 800b158:	4b0d      	ldr	r3, [pc, #52]	; (800b190 <tcp_remove_listener+0x48>)
 800b15a:	22ff      	movs	r2, #255	; 0xff
 800b15c:	490d      	ldr	r1, [pc, #52]	; (800b194 <tcp_remove_listener+0x4c>)
 800b15e:	480e      	ldr	r0, [pc, #56]	; (800b198 <tcp_remove_listener+0x50>)
 800b160:	f008 f9d8 	bl	8013514 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	60fb      	str	r3, [r7, #12]
 800b168:	e00a      	b.n	800b180 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	429a      	cmp	r2, r3
 800b172:	d102      	bne.n	800b17a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	60fb      	str	r3, [r7, #12]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1f1      	bne.n	800b16a <tcp_remove_listener+0x22>
    }
  }
}
 800b186:	bf00      	nop
 800b188:	bf00      	nop
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	08014f80 	.word	0x08014f80
 800b194:	08015008 	.word	0x08015008
 800b198:	08014fc4 	.word	0x08014fc4

0800b19c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d106      	bne.n	800b1b8 <tcp_listen_closed+0x1c>
 800b1aa:	4b14      	ldr	r3, [pc, #80]	; (800b1fc <tcp_listen_closed+0x60>)
 800b1ac:	f240 1211 	movw	r2, #273	; 0x111
 800b1b0:	4913      	ldr	r1, [pc, #76]	; (800b200 <tcp_listen_closed+0x64>)
 800b1b2:	4814      	ldr	r0, [pc, #80]	; (800b204 <tcp_listen_closed+0x68>)
 800b1b4:	f008 f9ae 	bl	8013514 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	7d1b      	ldrb	r3, [r3, #20]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d006      	beq.n	800b1ce <tcp_listen_closed+0x32>
 800b1c0:	4b0e      	ldr	r3, [pc, #56]	; (800b1fc <tcp_listen_closed+0x60>)
 800b1c2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b1c6:	4910      	ldr	r1, [pc, #64]	; (800b208 <tcp_listen_closed+0x6c>)
 800b1c8:	480e      	ldr	r0, [pc, #56]	; (800b204 <tcp_listen_closed+0x68>)
 800b1ca:	f008 f9a3 	bl	8013514 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	60fb      	str	r3, [r7, #12]
 800b1d2:	e00b      	b.n	800b1ec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b1d4:	4a0d      	ldr	r2, [pc, #52]	; (800b20c <tcp_listen_closed+0x70>)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6879      	ldr	r1, [r7, #4]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7ff ffb1 	bl	800b148 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d9f0      	bls.n	800b1d4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b1f2:	bf00      	nop
 800b1f4:	bf00      	nop
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	08014f80 	.word	0x08014f80
 800b200:	08015030 	.word	0x08015030
 800b204:	08014fc4 	.word	0x08014fc4
 800b208:	0801503c 	.word	0x0801503c
 800b20c:	08016fbc 	.word	0x08016fbc

0800b210 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b210:	b5b0      	push	{r4, r5, r7, lr}
 800b212:	b088      	sub	sp, #32
 800b214:	af04      	add	r7, sp, #16
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d106      	bne.n	800b230 <tcp_close_shutdown+0x20>
 800b222:	4b63      	ldr	r3, [pc, #396]	; (800b3b0 <tcp_close_shutdown+0x1a0>)
 800b224:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b228:	4962      	ldr	r1, [pc, #392]	; (800b3b4 <tcp_close_shutdown+0x1a4>)
 800b22a:	4863      	ldr	r0, [pc, #396]	; (800b3b8 <tcp_close_shutdown+0x1a8>)
 800b22c:	f008 f972 	bl	8013514 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d066      	beq.n	800b304 <tcp_close_shutdown+0xf4>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	7d1b      	ldrb	r3, [r3, #20]
 800b23a:	2b04      	cmp	r3, #4
 800b23c:	d003      	beq.n	800b246 <tcp_close_shutdown+0x36>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	7d1b      	ldrb	r3, [r3, #20]
 800b242:	2b07      	cmp	r3, #7
 800b244:	d15e      	bne.n	800b304 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d104      	bne.n	800b258 <tcp_close_shutdown+0x48>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b252:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b256:	d055      	beq.n	800b304 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	8b5b      	ldrh	r3, [r3, #26]
 800b25c:	f003 0310 	and.w	r3, r3, #16
 800b260:	2b00      	cmp	r3, #0
 800b262:	d106      	bne.n	800b272 <tcp_close_shutdown+0x62>
 800b264:	4b52      	ldr	r3, [pc, #328]	; (800b3b0 <tcp_close_shutdown+0x1a0>)
 800b266:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b26a:	4954      	ldr	r1, [pc, #336]	; (800b3bc <tcp_close_shutdown+0x1ac>)
 800b26c:	4852      	ldr	r0, [pc, #328]	; (800b3b8 <tcp_close_shutdown+0x1a8>)
 800b26e:	f008 f951 	bl	8013514 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b27a:	687d      	ldr	r5, [r7, #4]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3304      	adds	r3, #4
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	8ad2      	ldrh	r2, [r2, #22]
 800b284:	6879      	ldr	r1, [r7, #4]
 800b286:	8b09      	ldrh	r1, [r1, #24]
 800b288:	9102      	str	r1, [sp, #8]
 800b28a:	9201      	str	r2, [sp, #4]
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	462b      	mov	r3, r5
 800b290:	4622      	mov	r2, r4
 800b292:	4601      	mov	r1, r0
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f004 fe91 	bl	800ffbc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f001 f8c6 	bl	800c42c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b2a0:	4b47      	ldr	r3, [pc, #284]	; (800b3c0 <tcp_close_shutdown+0x1b0>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d105      	bne.n	800b2b6 <tcp_close_shutdown+0xa6>
 800b2aa:	4b45      	ldr	r3, [pc, #276]	; (800b3c0 <tcp_close_shutdown+0x1b0>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	4a43      	ldr	r2, [pc, #268]	; (800b3c0 <tcp_close_shutdown+0x1b0>)
 800b2b2:	6013      	str	r3, [r2, #0]
 800b2b4:	e013      	b.n	800b2de <tcp_close_shutdown+0xce>
 800b2b6:	4b42      	ldr	r3, [pc, #264]	; (800b3c0 <tcp_close_shutdown+0x1b0>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	e00c      	b.n	800b2d8 <tcp_close_shutdown+0xc8>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d104      	bne.n	800b2d2 <tcp_close_shutdown+0xc2>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68da      	ldr	r2, [r3, #12]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	60da      	str	r2, [r3, #12]
 800b2d0:	e005      	b.n	800b2de <tcp_close_shutdown+0xce>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1ef      	bne.n	800b2be <tcp_close_shutdown+0xae>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	60da      	str	r2, [r3, #12]
 800b2e4:	4b37      	ldr	r3, [pc, #220]	; (800b3c4 <tcp_close_shutdown+0x1b4>)
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b2ea:	4b37      	ldr	r3, [pc, #220]	; (800b3c8 <tcp_close_shutdown+0x1b8>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d102      	bne.n	800b2fa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b2f4:	f003 fd5e 	bl	800edb4 <tcp_trigger_input_pcb_close>
 800b2f8:	e002      	b.n	800b300 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff fed6 	bl	800b0ac <tcp_free>
      }
      return ERR_OK;
 800b300:	2300      	movs	r3, #0
 800b302:	e050      	b.n	800b3a6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	7d1b      	ldrb	r3, [r3, #20]
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d03b      	beq.n	800b384 <tcp_close_shutdown+0x174>
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	dc44      	bgt.n	800b39a <tcp_close_shutdown+0x18a>
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <tcp_close_shutdown+0x10a>
 800b314:	2b01      	cmp	r3, #1
 800b316:	d02a      	beq.n	800b36e <tcp_close_shutdown+0x15e>
 800b318:	e03f      	b.n	800b39a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	8adb      	ldrh	r3, [r3, #22]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d021      	beq.n	800b366 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b322:	4b2a      	ldr	r3, [pc, #168]	; (800b3cc <tcp_close_shutdown+0x1bc>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d105      	bne.n	800b338 <tcp_close_shutdown+0x128>
 800b32c:	4b27      	ldr	r3, [pc, #156]	; (800b3cc <tcp_close_shutdown+0x1bc>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	4a26      	ldr	r2, [pc, #152]	; (800b3cc <tcp_close_shutdown+0x1bc>)
 800b334:	6013      	str	r3, [r2, #0]
 800b336:	e013      	b.n	800b360 <tcp_close_shutdown+0x150>
 800b338:	4b24      	ldr	r3, [pc, #144]	; (800b3cc <tcp_close_shutdown+0x1bc>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	60bb      	str	r3, [r7, #8]
 800b33e:	e00c      	b.n	800b35a <tcp_close_shutdown+0x14a>
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	429a      	cmp	r2, r3
 800b348:	d104      	bne.n	800b354 <tcp_close_shutdown+0x144>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68da      	ldr	r2, [r3, #12]
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	60da      	str	r2, [r3, #12]
 800b352:	e005      	b.n	800b360 <tcp_close_shutdown+0x150>
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	60bb      	str	r3, [r7, #8]
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1ef      	bne.n	800b340 <tcp_close_shutdown+0x130>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff fea0 	bl	800b0ac <tcp_free>
      break;
 800b36c:	e01a      	b.n	800b3a4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7ff ff14 	bl	800b19c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b374:	6879      	ldr	r1, [r7, #4]
 800b376:	4816      	ldr	r0, [pc, #88]	; (800b3d0 <tcp_close_shutdown+0x1c0>)
 800b378:	f001 f8a8 	bl	800c4cc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f7ff feb1 	bl	800b0e4 <tcp_free_listen>
      break;
 800b382:	e00f      	b.n	800b3a4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b384:	6879      	ldr	r1, [r7, #4]
 800b386:	480e      	ldr	r0, [pc, #56]	; (800b3c0 <tcp_close_shutdown+0x1b0>)
 800b388:	f001 f8a0 	bl	800c4cc <tcp_pcb_remove>
 800b38c:	4b0d      	ldr	r3, [pc, #52]	; (800b3c4 <tcp_close_shutdown+0x1b4>)
 800b38e:	2201      	movs	r2, #1
 800b390:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7ff fe8a 	bl	800b0ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b398:	e004      	b.n	800b3a4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 f81a 	bl	800b3d4 <tcp_close_shutdown_fin>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	e000      	b.n	800b3a6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	08014f80 	.word	0x08014f80
 800b3b4:	08015054 	.word	0x08015054
 800b3b8:	08014fc4 	.word	0x08014fc4
 800b3bc:	08015074 	.word	0x08015074
 800b3c0:	2400a9ac 	.word	0x2400a9ac
 800b3c4:	2400a9a8 	.word	0x2400a9a8
 800b3c8:	2400a9c0 	.word	0x2400a9c0
 800b3cc:	2400a9b8 	.word	0x2400a9b8
 800b3d0:	2400a9b4 	.word	0x2400a9b4

0800b3d4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d106      	bne.n	800b3f0 <tcp_close_shutdown_fin+0x1c>
 800b3e2:	4b2e      	ldr	r3, [pc, #184]	; (800b49c <tcp_close_shutdown_fin+0xc8>)
 800b3e4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b3e8:	492d      	ldr	r1, [pc, #180]	; (800b4a0 <tcp_close_shutdown_fin+0xcc>)
 800b3ea:	482e      	ldr	r0, [pc, #184]	; (800b4a4 <tcp_close_shutdown_fin+0xd0>)
 800b3ec:	f008 f892 	bl	8013514 <iprintf>

  switch (pcb->state) {
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	7d1b      	ldrb	r3, [r3, #20]
 800b3f4:	2b07      	cmp	r3, #7
 800b3f6:	d020      	beq.n	800b43a <tcp_close_shutdown_fin+0x66>
 800b3f8:	2b07      	cmp	r3, #7
 800b3fa:	dc2b      	bgt.n	800b454 <tcp_close_shutdown_fin+0x80>
 800b3fc:	2b03      	cmp	r3, #3
 800b3fe:	d002      	beq.n	800b406 <tcp_close_shutdown_fin+0x32>
 800b400:	2b04      	cmp	r3, #4
 800b402:	d00d      	beq.n	800b420 <tcp_close_shutdown_fin+0x4c>
 800b404:	e026      	b.n	800b454 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f003 fee6 	bl	800f1d8 <tcp_send_fin>
 800b40c:	4603      	mov	r3, r0
 800b40e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d11f      	bne.n	800b458 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2205      	movs	r2, #5
 800b41c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b41e:	e01b      	b.n	800b458 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f003 fed9 	bl	800f1d8 <tcp_send_fin>
 800b426:	4603      	mov	r3, r0
 800b428:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d114      	bne.n	800b45c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2205      	movs	r2, #5
 800b436:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b438:	e010      	b.n	800b45c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f003 fecc 	bl	800f1d8 <tcp_send_fin>
 800b440:	4603      	mov	r3, r0
 800b442:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d109      	bne.n	800b460 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2209      	movs	r2, #9
 800b450:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b452:	e005      	b.n	800b460 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b454:	2300      	movs	r3, #0
 800b456:	e01c      	b.n	800b492 <tcp_close_shutdown_fin+0xbe>
      break;
 800b458:	bf00      	nop
 800b45a:	e002      	b.n	800b462 <tcp_close_shutdown_fin+0x8e>
      break;
 800b45c:	bf00      	nop
 800b45e:	e000      	b.n	800b462 <tcp_close_shutdown_fin+0x8e>
      break;
 800b460:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d103      	bne.n	800b472 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f003 fff2 	bl	800f454 <tcp_output>
 800b470:	e00d      	b.n	800b48e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b47a:	d108      	bne.n	800b48e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	8b5b      	ldrh	r3, [r3, #26]
 800b480:	f043 0308 	orr.w	r3, r3, #8
 800b484:	b29a      	uxth	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b48a:	2300      	movs	r3, #0
 800b48c:	e001      	b.n	800b492 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	08014f80 	.word	0x08014f80
 800b4a0:	08015030 	.word	0x08015030
 800b4a4:	08014fc4 	.word	0x08014fc4

0800b4a8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d109      	bne.n	800b4ca <tcp_close+0x22>
 800b4b6:	4b0f      	ldr	r3, [pc, #60]	; (800b4f4 <tcp_close+0x4c>)
 800b4b8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b4bc:	490e      	ldr	r1, [pc, #56]	; (800b4f8 <tcp_close+0x50>)
 800b4be:	480f      	ldr	r0, [pc, #60]	; (800b4fc <tcp_close+0x54>)
 800b4c0:	f008 f828 	bl	8013514 <iprintf>
 800b4c4:	f06f 030f 	mvn.w	r3, #15
 800b4c8:	e00f      	b.n	800b4ea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	7d1b      	ldrb	r3, [r3, #20]
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d006      	beq.n	800b4e0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	8b5b      	ldrh	r3, [r3, #26]
 800b4d6:	f043 0310 	orr.w	r3, r3, #16
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f7ff fe94 	bl	800b210 <tcp_close_shutdown>
 800b4e8:	4603      	mov	r3, r0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	08014f80 	.word	0x08014f80
 800b4f8:	08015090 	.word	0x08015090
 800b4fc:	08014fc4 	.word	0x08014fc4

0800b500 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b08e      	sub	sp, #56	; 0x38
 800b504:	af04      	add	r7, sp, #16
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d107      	bne.n	800b520 <tcp_abandon+0x20>
 800b510:	4b52      	ldr	r3, [pc, #328]	; (800b65c <tcp_abandon+0x15c>)
 800b512:	f240 223d 	movw	r2, #573	; 0x23d
 800b516:	4952      	ldr	r1, [pc, #328]	; (800b660 <tcp_abandon+0x160>)
 800b518:	4852      	ldr	r0, [pc, #328]	; (800b664 <tcp_abandon+0x164>)
 800b51a:	f007 fffb 	bl	8013514 <iprintf>
 800b51e:	e099      	b.n	800b654 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	7d1b      	ldrb	r3, [r3, #20]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d106      	bne.n	800b536 <tcp_abandon+0x36>
 800b528:	4b4c      	ldr	r3, [pc, #304]	; (800b65c <tcp_abandon+0x15c>)
 800b52a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b52e:	494e      	ldr	r1, [pc, #312]	; (800b668 <tcp_abandon+0x168>)
 800b530:	484c      	ldr	r0, [pc, #304]	; (800b664 <tcp_abandon+0x164>)
 800b532:	f007 ffef 	bl	8013514 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	7d1b      	ldrb	r3, [r3, #20]
 800b53a:	2b0a      	cmp	r3, #10
 800b53c:	d107      	bne.n	800b54e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b53e:	6879      	ldr	r1, [r7, #4]
 800b540:	484a      	ldr	r0, [pc, #296]	; (800b66c <tcp_abandon+0x16c>)
 800b542:	f000 ffc3 	bl	800c4cc <tcp_pcb_remove>
    tcp_free(pcb);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7ff fdb0 	bl	800b0ac <tcp_free>
 800b54c:	e082      	b.n	800b654 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b560:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b568:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	7d1b      	ldrb	r3, [r3, #20]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d126      	bne.n	800b5c6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	8adb      	ldrh	r3, [r3, #22]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d02e      	beq.n	800b5de <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b580:	4b3b      	ldr	r3, [pc, #236]	; (800b670 <tcp_abandon+0x170>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	429a      	cmp	r2, r3
 800b588:	d105      	bne.n	800b596 <tcp_abandon+0x96>
 800b58a:	4b39      	ldr	r3, [pc, #228]	; (800b670 <tcp_abandon+0x170>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	4a37      	ldr	r2, [pc, #220]	; (800b670 <tcp_abandon+0x170>)
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	e013      	b.n	800b5be <tcp_abandon+0xbe>
 800b596:	4b36      	ldr	r3, [pc, #216]	; (800b670 <tcp_abandon+0x170>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	61fb      	str	r3, [r7, #28]
 800b59c:	e00c      	b.n	800b5b8 <tcp_abandon+0xb8>
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d104      	bne.n	800b5b2 <tcp_abandon+0xb2>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	68da      	ldr	r2, [r3, #12]
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	60da      	str	r2, [r3, #12]
 800b5b0:	e005      	b.n	800b5be <tcp_abandon+0xbe>
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	61fb      	str	r3, [r7, #28]
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1ef      	bne.n	800b59e <tcp_abandon+0x9e>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	60da      	str	r2, [r3, #12]
 800b5c4:	e00b      	b.n	800b5de <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	8adb      	ldrh	r3, [r3, #22]
 800b5ce:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b5d0:	6879      	ldr	r1, [r7, #4]
 800b5d2:	4828      	ldr	r0, [pc, #160]	; (800b674 <tcp_abandon+0x174>)
 800b5d4:	f000 ff7a 	bl	800c4cc <tcp_pcb_remove>
 800b5d8:	4b27      	ldr	r3, [pc, #156]	; (800b678 <tcp_abandon+0x178>)
 800b5da:	2201      	movs	r2, #1
 800b5dc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d004      	beq.n	800b5f0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 fd1c 	bl	800c028 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d004      	beq.n	800b602 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 fd13 	bl	800c028 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b606:	2b00      	cmp	r3, #0
 800b608:	d004      	beq.n	800b614 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 fd0a 	bl	800c028 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00e      	beq.n	800b638 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b61a:	6879      	ldr	r1, [r7, #4]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	3304      	adds	r3, #4
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	8b12      	ldrh	r2, [r2, #24]
 800b624:	9202      	str	r2, [sp, #8]
 800b626:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b628:	9201      	str	r2, [sp, #4]
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	460b      	mov	r3, r1
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	69b9      	ldr	r1, [r7, #24]
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f004 fcc2 	bl	800ffbc <tcp_rst>
    }
    last_state = pcb->state;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	7d1b      	ldrb	r3, [r3, #20]
 800b63c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff fd34 	bl	800b0ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d004      	beq.n	800b654 <tcp_abandon+0x154>
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	f06f 010c 	mvn.w	r1, #12
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	4798      	blx	r3
  }
}
 800b654:	3728      	adds	r7, #40	; 0x28
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	08014f80 	.word	0x08014f80
 800b660:	080150c4 	.word	0x080150c4
 800b664:	08014fc4 	.word	0x08014fc4
 800b668:	080150e0 	.word	0x080150e0
 800b66c:	2400a9bc 	.word	0x2400a9bc
 800b670:	2400a9b8 	.word	0x2400a9b8
 800b674:	2400a9ac 	.word	0x2400a9ac
 800b678:	2400a9a8 	.word	0x2400a9a8

0800b67c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b684:	2101      	movs	r1, #1
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff ff3a 	bl	800b500 <tcp_abandon>
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d106      	bne.n	800b6b0 <tcp_update_rcv_ann_wnd+0x1c>
 800b6a2:	4b25      	ldr	r3, [pc, #148]	; (800b738 <tcp_update_rcv_ann_wnd+0xa4>)
 800b6a4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b6a8:	4924      	ldr	r1, [pc, #144]	; (800b73c <tcp_update_rcv_ann_wnd+0xa8>)
 800b6aa:	4825      	ldr	r0, [pc, #148]	; (800b740 <tcp_update_rcv_ann_wnd+0xac>)
 800b6ac:	f007 ff32 	bl	8013514 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b6b8:	4413      	add	r3, r2
 800b6ba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b6c4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b6c8:	bf28      	it	cs
 800b6ca:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b6ce:	b292      	uxth	r2, r2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	db08      	blt.n	800b6ec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	1ad3      	subs	r3, r2, r3
 800b6ea:	e020      	b.n	800b72e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	dd03      	ble.n	800b702 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b700:	e014      	b.n	800b72c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b714:	d306      	bcc.n	800b724 <tcp_update_rcv_ann_wnd+0x90>
 800b716:	4b08      	ldr	r3, [pc, #32]	; (800b738 <tcp_update_rcv_ann_wnd+0xa4>)
 800b718:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b71c:	4909      	ldr	r1, [pc, #36]	; (800b744 <tcp_update_rcv_ann_wnd+0xb0>)
 800b71e:	4808      	ldr	r0, [pc, #32]	; (800b740 <tcp_update_rcv_ann_wnd+0xac>)
 800b720:	f007 fef8 	bl	8013514 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	b29a      	uxth	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b72c:	2300      	movs	r3, #0
  }
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	08014f80 	.word	0x08014f80
 800b73c:	080151dc 	.word	0x080151dc
 800b740:	08014fc4 	.word	0x08014fc4
 800b744:	08015200 	.word	0x08015200

0800b748 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	460b      	mov	r3, r1
 800b752:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d107      	bne.n	800b76a <tcp_recved+0x22>
 800b75a:	4b1f      	ldr	r3, [pc, #124]	; (800b7d8 <tcp_recved+0x90>)
 800b75c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b760:	491e      	ldr	r1, [pc, #120]	; (800b7dc <tcp_recved+0x94>)
 800b762:	481f      	ldr	r0, [pc, #124]	; (800b7e0 <tcp_recved+0x98>)
 800b764:	f007 fed6 	bl	8013514 <iprintf>
 800b768:	e032      	b.n	800b7d0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	7d1b      	ldrb	r3, [r3, #20]
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d106      	bne.n	800b780 <tcp_recved+0x38>
 800b772:	4b19      	ldr	r3, [pc, #100]	; (800b7d8 <tcp_recved+0x90>)
 800b774:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b778:	491a      	ldr	r1, [pc, #104]	; (800b7e4 <tcp_recved+0x9c>)
 800b77a:	4819      	ldr	r0, [pc, #100]	; (800b7e0 <tcp_recved+0x98>)
 800b77c:	f007 feca 	bl	8013514 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b784:	887b      	ldrh	r3, [r7, #2]
 800b786:	4413      	add	r3, r2
 800b788:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b78a:	89fb      	ldrh	r3, [r7, #14]
 800b78c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b790:	d804      	bhi.n	800b79c <tcp_recved+0x54>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b796:	89fa      	ldrh	r2, [r7, #14]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d204      	bcs.n	800b7a6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b7a2:	851a      	strh	r2, [r3, #40]	; 0x28
 800b7a4:	e002      	b.n	800b7ac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	89fa      	ldrh	r2, [r7, #14]
 800b7aa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7ff ff71 	bl	800b694 <tcp_update_rcv_ann_wnd>
 800b7b2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b7ba:	d309      	bcc.n	800b7d0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	8b5b      	ldrh	r3, [r3, #26]
 800b7c0:	f043 0302 	orr.w	r3, r3, #2
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f003 fe42 	bl	800f454 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	08014f80 	.word	0x08014f80
 800b7dc:	0801521c 	.word	0x0801521c
 800b7e0:	08014fc4 	.word	0x08014fc4
 800b7e4:	08015234 	.word	0x08015234

0800b7e8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b7e8:	b5b0      	push	{r4, r5, r7, lr}
 800b7ea:	b090      	sub	sp, #64	; 0x40
 800b7ec:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b7f4:	4b94      	ldr	r3, [pc, #592]	; (800ba48 <tcp_slowtmr+0x260>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	4a93      	ldr	r2, [pc, #588]	; (800ba48 <tcp_slowtmr+0x260>)
 800b7fc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b7fe:	4b93      	ldr	r3, [pc, #588]	; (800ba4c <tcp_slowtmr+0x264>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	3301      	adds	r3, #1
 800b804:	b2da      	uxtb	r2, r3
 800b806:	4b91      	ldr	r3, [pc, #580]	; (800ba4c <tcp_slowtmr+0x264>)
 800b808:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b80a:	2300      	movs	r3, #0
 800b80c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b80e:	4b90      	ldr	r3, [pc, #576]	; (800ba50 <tcp_slowtmr+0x268>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b814:	e29d      	b.n	800bd52 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b818:	7d1b      	ldrb	r3, [r3, #20]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d106      	bne.n	800b82c <tcp_slowtmr+0x44>
 800b81e:	4b8d      	ldr	r3, [pc, #564]	; (800ba54 <tcp_slowtmr+0x26c>)
 800b820:	f240 42be 	movw	r2, #1214	; 0x4be
 800b824:	498c      	ldr	r1, [pc, #560]	; (800ba58 <tcp_slowtmr+0x270>)
 800b826:	488d      	ldr	r0, [pc, #564]	; (800ba5c <tcp_slowtmr+0x274>)
 800b828:	f007 fe74 	bl	8013514 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82e:	7d1b      	ldrb	r3, [r3, #20]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d106      	bne.n	800b842 <tcp_slowtmr+0x5a>
 800b834:	4b87      	ldr	r3, [pc, #540]	; (800ba54 <tcp_slowtmr+0x26c>)
 800b836:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b83a:	4989      	ldr	r1, [pc, #548]	; (800ba60 <tcp_slowtmr+0x278>)
 800b83c:	4887      	ldr	r0, [pc, #540]	; (800ba5c <tcp_slowtmr+0x274>)
 800b83e:	f007 fe69 	bl	8013514 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b844:	7d1b      	ldrb	r3, [r3, #20]
 800b846:	2b0a      	cmp	r3, #10
 800b848:	d106      	bne.n	800b858 <tcp_slowtmr+0x70>
 800b84a:	4b82      	ldr	r3, [pc, #520]	; (800ba54 <tcp_slowtmr+0x26c>)
 800b84c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b850:	4984      	ldr	r1, [pc, #528]	; (800ba64 <tcp_slowtmr+0x27c>)
 800b852:	4882      	ldr	r0, [pc, #520]	; (800ba5c <tcp_slowtmr+0x274>)
 800b854:	f007 fe5e 	bl	8013514 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	7f9a      	ldrb	r2, [r3, #30]
 800b85c:	4b7b      	ldr	r3, [pc, #492]	; (800ba4c <tcp_slowtmr+0x264>)
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	429a      	cmp	r2, r3
 800b862:	d105      	bne.n	800b870 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b866:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b86e:	e270      	b.n	800bd52 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b870:	4b76      	ldr	r3, [pc, #472]	; (800ba4c <tcp_slowtmr+0x264>)
 800b872:	781a      	ldrb	r2, [r3, #0]
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b886:	7d1b      	ldrb	r3, [r3, #20]
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d10a      	bne.n	800b8a2 <tcp_slowtmr+0xba>
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b892:	2b05      	cmp	r3, #5
 800b894:	d905      	bls.n	800b8a2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b89a:	3301      	adds	r3, #1
 800b89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8a0:	e11e      	b.n	800bae0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8a8:	2b0b      	cmp	r3, #11
 800b8aa:	d905      	bls.n	800b8b8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8b6:	e113      	b.n	800bae0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d075      	beq.n	800b9ae <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d006      	beq.n	800b8d8 <tcp_slowtmr+0xf0>
 800b8ca:	4b62      	ldr	r3, [pc, #392]	; (800ba54 <tcp_slowtmr+0x26c>)
 800b8cc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b8d0:	4965      	ldr	r1, [pc, #404]	; (800ba68 <tcp_slowtmr+0x280>)
 800b8d2:	4862      	ldr	r0, [pc, #392]	; (800ba5c <tcp_slowtmr+0x274>)
 800b8d4:	f007 fe1e 	bl	8013514 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d106      	bne.n	800b8ee <tcp_slowtmr+0x106>
 800b8e0:	4b5c      	ldr	r3, [pc, #368]	; (800ba54 <tcp_slowtmr+0x26c>)
 800b8e2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b8e6:	4961      	ldr	r1, [pc, #388]	; (800ba6c <tcp_slowtmr+0x284>)
 800b8e8:	485c      	ldr	r0, [pc, #368]	; (800ba5c <tcp_slowtmr+0x274>)
 800b8ea:	f007 fe13 	bl	8013514 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b8f4:	2b0b      	cmp	r3, #11
 800b8f6:	d905      	bls.n	800b904 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b902:	e0ed      	b.n	800bae0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b906:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b90a:	3b01      	subs	r3, #1
 800b90c:	4a58      	ldr	r2, [pc, #352]	; (800ba70 <tcp_slowtmr+0x288>)
 800b90e:	5cd3      	ldrb	r3, [r2, r3]
 800b910:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b914:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b918:	7c7a      	ldrb	r2, [r7, #17]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d907      	bls.n	800b92e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b920:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b924:	3301      	adds	r3, #1
 800b926:	b2da      	uxtb	r2, r3
 800b928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b930:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b934:	7c7a      	ldrb	r2, [r7, #17]
 800b936:	429a      	cmp	r2, r3
 800b938:	f200 80d2 	bhi.w	800bae0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b93c:	2301      	movs	r3, #1
 800b93e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b942:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b946:	2b00      	cmp	r3, #0
 800b948:	d108      	bne.n	800b95c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b94a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b94c:	f004 fc2a 	bl	80101a4 <tcp_zero_window_probe>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d014      	beq.n	800b980 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b956:	2300      	movs	r3, #0
 800b958:	623b      	str	r3, [r7, #32]
 800b95a:	e011      	b.n	800b980 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b962:	4619      	mov	r1, r3
 800b964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b966:	f003 faef 	bl	800ef48 <tcp_split_unsent_seg>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d107      	bne.n	800b980 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b972:	f003 fd6f 	bl	800f454 <tcp_output>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d101      	bne.n	800b980 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	2b00      	cmp	r3, #0
 800b984:	f000 80ac 	beq.w	800bae0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98a:	2200      	movs	r2, #0
 800b98c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b992:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b996:	2b06      	cmp	r3, #6
 800b998:	f200 80a2 	bhi.w	800bae0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	b2da      	uxtb	r2, r3
 800b9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b9ac:	e098      	b.n	800bae0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	db0f      	blt.n	800b9d8 <tcp_slowtmr+0x1f0>
 800b9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b9be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d008      	beq.n	800b9d8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	b21a      	sxth	r2, r3
 800b9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9da:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	db7b      	blt.n	800bae0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b9e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9ea:	f004 f825 	bl	800fa38 <tcp_rexmit_rto_prepare>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d007      	beq.n	800ba04 <tcp_slowtmr+0x21c>
 800b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d171      	bne.n	800bae0 <tcp_slowtmr+0x2f8>
 800b9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d06d      	beq.n	800bae0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ba04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba06:	7d1b      	ldrb	r3, [r3, #20]
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d03a      	beq.n	800ba82 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ba0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ba12:	2b0c      	cmp	r3, #12
 800ba14:	bf28      	it	cs
 800ba16:	230c      	movcs	r3, #12
 800ba18:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ba20:	10db      	asrs	r3, r3, #3
 800ba22:	b21b      	sxth	r3, r3
 800ba24:	461a      	mov	r2, r3
 800ba26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba28:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ba2c:	4413      	add	r3, r2
 800ba2e:	7efa      	ldrb	r2, [r7, #27]
 800ba30:	4910      	ldr	r1, [pc, #64]	; (800ba74 <tcp_slowtmr+0x28c>)
 800ba32:	5c8a      	ldrb	r2, [r1, r2]
 800ba34:	4093      	lsls	r3, r2
 800ba36:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	dc1a      	bgt.n	800ba78 <tcp_slowtmr+0x290>
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	b21a      	sxth	r2, r3
 800ba46:	e019      	b.n	800ba7c <tcp_slowtmr+0x294>
 800ba48:	2400a9b0 	.word	0x2400a9b0
 800ba4c:	24005cea 	.word	0x24005cea
 800ba50:	2400a9ac 	.word	0x2400a9ac
 800ba54:	08014f80 	.word	0x08014f80
 800ba58:	080152c4 	.word	0x080152c4
 800ba5c:	08014fc4 	.word	0x08014fc4
 800ba60:	080152f0 	.word	0x080152f0
 800ba64:	0801531c 	.word	0x0801531c
 800ba68:	0801534c 	.word	0x0801534c
 800ba6c:	08015380 	.word	0x08015380
 800ba70:	08016fb4 	.word	0x08016fb4
 800ba74:	08016fa4 	.word	0x08016fa4
 800ba78:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ba7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ba82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba84:	2200      	movs	r2, #0
 800ba86:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ba88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ba8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba94:	4293      	cmp	r3, r2
 800ba96:	bf28      	it	cs
 800ba98:	4613      	movcs	r3, r2
 800ba9a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ba9c:	8a7b      	ldrh	r3, [r7, #18]
 800ba9e:	085b      	lsrs	r3, r3, #1
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800baa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baaa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800baae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d206      	bcs.n	800bac8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800baba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800babe:	005b      	lsls	r3, r3, #1
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baca:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bace:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800bad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad4:	2200      	movs	r2, #0
 800bad6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800bada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800badc:	f004 f81c 	bl	800fb18 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800bae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae2:	7d1b      	ldrb	r3, [r3, #20]
 800bae4:	2b06      	cmp	r3, #6
 800bae6:	d111      	bne.n	800bb0c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800bae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baea:	8b5b      	ldrh	r3, [r3, #26]
 800baec:	f003 0310 	and.w	r3, r3, #16
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00b      	beq.n	800bb0c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800baf4:	4b9c      	ldr	r3, [pc, #624]	; (800bd68 <tcp_slowtmr+0x580>)
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	2b28      	cmp	r3, #40	; 0x28
 800bb00:	d904      	bls.n	800bb0c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800bb02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb06:	3301      	adds	r3, #1
 800bb08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	7a5b      	ldrb	r3, [r3, #9]
 800bb10:	f003 0308 	and.w	r3, r3, #8
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d04a      	beq.n	800bbae <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800bb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bb1c:	2b04      	cmp	r3, #4
 800bb1e:	d003      	beq.n	800bb28 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800bb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb22:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bb24:	2b07      	cmp	r3, #7
 800bb26:	d142      	bne.n	800bbae <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb28:	4b8f      	ldr	r3, [pc, #572]	; (800bd68 <tcp_slowtmr+0x580>)
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2e:	6a1b      	ldr	r3, [r3, #32]
 800bb30:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb34:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bb38:	4b8c      	ldr	r3, [pc, #560]	; (800bd6c <tcp_slowtmr+0x584>)
 800bb3a:	440b      	add	r3, r1
 800bb3c:	498c      	ldr	r1, [pc, #560]	; (800bd70 <tcp_slowtmr+0x588>)
 800bb3e:	fba1 1303 	umull	r1, r3, r1, r3
 800bb42:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d90a      	bls.n	800bb5e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800bb48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800bb52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb56:	3301      	adds	r3, #1
 800bb58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bb5c:	e027      	b.n	800bbae <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb5e:	4b82      	ldr	r3, [pc, #520]	; (800bd68 <tcp_slowtmr+0x580>)
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb70:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bb74:	4618      	mov	r0, r3
 800bb76:	4b7f      	ldr	r3, [pc, #508]	; (800bd74 <tcp_slowtmr+0x58c>)
 800bb78:	fb00 f303 	mul.w	r3, r0, r3
 800bb7c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bb7e:	497c      	ldr	r1, [pc, #496]	; (800bd70 <tcp_slowtmr+0x588>)
 800bb80:	fba1 1303 	umull	r1, r3, r1, r3
 800bb84:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d911      	bls.n	800bbae <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800bb8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb8c:	f004 faca 	bl	8010124 <tcp_keepalive>
 800bb90:	4603      	mov	r3, r0
 800bb92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800bb96:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d107      	bne.n	800bbae <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800bb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bba4:	3301      	adds	r3, #1
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbaa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d011      	beq.n	800bbda <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bbb6:	4b6c      	ldr	r3, [pc, #432]	; (800bd68 <tcp_slowtmr+0x580>)
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbc:	6a1b      	ldr	r3, [r3, #32]
 800bbbe:	1ad2      	subs	r2, r2, r3
 800bbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	460b      	mov	r3, r1
 800bbca:	005b      	lsls	r3, r3, #1
 800bbcc:	440b      	add	r3, r1
 800bbce:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d302      	bcc.n	800bbda <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800bbd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbd6:	f000 fddd 	bl	800c794 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800bbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbdc:	7d1b      	ldrb	r3, [r3, #20]
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d10b      	bne.n	800bbfa <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbe2:	4b61      	ldr	r3, [pc, #388]	; (800bd68 <tcp_slowtmr+0x580>)
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	2b28      	cmp	r3, #40	; 0x28
 800bbee:	d904      	bls.n	800bbfa <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800bbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800bbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfc:	7d1b      	ldrb	r3, [r3, #20]
 800bbfe:	2b09      	cmp	r3, #9
 800bc00:	d10b      	bne.n	800bc1a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bc02:	4b59      	ldr	r3, [pc, #356]	; (800bd68 <tcp_slowtmr+0x580>)
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	2bf0      	cmp	r3, #240	; 0xf0
 800bc0e:	d904      	bls.n	800bc1a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800bc10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc14:	3301      	adds	r3, #1
 800bc16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bc1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d060      	beq.n	800bce4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800bc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc28:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800bc2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc2c:	f000 fbfe 	bl	800c42c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800bc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d010      	beq.n	800bc58 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bc36:	4b50      	ldr	r3, [pc, #320]	; (800bd78 <tcp_slowtmr+0x590>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d106      	bne.n	800bc4e <tcp_slowtmr+0x466>
 800bc40:	4b4e      	ldr	r3, [pc, #312]	; (800bd7c <tcp_slowtmr+0x594>)
 800bc42:	f240 526d 	movw	r2, #1389	; 0x56d
 800bc46:	494e      	ldr	r1, [pc, #312]	; (800bd80 <tcp_slowtmr+0x598>)
 800bc48:	484e      	ldr	r0, [pc, #312]	; (800bd84 <tcp_slowtmr+0x59c>)
 800bc4a:	f007 fc63 	bl	8013514 <iprintf>
        prev->next = pcb->next;
 800bc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc50:	68da      	ldr	r2, [r3, #12]
 800bc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc54:	60da      	str	r2, [r3, #12]
 800bc56:	e00f      	b.n	800bc78 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bc58:	4b47      	ldr	r3, [pc, #284]	; (800bd78 <tcp_slowtmr+0x590>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d006      	beq.n	800bc70 <tcp_slowtmr+0x488>
 800bc62:	4b46      	ldr	r3, [pc, #280]	; (800bd7c <tcp_slowtmr+0x594>)
 800bc64:	f240 5271 	movw	r2, #1393	; 0x571
 800bc68:	4947      	ldr	r1, [pc, #284]	; (800bd88 <tcp_slowtmr+0x5a0>)
 800bc6a:	4846      	ldr	r0, [pc, #280]	; (800bd84 <tcp_slowtmr+0x59c>)
 800bc6c:	f007 fc52 	bl	8013514 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	4a40      	ldr	r2, [pc, #256]	; (800bd78 <tcp_slowtmr+0x590>)
 800bc76:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800bc78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d013      	beq.n	800bca8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc82:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc86:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bc88:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800bc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8c:	3304      	adds	r3, #4
 800bc8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc90:	8ad2      	ldrh	r2, [r2, #22]
 800bc92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc94:	8b09      	ldrh	r1, [r1, #24]
 800bc96:	9102      	str	r1, [sp, #8]
 800bc98:	9201      	str	r2, [sp, #4]
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	462b      	mov	r3, r5
 800bc9e:	4622      	mov	r2, r4
 800bca0:	4601      	mov	r1, r0
 800bca2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bca4:	f004 f98a 	bl	800ffbc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb0:	7d1b      	ldrb	r3, [r3, #20]
 800bcb2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bcbe:	6838      	ldr	r0, [r7, #0]
 800bcc0:	f7ff f9f4 	bl	800b0ac <tcp_free>

      tcp_active_pcbs_changed = 0;
 800bcc4:	4b31      	ldr	r3, [pc, #196]	; (800bd8c <tcp_slowtmr+0x5a4>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d004      	beq.n	800bcda <tcp_slowtmr+0x4f2>
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f06f 010c 	mvn.w	r1, #12
 800bcd6:	68b8      	ldr	r0, [r7, #8]
 800bcd8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bcda:	4b2c      	ldr	r3, [pc, #176]	; (800bd8c <tcp_slowtmr+0x5a4>)
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d037      	beq.n	800bd52 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800bce2:	e592      	b.n	800b80a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800bce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800bcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf0:	7f1b      	ldrb	r3, [r3, #28]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800bcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfc:	7f1a      	ldrb	r2, [r3, #28]
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	7f5b      	ldrb	r3, [r3, #29]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d325      	bcc.n	800bd52 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800bd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd08:	2200      	movs	r2, #0
 800bd0a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800bd0c:	4b1f      	ldr	r3, [pc, #124]	; (800bd8c <tcp_slowtmr+0x5a4>)
 800bd0e:	2200      	movs	r2, #0
 800bd10:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800bd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00b      	beq.n	800bd34 <tcp_slowtmr+0x54c>
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd24:	6912      	ldr	r2, [r2, #16]
 800bd26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd28:	4610      	mov	r0, r2
 800bd2a:	4798      	blx	r3
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800bd32:	e002      	b.n	800bd3a <tcp_slowtmr+0x552>
 800bd34:	2300      	movs	r3, #0
 800bd36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800bd3a:	4b14      	ldr	r3, [pc, #80]	; (800bd8c <tcp_slowtmr+0x5a4>)
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d000      	beq.n	800bd44 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800bd42:	e562      	b.n	800b80a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800bd44:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d102      	bne.n	800bd52 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800bd4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd4e:	f003 fb81 	bl	800f454 <tcp_output>
  while (pcb != NULL) {
 800bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f47f ad5e 	bne.w	800b816 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800bd5e:	4b0c      	ldr	r3, [pc, #48]	; (800bd90 <tcp_slowtmr+0x5a8>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bd64:	e069      	b.n	800be3a <tcp_slowtmr+0x652>
 800bd66:	bf00      	nop
 800bd68:	2400a9b0 	.word	0x2400a9b0
 800bd6c:	000a4cb8 	.word	0x000a4cb8
 800bd70:	10624dd3 	.word	0x10624dd3
 800bd74:	000124f8 	.word	0x000124f8
 800bd78:	2400a9ac 	.word	0x2400a9ac
 800bd7c:	08014f80 	.word	0x08014f80
 800bd80:	080153b8 	.word	0x080153b8
 800bd84:	08014fc4 	.word	0x08014fc4
 800bd88:	080153e4 	.word	0x080153e4
 800bd8c:	2400a9a8 	.word	0x2400a9a8
 800bd90:	2400a9bc 	.word	0x2400a9bc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd96:	7d1b      	ldrb	r3, [r3, #20]
 800bd98:	2b0a      	cmp	r3, #10
 800bd9a:	d006      	beq.n	800bdaa <tcp_slowtmr+0x5c2>
 800bd9c:	4b2b      	ldr	r3, [pc, #172]	; (800be4c <tcp_slowtmr+0x664>)
 800bd9e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800bda2:	492b      	ldr	r1, [pc, #172]	; (800be50 <tcp_slowtmr+0x668>)
 800bda4:	482b      	ldr	r0, [pc, #172]	; (800be54 <tcp_slowtmr+0x66c>)
 800bda6:	f007 fbb5 	bl	8013514 <iprintf>
    pcb_remove = 0;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bdb0:	4b29      	ldr	r3, [pc, #164]	; (800be58 <tcp_slowtmr+0x670>)
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb6:	6a1b      	ldr	r3, [r3, #32]
 800bdb8:	1ad3      	subs	r3, r2, r3
 800bdba:	2bf0      	cmp	r3, #240	; 0xf0
 800bdbc:	d904      	bls.n	800bdc8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800bdbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bdc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d02f      	beq.n	800be30 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800bdd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdd2:	f000 fb2b 	bl	800c42c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800bdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d010      	beq.n	800bdfe <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800bddc:	4b1f      	ldr	r3, [pc, #124]	; (800be5c <tcp_slowtmr+0x674>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d106      	bne.n	800bdf4 <tcp_slowtmr+0x60c>
 800bde6:	4b19      	ldr	r3, [pc, #100]	; (800be4c <tcp_slowtmr+0x664>)
 800bde8:	f240 52af 	movw	r2, #1455	; 0x5af
 800bdec:	491c      	ldr	r1, [pc, #112]	; (800be60 <tcp_slowtmr+0x678>)
 800bdee:	4819      	ldr	r0, [pc, #100]	; (800be54 <tcp_slowtmr+0x66c>)
 800bdf0:	f007 fb90 	bl	8013514 <iprintf>
        prev->next = pcb->next;
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	68da      	ldr	r2, [r3, #12]
 800bdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfa:	60da      	str	r2, [r3, #12]
 800bdfc:	e00f      	b.n	800be1e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800bdfe:	4b17      	ldr	r3, [pc, #92]	; (800be5c <tcp_slowtmr+0x674>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be04:	429a      	cmp	r2, r3
 800be06:	d006      	beq.n	800be16 <tcp_slowtmr+0x62e>
 800be08:	4b10      	ldr	r3, [pc, #64]	; (800be4c <tcp_slowtmr+0x664>)
 800be0a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800be0e:	4915      	ldr	r1, [pc, #84]	; (800be64 <tcp_slowtmr+0x67c>)
 800be10:	4810      	ldr	r0, [pc, #64]	; (800be54 <tcp_slowtmr+0x66c>)
 800be12:	f007 fb7f 	bl	8013514 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800be16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	4a10      	ldr	r2, [pc, #64]	; (800be5c <tcp_slowtmr+0x674>)
 800be1c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800be1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be20:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800be28:	69f8      	ldr	r0, [r7, #28]
 800be2a:	f7ff f93f 	bl	800b0ac <tcp_free>
 800be2e:	e004      	b.n	800be3a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800be30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be32:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800be34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800be3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1a9      	bne.n	800bd94 <tcp_slowtmr+0x5ac>
    }
  }
}
 800be40:	bf00      	nop
 800be42:	bf00      	nop
 800be44:	3730      	adds	r7, #48	; 0x30
 800be46:	46bd      	mov	sp, r7
 800be48:	bdb0      	pop	{r4, r5, r7, pc}
 800be4a:	bf00      	nop
 800be4c:	08014f80 	.word	0x08014f80
 800be50:	08015410 	.word	0x08015410
 800be54:	08014fc4 	.word	0x08014fc4
 800be58:	2400a9b0 	.word	0x2400a9b0
 800be5c:	2400a9bc 	.word	0x2400a9bc
 800be60:	08015440 	.word	0x08015440
 800be64:	08015468 	.word	0x08015468

0800be68 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800be6e:	4b2d      	ldr	r3, [pc, #180]	; (800bf24 <tcp_fasttmr+0xbc>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	3301      	adds	r3, #1
 800be74:	b2da      	uxtb	r2, r3
 800be76:	4b2b      	ldr	r3, [pc, #172]	; (800bf24 <tcp_fasttmr+0xbc>)
 800be78:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800be7a:	4b2b      	ldr	r3, [pc, #172]	; (800bf28 <tcp_fasttmr+0xc0>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800be80:	e048      	b.n	800bf14 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	7f9a      	ldrb	r2, [r3, #30]
 800be86:	4b27      	ldr	r3, [pc, #156]	; (800bf24 <tcp_fasttmr+0xbc>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d03f      	beq.n	800bf0e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800be8e:	4b25      	ldr	r3, [pc, #148]	; (800bf24 <tcp_fasttmr+0xbc>)
 800be90:	781a      	ldrb	r2, [r3, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	8b5b      	ldrh	r3, [r3, #26]
 800be9a:	f003 0301 	and.w	r3, r3, #1
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d010      	beq.n	800bec4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	8b5b      	ldrh	r3, [r3, #26]
 800bea6:	f043 0302 	orr.w	r3, r3, #2
 800beaa:	b29a      	uxth	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f003 facf 	bl	800f454 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	8b5b      	ldrh	r3, [r3, #26]
 800beba:	f023 0303 	bic.w	r3, r3, #3
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	8b5b      	ldrh	r3, [r3, #26]
 800bec8:	f003 0308 	and.w	r3, r3, #8
 800becc:	2b00      	cmp	r3, #0
 800bece:	d009      	beq.n	800bee4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	8b5b      	ldrh	r3, [r3, #26]
 800bed4:	f023 0308 	bic.w	r3, r3, #8
 800bed8:	b29a      	uxth	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff fa78 	bl	800b3d4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00a      	beq.n	800bf08 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bef2:	4b0e      	ldr	r3, [pc, #56]	; (800bf2c <tcp_fasttmr+0xc4>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 f819 	bl	800bf30 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800befe:	4b0b      	ldr	r3, [pc, #44]	; (800bf2c <tcp_fasttmr+0xc4>)
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d000      	beq.n	800bf08 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bf06:	e7b8      	b.n	800be7a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	607b      	str	r3, [r7, #4]
 800bf0c:	e002      	b.n	800bf14 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1b3      	bne.n	800be82 <tcp_fasttmr+0x1a>
    }
  }
}
 800bf1a:	bf00      	nop
 800bf1c:	bf00      	nop
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	24005cea 	.word	0x24005cea
 800bf28:	2400a9ac 	.word	0x2400a9ac
 800bf2c:	2400a9a8 	.word	0x2400a9a8

0800bf30 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bf30:	b590      	push	{r4, r7, lr}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d109      	bne.n	800bf52 <tcp_process_refused_data+0x22>
 800bf3e:	4b37      	ldr	r3, [pc, #220]	; (800c01c <tcp_process_refused_data+0xec>)
 800bf40:	f240 6209 	movw	r2, #1545	; 0x609
 800bf44:	4936      	ldr	r1, [pc, #216]	; (800c020 <tcp_process_refused_data+0xf0>)
 800bf46:	4837      	ldr	r0, [pc, #220]	; (800c024 <tcp_process_refused_data+0xf4>)
 800bf48:	f007 fae4 	bl	8013514 <iprintf>
 800bf4c:	f06f 030f 	mvn.w	r3, #15
 800bf50:	e060      	b.n	800c014 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf56:	7b5b      	ldrb	r3, [r3, #13]
 800bf58:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf5e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00b      	beq.n	800bf88 <tcp_process_refused_data+0x58>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6918      	ldr	r0, [r3, #16]
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	47a0      	blx	r4
 800bf82:	4603      	mov	r3, r0
 800bf84:	73fb      	strb	r3, [r7, #15]
 800bf86:	e007      	b.n	800bf98 <tcp_process_refused_data+0x68>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	6879      	ldr	r1, [r7, #4]
 800bf8e:	2000      	movs	r0, #0
 800bf90:	f000 f8a4 	bl	800c0dc <tcp_recv_null>
 800bf94:	4603      	mov	r3, r0
 800bf96:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bf98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d12a      	bne.n	800bff6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bfa0:	7bbb      	ldrb	r3, [r7, #14]
 800bfa2:	f003 0320 	and.w	r3, r3, #32
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d033      	beq.n	800c012 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bfb2:	d005      	beq.n	800bfc0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfb8:	3301      	adds	r3, #1
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00b      	beq.n	800bfe2 <tcp_process_refused_data+0xb2>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6918      	ldr	r0, [r3, #16]
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	6879      	ldr	r1, [r7, #4]
 800bfda:	47a0      	blx	r4
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]
 800bfe0:	e001      	b.n	800bfe6 <tcp_process_refused_data+0xb6>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bfe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfea:	f113 0f0d 	cmn.w	r3, #13
 800bfee:	d110      	bne.n	800c012 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bff0:	f06f 030c 	mvn.w	r3, #12
 800bff4:	e00e      	b.n	800c014 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bffa:	f113 0f0d 	cmn.w	r3, #13
 800bffe:	d102      	bne.n	800c006 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c000:	f06f 030c 	mvn.w	r3, #12
 800c004:	e006      	b.n	800c014 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c00c:	f06f 0304 	mvn.w	r3, #4
 800c010:	e000      	b.n	800c014 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3714      	adds	r7, #20
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd90      	pop	{r4, r7, pc}
 800c01c:	08014f80 	.word	0x08014f80
 800c020:	08015490 	.word	0x08015490
 800c024:	08014fc4 	.word	0x08014fc4

0800c028 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c030:	e007      	b.n	800c042 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 f80a 	bl	800c052 <tcp_seg_free>
    seg = next;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1f4      	bne.n	800c032 <tcp_segs_free+0xa>
  }
}
 800c048:	bf00      	nop
 800c04a:	bf00      	nop
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c052:	b580      	push	{r7, lr}
 800c054:	b082      	sub	sp, #8
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00c      	beq.n	800c07a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d004      	beq.n	800c072 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fe fd71 	bl	800ab54 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	2003      	movs	r0, #3
 800c076:	f7fd fec9 	bl	8009e0c <memp_free>
  }
}
 800c07a:	bf00      	nop
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
	...

0800c084 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d106      	bne.n	800c0a0 <tcp_seg_copy+0x1c>
 800c092:	4b0f      	ldr	r3, [pc, #60]	; (800c0d0 <tcp_seg_copy+0x4c>)
 800c094:	f240 6282 	movw	r2, #1666	; 0x682
 800c098:	490e      	ldr	r1, [pc, #56]	; (800c0d4 <tcp_seg_copy+0x50>)
 800c09a:	480f      	ldr	r0, [pc, #60]	; (800c0d8 <tcp_seg_copy+0x54>)
 800c09c:	f007 fa3a 	bl	8013514 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c0a0:	2003      	movs	r0, #3
 800c0a2:	f7fd fe3d 	bl	8009d20 <memp_malloc>
 800c0a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d101      	bne.n	800c0b2 <tcp_seg_copy+0x2e>
    return NULL;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	e00a      	b.n	800c0c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c0b2:	2210      	movs	r2, #16
 800c0b4:	6879      	ldr	r1, [r7, #4]
 800c0b6:	68f8      	ldr	r0, [r7, #12]
 800c0b8:	f007 f981 	bl	80133be <memcpy>
  pbuf_ref(cseg->p);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fe fded 	bl	800aca0 <pbuf_ref>
  return cseg;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	08014f80 	.word	0x08014f80
 800c0d4:	080154d4 	.word	0x080154d4
 800c0d8:	08014fc4 	.word	0x08014fc4

0800c0dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
 800c0e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d109      	bne.n	800c104 <tcp_recv_null+0x28>
 800c0f0:	4b12      	ldr	r3, [pc, #72]	; (800c13c <tcp_recv_null+0x60>)
 800c0f2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c0f6:	4912      	ldr	r1, [pc, #72]	; (800c140 <tcp_recv_null+0x64>)
 800c0f8:	4812      	ldr	r0, [pc, #72]	; (800c144 <tcp_recv_null+0x68>)
 800c0fa:	f007 fa0b 	bl	8013514 <iprintf>
 800c0fe:	f06f 030f 	mvn.w	r3, #15
 800c102:	e016      	b.n	800c132 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d009      	beq.n	800c11e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	891b      	ldrh	r3, [r3, #8]
 800c10e:	4619      	mov	r1, r3
 800c110:	68b8      	ldr	r0, [r7, #8]
 800c112:	f7ff fb19 	bl	800b748 <tcp_recved>
    pbuf_free(p);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7fe fd1c 	bl	800ab54 <pbuf_free>
 800c11c:	e008      	b.n	800c130 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c11e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d104      	bne.n	800c130 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c126:	68b8      	ldr	r0, [r7, #8]
 800c128:	f7ff f9be 	bl	800b4a8 <tcp_close>
 800c12c:	4603      	mov	r3, r0
 800c12e:	e000      	b.n	800c132 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	08014f80 	.word	0x08014f80
 800c140:	080154f0 	.word	0x080154f0
 800c144:	08014fc4 	.word	0x08014fc4

0800c148 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	4603      	mov	r3, r0
 800c150:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c156:	2b00      	cmp	r3, #0
 800c158:	db01      	blt.n	800c15e <tcp_kill_prio+0x16>
 800c15a:	79fb      	ldrb	r3, [r7, #7]
 800c15c:	e000      	b.n	800c160 <tcp_kill_prio+0x18>
 800c15e:	237f      	movs	r3, #127	; 0x7f
 800c160:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c162:	7afb      	ldrb	r3, [r7, #11]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d034      	beq.n	800c1d2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c168:	7afb      	ldrb	r3, [r7, #11]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c172:	2300      	movs	r3, #0
 800c174:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c176:	4b19      	ldr	r3, [pc, #100]	; (800c1dc <tcp_kill_prio+0x94>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	617b      	str	r3, [r7, #20]
 800c17c:	e01f      	b.n	800c1be <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	7d5b      	ldrb	r3, [r3, #21]
 800c182:	7afa      	ldrb	r2, [r7, #11]
 800c184:	429a      	cmp	r2, r3
 800c186:	d80c      	bhi.n	800c1a2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c18c:	7afa      	ldrb	r2, [r7, #11]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d112      	bne.n	800c1b8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c192:	4b13      	ldr	r3, [pc, #76]	; (800c1e0 <tcp_kill_prio+0x98>)
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d80a      	bhi.n	800c1b8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c1a2:	4b0f      	ldr	r3, [pc, #60]	; (800c1e0 <tcp_kill_prio+0x98>)
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	7d5b      	ldrb	r3, [r3, #21]
 800c1b6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	617b      	str	r3, [r7, #20]
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1dc      	bne.n	800c17e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d004      	beq.n	800c1d4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c1ca:	6938      	ldr	r0, [r7, #16]
 800c1cc:	f7ff fa56 	bl	800b67c <tcp_abort>
 800c1d0:	e000      	b.n	800c1d4 <tcp_kill_prio+0x8c>
    return;
 800c1d2:	bf00      	nop
  }
}
 800c1d4:	3718      	adds	r7, #24
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	2400a9ac 	.word	0x2400a9ac
 800c1e0:	2400a9b0 	.word	0x2400a9b0

0800c1e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c1ee:	79fb      	ldrb	r3, [r7, #7]
 800c1f0:	2b08      	cmp	r3, #8
 800c1f2:	d009      	beq.n	800c208 <tcp_kill_state+0x24>
 800c1f4:	79fb      	ldrb	r3, [r7, #7]
 800c1f6:	2b09      	cmp	r3, #9
 800c1f8:	d006      	beq.n	800c208 <tcp_kill_state+0x24>
 800c1fa:	4b1a      	ldr	r3, [pc, #104]	; (800c264 <tcp_kill_state+0x80>)
 800c1fc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c200:	4919      	ldr	r1, [pc, #100]	; (800c268 <tcp_kill_state+0x84>)
 800c202:	481a      	ldr	r0, [pc, #104]	; (800c26c <tcp_kill_state+0x88>)
 800c204:	f007 f986 	bl	8013514 <iprintf>

  inactivity = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c20c:	2300      	movs	r3, #0
 800c20e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c210:	4b17      	ldr	r3, [pc, #92]	; (800c270 <tcp_kill_state+0x8c>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	617b      	str	r3, [r7, #20]
 800c216:	e017      	b.n	800c248 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	7d1b      	ldrb	r3, [r3, #20]
 800c21c:	79fa      	ldrb	r2, [r7, #7]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d10f      	bne.n	800c242 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c222:	4b14      	ldr	r3, [pc, #80]	; (800c274 <tcp_kill_state+0x90>)
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d807      	bhi.n	800c242 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c232:	4b10      	ldr	r3, [pc, #64]	; (800c274 <tcp_kill_state+0x90>)
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	6a1b      	ldr	r3, [r3, #32]
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	617b      	str	r3, [r7, #20]
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d1e4      	bne.n	800c218 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d003      	beq.n	800c25c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c254:	2100      	movs	r1, #0
 800c256:	6938      	ldr	r0, [r7, #16]
 800c258:	f7ff f952 	bl	800b500 <tcp_abandon>
  }
}
 800c25c:	bf00      	nop
 800c25e:	3718      	adds	r7, #24
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	08014f80 	.word	0x08014f80
 800c268:	0801550c 	.word	0x0801550c
 800c26c:	08014fc4 	.word	0x08014fc4
 800c270:	2400a9ac 	.word	0x2400a9ac
 800c274:	2400a9b0 	.word	0x2400a9b0

0800c278 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c282:	2300      	movs	r3, #0
 800c284:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c286:	4b12      	ldr	r3, [pc, #72]	; (800c2d0 <tcp_kill_timewait+0x58>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	60fb      	str	r3, [r7, #12]
 800c28c:	e012      	b.n	800c2b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c28e:	4b11      	ldr	r3, [pc, #68]	; (800c2d4 <tcp_kill_timewait+0x5c>)
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6a1b      	ldr	r3, [r3, #32]
 800c296:	1ad3      	subs	r3, r2, r3
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d807      	bhi.n	800c2ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c29e:	4b0d      	ldr	r3, [pc, #52]	; (800c2d4 <tcp_kill_timewait+0x5c>)
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6a1b      	ldr	r3, [r3, #32]
 800c2a6:	1ad3      	subs	r3, r2, r3
 800c2a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	60fb      	str	r3, [r7, #12]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d1e9      	bne.n	800c28e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d002      	beq.n	800c2c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c2c0:	68b8      	ldr	r0, [r7, #8]
 800c2c2:	f7ff f9db 	bl	800b67c <tcp_abort>
  }
}
 800c2c6:	bf00      	nop
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	2400a9bc 	.word	0x2400a9bc
 800c2d4:	2400a9b0 	.word	0x2400a9b0

0800c2d8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c2de:	4b10      	ldr	r3, [pc, #64]	; (800c320 <tcp_handle_closepend+0x48>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c2e4:	e014      	b.n	800c310 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	8b5b      	ldrh	r3, [r3, #26]
 800c2f0:	f003 0308 	and.w	r3, r3, #8
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d009      	beq.n	800c30c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	8b5b      	ldrh	r3, [r3, #26]
 800c2fc:	f023 0308 	bic.w	r3, r3, #8
 800c300:	b29a      	uxth	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7ff f864 	bl	800b3d4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1e7      	bne.n	800c2e6 <tcp_handle_closepend+0xe>
  }
}
 800c316:	bf00      	nop
 800c318:	bf00      	nop
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	2400a9ac 	.word	0x2400a9ac

0800c324 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	4603      	mov	r3, r0
 800c32c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c32e:	2001      	movs	r0, #1
 800c330:	f7fd fcf6 	bl	8009d20 <memp_malloc>
 800c334:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d126      	bne.n	800c38a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c33c:	f7ff ffcc 	bl	800c2d8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c340:	f7ff ff9a 	bl	800c278 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c344:	2001      	movs	r0, #1
 800c346:	f7fd fceb 	bl	8009d20 <memp_malloc>
 800c34a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d11b      	bne.n	800c38a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c352:	2009      	movs	r0, #9
 800c354:	f7ff ff46 	bl	800c1e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c358:	2001      	movs	r0, #1
 800c35a:	f7fd fce1 	bl	8009d20 <memp_malloc>
 800c35e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d111      	bne.n	800c38a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c366:	2008      	movs	r0, #8
 800c368:	f7ff ff3c 	bl	800c1e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c36c:	2001      	movs	r0, #1
 800c36e:	f7fd fcd7 	bl	8009d20 <memp_malloc>
 800c372:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d107      	bne.n	800c38a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c37a:	79fb      	ldrb	r3, [r7, #7]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff fee3 	bl	800c148 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c382:	2001      	movs	r0, #1
 800c384:	f7fd fccc 	bl	8009d20 <memp_malloc>
 800c388:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d03f      	beq.n	800c410 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c390:	229c      	movs	r2, #156	; 0x9c
 800c392:	2100      	movs	r1, #0
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f007 f820 	bl	80133da <memset>
    pcb->prio = prio;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	79fa      	ldrb	r2, [r7, #7]
 800c39e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c3a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c3b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	22ff      	movs	r2, #255	; 0xff
 800c3be:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c3c6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2206      	movs	r2, #6
 800c3cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2206      	movs	r2, #6
 800c3d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3dc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c3e6:	4b0d      	ldr	r3, [pc, #52]	; (800c41c <tcp_alloc+0xf8>)
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c3ee:	4b0c      	ldr	r3, [pc, #48]	; (800c420 <tcp_alloc+0xfc>)
 800c3f0:	781a      	ldrb	r2, [r3, #0]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c3fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	4a08      	ldr	r2, [pc, #32]	; (800c424 <tcp_alloc+0x100>)
 800c404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	4a07      	ldr	r2, [pc, #28]	; (800c428 <tcp_alloc+0x104>)
 800c40c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c410:	68fb      	ldr	r3, [r7, #12]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	2400a9b0 	.word	0x2400a9b0
 800c420:	24005cea 	.word	0x24005cea
 800c424:	0800c0dd 	.word	0x0800c0dd
 800c428:	006ddd00 	.word	0x006ddd00

0800c42c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d107      	bne.n	800c44a <tcp_pcb_purge+0x1e>
 800c43a:	4b21      	ldr	r3, [pc, #132]	; (800c4c0 <tcp_pcb_purge+0x94>)
 800c43c:	f640 0251 	movw	r2, #2129	; 0x851
 800c440:	4920      	ldr	r1, [pc, #128]	; (800c4c4 <tcp_pcb_purge+0x98>)
 800c442:	4821      	ldr	r0, [pc, #132]	; (800c4c8 <tcp_pcb_purge+0x9c>)
 800c444:	f007 f866 	bl	8013514 <iprintf>
 800c448:	e037      	b.n	800c4ba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	7d1b      	ldrb	r3, [r3, #20]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d033      	beq.n	800c4ba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c456:	2b0a      	cmp	r3, #10
 800c458:	d02f      	beq.n	800c4ba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d02b      	beq.n	800c4ba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c466:	2b00      	cmp	r3, #0
 800c468:	d007      	beq.n	800c47a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fe fb70 	bl	800ab54 <pbuf_free>
      pcb->refused_data = NULL;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d002      	beq.n	800c488 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 f986 	bl	800c794 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c48e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff fdc7 	bl	800c028 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7ff fdc2 	bl	800c028 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	66da      	str	r2, [r3, #108]	; 0x6c
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	08014f80 	.word	0x08014f80
 800c4c4:	080155cc 	.word	0x080155cc
 800c4c8:	08014fc4 	.word	0x08014fc4

0800c4cc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d106      	bne.n	800c4ea <tcp_pcb_remove+0x1e>
 800c4dc:	4b3e      	ldr	r3, [pc, #248]	; (800c5d8 <tcp_pcb_remove+0x10c>)
 800c4de:	f640 0283 	movw	r2, #2179	; 0x883
 800c4e2:	493e      	ldr	r1, [pc, #248]	; (800c5dc <tcp_pcb_remove+0x110>)
 800c4e4:	483e      	ldr	r0, [pc, #248]	; (800c5e0 <tcp_pcb_remove+0x114>)
 800c4e6:	f007 f815 	bl	8013514 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d106      	bne.n	800c4fe <tcp_pcb_remove+0x32>
 800c4f0:	4b39      	ldr	r3, [pc, #228]	; (800c5d8 <tcp_pcb_remove+0x10c>)
 800c4f2:	f640 0284 	movw	r2, #2180	; 0x884
 800c4f6:	493b      	ldr	r1, [pc, #236]	; (800c5e4 <tcp_pcb_remove+0x118>)
 800c4f8:	4839      	ldr	r0, [pc, #228]	; (800c5e0 <tcp_pcb_remove+0x114>)
 800c4fa:	f007 f80b 	bl	8013514 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	683a      	ldr	r2, [r7, #0]
 800c504:	429a      	cmp	r2, r3
 800c506:	d105      	bne.n	800c514 <tcp_pcb_remove+0x48>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68da      	ldr	r2, [r3, #12]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	e013      	b.n	800c53c <tcp_pcb_remove+0x70>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	60fb      	str	r3, [r7, #12]
 800c51a:	e00c      	b.n	800c536 <tcp_pcb_remove+0x6a>
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	683a      	ldr	r2, [r7, #0]
 800c522:	429a      	cmp	r2, r3
 800c524:	d104      	bne.n	800c530 <tcp_pcb_remove+0x64>
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	68da      	ldr	r2, [r3, #12]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	60da      	str	r2, [r3, #12]
 800c52e:	e005      	b.n	800c53c <tcp_pcb_remove+0x70>
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	60fb      	str	r3, [r7, #12]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1ef      	bne.n	800c51c <tcp_pcb_remove+0x50>
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	2200      	movs	r2, #0
 800c540:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c542:	6838      	ldr	r0, [r7, #0]
 800c544:	f7ff ff72 	bl	800c42c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	7d1b      	ldrb	r3, [r3, #20]
 800c54c:	2b0a      	cmp	r3, #10
 800c54e:	d013      	beq.n	800c578 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c554:	2b01      	cmp	r3, #1
 800c556:	d00f      	beq.n	800c578 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	8b5b      	ldrh	r3, [r3, #26]
 800c55c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c560:	2b00      	cmp	r3, #0
 800c562:	d009      	beq.n	800c578 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	8b5b      	ldrh	r3, [r3, #26]
 800c568:	f043 0302 	orr.w	r3, r3, #2
 800c56c:	b29a      	uxth	r2, r3
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c572:	6838      	ldr	r0, [r7, #0]
 800c574:	f002 ff6e 	bl	800f454 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	7d1b      	ldrb	r3, [r3, #20]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d020      	beq.n	800c5c2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c584:	2b00      	cmp	r3, #0
 800c586:	d006      	beq.n	800c596 <tcp_pcb_remove+0xca>
 800c588:	4b13      	ldr	r3, [pc, #76]	; (800c5d8 <tcp_pcb_remove+0x10c>)
 800c58a:	f640 0293 	movw	r2, #2195	; 0x893
 800c58e:	4916      	ldr	r1, [pc, #88]	; (800c5e8 <tcp_pcb_remove+0x11c>)
 800c590:	4813      	ldr	r0, [pc, #76]	; (800c5e0 <tcp_pcb_remove+0x114>)
 800c592:	f006 ffbf 	bl	8013514 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d006      	beq.n	800c5ac <tcp_pcb_remove+0xe0>
 800c59e:	4b0e      	ldr	r3, [pc, #56]	; (800c5d8 <tcp_pcb_remove+0x10c>)
 800c5a0:	f640 0294 	movw	r2, #2196	; 0x894
 800c5a4:	4911      	ldr	r1, [pc, #68]	; (800c5ec <tcp_pcb_remove+0x120>)
 800c5a6:	480e      	ldr	r0, [pc, #56]	; (800c5e0 <tcp_pcb_remove+0x114>)
 800c5a8:	f006 ffb4 	bl	8013514 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d006      	beq.n	800c5c2 <tcp_pcb_remove+0xf6>
 800c5b4:	4b08      	ldr	r3, [pc, #32]	; (800c5d8 <tcp_pcb_remove+0x10c>)
 800c5b6:	f640 0296 	movw	r2, #2198	; 0x896
 800c5ba:	490d      	ldr	r1, [pc, #52]	; (800c5f0 <tcp_pcb_remove+0x124>)
 800c5bc:	4808      	ldr	r0, [pc, #32]	; (800c5e0 <tcp_pcb_remove+0x114>)
 800c5be:	f006 ffa9 	bl	8013514 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c5ce:	bf00      	nop
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	08014f80 	.word	0x08014f80
 800c5dc:	080155e8 	.word	0x080155e8
 800c5e0:	08014fc4 	.word	0x08014fc4
 800c5e4:	08015604 	.word	0x08015604
 800c5e8:	08015624 	.word	0x08015624
 800c5ec:	0801563c 	.word	0x0801563c
 800c5f0:	08015658 	.word	0x08015658

0800c5f4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d106      	bne.n	800c610 <tcp_next_iss+0x1c>
 800c602:	4b0a      	ldr	r3, [pc, #40]	; (800c62c <tcp_next_iss+0x38>)
 800c604:	f640 02af 	movw	r2, #2223	; 0x8af
 800c608:	4909      	ldr	r1, [pc, #36]	; (800c630 <tcp_next_iss+0x3c>)
 800c60a:	480a      	ldr	r0, [pc, #40]	; (800c634 <tcp_next_iss+0x40>)
 800c60c:	f006 ff82 	bl	8013514 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c610:	4b09      	ldr	r3, [pc, #36]	; (800c638 <tcp_next_iss+0x44>)
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	4b09      	ldr	r3, [pc, #36]	; (800c63c <tcp_next_iss+0x48>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4413      	add	r3, r2
 800c61a:	4a07      	ldr	r2, [pc, #28]	; (800c638 <tcp_next_iss+0x44>)
 800c61c:	6013      	str	r3, [r2, #0]
  return iss;
 800c61e:	4b06      	ldr	r3, [pc, #24]	; (800c638 <tcp_next_iss+0x44>)
 800c620:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c622:	4618      	mov	r0, r3
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	08014f80 	.word	0x08014f80
 800c630:	08015670 	.word	0x08015670
 800c634:	08014fc4 	.word	0x08014fc4
 800c638:	2400002c 	.word	0x2400002c
 800c63c:	2400a9b0 	.word	0x2400a9b0

0800c640 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	4603      	mov	r3, r0
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d106      	bne.n	800c662 <tcp_eff_send_mss_netif+0x22>
 800c654:	4b14      	ldr	r3, [pc, #80]	; (800c6a8 <tcp_eff_send_mss_netif+0x68>)
 800c656:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c65a:	4914      	ldr	r1, [pc, #80]	; (800c6ac <tcp_eff_send_mss_netif+0x6c>)
 800c65c:	4814      	ldr	r0, [pc, #80]	; (800c6b0 <tcp_eff_send_mss_netif+0x70>)
 800c65e:	f006 ff59 	bl	8013514 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d101      	bne.n	800c66c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c668:	89fb      	ldrh	r3, [r7, #14]
 800c66a:	e019      	b.n	800c6a0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c670:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c672:	8afb      	ldrh	r3, [r7, #22]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d012      	beq.n	800c69e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c678:	2328      	movs	r3, #40	; 0x28
 800c67a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c67c:	8afa      	ldrh	r2, [r7, #22]
 800c67e:	8abb      	ldrh	r3, [r7, #20]
 800c680:	429a      	cmp	r2, r3
 800c682:	d904      	bls.n	800c68e <tcp_eff_send_mss_netif+0x4e>
 800c684:	8afa      	ldrh	r2, [r7, #22]
 800c686:	8abb      	ldrh	r3, [r7, #20]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	e000      	b.n	800c690 <tcp_eff_send_mss_netif+0x50>
 800c68e:	2300      	movs	r3, #0
 800c690:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c692:	8a7a      	ldrh	r2, [r7, #18]
 800c694:	89fb      	ldrh	r3, [r7, #14]
 800c696:	4293      	cmp	r3, r2
 800c698:	bf28      	it	cs
 800c69a:	4613      	movcs	r3, r2
 800c69c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c69e:	89fb      	ldrh	r3, [r7, #14]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3718      	adds	r7, #24
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	08014f80 	.word	0x08014f80
 800c6ac:	0801568c 	.word	0x0801568c
 800c6b0:	08014fc4 	.word	0x08014fc4

0800c6b4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d119      	bne.n	800c6fc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c6c8:	4b10      	ldr	r3, [pc, #64]	; (800c70c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c6ca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c6ce:	4910      	ldr	r1, [pc, #64]	; (800c710 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c6d0:	4810      	ldr	r0, [pc, #64]	; (800c714 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c6d2:	f006 ff1f 	bl	8013514 <iprintf>

  while (pcb != NULL) {
 800c6d6:	e011      	b.n	800c6fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d108      	bne.n	800c6f6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f7fe ffc6 	bl	800b67c <tcp_abort>
      pcb = next;
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	60fb      	str	r3, [r7, #12]
 800c6f4:	e002      	b.n	800c6fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1ea      	bne.n	800c6d8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c702:	bf00      	nop
 800c704:	bf00      	nop
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	08014f80 	.word	0x08014f80
 800c710:	080156b4 	.word	0x080156b4
 800c714:	08014fc4 	.word	0x08014fc4

0800c718 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d02a      	beq.n	800c77e <tcp_netif_ip_addr_changed+0x66>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d026      	beq.n	800c77e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c730:	4b15      	ldr	r3, [pc, #84]	; (800c788 <tcp_netif_ip_addr_changed+0x70>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4619      	mov	r1, r3
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7ff ffbc 	bl	800c6b4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c73c:	4b13      	ldr	r3, [pc, #76]	; (800c78c <tcp_netif_ip_addr_changed+0x74>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4619      	mov	r1, r3
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7ff ffb6 	bl	800c6b4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d017      	beq.n	800c77e <tcp_netif_ip_addr_changed+0x66>
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d013      	beq.n	800c77e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c756:	4b0e      	ldr	r3, [pc, #56]	; (800c790 <tcp_netif_ip_addr_changed+0x78>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	60fb      	str	r3, [r7, #12]
 800c75c:	e00c      	b.n	800c778 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	429a      	cmp	r2, r3
 800c768:	d103      	bne.n	800c772 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	60fb      	str	r3, [r7, #12]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1ef      	bne.n	800c75e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c77e:	bf00      	nop
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	2400a9ac 	.word	0x2400a9ac
 800c78c:	2400a9b8 	.word	0x2400a9b8
 800c790:	2400a9b4 	.word	0x2400a9b4

0800c794 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d007      	beq.n	800c7b4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7ff fc3d 	bl	800c028 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c7b4:	bf00      	nop
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c7bc:	b590      	push	{r4, r7, lr}
 800c7be:	b08d      	sub	sp, #52	; 0x34
 800c7c0:	af04      	add	r7, sp, #16
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d105      	bne.n	800c7d8 <tcp_input+0x1c>
 800c7cc:	4b9b      	ldr	r3, [pc, #620]	; (800ca3c <tcp_input+0x280>)
 800c7ce:	2283      	movs	r2, #131	; 0x83
 800c7d0:	499b      	ldr	r1, [pc, #620]	; (800ca40 <tcp_input+0x284>)
 800c7d2:	489c      	ldr	r0, [pc, #624]	; (800ca44 <tcp_input+0x288>)
 800c7d4:	f006 fe9e 	bl	8013514 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	4a9a      	ldr	r2, [pc, #616]	; (800ca48 <tcp_input+0x28c>)
 800c7de:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	895b      	ldrh	r3, [r3, #10]
 800c7e4:	2b13      	cmp	r3, #19
 800c7e6:	f240 83d1 	bls.w	800cf8c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c7ea:	4b98      	ldr	r3, [pc, #608]	; (800ca4c <tcp_input+0x290>)
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	4a97      	ldr	r2, [pc, #604]	; (800ca4c <tcp_input+0x290>)
 800c7f0:	6812      	ldr	r2, [r2, #0]
 800c7f2:	4611      	mov	r1, r2
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f005 fc6d 	bl	80120d4 <ip4_addr_isbroadcast_u32>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f040 83c7 	bne.w	800cf90 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c802:	4b92      	ldr	r3, [pc, #584]	; (800ca4c <tcp_input+0x290>)
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c80a:	2be0      	cmp	r3, #224	; 0xe0
 800c80c:	f000 83c0 	beq.w	800cf90 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c810:	4b8d      	ldr	r3, [pc, #564]	; (800ca48 <tcp_input+0x28c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	899b      	ldrh	r3, [r3, #12]
 800c816:	b29b      	uxth	r3, r3
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fc fcf1 	bl	8009200 <lwip_htons>
 800c81e:	4603      	mov	r3, r0
 800c820:	0b1b      	lsrs	r3, r3, #12
 800c822:	b29b      	uxth	r3, r3
 800c824:	b2db      	uxtb	r3, r3
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c82a:	7cbb      	ldrb	r3, [r7, #18]
 800c82c:	2b13      	cmp	r3, #19
 800c82e:	f240 83b1 	bls.w	800cf94 <tcp_input+0x7d8>
 800c832:	7cbb      	ldrb	r3, [r7, #18]
 800c834:	b29a      	uxth	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	891b      	ldrh	r3, [r3, #8]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	f200 83aa 	bhi.w	800cf94 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c840:	7cbb      	ldrb	r3, [r7, #18]
 800c842:	b29b      	uxth	r3, r3
 800c844:	3b14      	subs	r3, #20
 800c846:	b29a      	uxth	r2, r3
 800c848:	4b81      	ldr	r3, [pc, #516]	; (800ca50 <tcp_input+0x294>)
 800c84a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c84c:	4b81      	ldr	r3, [pc, #516]	; (800ca54 <tcp_input+0x298>)
 800c84e:	2200      	movs	r2, #0
 800c850:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	895a      	ldrh	r2, [r3, #10]
 800c856:	7cbb      	ldrb	r3, [r7, #18]
 800c858:	b29b      	uxth	r3, r3
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d309      	bcc.n	800c872 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c85e:	4b7c      	ldr	r3, [pc, #496]	; (800ca50 <tcp_input+0x294>)
 800c860:	881a      	ldrh	r2, [r3, #0]
 800c862:	4b7d      	ldr	r3, [pc, #500]	; (800ca58 <tcp_input+0x29c>)
 800c864:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c866:	7cbb      	ldrb	r3, [r7, #18]
 800c868:	4619      	mov	r1, r3
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7fe f8ec 	bl	800aa48 <pbuf_remove_header>
 800c870:	e04e      	b.n	800c910 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d105      	bne.n	800c886 <tcp_input+0xca>
 800c87a:	4b70      	ldr	r3, [pc, #448]	; (800ca3c <tcp_input+0x280>)
 800c87c:	22c2      	movs	r2, #194	; 0xc2
 800c87e:	4977      	ldr	r1, [pc, #476]	; (800ca5c <tcp_input+0x2a0>)
 800c880:	4870      	ldr	r0, [pc, #448]	; (800ca44 <tcp_input+0x288>)
 800c882:	f006 fe47 	bl	8013514 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c886:	2114      	movs	r1, #20
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f7fe f8dd 	bl	800aa48 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	895a      	ldrh	r2, [r3, #10]
 800c892:	4b71      	ldr	r3, [pc, #452]	; (800ca58 <tcp_input+0x29c>)
 800c894:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c896:	4b6e      	ldr	r3, [pc, #440]	; (800ca50 <tcp_input+0x294>)
 800c898:	881a      	ldrh	r2, [r3, #0]
 800c89a:	4b6f      	ldr	r3, [pc, #444]	; (800ca58 <tcp_input+0x29c>)
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c8a2:	4b6d      	ldr	r3, [pc, #436]	; (800ca58 <tcp_input+0x29c>)
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7fe f8cd 	bl	800aa48 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	895b      	ldrh	r3, [r3, #10]
 800c8b4:	8a3a      	ldrh	r2, [r7, #16]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	f200 836e 	bhi.w	800cf98 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	4a64      	ldr	r2, [pc, #400]	; (800ca54 <tcp_input+0x298>)
 800c8c4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	8a3a      	ldrh	r2, [r7, #16]
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fe f8ba 	bl	800aa48 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	891a      	ldrh	r2, [r3, #8]
 800c8d8:	8a3b      	ldrh	r3, [r7, #16]
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	895b      	ldrh	r3, [r3, #10]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d005      	beq.n	800c8f6 <tcp_input+0x13a>
 800c8ea:	4b54      	ldr	r3, [pc, #336]	; (800ca3c <tcp_input+0x280>)
 800c8ec:	22df      	movs	r2, #223	; 0xdf
 800c8ee:	495c      	ldr	r1, [pc, #368]	; (800ca60 <tcp_input+0x2a4>)
 800c8f0:	4854      	ldr	r0, [pc, #336]	; (800ca44 <tcp_input+0x288>)
 800c8f2:	f006 fe0f 	bl	8013514 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	891a      	ldrh	r2, [r3, #8]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	891b      	ldrh	r3, [r3, #8]
 800c900:	429a      	cmp	r2, r3
 800c902:	d005      	beq.n	800c910 <tcp_input+0x154>
 800c904:	4b4d      	ldr	r3, [pc, #308]	; (800ca3c <tcp_input+0x280>)
 800c906:	22e0      	movs	r2, #224	; 0xe0
 800c908:	4956      	ldr	r1, [pc, #344]	; (800ca64 <tcp_input+0x2a8>)
 800c90a:	484e      	ldr	r0, [pc, #312]	; (800ca44 <tcp_input+0x288>)
 800c90c:	f006 fe02 	bl	8013514 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c910:	4b4d      	ldr	r3, [pc, #308]	; (800ca48 <tcp_input+0x28c>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	881b      	ldrh	r3, [r3, #0]
 800c916:	b29b      	uxth	r3, r3
 800c918:	4a4b      	ldr	r2, [pc, #300]	; (800ca48 <tcp_input+0x28c>)
 800c91a:	6814      	ldr	r4, [r2, #0]
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fc fc6f 	bl	8009200 <lwip_htons>
 800c922:	4603      	mov	r3, r0
 800c924:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c926:	4b48      	ldr	r3, [pc, #288]	; (800ca48 <tcp_input+0x28c>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	885b      	ldrh	r3, [r3, #2]
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	4a46      	ldr	r2, [pc, #280]	; (800ca48 <tcp_input+0x28c>)
 800c930:	6814      	ldr	r4, [r2, #0]
 800c932:	4618      	mov	r0, r3
 800c934:	f7fc fc64 	bl	8009200 <lwip_htons>
 800c938:	4603      	mov	r3, r0
 800c93a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c93c:	4b42      	ldr	r3, [pc, #264]	; (800ca48 <tcp_input+0x28c>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	4a41      	ldr	r2, [pc, #260]	; (800ca48 <tcp_input+0x28c>)
 800c944:	6814      	ldr	r4, [r2, #0]
 800c946:	4618      	mov	r0, r3
 800c948:	f7fc fc6f 	bl	800922a <lwip_htonl>
 800c94c:	4603      	mov	r3, r0
 800c94e:	6063      	str	r3, [r4, #4]
 800c950:	6863      	ldr	r3, [r4, #4]
 800c952:	4a45      	ldr	r2, [pc, #276]	; (800ca68 <tcp_input+0x2ac>)
 800c954:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c956:	4b3c      	ldr	r3, [pc, #240]	; (800ca48 <tcp_input+0x28c>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	4a3a      	ldr	r2, [pc, #232]	; (800ca48 <tcp_input+0x28c>)
 800c95e:	6814      	ldr	r4, [r2, #0]
 800c960:	4618      	mov	r0, r3
 800c962:	f7fc fc62 	bl	800922a <lwip_htonl>
 800c966:	4603      	mov	r3, r0
 800c968:	60a3      	str	r3, [r4, #8]
 800c96a:	68a3      	ldr	r3, [r4, #8]
 800c96c:	4a3f      	ldr	r2, [pc, #252]	; (800ca6c <tcp_input+0x2b0>)
 800c96e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c970:	4b35      	ldr	r3, [pc, #212]	; (800ca48 <tcp_input+0x28c>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	89db      	ldrh	r3, [r3, #14]
 800c976:	b29b      	uxth	r3, r3
 800c978:	4a33      	ldr	r2, [pc, #204]	; (800ca48 <tcp_input+0x28c>)
 800c97a:	6814      	ldr	r4, [r2, #0]
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7fc fc3f 	bl	8009200 <lwip_htons>
 800c982:	4603      	mov	r3, r0
 800c984:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c986:	4b30      	ldr	r3, [pc, #192]	; (800ca48 <tcp_input+0x28c>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	899b      	ldrh	r3, [r3, #12]
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fc fc36 	bl	8009200 <lwip_htons>
 800c994:	4603      	mov	r3, r0
 800c996:	b2db      	uxtb	r3, r3
 800c998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c99c:	b2da      	uxtb	r2, r3
 800c99e:	4b34      	ldr	r3, [pc, #208]	; (800ca70 <tcp_input+0x2b4>)
 800c9a0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	891a      	ldrh	r2, [r3, #8]
 800c9a6:	4b33      	ldr	r3, [pc, #204]	; (800ca74 <tcp_input+0x2b8>)
 800c9a8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c9aa:	4b31      	ldr	r3, [pc, #196]	; (800ca70 <tcp_input+0x2b4>)
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	f003 0303 	and.w	r3, r3, #3
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00c      	beq.n	800c9d0 <tcp_input+0x214>
    tcplen++;
 800c9b6:	4b2f      	ldr	r3, [pc, #188]	; (800ca74 <tcp_input+0x2b8>)
 800c9b8:	881b      	ldrh	r3, [r3, #0]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	4b2d      	ldr	r3, [pc, #180]	; (800ca74 <tcp_input+0x2b8>)
 800c9c0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	891a      	ldrh	r2, [r3, #8]
 800c9c6:	4b2b      	ldr	r3, [pc, #172]	; (800ca74 <tcp_input+0x2b8>)
 800c9c8:	881b      	ldrh	r3, [r3, #0]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	f200 82e6 	bhi.w	800cf9c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9d4:	4b28      	ldr	r3, [pc, #160]	; (800ca78 <tcp_input+0x2bc>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	61fb      	str	r3, [r7, #28]
 800c9da:	e09d      	b.n	800cb18 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	7d1b      	ldrb	r3, [r3, #20]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d105      	bne.n	800c9f0 <tcp_input+0x234>
 800c9e4:	4b15      	ldr	r3, [pc, #84]	; (800ca3c <tcp_input+0x280>)
 800c9e6:	22fb      	movs	r2, #251	; 0xfb
 800c9e8:	4924      	ldr	r1, [pc, #144]	; (800ca7c <tcp_input+0x2c0>)
 800c9ea:	4816      	ldr	r0, [pc, #88]	; (800ca44 <tcp_input+0x288>)
 800c9ec:	f006 fd92 	bl	8013514 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	7d1b      	ldrb	r3, [r3, #20]
 800c9f4:	2b0a      	cmp	r3, #10
 800c9f6:	d105      	bne.n	800ca04 <tcp_input+0x248>
 800c9f8:	4b10      	ldr	r3, [pc, #64]	; (800ca3c <tcp_input+0x280>)
 800c9fa:	22fc      	movs	r2, #252	; 0xfc
 800c9fc:	4920      	ldr	r1, [pc, #128]	; (800ca80 <tcp_input+0x2c4>)
 800c9fe:	4811      	ldr	r0, [pc, #68]	; (800ca44 <tcp_input+0x288>)
 800ca00:	f006 fd88 	bl	8013514 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	7d1b      	ldrb	r3, [r3, #20]
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d105      	bne.n	800ca18 <tcp_input+0x25c>
 800ca0c:	4b0b      	ldr	r3, [pc, #44]	; (800ca3c <tcp_input+0x280>)
 800ca0e:	22fd      	movs	r2, #253	; 0xfd
 800ca10:	491c      	ldr	r1, [pc, #112]	; (800ca84 <tcp_input+0x2c8>)
 800ca12:	480c      	ldr	r0, [pc, #48]	; (800ca44 <tcp_input+0x288>)
 800ca14:	f006 fd7e 	bl	8013514 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	7a1b      	ldrb	r3, [r3, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d033      	beq.n	800ca88 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	7a1a      	ldrb	r2, [r3, #8]
 800ca24:	4b09      	ldr	r3, [pc, #36]	; (800ca4c <tcp_input+0x290>)
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d029      	beq.n	800ca88 <tcp_input+0x2cc>
      prev = pcb;
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	61bb      	str	r3, [r7, #24]
      continue;
 800ca38:	e06b      	b.n	800cb12 <tcp_input+0x356>
 800ca3a:	bf00      	nop
 800ca3c:	080156e8 	.word	0x080156e8
 800ca40:	0801571c 	.word	0x0801571c
 800ca44:	08015734 	.word	0x08015734
 800ca48:	24005cfc 	.word	0x24005cfc
 800ca4c:	240078ec 	.word	0x240078ec
 800ca50:	24005d00 	.word	0x24005d00
 800ca54:	24005d04 	.word	0x24005d04
 800ca58:	24005d02 	.word	0x24005d02
 800ca5c:	0801575c 	.word	0x0801575c
 800ca60:	0801576c 	.word	0x0801576c
 800ca64:	08015778 	.word	0x08015778
 800ca68:	24005d0c 	.word	0x24005d0c
 800ca6c:	24005d10 	.word	0x24005d10
 800ca70:	24005d18 	.word	0x24005d18
 800ca74:	24005d16 	.word	0x24005d16
 800ca78:	2400a9ac 	.word	0x2400a9ac
 800ca7c:	08015798 	.word	0x08015798
 800ca80:	080157c0 	.word	0x080157c0
 800ca84:	080157ec 	.word	0x080157ec
    }

    if (pcb->remote_port == tcphdr->src &&
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	8b1a      	ldrh	r2, [r3, #24]
 800ca8c:	4b72      	ldr	r3, [pc, #456]	; (800cc58 <tcp_input+0x49c>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	881b      	ldrh	r3, [r3, #0]
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d13a      	bne.n	800cb0e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	8ada      	ldrh	r2, [r3, #22]
 800ca9c:	4b6e      	ldr	r3, [pc, #440]	; (800cc58 <tcp_input+0x49c>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	885b      	ldrh	r3, [r3, #2]
 800caa2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d132      	bne.n	800cb0e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	685a      	ldr	r2, [r3, #4]
 800caac:	4b6b      	ldr	r3, [pc, #428]	; (800cc5c <tcp_input+0x4a0>)
 800caae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d12c      	bne.n	800cb0e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	4b68      	ldr	r3, [pc, #416]	; (800cc5c <tcp_input+0x4a0>)
 800caba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d126      	bne.n	800cb0e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	69fa      	ldr	r2, [r7, #28]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d106      	bne.n	800cad8 <tcp_input+0x31c>
 800caca:	4b65      	ldr	r3, [pc, #404]	; (800cc60 <tcp_input+0x4a4>)
 800cacc:	f240 120d 	movw	r2, #269	; 0x10d
 800cad0:	4964      	ldr	r1, [pc, #400]	; (800cc64 <tcp_input+0x4a8>)
 800cad2:	4865      	ldr	r0, [pc, #404]	; (800cc68 <tcp_input+0x4ac>)
 800cad4:	f006 fd1e 	bl	8013514 <iprintf>
      if (prev != NULL) {
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00a      	beq.n	800caf4 <tcp_input+0x338>
        prev->next = pcb->next;
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	68da      	ldr	r2, [r3, #12]
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800cae6:	4b61      	ldr	r3, [pc, #388]	; (800cc6c <tcp_input+0x4b0>)
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800caee:	4a5f      	ldr	r2, [pc, #380]	; (800cc6c <tcp_input+0x4b0>)
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	69fa      	ldr	r2, [r7, #28]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d111      	bne.n	800cb22 <tcp_input+0x366>
 800cafe:	4b58      	ldr	r3, [pc, #352]	; (800cc60 <tcp_input+0x4a4>)
 800cb00:	f240 1215 	movw	r2, #277	; 0x115
 800cb04:	495a      	ldr	r1, [pc, #360]	; (800cc70 <tcp_input+0x4b4>)
 800cb06:	4858      	ldr	r0, [pc, #352]	; (800cc68 <tcp_input+0x4ac>)
 800cb08:	f006 fd04 	bl	8013514 <iprintf>
      break;
 800cb0c:	e009      	b.n	800cb22 <tcp_input+0x366>
    }
    prev = pcb;
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	61fb      	str	r3, [r7, #28]
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f47f af5e 	bne.w	800c9dc <tcp_input+0x220>
 800cb20:	e000      	b.n	800cb24 <tcp_input+0x368>
      break;
 800cb22:	bf00      	nop
  }

  if (pcb == NULL) {
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	f040 80aa 	bne.w	800cc80 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb2c:	4b51      	ldr	r3, [pc, #324]	; (800cc74 <tcp_input+0x4b8>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	61fb      	str	r3, [r7, #28]
 800cb32:	e03f      	b.n	800cbb4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	7d1b      	ldrb	r3, [r3, #20]
 800cb38:	2b0a      	cmp	r3, #10
 800cb3a:	d006      	beq.n	800cb4a <tcp_input+0x38e>
 800cb3c:	4b48      	ldr	r3, [pc, #288]	; (800cc60 <tcp_input+0x4a4>)
 800cb3e:	f240 121f 	movw	r2, #287	; 0x11f
 800cb42:	494d      	ldr	r1, [pc, #308]	; (800cc78 <tcp_input+0x4bc>)
 800cb44:	4848      	ldr	r0, [pc, #288]	; (800cc68 <tcp_input+0x4ac>)
 800cb46:	f006 fce5 	bl	8013514 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	7a1b      	ldrb	r3, [r3, #8]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d009      	beq.n	800cb66 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	7a1a      	ldrb	r2, [r3, #8]
 800cb56:	4b41      	ldr	r3, [pc, #260]	; (800cc5c <tcp_input+0x4a0>)
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb5e:	3301      	adds	r3, #1
 800cb60:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d122      	bne.n	800cbac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	8b1a      	ldrh	r2, [r3, #24]
 800cb6a:	4b3b      	ldr	r3, [pc, #236]	; (800cc58 <tcp_input+0x49c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	881b      	ldrh	r3, [r3, #0]
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d11b      	bne.n	800cbae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	8ada      	ldrh	r2, [r3, #22]
 800cb7a:	4b37      	ldr	r3, [pc, #220]	; (800cc58 <tcp_input+0x49c>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	885b      	ldrh	r3, [r3, #2]
 800cb80:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d113      	bne.n	800cbae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	685a      	ldr	r2, [r3, #4]
 800cb8a:	4b34      	ldr	r3, [pc, #208]	; (800cc5c <tcp_input+0x4a0>)
 800cb8c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d10d      	bne.n	800cbae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	4b31      	ldr	r3, [pc, #196]	; (800cc5c <tcp_input+0x4a0>)
 800cb98:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d107      	bne.n	800cbae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800cb9e:	69f8      	ldr	r0, [r7, #28]
 800cba0:	f000 fb56 	bl	800d250 <tcp_timewait_input>
        }
        pbuf_free(p);
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7fd ffd5 	bl	800ab54 <pbuf_free>
        return;
 800cbaa:	e1fd      	b.n	800cfa8 <tcp_input+0x7ec>
        continue;
 800cbac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	61fb      	str	r3, [r7, #28]
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1bc      	bne.n	800cb34 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cbbe:	4b2f      	ldr	r3, [pc, #188]	; (800cc7c <tcp_input+0x4c0>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	617b      	str	r3, [r7, #20]
 800cbc4:	e02a      	b.n	800cc1c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	7a1b      	ldrb	r3, [r3, #8]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00c      	beq.n	800cbe8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	7a1a      	ldrb	r2, [r3, #8]
 800cbd2:	4b22      	ldr	r3, [pc, #136]	; (800cc5c <tcp_input+0x4a0>)
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbda:	3301      	adds	r3, #1
 800cbdc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d002      	beq.n	800cbe8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	61bb      	str	r3, [r7, #24]
        continue;
 800cbe6:	e016      	b.n	800cc16 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	8ada      	ldrh	r2, [r3, #22]
 800cbec:	4b1a      	ldr	r3, [pc, #104]	; (800cc58 <tcp_input+0x49c>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	885b      	ldrh	r3, [r3, #2]
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d10c      	bne.n	800cc12 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	4b17      	ldr	r3, [pc, #92]	; (800cc5c <tcp_input+0x4a0>)
 800cbfe:	695b      	ldr	r3, [r3, #20]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d00f      	beq.n	800cc24 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00d      	beq.n	800cc26 <tcp_input+0x46a>
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d009      	beq.n	800cc26 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	617b      	str	r3, [r7, #20]
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1d1      	bne.n	800cbc6 <tcp_input+0x40a>
 800cc22:	e000      	b.n	800cc26 <tcp_input+0x46a>
            break;
 800cc24:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d029      	beq.n	800cc80 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00a      	beq.n	800cc48 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	68da      	ldr	r2, [r3, #12]
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cc3a:	4b10      	ldr	r3, [pc, #64]	; (800cc7c <tcp_input+0x4c0>)
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cc42:	4a0e      	ldr	r2, [pc, #56]	; (800cc7c <tcp_input+0x4c0>)
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800cc48:	6978      	ldr	r0, [r7, #20]
 800cc4a:	f000 fa03 	bl	800d054 <tcp_listen_input>
      }
      pbuf_free(p);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f7fd ff80 	bl	800ab54 <pbuf_free>
      return;
 800cc54:	e1a8      	b.n	800cfa8 <tcp_input+0x7ec>
 800cc56:	bf00      	nop
 800cc58:	24005cfc 	.word	0x24005cfc
 800cc5c:	240078ec 	.word	0x240078ec
 800cc60:	080156e8 	.word	0x080156e8
 800cc64:	08015814 	.word	0x08015814
 800cc68:	08015734 	.word	0x08015734
 800cc6c:	2400a9ac 	.word	0x2400a9ac
 800cc70:	08015840 	.word	0x08015840
 800cc74:	2400a9bc 	.word	0x2400a9bc
 800cc78:	0801586c 	.word	0x0801586c
 800cc7c:	2400a9b4 	.word	0x2400a9b4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 8158 	beq.w	800cf38 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800cc88:	4b95      	ldr	r3, [pc, #596]	; (800cee0 <tcp_input+0x724>)
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	891a      	ldrh	r2, [r3, #8]
 800cc92:	4b93      	ldr	r3, [pc, #588]	; (800cee0 <tcp_input+0x724>)
 800cc94:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800cc96:	4a92      	ldr	r2, [pc, #584]	; (800cee0 <tcp_input+0x724>)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cc9c:	4b91      	ldr	r3, [pc, #580]	; (800cee4 <tcp_input+0x728>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a8f      	ldr	r2, [pc, #572]	; (800cee0 <tcp_input+0x724>)
 800cca2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800cca4:	4b90      	ldr	r3, [pc, #576]	; (800cee8 <tcp_input+0x72c>)
 800cca6:	2200      	movs	r2, #0
 800cca8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ccaa:	4b90      	ldr	r3, [pc, #576]	; (800ceec <tcp_input+0x730>)
 800ccac:	2200      	movs	r2, #0
 800ccae:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ccb0:	4b8f      	ldr	r3, [pc, #572]	; (800cef0 <tcp_input+0x734>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ccb6:	4b8f      	ldr	r3, [pc, #572]	; (800cef4 <tcp_input+0x738>)
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	f003 0308 	and.w	r3, r3, #8
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d006      	beq.n	800ccd0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	7b5b      	ldrb	r3, [r3, #13]
 800ccc6:	f043 0301 	orr.w	r3, r3, #1
 800ccca:	b2da      	uxtb	r2, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d017      	beq.n	800cd08 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ccd8:	69f8      	ldr	r0, [r7, #28]
 800ccda:	f7ff f929 	bl	800bf30 <tcp_process_refused_data>
 800ccde:	4603      	mov	r3, r0
 800cce0:	f113 0f0d 	cmn.w	r3, #13
 800cce4:	d007      	beq.n	800ccf6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00c      	beq.n	800cd08 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ccee:	4b82      	ldr	r3, [pc, #520]	; (800cef8 <tcp_input+0x73c>)
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d008      	beq.n	800cd08 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	f040 80e3 	bne.w	800cec6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cd00:	69f8      	ldr	r0, [r7, #28]
 800cd02:	f003 f9ad 	bl	8010060 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cd06:	e0de      	b.n	800cec6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800cd08:	4a7c      	ldr	r2, [pc, #496]	; (800cefc <tcp_input+0x740>)
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cd0e:	69f8      	ldr	r0, [r7, #28]
 800cd10:	f000 fb18 	bl	800d344 <tcp_process>
 800cd14:	4603      	mov	r3, r0
 800cd16:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800cd18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd1c:	f113 0f0d 	cmn.w	r3, #13
 800cd20:	f000 80d3 	beq.w	800ceca <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800cd24:	4b71      	ldr	r3, [pc, #452]	; (800ceec <tcp_input+0x730>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	f003 0308 	and.w	r3, r3, #8
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d015      	beq.n	800cd5c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d008      	beq.n	800cd4c <tcp_input+0x590>
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd40:	69fa      	ldr	r2, [r7, #28]
 800cd42:	6912      	ldr	r2, [r2, #16]
 800cd44:	f06f 010d 	mvn.w	r1, #13
 800cd48:	4610      	mov	r0, r2
 800cd4a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cd4c:	69f9      	ldr	r1, [r7, #28]
 800cd4e:	486c      	ldr	r0, [pc, #432]	; (800cf00 <tcp_input+0x744>)
 800cd50:	f7ff fbbc 	bl	800c4cc <tcp_pcb_remove>
        tcp_free(pcb);
 800cd54:	69f8      	ldr	r0, [r7, #28]
 800cd56:	f7fe f9a9 	bl	800b0ac <tcp_free>
 800cd5a:	e0da      	b.n	800cf12 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800cd60:	4b63      	ldr	r3, [pc, #396]	; (800cef0 <tcp_input+0x734>)
 800cd62:	881b      	ldrh	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d01d      	beq.n	800cda4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800cd68:	4b61      	ldr	r3, [pc, #388]	; (800cef0 <tcp_input+0x734>)
 800cd6a:	881b      	ldrh	r3, [r3, #0]
 800cd6c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00a      	beq.n	800cd8e <tcp_input+0x5d2>
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd7e:	69fa      	ldr	r2, [r7, #28]
 800cd80:	6910      	ldr	r0, [r2, #16]
 800cd82:	89fa      	ldrh	r2, [r7, #14]
 800cd84:	69f9      	ldr	r1, [r7, #28]
 800cd86:	4798      	blx	r3
 800cd88:	4603      	mov	r3, r0
 800cd8a:	74fb      	strb	r3, [r7, #19]
 800cd8c:	e001      	b.n	800cd92 <tcp_input+0x5d6>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cd92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd96:	f113 0f0d 	cmn.w	r3, #13
 800cd9a:	f000 8098 	beq.w	800cece <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cd9e:	4b54      	ldr	r3, [pc, #336]	; (800cef0 <tcp_input+0x734>)
 800cda0:	2200      	movs	r2, #0
 800cda2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cda4:	69f8      	ldr	r0, [r7, #28]
 800cda6:	f000 f915 	bl	800cfd4 <tcp_input_delayed_close>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f040 8090 	bne.w	800ced2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cdb2:	4b4d      	ldr	r3, [pc, #308]	; (800cee8 <tcp_input+0x72c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d041      	beq.n	800ce3e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d006      	beq.n	800cdd0 <tcp_input+0x614>
 800cdc2:	4b50      	ldr	r3, [pc, #320]	; (800cf04 <tcp_input+0x748>)
 800cdc4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cdc8:	494f      	ldr	r1, [pc, #316]	; (800cf08 <tcp_input+0x74c>)
 800cdca:	4850      	ldr	r0, [pc, #320]	; (800cf0c <tcp_input+0x750>)
 800cdcc:	f006 fba2 	bl	8013514 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	8b5b      	ldrh	r3, [r3, #26]
 800cdd4:	f003 0310 	and.w	r3, r3, #16
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d008      	beq.n	800cdee <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cddc:	4b42      	ldr	r3, [pc, #264]	; (800cee8 <tcp_input+0x72c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fd feb7 	bl	800ab54 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cde6:	69f8      	ldr	r0, [r7, #28]
 800cde8:	f7fe fc48 	bl	800b67c <tcp_abort>
            goto aborted;
 800cdec:	e091      	b.n	800cf12 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00c      	beq.n	800ce12 <tcp_input+0x656>
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	6918      	ldr	r0, [r3, #16]
 800ce02:	4b39      	ldr	r3, [pc, #228]	; (800cee8 <tcp_input+0x72c>)
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	2300      	movs	r3, #0
 800ce08:	69f9      	ldr	r1, [r7, #28]
 800ce0a:	47a0      	blx	r4
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	74fb      	strb	r3, [r7, #19]
 800ce10:	e008      	b.n	800ce24 <tcp_input+0x668>
 800ce12:	4b35      	ldr	r3, [pc, #212]	; (800cee8 <tcp_input+0x72c>)
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	2300      	movs	r3, #0
 800ce18:	69f9      	ldr	r1, [r7, #28]
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	f7ff f95e 	bl	800c0dc <tcp_recv_null>
 800ce20:	4603      	mov	r3, r0
 800ce22:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ce24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce28:	f113 0f0d 	cmn.w	r3, #13
 800ce2c:	d053      	beq.n	800ced6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ce2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d003      	beq.n	800ce3e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ce36:	4b2c      	ldr	r3, [pc, #176]	; (800cee8 <tcp_input+0x72c>)
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ce3e:	4b2b      	ldr	r3, [pc, #172]	; (800ceec <tcp_input+0x730>)
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	f003 0320 	and.w	r3, r3, #32
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d030      	beq.n	800ceac <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d009      	beq.n	800ce66 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce56:	7b5a      	ldrb	r2, [r3, #13]
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce5c:	f042 0220 	orr.w	r2, r2, #32
 800ce60:	b2d2      	uxtb	r2, r2
 800ce62:	735a      	strb	r2, [r3, #13]
 800ce64:	e022      	b.n	800ceac <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce6e:	d005      	beq.n	800ce7c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce74:	3301      	adds	r3, #1
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00b      	beq.n	800ce9e <tcp_input+0x6e2>
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	6918      	ldr	r0, [r3, #16]
 800ce90:	2300      	movs	r3, #0
 800ce92:	2200      	movs	r2, #0
 800ce94:	69f9      	ldr	r1, [r7, #28]
 800ce96:	47a0      	blx	r4
 800ce98:	4603      	mov	r3, r0
 800ce9a:	74fb      	strb	r3, [r7, #19]
 800ce9c:	e001      	b.n	800cea2 <tcp_input+0x6e6>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cea6:	f113 0f0d 	cmn.w	r3, #13
 800ceaa:	d016      	beq.n	800ceda <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ceac:	4b13      	ldr	r3, [pc, #76]	; (800cefc <tcp_input+0x740>)
 800ceae:	2200      	movs	r2, #0
 800ceb0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ceb2:	69f8      	ldr	r0, [r7, #28]
 800ceb4:	f000 f88e 	bl	800cfd4 <tcp_input_delayed_close>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d128      	bne.n	800cf10 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cebe:	69f8      	ldr	r0, [r7, #28]
 800cec0:	f002 fac8 	bl	800f454 <tcp_output>
 800cec4:	e025      	b.n	800cf12 <tcp_input+0x756>
        goto aborted;
 800cec6:	bf00      	nop
 800cec8:	e023      	b.n	800cf12 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ceca:	bf00      	nop
 800cecc:	e021      	b.n	800cf12 <tcp_input+0x756>
              goto aborted;
 800cece:	bf00      	nop
 800ced0:	e01f      	b.n	800cf12 <tcp_input+0x756>
          goto aborted;
 800ced2:	bf00      	nop
 800ced4:	e01d      	b.n	800cf12 <tcp_input+0x756>
            goto aborted;
 800ced6:	bf00      	nop
 800ced8:	e01b      	b.n	800cf12 <tcp_input+0x756>
              goto aborted;
 800ceda:	bf00      	nop
 800cedc:	e019      	b.n	800cf12 <tcp_input+0x756>
 800cede:	bf00      	nop
 800cee0:	24005cec 	.word	0x24005cec
 800cee4:	24005cfc 	.word	0x24005cfc
 800cee8:	24005d1c 	.word	0x24005d1c
 800ceec:	24005d19 	.word	0x24005d19
 800cef0:	24005d14 	.word	0x24005d14
 800cef4:	24005d18 	.word	0x24005d18
 800cef8:	24005d16 	.word	0x24005d16
 800cefc:	2400a9c0 	.word	0x2400a9c0
 800cf00:	2400a9ac 	.word	0x2400a9ac
 800cf04:	080156e8 	.word	0x080156e8
 800cf08:	0801589c 	.word	0x0801589c
 800cf0c:	08015734 	.word	0x08015734
          goto aborted;
 800cf10:	bf00      	nop
    tcp_input_pcb = NULL;
 800cf12:	4b27      	ldr	r3, [pc, #156]	; (800cfb0 <tcp_input+0x7f4>)
 800cf14:	2200      	movs	r2, #0
 800cf16:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cf18:	4b26      	ldr	r3, [pc, #152]	; (800cfb4 <tcp_input+0x7f8>)
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800cf1e:	4b26      	ldr	r3, [pc, #152]	; (800cfb8 <tcp_input+0x7fc>)
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d03f      	beq.n	800cfa6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800cf26:	4b24      	ldr	r3, [pc, #144]	; (800cfb8 <tcp_input+0x7fc>)
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fd fe12 	bl	800ab54 <pbuf_free>
      inseg.p = NULL;
 800cf30:	4b21      	ldr	r3, [pc, #132]	; (800cfb8 <tcp_input+0x7fc>)
 800cf32:	2200      	movs	r2, #0
 800cf34:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cf36:	e036      	b.n	800cfa6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cf38:	4b20      	ldr	r3, [pc, #128]	; (800cfbc <tcp_input+0x800>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	899b      	ldrh	r3, [r3, #12]
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fc f95d 	bl	8009200 <lwip_htons>
 800cf46:	4603      	mov	r3, r0
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	f003 0304 	and.w	r3, r3, #4
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d118      	bne.n	800cf84 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf52:	4b1b      	ldr	r3, [pc, #108]	; (800cfc0 <tcp_input+0x804>)
 800cf54:	6819      	ldr	r1, [r3, #0]
 800cf56:	4b1b      	ldr	r3, [pc, #108]	; (800cfc4 <tcp_input+0x808>)
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	4b1a      	ldr	r3, [pc, #104]	; (800cfc8 <tcp_input+0x80c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf62:	4b16      	ldr	r3, [pc, #88]	; (800cfbc <tcp_input+0x800>)
 800cf64:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf66:	885b      	ldrh	r3, [r3, #2]
 800cf68:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf6a:	4a14      	ldr	r2, [pc, #80]	; (800cfbc <tcp_input+0x800>)
 800cf6c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf6e:	8812      	ldrh	r2, [r2, #0]
 800cf70:	b292      	uxth	r2, r2
 800cf72:	9202      	str	r2, [sp, #8]
 800cf74:	9301      	str	r3, [sp, #4]
 800cf76:	4b15      	ldr	r3, [pc, #84]	; (800cfcc <tcp_input+0x810>)
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	4b15      	ldr	r3, [pc, #84]	; (800cfd0 <tcp_input+0x814>)
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	2000      	movs	r0, #0
 800cf80:	f003 f81c 	bl	800ffbc <tcp_rst>
    pbuf_free(p);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7fd fde5 	bl	800ab54 <pbuf_free>
  return;
 800cf8a:	e00c      	b.n	800cfa6 <tcp_input+0x7ea>
    goto dropped;
 800cf8c:	bf00      	nop
 800cf8e:	e006      	b.n	800cf9e <tcp_input+0x7e2>
    goto dropped;
 800cf90:	bf00      	nop
 800cf92:	e004      	b.n	800cf9e <tcp_input+0x7e2>
    goto dropped;
 800cf94:	bf00      	nop
 800cf96:	e002      	b.n	800cf9e <tcp_input+0x7e2>
      goto dropped;
 800cf98:	bf00      	nop
 800cf9a:	e000      	b.n	800cf9e <tcp_input+0x7e2>
      goto dropped;
 800cf9c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7fd fdd8 	bl	800ab54 <pbuf_free>
 800cfa4:	e000      	b.n	800cfa8 <tcp_input+0x7ec>
  return;
 800cfa6:	bf00      	nop
}
 800cfa8:	3724      	adds	r7, #36	; 0x24
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd90      	pop	{r4, r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	2400a9c0 	.word	0x2400a9c0
 800cfb4:	24005d1c 	.word	0x24005d1c
 800cfb8:	24005cec 	.word	0x24005cec
 800cfbc:	24005cfc 	.word	0x24005cfc
 800cfc0:	24005d10 	.word	0x24005d10
 800cfc4:	24005d16 	.word	0x24005d16
 800cfc8:	24005d0c 	.word	0x24005d0c
 800cfcc:	240078fc 	.word	0x240078fc
 800cfd0:	24007900 	.word	0x24007900

0800cfd4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d106      	bne.n	800cff0 <tcp_input_delayed_close+0x1c>
 800cfe2:	4b17      	ldr	r3, [pc, #92]	; (800d040 <tcp_input_delayed_close+0x6c>)
 800cfe4:	f240 225a 	movw	r2, #602	; 0x25a
 800cfe8:	4916      	ldr	r1, [pc, #88]	; (800d044 <tcp_input_delayed_close+0x70>)
 800cfea:	4817      	ldr	r0, [pc, #92]	; (800d048 <tcp_input_delayed_close+0x74>)
 800cfec:	f006 fa92 	bl	8013514 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800cff0:	4b16      	ldr	r3, [pc, #88]	; (800d04c <tcp_input_delayed_close+0x78>)
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	f003 0310 	and.w	r3, r3, #16
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d01c      	beq.n	800d036 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	8b5b      	ldrh	r3, [r3, #26]
 800d000:	f003 0310 	and.w	r3, r3, #16
 800d004:	2b00      	cmp	r3, #0
 800d006:	d10d      	bne.n	800d024 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d008      	beq.n	800d024 <tcp_input_delayed_close+0x50>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	6912      	ldr	r2, [r2, #16]
 800d01c:	f06f 010e 	mvn.w	r1, #14
 800d020:	4610      	mov	r0, r2
 800d022:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d024:	6879      	ldr	r1, [r7, #4]
 800d026:	480a      	ldr	r0, [pc, #40]	; (800d050 <tcp_input_delayed_close+0x7c>)
 800d028:	f7ff fa50 	bl	800c4cc <tcp_pcb_remove>
    tcp_free(pcb);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7fe f83d 	bl	800b0ac <tcp_free>
    return 1;
 800d032:	2301      	movs	r3, #1
 800d034:	e000      	b.n	800d038 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	080156e8 	.word	0x080156e8
 800d044:	080158b8 	.word	0x080158b8
 800d048:	08015734 	.word	0x08015734
 800d04c:	24005d19 	.word	0x24005d19
 800d050:	2400a9ac 	.word	0x2400a9ac

0800d054 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d054:	b590      	push	{r4, r7, lr}
 800d056:	b08b      	sub	sp, #44	; 0x2c
 800d058:	af04      	add	r7, sp, #16
 800d05a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d05c:	4b6f      	ldr	r3, [pc, #444]	; (800d21c <tcp_listen_input+0x1c8>)
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	f003 0304 	and.w	r3, r3, #4
 800d064:	2b00      	cmp	r3, #0
 800d066:	f040 80d2 	bne.w	800d20e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d106      	bne.n	800d07e <tcp_listen_input+0x2a>
 800d070:	4b6b      	ldr	r3, [pc, #428]	; (800d220 <tcp_listen_input+0x1cc>)
 800d072:	f240 2281 	movw	r2, #641	; 0x281
 800d076:	496b      	ldr	r1, [pc, #428]	; (800d224 <tcp_listen_input+0x1d0>)
 800d078:	486b      	ldr	r0, [pc, #428]	; (800d228 <tcp_listen_input+0x1d4>)
 800d07a:	f006 fa4b 	bl	8013514 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d07e:	4b67      	ldr	r3, [pc, #412]	; (800d21c <tcp_listen_input+0x1c8>)
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	f003 0310 	and.w	r3, r3, #16
 800d086:	2b00      	cmp	r3, #0
 800d088:	d019      	beq.n	800d0be <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d08a:	4b68      	ldr	r3, [pc, #416]	; (800d22c <tcp_listen_input+0x1d8>)
 800d08c:	6819      	ldr	r1, [r3, #0]
 800d08e:	4b68      	ldr	r3, [pc, #416]	; (800d230 <tcp_listen_input+0x1dc>)
 800d090:	881b      	ldrh	r3, [r3, #0]
 800d092:	461a      	mov	r2, r3
 800d094:	4b67      	ldr	r3, [pc, #412]	; (800d234 <tcp_listen_input+0x1e0>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d09a:	4b67      	ldr	r3, [pc, #412]	; (800d238 <tcp_listen_input+0x1e4>)
 800d09c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d09e:	885b      	ldrh	r3, [r3, #2]
 800d0a0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0a2:	4a65      	ldr	r2, [pc, #404]	; (800d238 <tcp_listen_input+0x1e4>)
 800d0a4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0a6:	8812      	ldrh	r2, [r2, #0]
 800d0a8:	b292      	uxth	r2, r2
 800d0aa:	9202      	str	r2, [sp, #8]
 800d0ac:	9301      	str	r3, [sp, #4]
 800d0ae:	4b63      	ldr	r3, [pc, #396]	; (800d23c <tcp_listen_input+0x1e8>)
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	4b63      	ldr	r3, [pc, #396]	; (800d240 <tcp_listen_input+0x1ec>)
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f002 ff80 	bl	800ffbc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d0bc:	e0a9      	b.n	800d212 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d0be:	4b57      	ldr	r3, [pc, #348]	; (800d21c <tcp_listen_input+0x1c8>)
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	f003 0302 	and.w	r3, r3, #2
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f000 80a3 	beq.w	800d212 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	7d5b      	ldrb	r3, [r3, #21]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7ff f927 	bl	800c324 <tcp_alloc>
 800d0d6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d111      	bne.n	800d102 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	699b      	ldr	r3, [r3, #24]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00a      	beq.n	800d0fc <tcp_listen_input+0xa8>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	699b      	ldr	r3, [r3, #24]
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	6910      	ldr	r0, [r2, #16]
 800d0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d0f2:	2100      	movs	r1, #0
 800d0f4:	4798      	blx	r3
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	73bb      	strb	r3, [r7, #14]
      return;
 800d0fa:	e08b      	b.n	800d214 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d0fc:	23f0      	movs	r3, #240	; 0xf0
 800d0fe:	73bb      	strb	r3, [r7, #14]
      return;
 800d100:	e088      	b.n	800d214 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d102:	4b50      	ldr	r3, [pc, #320]	; (800d244 <tcp_listen_input+0x1f0>)
 800d104:	695a      	ldr	r2, [r3, #20]
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d10a:	4b4e      	ldr	r3, [pc, #312]	; (800d244 <tcp_listen_input+0x1f0>)
 800d10c:	691a      	ldr	r2, [r3, #16]
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	8ada      	ldrh	r2, [r3, #22]
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d11a:	4b47      	ldr	r3, [pc, #284]	; (800d238 <tcp_listen_input+0x1e4>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	881b      	ldrh	r3, [r3, #0]
 800d120:	b29a      	uxth	r2, r3
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	2203      	movs	r2, #3
 800d12a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d12c:	4b41      	ldr	r3, [pc, #260]	; (800d234 <tcp_listen_input+0x1e0>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	1c5a      	adds	r2, r3, #1
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d13e:	6978      	ldr	r0, [r7, #20]
 800d140:	f7ff fa58 	bl	800c5f4 <tcp_next_iss>
 800d144:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	693a      	ldr	r2, [r7, #16]
 800d150:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	693a      	ldr	r2, [r7, #16]
 800d156:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	693a      	ldr	r2, [r7, #16]
 800d15c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d15e:	4b35      	ldr	r3, [pc, #212]	; (800d234 <tcp_listen_input+0x1e0>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	1e5a      	subs	r2, r3, #1
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	691a      	ldr	r2, [r3, #16]
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	7a5b      	ldrb	r3, [r3, #9]
 800d17a:	f003 030c 	and.w	r3, r3, #12
 800d17e:	b2da      	uxtb	r2, r3
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	7a1a      	ldrb	r2, [r3, #8]
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d18c:	4b2e      	ldr	r3, [pc, #184]	; (800d248 <tcp_listen_input+0x1f4>)
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	60da      	str	r2, [r3, #12]
 800d194:	4a2c      	ldr	r2, [pc, #176]	; (800d248 <tcp_listen_input+0x1f4>)
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	6013      	str	r3, [r2, #0]
 800d19a:	f003 f8d1 	bl	8010340 <tcp_timer_needed>
 800d19e:	4b2b      	ldr	r3, [pc, #172]	; (800d24c <tcp_listen_input+0x1f8>)
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d1a4:	6978      	ldr	r0, [r7, #20]
 800d1a6:	f001 fd8f 	bl	800ecc8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d1aa:	4b23      	ldr	r3, [pc, #140]	; (800d238 <tcp_listen_input+0x1e4>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	89db      	ldrh	r3, [r3, #14]
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f004 fceb 	bl	8011ba8 <ip4_route>
 800d1d2:	4601      	mov	r1, r0
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	461a      	mov	r2, r3
 800d1da:	4620      	mov	r0, r4
 800d1dc:	f7ff fa30 	bl	800c640 <tcp_eff_send_mss_netif>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d1e8:	2112      	movs	r1, #18
 800d1ea:	6978      	ldr	r0, [r7, #20]
 800d1ec:	f002 f844 	bl	800f278 <tcp_enqueue_flags>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d1f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d004      	beq.n	800d206 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	6978      	ldr	r0, [r7, #20]
 800d200:	f7fe f97e 	bl	800b500 <tcp_abandon>
      return;
 800d204:	e006      	b.n	800d214 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d206:	6978      	ldr	r0, [r7, #20]
 800d208:	f002 f924 	bl	800f454 <tcp_output>
  return;
 800d20c:	e001      	b.n	800d212 <tcp_listen_input+0x1be>
    return;
 800d20e:	bf00      	nop
 800d210:	e000      	b.n	800d214 <tcp_listen_input+0x1c0>
  return;
 800d212:	bf00      	nop
}
 800d214:	371c      	adds	r7, #28
 800d216:	46bd      	mov	sp, r7
 800d218:	bd90      	pop	{r4, r7, pc}
 800d21a:	bf00      	nop
 800d21c:	24005d18 	.word	0x24005d18
 800d220:	080156e8 	.word	0x080156e8
 800d224:	080158e0 	.word	0x080158e0
 800d228:	08015734 	.word	0x08015734
 800d22c:	24005d10 	.word	0x24005d10
 800d230:	24005d16 	.word	0x24005d16
 800d234:	24005d0c 	.word	0x24005d0c
 800d238:	24005cfc 	.word	0x24005cfc
 800d23c:	240078fc 	.word	0x240078fc
 800d240:	24007900 	.word	0x24007900
 800d244:	240078ec 	.word	0x240078ec
 800d248:	2400a9ac 	.word	0x2400a9ac
 800d24c:	2400a9a8 	.word	0x2400a9a8

0800d250 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b086      	sub	sp, #24
 800d254:	af04      	add	r7, sp, #16
 800d256:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d258:	4b2f      	ldr	r3, [pc, #188]	; (800d318 <tcp_timewait_input+0xc8>)
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	f003 0304 	and.w	r3, r3, #4
 800d260:	2b00      	cmp	r3, #0
 800d262:	d153      	bne.n	800d30c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d106      	bne.n	800d278 <tcp_timewait_input+0x28>
 800d26a:	4b2c      	ldr	r3, [pc, #176]	; (800d31c <tcp_timewait_input+0xcc>)
 800d26c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d270:	492b      	ldr	r1, [pc, #172]	; (800d320 <tcp_timewait_input+0xd0>)
 800d272:	482c      	ldr	r0, [pc, #176]	; (800d324 <tcp_timewait_input+0xd4>)
 800d274:	f006 f94e 	bl	8013514 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d278:	4b27      	ldr	r3, [pc, #156]	; (800d318 <tcp_timewait_input+0xc8>)
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	f003 0302 	and.w	r3, r3, #2
 800d280:	2b00      	cmp	r3, #0
 800d282:	d02a      	beq.n	800d2da <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d284:	4b28      	ldr	r3, [pc, #160]	; (800d328 <tcp_timewait_input+0xd8>)
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d28c:	1ad3      	subs	r3, r2, r3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	db2d      	blt.n	800d2ee <tcp_timewait_input+0x9e>
 800d292:	4b25      	ldr	r3, [pc, #148]	; (800d328 <tcp_timewait_input+0xd8>)
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29a:	6879      	ldr	r1, [r7, #4]
 800d29c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d29e:	440b      	add	r3, r1
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	dc23      	bgt.n	800d2ee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2a6:	4b21      	ldr	r3, [pc, #132]	; (800d32c <tcp_timewait_input+0xdc>)
 800d2a8:	6819      	ldr	r1, [r3, #0]
 800d2aa:	4b21      	ldr	r3, [pc, #132]	; (800d330 <tcp_timewait_input+0xe0>)
 800d2ac:	881b      	ldrh	r3, [r3, #0]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	4b1d      	ldr	r3, [pc, #116]	; (800d328 <tcp_timewait_input+0xd8>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2b6:	4b1f      	ldr	r3, [pc, #124]	; (800d334 <tcp_timewait_input+0xe4>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2ba:	885b      	ldrh	r3, [r3, #2]
 800d2bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2be:	4a1d      	ldr	r2, [pc, #116]	; (800d334 <tcp_timewait_input+0xe4>)
 800d2c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2c2:	8812      	ldrh	r2, [r2, #0]
 800d2c4:	b292      	uxth	r2, r2
 800d2c6:	9202      	str	r2, [sp, #8]
 800d2c8:	9301      	str	r3, [sp, #4]
 800d2ca:	4b1b      	ldr	r3, [pc, #108]	; (800d338 <tcp_timewait_input+0xe8>)
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	4b1b      	ldr	r3, [pc, #108]	; (800d33c <tcp_timewait_input+0xec>)
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f002 fe72 	bl	800ffbc <tcp_rst>
      return;
 800d2d8:	e01b      	b.n	800d312 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d2da:	4b0f      	ldr	r3, [pc, #60]	; (800d318 <tcp_timewait_input+0xc8>)
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	f003 0301 	and.w	r3, r3, #1
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d003      	beq.n	800d2ee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d2e6:	4b16      	ldr	r3, [pc, #88]	; (800d340 <tcp_timewait_input+0xf0>)
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d2ee:	4b10      	ldr	r3, [pc, #64]	; (800d330 <tcp_timewait_input+0xe0>)
 800d2f0:	881b      	ldrh	r3, [r3, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00c      	beq.n	800d310 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	8b5b      	ldrh	r3, [r3, #26]
 800d2fa:	f043 0302 	orr.w	r3, r3, #2
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f002 f8a5 	bl	800f454 <tcp_output>
  }
  return;
 800d30a:	e001      	b.n	800d310 <tcp_timewait_input+0xc0>
    return;
 800d30c:	bf00      	nop
 800d30e:	e000      	b.n	800d312 <tcp_timewait_input+0xc2>
  return;
 800d310:	bf00      	nop
}
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	24005d18 	.word	0x24005d18
 800d31c:	080156e8 	.word	0x080156e8
 800d320:	08015900 	.word	0x08015900
 800d324:	08015734 	.word	0x08015734
 800d328:	24005d0c 	.word	0x24005d0c
 800d32c:	24005d10 	.word	0x24005d10
 800d330:	24005d16 	.word	0x24005d16
 800d334:	24005cfc 	.word	0x24005cfc
 800d338:	240078fc 	.word	0x240078fc
 800d33c:	24007900 	.word	0x24007900
 800d340:	2400a9b0 	.word	0x2400a9b0

0800d344 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d344:	b590      	push	{r4, r7, lr}
 800d346:	b08d      	sub	sp, #52	; 0x34
 800d348:	af04      	add	r7, sp, #16
 800d34a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d34c:	2300      	movs	r3, #0
 800d34e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d350:	2300      	movs	r3, #0
 800d352:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d106      	bne.n	800d368 <tcp_process+0x24>
 800d35a:	4b9d      	ldr	r3, [pc, #628]	; (800d5d0 <tcp_process+0x28c>)
 800d35c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d360:	499c      	ldr	r1, [pc, #624]	; (800d5d4 <tcp_process+0x290>)
 800d362:	489d      	ldr	r0, [pc, #628]	; (800d5d8 <tcp_process+0x294>)
 800d364:	f006 f8d6 	bl	8013514 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d368:	4b9c      	ldr	r3, [pc, #624]	; (800d5dc <tcp_process+0x298>)
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	f003 0304 	and.w	r3, r3, #4
 800d370:	2b00      	cmp	r3, #0
 800d372:	d04e      	beq.n	800d412 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7d1b      	ldrb	r3, [r3, #20]
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d108      	bne.n	800d38e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d380:	4b97      	ldr	r3, [pc, #604]	; (800d5e0 <tcp_process+0x29c>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	429a      	cmp	r2, r3
 800d386:	d123      	bne.n	800d3d0 <tcp_process+0x8c>
        acceptable = 1;
 800d388:	2301      	movs	r3, #1
 800d38a:	76fb      	strb	r3, [r7, #27]
 800d38c:	e020      	b.n	800d3d0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d392:	4b94      	ldr	r3, [pc, #592]	; (800d5e4 <tcp_process+0x2a0>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	429a      	cmp	r2, r3
 800d398:	d102      	bne.n	800d3a0 <tcp_process+0x5c>
        acceptable = 1;
 800d39a:	2301      	movs	r3, #1
 800d39c:	76fb      	strb	r3, [r7, #27]
 800d39e:	e017      	b.n	800d3d0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d3a0:	4b90      	ldr	r3, [pc, #576]	; (800d5e4 <tcp_process+0x2a0>)
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a8:	1ad3      	subs	r3, r2, r3
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	db10      	blt.n	800d3d0 <tcp_process+0x8c>
 800d3ae:	4b8d      	ldr	r3, [pc, #564]	; (800d5e4 <tcp_process+0x2a0>)
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b6:	6879      	ldr	r1, [r7, #4]
 800d3b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d3ba:	440b      	add	r3, r1
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	dc06      	bgt.n	800d3d0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	8b5b      	ldrh	r3, [r3, #26]
 800d3c6:	f043 0302 	orr.w	r3, r3, #2
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d3d0:	7efb      	ldrb	r3, [r7, #27]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d01b      	beq.n	800d40e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	7d1b      	ldrb	r3, [r3, #20]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d106      	bne.n	800d3ec <tcp_process+0xa8>
 800d3de:	4b7c      	ldr	r3, [pc, #496]	; (800d5d0 <tcp_process+0x28c>)
 800d3e0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d3e4:	4980      	ldr	r1, [pc, #512]	; (800d5e8 <tcp_process+0x2a4>)
 800d3e6:	487c      	ldr	r0, [pc, #496]	; (800d5d8 <tcp_process+0x294>)
 800d3e8:	f006 f894 	bl	8013514 <iprintf>
      recv_flags |= TF_RESET;
 800d3ec:	4b7f      	ldr	r3, [pc, #508]	; (800d5ec <tcp_process+0x2a8>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	f043 0308 	orr.w	r3, r3, #8
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	4b7d      	ldr	r3, [pc, #500]	; (800d5ec <tcp_process+0x2a8>)
 800d3f8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	8b5b      	ldrh	r3, [r3, #26]
 800d3fe:	f023 0301 	bic.w	r3, r3, #1
 800d402:	b29a      	uxth	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d408:	f06f 030d 	mvn.w	r3, #13
 800d40c:	e37a      	b.n	800db04 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d40e:	2300      	movs	r3, #0
 800d410:	e378      	b.n	800db04 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d412:	4b72      	ldr	r3, [pc, #456]	; (800d5dc <tcp_process+0x298>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	f003 0302 	and.w	r3, r3, #2
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d010      	beq.n	800d440 <tcp_process+0xfc>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	7d1b      	ldrb	r3, [r3, #20]
 800d422:	2b02      	cmp	r3, #2
 800d424:	d00c      	beq.n	800d440 <tcp_process+0xfc>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	7d1b      	ldrb	r3, [r3, #20]
 800d42a:	2b03      	cmp	r3, #3
 800d42c:	d008      	beq.n	800d440 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	8b5b      	ldrh	r3, [r3, #26]
 800d432:	f043 0302 	orr.w	r3, r3, #2
 800d436:	b29a      	uxth	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	e361      	b.n	800db04 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	8b5b      	ldrh	r3, [r3, #26]
 800d444:	f003 0310 	and.w	r3, r3, #16
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d103      	bne.n	800d454 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d44c:	4b68      	ldr	r3, [pc, #416]	; (800d5f0 <tcp_process+0x2ac>)
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f001 fc2f 	bl	800ecc8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	7d1b      	ldrb	r3, [r3, #20]
 800d46e:	3b02      	subs	r3, #2
 800d470:	2b07      	cmp	r3, #7
 800d472:	f200 8337 	bhi.w	800dae4 <tcp_process+0x7a0>
 800d476:	a201      	add	r2, pc, #4	; (adr r2, 800d47c <tcp_process+0x138>)
 800d478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d47c:	0800d49d 	.word	0x0800d49d
 800d480:	0800d6cd 	.word	0x0800d6cd
 800d484:	0800d845 	.word	0x0800d845
 800d488:	0800d86f 	.word	0x0800d86f
 800d48c:	0800d993 	.word	0x0800d993
 800d490:	0800d845 	.word	0x0800d845
 800d494:	0800da1f 	.word	0x0800da1f
 800d498:	0800daaf 	.word	0x0800daaf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d49c:	4b4f      	ldr	r3, [pc, #316]	; (800d5dc <tcp_process+0x298>)
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	f003 0310 	and.w	r3, r3, #16
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f000 80e4 	beq.w	800d672 <tcp_process+0x32e>
 800d4aa:	4b4c      	ldr	r3, [pc, #304]	; (800d5dc <tcp_process+0x298>)
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	f003 0302 	and.w	r3, r3, #2
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f000 80dd 	beq.w	800d672 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4bc:	1c5a      	adds	r2, r3, #1
 800d4be:	4b48      	ldr	r3, [pc, #288]	; (800d5e0 <tcp_process+0x29c>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	f040 80d5 	bne.w	800d672 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d4c8:	4b46      	ldr	r3, [pc, #280]	; (800d5e4 <tcp_process+0x2a0>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	1c5a      	adds	r2, r3, #1
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d4da:	4b41      	ldr	r3, [pc, #260]	; (800d5e0 <tcp_process+0x29c>)
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d4e2:	4b44      	ldr	r3, [pc, #272]	; (800d5f4 <tcp_process+0x2b0>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	89db      	ldrh	r3, [r3, #14]
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d4fc:	4b39      	ldr	r3, [pc, #228]	; (800d5e4 <tcp_process+0x2a0>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	1e5a      	subs	r2, r3, #1
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2204      	movs	r2, #4
 800d50a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	3304      	adds	r3, #4
 800d514:	4618      	mov	r0, r3
 800d516:	f004 fb47 	bl	8011ba8 <ip4_route>
 800d51a:	4601      	mov	r1, r0
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	3304      	adds	r3, #4
 800d520:	461a      	mov	r2, r3
 800d522:	4620      	mov	r0, r4
 800d524:	f7ff f88c 	bl	800c640 <tcp_eff_send_mss_netif>
 800d528:	4603      	mov	r3, r0
 800d52a:	461a      	mov	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d534:	009a      	lsls	r2, r3, #2
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d53a:	005b      	lsls	r3, r3, #1
 800d53c:	f241 111c 	movw	r1, #4380	; 0x111c
 800d540:	428b      	cmp	r3, r1
 800d542:	bf38      	it	cc
 800d544:	460b      	movcc	r3, r1
 800d546:	429a      	cmp	r2, r3
 800d548:	d204      	bcs.n	800d554 <tcp_process+0x210>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	b29b      	uxth	r3, r3
 800d552:	e00d      	b.n	800d570 <tcp_process+0x22c>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	f241 121c 	movw	r2, #4380	; 0x111c
 800d55e:	4293      	cmp	r3, r2
 800d560:	d904      	bls.n	800d56c <tcp_process+0x228>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d566:	005b      	lsls	r3, r3, #1
 800d568:	b29b      	uxth	r3, r3
 800d56a:	e001      	b.n	800d570 <tcp_process+0x22c>
 800d56c:	f241 131c 	movw	r3, #4380	; 0x111c
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d106      	bne.n	800d58e <tcp_process+0x24a>
 800d580:	4b13      	ldr	r3, [pc, #76]	; (800d5d0 <tcp_process+0x28c>)
 800d582:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d586:	491c      	ldr	r1, [pc, #112]	; (800d5f8 <tcp_process+0x2b4>)
 800d588:	4813      	ldr	r0, [pc, #76]	; (800d5d8 <tcp_process+0x294>)
 800d58a:	f005 ffc3 	bl	8013514 <iprintf>
        --pcb->snd_queuelen;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d594:	3b01      	subs	r3, #1
 800d596:	b29a      	uxth	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5a2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d12a      	bne.n	800d600 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5ae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d106      	bne.n	800d5c4 <tcp_process+0x280>
 800d5b6:	4b06      	ldr	r3, [pc, #24]	; (800d5d0 <tcp_process+0x28c>)
 800d5b8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d5bc:	490f      	ldr	r1, [pc, #60]	; (800d5fc <tcp_process+0x2b8>)
 800d5be:	4806      	ldr	r0, [pc, #24]	; (800d5d8 <tcp_process+0x294>)
 800d5c0:	f005 ffa8 	bl	8013514 <iprintf>
          pcb->unsent = rseg->next;
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	66da      	str	r2, [r3, #108]	; 0x6c
 800d5cc:	e01c      	b.n	800d608 <tcp_process+0x2c4>
 800d5ce:	bf00      	nop
 800d5d0:	080156e8 	.word	0x080156e8
 800d5d4:	08015920 	.word	0x08015920
 800d5d8:	08015734 	.word	0x08015734
 800d5dc:	24005d18 	.word	0x24005d18
 800d5e0:	24005d10 	.word	0x24005d10
 800d5e4:	24005d0c 	.word	0x24005d0c
 800d5e8:	0801593c 	.word	0x0801593c
 800d5ec:	24005d19 	.word	0x24005d19
 800d5f0:	2400a9b0 	.word	0x2400a9b0
 800d5f4:	24005cfc 	.word	0x24005cfc
 800d5f8:	0801595c 	.word	0x0801595c
 800d5fc:	08015974 	.word	0x08015974
        } else {
          pcb->unacked = rseg->next;
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d608:	69f8      	ldr	r0, [r7, #28]
 800d60a:	f7fe fd22 	bl	800c052 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d612:	2b00      	cmp	r3, #0
 800d614:	d104      	bne.n	800d620 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d61c:	861a      	strh	r2, [r3, #48]	; 0x30
 800d61e:	e006      	b.n	800d62e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00a      	beq.n	800d64e <tcp_process+0x30a>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	6910      	ldr	r0, [r2, #16]
 800d642:	2200      	movs	r2, #0
 800d644:	6879      	ldr	r1, [r7, #4]
 800d646:	4798      	blx	r3
 800d648:	4603      	mov	r3, r0
 800d64a:	76bb      	strb	r3, [r7, #26]
 800d64c:	e001      	b.n	800d652 <tcp_process+0x30e>
 800d64e:	2300      	movs	r3, #0
 800d650:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d652:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d656:	f113 0f0d 	cmn.w	r3, #13
 800d65a:	d102      	bne.n	800d662 <tcp_process+0x31e>
          return ERR_ABRT;
 800d65c:	f06f 030c 	mvn.w	r3, #12
 800d660:	e250      	b.n	800db04 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	8b5b      	ldrh	r3, [r3, #26]
 800d666:	f043 0302 	orr.w	r3, r3, #2
 800d66a:	b29a      	uxth	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d670:	e23a      	b.n	800dae8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d672:	4b98      	ldr	r3, [pc, #608]	; (800d8d4 <tcp_process+0x590>)
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	f003 0310 	and.w	r3, r3, #16
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f000 8234 	beq.w	800dae8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d680:	4b95      	ldr	r3, [pc, #596]	; (800d8d8 <tcp_process+0x594>)
 800d682:	6819      	ldr	r1, [r3, #0]
 800d684:	4b95      	ldr	r3, [pc, #596]	; (800d8dc <tcp_process+0x598>)
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	461a      	mov	r2, r3
 800d68a:	4b95      	ldr	r3, [pc, #596]	; (800d8e0 <tcp_process+0x59c>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d690:	4b94      	ldr	r3, [pc, #592]	; (800d8e4 <tcp_process+0x5a0>)
 800d692:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d694:	885b      	ldrh	r3, [r3, #2]
 800d696:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d698:	4a92      	ldr	r2, [pc, #584]	; (800d8e4 <tcp_process+0x5a0>)
 800d69a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d69c:	8812      	ldrh	r2, [r2, #0]
 800d69e:	b292      	uxth	r2, r2
 800d6a0:	9202      	str	r2, [sp, #8]
 800d6a2:	9301      	str	r3, [sp, #4]
 800d6a4:	4b90      	ldr	r3, [pc, #576]	; (800d8e8 <tcp_process+0x5a4>)
 800d6a6:	9300      	str	r3, [sp, #0]
 800d6a8:	4b90      	ldr	r3, [pc, #576]	; (800d8ec <tcp_process+0x5a8>)
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f002 fc85 	bl	800ffbc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6b8:	2b05      	cmp	r3, #5
 800d6ba:	f200 8215 	bhi.w	800dae8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f002 fa4f 	bl	800fb68 <tcp_rexmit_rto>
      break;
 800d6ca:	e20d      	b.n	800dae8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d6cc:	4b81      	ldr	r3, [pc, #516]	; (800d8d4 <tcp_process+0x590>)
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	f003 0310 	and.w	r3, r3, #16
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 80a1 	beq.w	800d81c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d6da:	4b7f      	ldr	r3, [pc, #508]	; (800d8d8 <tcp_process+0x594>)
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6e2:	1ad3      	subs	r3, r2, r3
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	db7e      	blt.n	800d7e8 <tcp_process+0x4a4>
 800d6ea:	4b7b      	ldr	r3, [pc, #492]	; (800d8d8 <tcp_process+0x594>)
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6f2:	1ad3      	subs	r3, r2, r3
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	dc77      	bgt.n	800d7e8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2204      	movs	r2, #4
 800d6fc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d702:	2b00      	cmp	r3, #0
 800d704:	d102      	bne.n	800d70c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d706:	23fa      	movs	r3, #250	; 0xfa
 800d708:	76bb      	strb	r3, [r7, #26]
 800d70a:	e01d      	b.n	800d748 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d710:	699b      	ldr	r3, [r3, #24]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d106      	bne.n	800d724 <tcp_process+0x3e0>
 800d716:	4b76      	ldr	r3, [pc, #472]	; (800d8f0 <tcp_process+0x5ac>)
 800d718:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d71c:	4975      	ldr	r1, [pc, #468]	; (800d8f4 <tcp_process+0x5b0>)
 800d71e:	4876      	ldr	r0, [pc, #472]	; (800d8f8 <tcp_process+0x5b4>)
 800d720:	f005 fef8 	bl	8013514 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d728:	699b      	ldr	r3, [r3, #24]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00a      	beq.n	800d744 <tcp_process+0x400>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	6910      	ldr	r0, [r2, #16]
 800d738:	2200      	movs	r2, #0
 800d73a:	6879      	ldr	r1, [r7, #4]
 800d73c:	4798      	blx	r3
 800d73e:	4603      	mov	r3, r0
 800d740:	76bb      	strb	r3, [r7, #26]
 800d742:	e001      	b.n	800d748 <tcp_process+0x404>
 800d744:	23f0      	movs	r3, #240	; 0xf0
 800d746:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d748:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00a      	beq.n	800d766 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d750:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d754:	f113 0f0d 	cmn.w	r3, #13
 800d758:	d002      	beq.n	800d760 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7fd ff8e 	bl	800b67c <tcp_abort>
            }
            return ERR_ABRT;
 800d760:	f06f 030c 	mvn.w	r3, #12
 800d764:	e1ce      	b.n	800db04 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 fae0 	bl	800dd2c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d76c:	4b63      	ldr	r3, [pc, #396]	; (800d8fc <tcp_process+0x5b8>)
 800d76e:	881b      	ldrh	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d005      	beq.n	800d780 <tcp_process+0x43c>
            recv_acked--;
 800d774:	4b61      	ldr	r3, [pc, #388]	; (800d8fc <tcp_process+0x5b8>)
 800d776:	881b      	ldrh	r3, [r3, #0]
 800d778:	3b01      	subs	r3, #1
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	4b5f      	ldr	r3, [pc, #380]	; (800d8fc <tcp_process+0x5b8>)
 800d77e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d784:	009a      	lsls	r2, r3, #2
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d78a:	005b      	lsls	r3, r3, #1
 800d78c:	f241 111c 	movw	r1, #4380	; 0x111c
 800d790:	428b      	cmp	r3, r1
 800d792:	bf38      	it	cc
 800d794:	460b      	movcc	r3, r1
 800d796:	429a      	cmp	r2, r3
 800d798:	d204      	bcs.n	800d7a4 <tcp_process+0x460>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	e00d      	b.n	800d7c0 <tcp_process+0x47c>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7a8:	005b      	lsls	r3, r3, #1
 800d7aa:	f241 121c 	movw	r2, #4380	; 0x111c
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d904      	bls.n	800d7bc <tcp_process+0x478>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7b6:	005b      	lsls	r3, r3, #1
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	e001      	b.n	800d7c0 <tcp_process+0x47c>
 800d7bc:	f241 131c 	movw	r3, #4380	; 0x111c
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d7c6:	4b4e      	ldr	r3, [pc, #312]	; (800d900 <tcp_process+0x5bc>)
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	f003 0320 	and.w	r3, r3, #32
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d037      	beq.n	800d842 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	8b5b      	ldrh	r3, [r3, #26]
 800d7d6:	f043 0302 	orr.w	r3, r3, #2
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2207      	movs	r2, #7
 800d7e4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d7e6:	e02c      	b.n	800d842 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7e8:	4b3b      	ldr	r3, [pc, #236]	; (800d8d8 <tcp_process+0x594>)
 800d7ea:	6819      	ldr	r1, [r3, #0]
 800d7ec:	4b3b      	ldr	r3, [pc, #236]	; (800d8dc <tcp_process+0x598>)
 800d7ee:	881b      	ldrh	r3, [r3, #0]
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	4b3b      	ldr	r3, [pc, #236]	; (800d8e0 <tcp_process+0x59c>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d7f8:	4b3a      	ldr	r3, [pc, #232]	; (800d8e4 <tcp_process+0x5a0>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7fc:	885b      	ldrh	r3, [r3, #2]
 800d7fe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d800:	4a38      	ldr	r2, [pc, #224]	; (800d8e4 <tcp_process+0x5a0>)
 800d802:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d804:	8812      	ldrh	r2, [r2, #0]
 800d806:	b292      	uxth	r2, r2
 800d808:	9202      	str	r2, [sp, #8]
 800d80a:	9301      	str	r3, [sp, #4]
 800d80c:	4b36      	ldr	r3, [pc, #216]	; (800d8e8 <tcp_process+0x5a4>)
 800d80e:	9300      	str	r3, [sp, #0]
 800d810:	4b36      	ldr	r3, [pc, #216]	; (800d8ec <tcp_process+0x5a8>)
 800d812:	4602      	mov	r2, r0
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f002 fbd1 	bl	800ffbc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d81a:	e167      	b.n	800daec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d81c:	4b2d      	ldr	r3, [pc, #180]	; (800d8d4 <tcp_process+0x590>)
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	f003 0302 	and.w	r3, r3, #2
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 8161 	beq.w	800daec <tcp_process+0x7a8>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82e:	1e5a      	subs	r2, r3, #1
 800d830:	4b2b      	ldr	r3, [pc, #172]	; (800d8e0 <tcp_process+0x59c>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	429a      	cmp	r2, r3
 800d836:	f040 8159 	bne.w	800daec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f002 f9b6 	bl	800fbac <tcp_rexmit>
      break;
 800d840:	e154      	b.n	800daec <tcp_process+0x7a8>
 800d842:	e153      	b.n	800daec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 fa71 	bl	800dd2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d84a:	4b2d      	ldr	r3, [pc, #180]	; (800d900 <tcp_process+0x5bc>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	f003 0320 	and.w	r3, r3, #32
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 814c 	beq.w	800daf0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	8b5b      	ldrh	r3, [r3, #26]
 800d85c:	f043 0302 	orr.w	r3, r3, #2
 800d860:	b29a      	uxth	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2207      	movs	r2, #7
 800d86a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d86c:	e140      	b.n	800daf0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fa5c 	bl	800dd2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d874:	4b22      	ldr	r3, [pc, #136]	; (800d900 <tcp_process+0x5bc>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	f003 0320 	and.w	r3, r3, #32
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d071      	beq.n	800d964 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d880:	4b14      	ldr	r3, [pc, #80]	; (800d8d4 <tcp_process+0x590>)
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	f003 0310 	and.w	r3, r3, #16
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d060      	beq.n	800d94e <tcp_process+0x60a>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d890:	4b11      	ldr	r3, [pc, #68]	; (800d8d8 <tcp_process+0x594>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	429a      	cmp	r2, r3
 800d896:	d15a      	bne.n	800d94e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d156      	bne.n	800d94e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	8b5b      	ldrh	r3, [r3, #26]
 800d8a4:	f043 0302 	orr.w	r3, r3, #2
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f7fe fdbc 	bl	800c42c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d8b4:	4b13      	ldr	r3, [pc, #76]	; (800d904 <tcp_process+0x5c0>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d105      	bne.n	800d8ca <tcp_process+0x586>
 800d8be:	4b11      	ldr	r3, [pc, #68]	; (800d904 <tcp_process+0x5c0>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	4a0f      	ldr	r2, [pc, #60]	; (800d904 <tcp_process+0x5c0>)
 800d8c6:	6013      	str	r3, [r2, #0]
 800d8c8:	e02e      	b.n	800d928 <tcp_process+0x5e4>
 800d8ca:	4b0e      	ldr	r3, [pc, #56]	; (800d904 <tcp_process+0x5c0>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	617b      	str	r3, [r7, #20]
 800d8d0:	e027      	b.n	800d922 <tcp_process+0x5de>
 800d8d2:	bf00      	nop
 800d8d4:	24005d18 	.word	0x24005d18
 800d8d8:	24005d10 	.word	0x24005d10
 800d8dc:	24005d16 	.word	0x24005d16
 800d8e0:	24005d0c 	.word	0x24005d0c
 800d8e4:	24005cfc 	.word	0x24005cfc
 800d8e8:	240078fc 	.word	0x240078fc
 800d8ec:	24007900 	.word	0x24007900
 800d8f0:	080156e8 	.word	0x080156e8
 800d8f4:	08015988 	.word	0x08015988
 800d8f8:	08015734 	.word	0x08015734
 800d8fc:	24005d14 	.word	0x24005d14
 800d900:	24005d19 	.word	0x24005d19
 800d904:	2400a9ac 	.word	0x2400a9ac
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d104      	bne.n	800d91c <tcp_process+0x5d8>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	68da      	ldr	r2, [r3, #12]
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	60da      	str	r2, [r3, #12]
 800d91a:	e005      	b.n	800d928 <tcp_process+0x5e4>
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	617b      	str	r3, [r7, #20]
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1ef      	bne.n	800d908 <tcp_process+0x5c4>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	60da      	str	r2, [r3, #12]
 800d92e:	4b77      	ldr	r3, [pc, #476]	; (800db0c <tcp_process+0x7c8>)
 800d930:	2201      	movs	r2, #1
 800d932:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	220a      	movs	r2, #10
 800d938:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d93a:	4b75      	ldr	r3, [pc, #468]	; (800db10 <tcp_process+0x7cc>)
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	60da      	str	r2, [r3, #12]
 800d942:	4a73      	ldr	r2, [pc, #460]	; (800db10 <tcp_process+0x7cc>)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	f002 fcfa 	bl	8010340 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d94c:	e0d2      	b.n	800daf4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	8b5b      	ldrh	r3, [r3, #26]
 800d952:	f043 0302 	orr.w	r3, r3, #2
 800d956:	b29a      	uxth	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2208      	movs	r2, #8
 800d960:	751a      	strb	r2, [r3, #20]
      break;
 800d962:	e0c7      	b.n	800daf4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d964:	4b6b      	ldr	r3, [pc, #428]	; (800db14 <tcp_process+0x7d0>)
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	f003 0310 	and.w	r3, r3, #16
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f000 80c1 	beq.w	800daf4 <tcp_process+0x7b0>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d976:	4b68      	ldr	r3, [pc, #416]	; (800db18 <tcp_process+0x7d4>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	f040 80ba 	bne.w	800daf4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d984:	2b00      	cmp	r3, #0
 800d986:	f040 80b5 	bne.w	800daf4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2206      	movs	r2, #6
 800d98e:	751a      	strb	r2, [r3, #20]
      break;
 800d990:	e0b0      	b.n	800daf4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 f9ca 	bl	800dd2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d998:	4b60      	ldr	r3, [pc, #384]	; (800db1c <tcp_process+0x7d8>)
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	f003 0320 	and.w	r3, r3, #32
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	f000 80a9 	beq.w	800daf8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	8b5b      	ldrh	r3, [r3, #26]
 800d9aa:	f043 0302 	orr.w	r3, r3, #2
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7fe fd39 	bl	800c42c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d9ba:	4b59      	ldr	r3, [pc, #356]	; (800db20 <tcp_process+0x7dc>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d105      	bne.n	800d9d0 <tcp_process+0x68c>
 800d9c4:	4b56      	ldr	r3, [pc, #344]	; (800db20 <tcp_process+0x7dc>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	4a55      	ldr	r2, [pc, #340]	; (800db20 <tcp_process+0x7dc>)
 800d9cc:	6013      	str	r3, [r2, #0]
 800d9ce:	e013      	b.n	800d9f8 <tcp_process+0x6b4>
 800d9d0:	4b53      	ldr	r3, [pc, #332]	; (800db20 <tcp_process+0x7dc>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	613b      	str	r3, [r7, #16]
 800d9d6:	e00c      	b.n	800d9f2 <tcp_process+0x6ae>
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d104      	bne.n	800d9ec <tcp_process+0x6a8>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	68da      	ldr	r2, [r3, #12]
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	60da      	str	r2, [r3, #12]
 800d9ea:	e005      	b.n	800d9f8 <tcp_process+0x6b4>
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	613b      	str	r3, [r7, #16]
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1ef      	bne.n	800d9d8 <tcp_process+0x694>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	60da      	str	r2, [r3, #12]
 800d9fe:	4b43      	ldr	r3, [pc, #268]	; (800db0c <tcp_process+0x7c8>)
 800da00:	2201      	movs	r2, #1
 800da02:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	220a      	movs	r2, #10
 800da08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800da0a:	4b41      	ldr	r3, [pc, #260]	; (800db10 <tcp_process+0x7cc>)
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	60da      	str	r2, [r3, #12]
 800da12:	4a3f      	ldr	r2, [pc, #252]	; (800db10 <tcp_process+0x7cc>)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6013      	str	r3, [r2, #0]
 800da18:	f002 fc92 	bl	8010340 <tcp_timer_needed>
      }
      break;
 800da1c:	e06c      	b.n	800daf8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f000 f984 	bl	800dd2c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800da24:	4b3b      	ldr	r3, [pc, #236]	; (800db14 <tcp_process+0x7d0>)
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	f003 0310 	and.w	r3, r3, #16
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d065      	beq.n	800dafc <tcp_process+0x7b8>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da34:	4b38      	ldr	r3, [pc, #224]	; (800db18 <tcp_process+0x7d4>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d15f      	bne.n	800dafc <tcp_process+0x7b8>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da40:	2b00      	cmp	r3, #0
 800da42:	d15b      	bne.n	800dafc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7fe fcf1 	bl	800c42c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800da4a:	4b35      	ldr	r3, [pc, #212]	; (800db20 <tcp_process+0x7dc>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	429a      	cmp	r2, r3
 800da52:	d105      	bne.n	800da60 <tcp_process+0x71c>
 800da54:	4b32      	ldr	r3, [pc, #200]	; (800db20 <tcp_process+0x7dc>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	4a31      	ldr	r2, [pc, #196]	; (800db20 <tcp_process+0x7dc>)
 800da5c:	6013      	str	r3, [r2, #0]
 800da5e:	e013      	b.n	800da88 <tcp_process+0x744>
 800da60:	4b2f      	ldr	r3, [pc, #188]	; (800db20 <tcp_process+0x7dc>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	60fb      	str	r3, [r7, #12]
 800da66:	e00c      	b.n	800da82 <tcp_process+0x73e>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d104      	bne.n	800da7c <tcp_process+0x738>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	68da      	ldr	r2, [r3, #12]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	60da      	str	r2, [r3, #12]
 800da7a:	e005      	b.n	800da88 <tcp_process+0x744>
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	60fb      	str	r3, [r7, #12]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1ef      	bne.n	800da68 <tcp_process+0x724>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	60da      	str	r2, [r3, #12]
 800da8e:	4b1f      	ldr	r3, [pc, #124]	; (800db0c <tcp_process+0x7c8>)
 800da90:	2201      	movs	r2, #1
 800da92:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	220a      	movs	r2, #10
 800da98:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800da9a:	4b1d      	ldr	r3, [pc, #116]	; (800db10 <tcp_process+0x7cc>)
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	60da      	str	r2, [r3, #12]
 800daa2:	4a1b      	ldr	r2, [pc, #108]	; (800db10 <tcp_process+0x7cc>)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6013      	str	r3, [r2, #0]
 800daa8:	f002 fc4a 	bl	8010340 <tcp_timer_needed>
      }
      break;
 800daac:	e026      	b.n	800dafc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 f93c 	bl	800dd2c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800dab4:	4b17      	ldr	r3, [pc, #92]	; (800db14 <tcp_process+0x7d0>)
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	f003 0310 	and.w	r3, r3, #16
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d01f      	beq.n	800db00 <tcp_process+0x7bc>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dac4:	4b14      	ldr	r3, [pc, #80]	; (800db18 <tcp_process+0x7d4>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d119      	bne.n	800db00 <tcp_process+0x7bc>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d115      	bne.n	800db00 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800dad4:	4b11      	ldr	r3, [pc, #68]	; (800db1c <tcp_process+0x7d8>)
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	f043 0310 	orr.w	r3, r3, #16
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	4b0f      	ldr	r3, [pc, #60]	; (800db1c <tcp_process+0x7d8>)
 800dae0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800dae2:	e00d      	b.n	800db00 <tcp_process+0x7bc>
    default:
      break;
 800dae4:	bf00      	nop
 800dae6:	e00c      	b.n	800db02 <tcp_process+0x7be>
      break;
 800dae8:	bf00      	nop
 800daea:	e00a      	b.n	800db02 <tcp_process+0x7be>
      break;
 800daec:	bf00      	nop
 800daee:	e008      	b.n	800db02 <tcp_process+0x7be>
      break;
 800daf0:	bf00      	nop
 800daf2:	e006      	b.n	800db02 <tcp_process+0x7be>
      break;
 800daf4:	bf00      	nop
 800daf6:	e004      	b.n	800db02 <tcp_process+0x7be>
      break;
 800daf8:	bf00      	nop
 800dafa:	e002      	b.n	800db02 <tcp_process+0x7be>
      break;
 800dafc:	bf00      	nop
 800dafe:	e000      	b.n	800db02 <tcp_process+0x7be>
      break;
 800db00:	bf00      	nop
  }
  return ERR_OK;
 800db02:	2300      	movs	r3, #0
}
 800db04:	4618      	mov	r0, r3
 800db06:	3724      	adds	r7, #36	; 0x24
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd90      	pop	{r4, r7, pc}
 800db0c:	2400a9a8 	.word	0x2400a9a8
 800db10:	2400a9bc 	.word	0x2400a9bc
 800db14:	24005d18 	.word	0x24005d18
 800db18:	24005d10 	.word	0x24005d10
 800db1c:	24005d19 	.word	0x24005d19
 800db20:	2400a9ac 	.word	0x2400a9ac

0800db24 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800db24:	b590      	push	{r4, r7, lr}
 800db26:	b085      	sub	sp, #20
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d106      	bne.n	800db42 <tcp_oos_insert_segment+0x1e>
 800db34:	4b3b      	ldr	r3, [pc, #236]	; (800dc24 <tcp_oos_insert_segment+0x100>)
 800db36:	f240 421f 	movw	r2, #1055	; 0x41f
 800db3a:	493b      	ldr	r1, [pc, #236]	; (800dc28 <tcp_oos_insert_segment+0x104>)
 800db3c:	483b      	ldr	r0, [pc, #236]	; (800dc2c <tcp_oos_insert_segment+0x108>)
 800db3e:	f005 fce9 	bl	8013514 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	899b      	ldrh	r3, [r3, #12]
 800db48:	b29b      	uxth	r3, r3
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fb fb58 	bl	8009200 <lwip_htons>
 800db50:	4603      	mov	r3, r0
 800db52:	b2db      	uxtb	r3, r3
 800db54:	f003 0301 	and.w	r3, r3, #1
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d028      	beq.n	800dbae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800db5c:	6838      	ldr	r0, [r7, #0]
 800db5e:	f7fe fa63 	bl	800c028 <tcp_segs_free>
    next = NULL;
 800db62:	2300      	movs	r3, #0
 800db64:	603b      	str	r3, [r7, #0]
 800db66:	e056      	b.n	800dc16 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	899b      	ldrh	r3, [r3, #12]
 800db6e:	b29b      	uxth	r3, r3
 800db70:	4618      	mov	r0, r3
 800db72:	f7fb fb45 	bl	8009200 <lwip_htons>
 800db76:	4603      	mov	r3, r0
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00d      	beq.n	800db9e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	899b      	ldrh	r3, [r3, #12]
 800db88:	b29c      	uxth	r4, r3
 800db8a:	2001      	movs	r0, #1
 800db8c:	f7fb fb38 	bl	8009200 <lwip_htons>
 800db90:	4603      	mov	r3, r0
 800db92:	461a      	mov	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	4322      	orrs	r2, r4
 800db9a:	b292      	uxth	r2, r2
 800db9c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f7fe fa52 	bl	800c052 <tcp_seg_free>
    while (next &&
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00e      	beq.n	800dbd2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	891b      	ldrh	r3, [r3, #8]
 800dbb8:	461a      	mov	r2, r3
 800dbba:	4b1d      	ldr	r3, [pc, #116]	; (800dc30 <tcp_oos_insert_segment+0x10c>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	441a      	add	r2, r3
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	6839      	ldr	r1, [r7, #0]
 800dbc8:	8909      	ldrh	r1, [r1, #8]
 800dbca:	440b      	add	r3, r1
 800dbcc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	daca      	bge.n	800db68 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d01e      	beq.n	800dc16 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	891b      	ldrh	r3, [r3, #8]
 800dbdc:	461a      	mov	r2, r3
 800dbde:	4b14      	ldr	r3, [pc, #80]	; (800dc30 <tcp_oos_insert_segment+0x10c>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	441a      	add	r2, r3
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	68db      	ldr	r3, [r3, #12]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	1ad3      	subs	r3, r2, r3
    if (next &&
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	dd12      	ble.n	800dc16 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	b29a      	uxth	r2, r3
 800dbf8:	4b0d      	ldr	r3, [pc, #52]	; (800dc30 <tcp_oos_insert_segment+0x10c>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	1ad3      	subs	r3, r2, r3
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	685a      	ldr	r2, [r3, #4]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	891b      	ldrh	r3, [r3, #8]
 800dc0e:	4619      	mov	r1, r3
 800dc10:	4610      	mov	r0, r2
 800dc12:	f7fc fe19 	bl	800a848 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	683a      	ldr	r2, [r7, #0]
 800dc1a:	601a      	str	r2, [r3, #0]
}
 800dc1c:	bf00      	nop
 800dc1e:	3714      	adds	r7, #20
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd90      	pop	{r4, r7, pc}
 800dc24:	080156e8 	.word	0x080156e8
 800dc28:	080159a8 	.word	0x080159a8
 800dc2c:	08015734 	.word	0x08015734
 800dc30:	24005d0c 	.word	0x24005d0c

0800dc34 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800dc34:	b5b0      	push	{r4, r5, r7, lr}
 800dc36:	b086      	sub	sp, #24
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
 800dc40:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800dc42:	e03e      	b.n	800dcc2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fd f80c 	bl	800ac70 <pbuf_clen>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc62:	8a7a      	ldrh	r2, [r7, #18]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d906      	bls.n	800dc76 <tcp_free_acked_segments+0x42>
 800dc68:	4b2a      	ldr	r3, [pc, #168]	; (800dd14 <tcp_free_acked_segments+0xe0>)
 800dc6a:	f240 4257 	movw	r2, #1111	; 0x457
 800dc6e:	492a      	ldr	r1, [pc, #168]	; (800dd18 <tcp_free_acked_segments+0xe4>)
 800dc70:	482a      	ldr	r0, [pc, #168]	; (800dd1c <tcp_free_acked_segments+0xe8>)
 800dc72:	f005 fc4f 	bl	8013514 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800dc7c:	8a7b      	ldrh	r3, [r7, #18]
 800dc7e:	1ad3      	subs	r3, r2, r3
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	891a      	ldrh	r2, [r3, #8]
 800dc8c:	4b24      	ldr	r3, [pc, #144]	; (800dd20 <tcp_free_acked_segments+0xec>)
 800dc8e:	881b      	ldrh	r3, [r3, #0]
 800dc90:	4413      	add	r3, r2
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	4b22      	ldr	r3, [pc, #136]	; (800dd20 <tcp_free_acked_segments+0xec>)
 800dc96:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800dc98:	6978      	ldr	r0, [r7, #20]
 800dc9a:	f7fe f9da 	bl	800c052 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00c      	beq.n	800dcc2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d109      	bne.n	800dcc2 <tcp_free_acked_segments+0x8e>
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d106      	bne.n	800dcc2 <tcp_free_acked_segments+0x8e>
 800dcb4:	4b17      	ldr	r3, [pc, #92]	; (800dd14 <tcp_free_acked_segments+0xe0>)
 800dcb6:	f240 4261 	movw	r2, #1121	; 0x461
 800dcba:	491a      	ldr	r1, [pc, #104]	; (800dd24 <tcp_free_acked_segments+0xf0>)
 800dcbc:	4817      	ldr	r0, [pc, #92]	; (800dd1c <tcp_free_acked_segments+0xe8>)
 800dcbe:	f005 fc29 	bl	8013514 <iprintf>
  while (seg_list != NULL &&
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d020      	beq.n	800dd0a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	68db      	ldr	r3, [r3, #12]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fb faab 	bl	800922a <lwip_htonl>
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	891b      	ldrh	r3, [r3, #8]
 800dcda:	461d      	mov	r5, r3
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	899b      	ldrh	r3, [r3, #12]
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7fb fa8b 	bl	8009200 <lwip_htons>
 800dcea:	4603      	mov	r3, r0
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	f003 0303 	and.w	r3, r3, #3
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d001      	beq.n	800dcfa <tcp_free_acked_segments+0xc6>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e000      	b.n	800dcfc <tcp_free_acked_segments+0xc8>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	442b      	add	r3, r5
 800dcfe:	18e2      	adds	r2, r4, r3
 800dd00:	4b09      	ldr	r3, [pc, #36]	; (800dd28 <tcp_free_acked_segments+0xf4>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	dd9c      	ble.n	800dc44 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800dd0a:	68bb      	ldr	r3, [r7, #8]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3718      	adds	r7, #24
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bdb0      	pop	{r4, r5, r7, pc}
 800dd14:	080156e8 	.word	0x080156e8
 800dd18:	080159d0 	.word	0x080159d0
 800dd1c:	08015734 	.word	0x08015734
 800dd20:	24005d14 	.word	0x24005d14
 800dd24:	080159f8 	.word	0x080159f8
 800dd28:	24005d10 	.word	0x24005d10

0800dd2c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800dd2c:	b5b0      	push	{r4, r5, r7, lr}
 800dd2e:	b094      	sub	sp, #80	; 0x50
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800dd34:	2300      	movs	r3, #0
 800dd36:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d106      	bne.n	800dd4c <tcp_receive+0x20>
 800dd3e:	4b91      	ldr	r3, [pc, #580]	; (800df84 <tcp_receive+0x258>)
 800dd40:	f240 427b 	movw	r2, #1147	; 0x47b
 800dd44:	4990      	ldr	r1, [pc, #576]	; (800df88 <tcp_receive+0x25c>)
 800dd46:	4891      	ldr	r0, [pc, #580]	; (800df8c <tcp_receive+0x260>)
 800dd48:	f005 fbe4 	bl	8013514 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	7d1b      	ldrb	r3, [r3, #20]
 800dd50:	2b03      	cmp	r3, #3
 800dd52:	d806      	bhi.n	800dd62 <tcp_receive+0x36>
 800dd54:	4b8b      	ldr	r3, [pc, #556]	; (800df84 <tcp_receive+0x258>)
 800dd56:	f240 427c 	movw	r2, #1148	; 0x47c
 800dd5a:	498d      	ldr	r1, [pc, #564]	; (800df90 <tcp_receive+0x264>)
 800dd5c:	488b      	ldr	r0, [pc, #556]	; (800df8c <tcp_receive+0x260>)
 800dd5e:	f005 fbd9 	bl	8013514 <iprintf>

  if (flags & TCP_ACK) {
 800dd62:	4b8c      	ldr	r3, [pc, #560]	; (800df94 <tcp_receive+0x268>)
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	f003 0310 	and.w	r3, r3, #16
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f000 8264 	beq.w	800e238 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd76:	461a      	mov	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd7c:	4413      	add	r3, r2
 800dd7e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd84:	4b84      	ldr	r3, [pc, #528]	; (800df98 <tcp_receive+0x26c>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	1ad3      	subs	r3, r2, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	db1b      	blt.n	800ddc6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd92:	4b81      	ldr	r3, [pc, #516]	; (800df98 <tcp_receive+0x26c>)
 800dd94:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d106      	bne.n	800dda8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dd9e:	4b7f      	ldr	r3, [pc, #508]	; (800df9c <tcp_receive+0x270>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	db0e      	blt.n	800ddc6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ddac:	4b7b      	ldr	r3, [pc, #492]	; (800df9c <tcp_receive+0x270>)
 800ddae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d125      	bne.n	800de00 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ddb4:	4b7a      	ldr	r3, [pc, #488]	; (800dfa0 <tcp_receive+0x274>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	89db      	ldrh	r3, [r3, #14]
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d91c      	bls.n	800de00 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ddc6:	4b76      	ldr	r3, [pc, #472]	; (800dfa0 <tcp_receive+0x274>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	89db      	ldrh	r3, [r3, #14]
 800ddcc:	b29a      	uxth	r2, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d205      	bcs.n	800ddf0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ddf0:	4b69      	ldr	r3, [pc, #420]	; (800df98 <tcp_receive+0x26c>)
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ddf8:	4b68      	ldr	r3, [pc, #416]	; (800df9c <tcp_receive+0x270>)
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800de00:	4b66      	ldr	r3, [pc, #408]	; (800df9c <tcp_receive+0x270>)
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	dc58      	bgt.n	800dec0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800de0e:	4b65      	ldr	r3, [pc, #404]	; (800dfa4 <tcp_receive+0x278>)
 800de10:	881b      	ldrh	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d14b      	bne.n	800deae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800de20:	4413      	add	r3, r2
 800de22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de24:	429a      	cmp	r2, r3
 800de26:	d142      	bne.n	800deae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800de2e:	2b00      	cmp	r3, #0
 800de30:	db3d      	blt.n	800deae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de36:	4b59      	ldr	r3, [pc, #356]	; (800df9c <tcp_receive+0x270>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d137      	bne.n	800deae <tcp_receive+0x182>
              found_dupack = 1;
 800de3e:	2301      	movs	r3, #1
 800de40:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800de48:	2bff      	cmp	r3, #255	; 0xff
 800de4a:	d007      	beq.n	800de5c <tcp_receive+0x130>
                ++pcb->dupacks;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800de52:	3301      	adds	r3, #1
 800de54:	b2da      	uxtb	r2, r3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800de62:	2b03      	cmp	r3, #3
 800de64:	d91b      	bls.n	800de9e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de70:	4413      	add	r3, r2
 800de72:	b29a      	uxth	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d30a      	bcc.n	800de94 <tcp_receive+0x168>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de88:	4413      	add	r3, r2
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800de92:	e004      	b.n	800de9e <tcp_receive+0x172>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dea4:	2b02      	cmp	r3, #2
 800dea6:	d902      	bls.n	800deae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f001 feeb 	bl	800fc84 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800deae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f040 8161 	bne.w	800e178 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800debe:	e15b      	b.n	800e178 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dec0:	4b36      	ldr	r3, [pc, #216]	; (800df9c <tcp_receive+0x270>)
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dec8:	1ad3      	subs	r3, r2, r3
 800deca:	3b01      	subs	r3, #1
 800decc:	2b00      	cmp	r3, #0
 800dece:	f2c0 814e 	blt.w	800e16e <tcp_receive+0x442>
 800ded2:	4b32      	ldr	r3, [pc, #200]	; (800df9c <tcp_receive+0x270>)
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deda:	1ad3      	subs	r3, r2, r3
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f300 8146 	bgt.w	800e16e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	8b5b      	ldrh	r3, [r3, #26]
 800dee6:	f003 0304 	and.w	r3, r3, #4
 800deea:	2b00      	cmp	r3, #0
 800deec:	d010      	beq.n	800df10 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	8b5b      	ldrh	r3, [r3, #26]
 800def2:	f023 0304 	bic.w	r3, r3, #4
 800def6:	b29a      	uxth	r2, r3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800df1e:	10db      	asrs	r3, r3, #3
 800df20:	b21b      	sxth	r3, r3
 800df22:	b29a      	uxth	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	4413      	add	r3, r2
 800df2e:	b29b      	uxth	r3, r3
 800df30:	b21a      	sxth	r2, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800df38:	4b18      	ldr	r3, [pc, #96]	; (800df9c <tcp_receive+0x270>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df42:	b29b      	uxth	r3, r3
 800df44:	1ad3      	subs	r3, r2, r3
 800df46:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800df50:	4b12      	ldr	r3, [pc, #72]	; (800df9c <tcp_receive+0x270>)
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	7d1b      	ldrb	r3, [r3, #20]
 800df5c:	2b03      	cmp	r3, #3
 800df5e:	f240 8097 	bls.w	800e090 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800df6e:	429a      	cmp	r2, r3
 800df70:	d245      	bcs.n	800dffe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	8b5b      	ldrh	r3, [r3, #26]
 800df76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d014      	beq.n	800dfa8 <tcp_receive+0x27c>
 800df7e:	2301      	movs	r3, #1
 800df80:	e013      	b.n	800dfaa <tcp_receive+0x27e>
 800df82:	bf00      	nop
 800df84:	080156e8 	.word	0x080156e8
 800df88:	08015a18 	.word	0x08015a18
 800df8c:	08015734 	.word	0x08015734
 800df90:	08015a34 	.word	0x08015a34
 800df94:	24005d18 	.word	0x24005d18
 800df98:	24005d0c 	.word	0x24005d0c
 800df9c:	24005d10 	.word	0x24005d10
 800dfa0:	24005cfc 	.word	0x24005cfc
 800dfa4:	24005d16 	.word	0x24005d16
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800dfae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfb8:	fb12 f303 	smulbb	r3, r2, r3
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	bf28      	it	cs
 800dfc4:	4613      	movcs	r3, r2
 800dfc6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dfce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dfd0:	4413      	add	r3, r2
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d309      	bcc.n	800dff2 <tcp_receive+0x2c6>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dfe4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dfe6:	4413      	add	r3, r2
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dff0:	e04e      	b.n	800e090 <tcp_receive+0x364>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dff8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dffc:	e048      	b.n	800e090 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e004:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e006:	4413      	add	r3, r2
 800e008:	b29a      	uxth	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e010:	429a      	cmp	r2, r3
 800e012:	d309      	bcc.n	800e028 <tcp_receive+0x2fc>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e01a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e01c:	4413      	add	r3, r2
 800e01e:	b29a      	uxth	r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e026:	e004      	b.n	800e032 <tcp_receive+0x306>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e02e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e03e:	429a      	cmp	r2, r3
 800e040:	d326      	bcc.n	800e090 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	b29a      	uxth	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e062:	4413      	add	r3, r2
 800e064:	b29a      	uxth	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d30a      	bcc.n	800e086 <tcp_receive+0x35a>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e07a:	4413      	add	r3, r2
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e084:	e004      	b.n	800e090 <tcp_receive+0x364>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e08c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e098:	4a98      	ldr	r2, [pc, #608]	; (800e2fc <tcp_receive+0x5d0>)
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f7ff fdca 	bl	800dc34 <tcp_free_acked_segments>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ae:	4a94      	ldr	r2, [pc, #592]	; (800e300 <tcp_receive+0x5d4>)
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f7ff fdbf 	bl	800dc34 <tcp_free_acked_segments>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d104      	bne.n	800e0ce <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0ca:	861a      	strh	r2, [r3, #48]	; 0x30
 800e0cc:	e002      	b.n	800e0d4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d103      	bne.n	800e0ea <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e0f0:	4b84      	ldr	r3, [pc, #528]	; (800e304 <tcp_receive+0x5d8>)
 800e0f2:	881b      	ldrh	r3, [r3, #0]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	8b5b      	ldrh	r3, [r3, #26]
 800e102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e106:	2b00      	cmp	r3, #0
 800e108:	d035      	beq.n	800e176 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d118      	bne.n	800e144 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00c      	beq.n	800e134 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	4618      	mov	r0, r3
 800e128:	f7fb f87f 	bl	800922a <lwip_htonl>
 800e12c:	4603      	mov	r3, r0
 800e12e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e130:	2b00      	cmp	r3, #0
 800e132:	dc20      	bgt.n	800e176 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	8b5b      	ldrh	r3, [r3, #26]
 800e138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e142:	e018      	b.n	800e176 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	4618      	mov	r0, r3
 800e152:	f7fb f86a 	bl	800922a <lwip_htonl>
 800e156:	4603      	mov	r3, r0
 800e158:	1ae3      	subs	r3, r4, r3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	dc0b      	bgt.n	800e176 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	8b5b      	ldrh	r3, [r3, #26]
 800e162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e166:	b29a      	uxth	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e16c:	e003      	b.n	800e176 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f001 ff76 	bl	8010060 <tcp_send_empty_ack>
 800e174:	e000      	b.n	800e178 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e176:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d05b      	beq.n	800e238 <tcp_receive+0x50c>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e184:	4b60      	ldr	r3, [pc, #384]	; (800e308 <tcp_receive+0x5dc>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	da54      	bge.n	800e238 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e18e:	4b5f      	ldr	r3, [pc, #380]	; (800e30c <tcp_receive+0x5e0>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	b29a      	uxth	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e198:	b29b      	uxth	r3, r3
 800e19a:	1ad3      	subs	r3, r2, r3
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e1a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e1ac:	10db      	asrs	r3, r3, #3
 800e1ae:	b21b      	sxth	r3, r3
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	1ad3      	subs	r3, r2, r3
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e1c0:	b29a      	uxth	r2, r3
 800e1c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e1c6:	4413      	add	r3, r2
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	b21a      	sxth	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e1d0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	da05      	bge.n	800e1e4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e1d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e1dc:	425b      	negs	r3, r3
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e1e4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e1ee:	109b      	asrs	r3, r3, #2
 800e1f0:	b21b      	sxth	r3, r3
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	1ad3      	subs	r3, r2, r3
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e202:	b29a      	uxth	r2, r3
 800e204:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e208:	4413      	add	r3, r2
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	b21a      	sxth	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e218:	10db      	asrs	r3, r3, #3
 800e21a:	b21b      	sxth	r3, r3
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e224:	b29b      	uxth	r3, r3
 800e226:	4413      	add	r3, r2
 800e228:	b29b      	uxth	r3, r3
 800e22a:	b21a      	sxth	r2, r3
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2200      	movs	r2, #0
 800e236:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e238:	4b35      	ldr	r3, [pc, #212]	; (800e310 <tcp_receive+0x5e4>)
 800e23a:	881b      	ldrh	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f000 84e2 	beq.w	800ec06 <tcp_receive+0xeda>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	7d1b      	ldrb	r3, [r3, #20]
 800e246:	2b06      	cmp	r3, #6
 800e248:	f200 84dd 	bhi.w	800ec06 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e250:	4b30      	ldr	r3, [pc, #192]	; (800e314 <tcp_receive+0x5e8>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	1ad3      	subs	r3, r2, r3
 800e256:	3b01      	subs	r3, #1
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f2c0 808f 	blt.w	800e37c <tcp_receive+0x650>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e262:	4b2b      	ldr	r3, [pc, #172]	; (800e310 <tcp_receive+0x5e4>)
 800e264:	881b      	ldrh	r3, [r3, #0]
 800e266:	4619      	mov	r1, r3
 800e268:	4b2a      	ldr	r3, [pc, #168]	; (800e314 <tcp_receive+0x5e8>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	440b      	add	r3, r1
 800e26e:	1ad3      	subs	r3, r2, r3
 800e270:	3301      	adds	r3, #1
 800e272:	2b00      	cmp	r3, #0
 800e274:	f300 8082 	bgt.w	800e37c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e278:	4b27      	ldr	r3, [pc, #156]	; (800e318 <tcp_receive+0x5ec>)
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e282:	4b24      	ldr	r3, [pc, #144]	; (800e314 <tcp_receive+0x5e8>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	1ad3      	subs	r3, r2, r3
 800e288:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e28a:	4b23      	ldr	r3, [pc, #140]	; (800e318 <tcp_receive+0x5ec>)
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d106      	bne.n	800e2a0 <tcp_receive+0x574>
 800e292:	4b22      	ldr	r3, [pc, #136]	; (800e31c <tcp_receive+0x5f0>)
 800e294:	f240 5294 	movw	r2, #1428	; 0x594
 800e298:	4921      	ldr	r1, [pc, #132]	; (800e320 <tcp_receive+0x5f4>)
 800e29a:	4822      	ldr	r0, [pc, #136]	; (800e324 <tcp_receive+0x5f8>)
 800e29c:	f005 f93a 	bl	8013514 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d906      	bls.n	800e2b8 <tcp_receive+0x58c>
 800e2aa:	4b1c      	ldr	r3, [pc, #112]	; (800e31c <tcp_receive+0x5f0>)
 800e2ac:	f240 5295 	movw	r2, #1429	; 0x595
 800e2b0:	491d      	ldr	r1, [pc, #116]	; (800e328 <tcp_receive+0x5fc>)
 800e2b2:	481c      	ldr	r0, [pc, #112]	; (800e324 <tcp_receive+0x5f8>)
 800e2b4:	f005 f92e 	bl	8013514 <iprintf>
      off = (u16_t)off32;
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e2be:	4b16      	ldr	r3, [pc, #88]	; (800e318 <tcp_receive+0x5ec>)
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	891b      	ldrh	r3, [r3, #8]
 800e2c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d906      	bls.n	800e2da <tcp_receive+0x5ae>
 800e2cc:	4b13      	ldr	r3, [pc, #76]	; (800e31c <tcp_receive+0x5f0>)
 800e2ce:	f240 5297 	movw	r2, #1431	; 0x597
 800e2d2:	4916      	ldr	r1, [pc, #88]	; (800e32c <tcp_receive+0x600>)
 800e2d4:	4813      	ldr	r0, [pc, #76]	; (800e324 <tcp_receive+0x5f8>)
 800e2d6:	f005 f91d 	bl	8013514 <iprintf>
      inseg.len -= off;
 800e2da:	4b0f      	ldr	r3, [pc, #60]	; (800e318 <tcp_receive+0x5ec>)
 800e2dc:	891a      	ldrh	r2, [r3, #8]
 800e2de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e2e2:	1ad3      	subs	r3, r2, r3
 800e2e4:	b29a      	uxth	r2, r3
 800e2e6:	4b0c      	ldr	r3, [pc, #48]	; (800e318 <tcp_receive+0x5ec>)
 800e2e8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e2ea:	4b0b      	ldr	r3, [pc, #44]	; (800e318 <tcp_receive+0x5ec>)
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	891a      	ldrh	r2, [r3, #8]
 800e2f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e2f4:	1ad3      	subs	r3, r2, r3
 800e2f6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e2f8:	e02a      	b.n	800e350 <tcp_receive+0x624>
 800e2fa:	bf00      	nop
 800e2fc:	08015a50 	.word	0x08015a50
 800e300:	08015a58 	.word	0x08015a58
 800e304:	24005d14 	.word	0x24005d14
 800e308:	24005d10 	.word	0x24005d10
 800e30c:	2400a9b0 	.word	0x2400a9b0
 800e310:	24005d16 	.word	0x24005d16
 800e314:	24005d0c 	.word	0x24005d0c
 800e318:	24005cec 	.word	0x24005cec
 800e31c:	080156e8 	.word	0x080156e8
 800e320:	08015a60 	.word	0x08015a60
 800e324:	08015734 	.word	0x08015734
 800e328:	08015a70 	.word	0x08015a70
 800e32c:	08015a80 	.word	0x08015a80
        off -= p->len;
 800e330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e332:	895b      	ldrh	r3, [r3, #10]
 800e334:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e33e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e340:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e342:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e346:	2200      	movs	r2, #0
 800e348:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e34a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e352:	895b      	ldrh	r3, [r3, #10]
 800e354:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e358:	429a      	cmp	r2, r3
 800e35a:	d8e9      	bhi.n	800e330 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e35c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e360:	4619      	mov	r1, r3
 800e362:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e364:	f7fc fb70 	bl	800aa48 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36c:	4a91      	ldr	r2, [pc, #580]	; (800e5b4 <tcp_receive+0x888>)
 800e36e:	6013      	str	r3, [r2, #0]
 800e370:	4b91      	ldr	r3, [pc, #580]	; (800e5b8 <tcp_receive+0x88c>)
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	4a8f      	ldr	r2, [pc, #572]	; (800e5b4 <tcp_receive+0x888>)
 800e376:	6812      	ldr	r2, [r2, #0]
 800e378:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e37a:	e00d      	b.n	800e398 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e37c:	4b8d      	ldr	r3, [pc, #564]	; (800e5b4 <tcp_receive+0x888>)
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e384:	1ad3      	subs	r3, r2, r3
 800e386:	2b00      	cmp	r3, #0
 800e388:	da06      	bge.n	800e398 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	8b5b      	ldrh	r3, [r3, #26]
 800e38e:	f043 0302 	orr.w	r3, r3, #2
 800e392:	b29a      	uxth	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e398:	4b86      	ldr	r3, [pc, #536]	; (800e5b4 <tcp_receive+0x888>)
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a0:	1ad3      	subs	r3, r2, r3
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f2c0 842a 	blt.w	800ebfc <tcp_receive+0xed0>
 800e3a8:	4b82      	ldr	r3, [pc, #520]	; (800e5b4 <tcp_receive+0x888>)
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b0:	6879      	ldr	r1, [r7, #4]
 800e3b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e3b4:	440b      	add	r3, r1
 800e3b6:	1ad3      	subs	r3, r2, r3
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	f300 841e 	bgt.w	800ebfc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3c4:	4b7b      	ldr	r3, [pc, #492]	; (800e5b4 <tcp_receive+0x888>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	f040 829a 	bne.w	800e902 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e3ce:	4b7a      	ldr	r3, [pc, #488]	; (800e5b8 <tcp_receive+0x88c>)
 800e3d0:	891c      	ldrh	r4, [r3, #8]
 800e3d2:	4b79      	ldr	r3, [pc, #484]	; (800e5b8 <tcp_receive+0x88c>)
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	899b      	ldrh	r3, [r3, #12]
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fa ff10 	bl	8009200 <lwip_htons>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	f003 0303 	and.w	r3, r3, #3
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d001      	beq.n	800e3f0 <tcp_receive+0x6c4>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e000      	b.n	800e3f2 <tcp_receive+0x6c6>
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	4423      	add	r3, r4
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	4b71      	ldr	r3, [pc, #452]	; (800e5bc <tcp_receive+0x890>)
 800e3f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e3fe:	4b6f      	ldr	r3, [pc, #444]	; (800e5bc <tcp_receive+0x890>)
 800e400:	881b      	ldrh	r3, [r3, #0]
 800e402:	429a      	cmp	r2, r3
 800e404:	d275      	bcs.n	800e4f2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e406:	4b6c      	ldr	r3, [pc, #432]	; (800e5b8 <tcp_receive+0x88c>)
 800e408:	68db      	ldr	r3, [r3, #12]
 800e40a:	899b      	ldrh	r3, [r3, #12]
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fa fef6 	bl	8009200 <lwip_htons>
 800e414:	4603      	mov	r3, r0
 800e416:	b2db      	uxtb	r3, r3
 800e418:	f003 0301 	and.w	r3, r3, #1
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d01f      	beq.n	800e460 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e420:	4b65      	ldr	r3, [pc, #404]	; (800e5b8 <tcp_receive+0x88c>)
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	899b      	ldrh	r3, [r3, #12]
 800e426:	b29b      	uxth	r3, r3
 800e428:	b21b      	sxth	r3, r3
 800e42a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e42e:	b21c      	sxth	r4, r3
 800e430:	4b61      	ldr	r3, [pc, #388]	; (800e5b8 <tcp_receive+0x88c>)
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	899b      	ldrh	r3, [r3, #12]
 800e436:	b29b      	uxth	r3, r3
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fa fee1 	bl	8009200 <lwip_htons>
 800e43e:	4603      	mov	r3, r0
 800e440:	b2db      	uxtb	r3, r3
 800e442:	b29b      	uxth	r3, r3
 800e444:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e448:	b29b      	uxth	r3, r3
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fa fed8 	bl	8009200 <lwip_htons>
 800e450:	4603      	mov	r3, r0
 800e452:	b21b      	sxth	r3, r3
 800e454:	4323      	orrs	r3, r4
 800e456:	b21a      	sxth	r2, r3
 800e458:	4b57      	ldr	r3, [pc, #348]	; (800e5b8 <tcp_receive+0x88c>)
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	b292      	uxth	r2, r2
 800e45e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e464:	4b54      	ldr	r3, [pc, #336]	; (800e5b8 <tcp_receive+0x88c>)
 800e466:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e468:	4b53      	ldr	r3, [pc, #332]	; (800e5b8 <tcp_receive+0x88c>)
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	899b      	ldrh	r3, [r3, #12]
 800e46e:	b29b      	uxth	r3, r3
 800e470:	4618      	mov	r0, r3
 800e472:	f7fa fec5 	bl	8009200 <lwip_htons>
 800e476:	4603      	mov	r3, r0
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	f003 0302 	and.w	r3, r3, #2
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d005      	beq.n	800e48e <tcp_receive+0x762>
            inseg.len -= 1;
 800e482:	4b4d      	ldr	r3, [pc, #308]	; (800e5b8 <tcp_receive+0x88c>)
 800e484:	891b      	ldrh	r3, [r3, #8]
 800e486:	3b01      	subs	r3, #1
 800e488:	b29a      	uxth	r2, r3
 800e48a:	4b4b      	ldr	r3, [pc, #300]	; (800e5b8 <tcp_receive+0x88c>)
 800e48c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e48e:	4b4a      	ldr	r3, [pc, #296]	; (800e5b8 <tcp_receive+0x88c>)
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	4a49      	ldr	r2, [pc, #292]	; (800e5b8 <tcp_receive+0x88c>)
 800e494:	8912      	ldrh	r2, [r2, #8]
 800e496:	4611      	mov	r1, r2
 800e498:	4618      	mov	r0, r3
 800e49a:	f7fc f9d5 	bl	800a848 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e49e:	4b46      	ldr	r3, [pc, #280]	; (800e5b8 <tcp_receive+0x88c>)
 800e4a0:	891c      	ldrh	r4, [r3, #8]
 800e4a2:	4b45      	ldr	r3, [pc, #276]	; (800e5b8 <tcp_receive+0x88c>)
 800e4a4:	68db      	ldr	r3, [r3, #12]
 800e4a6:	899b      	ldrh	r3, [r3, #12]
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fa fea8 	bl	8009200 <lwip_htons>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	f003 0303 	and.w	r3, r3, #3
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d001      	beq.n	800e4c0 <tcp_receive+0x794>
 800e4bc:	2301      	movs	r3, #1
 800e4be:	e000      	b.n	800e4c2 <tcp_receive+0x796>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	4423      	add	r3, r4
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	4b3d      	ldr	r3, [pc, #244]	; (800e5bc <tcp_receive+0x890>)
 800e4c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e4ca:	4b3c      	ldr	r3, [pc, #240]	; (800e5bc <tcp_receive+0x890>)
 800e4cc:	881b      	ldrh	r3, [r3, #0]
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	4b38      	ldr	r3, [pc, #224]	; (800e5b4 <tcp_receive+0x888>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	441a      	add	r2, r3
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4da:	6879      	ldr	r1, [r7, #4]
 800e4dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e4de:	440b      	add	r3, r1
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d006      	beq.n	800e4f2 <tcp_receive+0x7c6>
 800e4e4:	4b36      	ldr	r3, [pc, #216]	; (800e5c0 <tcp_receive+0x894>)
 800e4e6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e4ea:	4936      	ldr	r1, [pc, #216]	; (800e5c4 <tcp_receive+0x898>)
 800e4ec:	4836      	ldr	r0, [pc, #216]	; (800e5c8 <tcp_receive+0x89c>)
 800e4ee:	f005 f811 	bl	8013514 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	f000 80e7 	beq.w	800e6ca <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e4fc:	4b2e      	ldr	r3, [pc, #184]	; (800e5b8 <tcp_receive+0x88c>)
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	899b      	ldrh	r3, [r3, #12]
 800e502:	b29b      	uxth	r3, r3
 800e504:	4618      	mov	r0, r3
 800e506:	f7fa fe7b 	bl	8009200 <lwip_htons>
 800e50a:	4603      	mov	r3, r0
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	f003 0301 	and.w	r3, r3, #1
 800e512:	2b00      	cmp	r3, #0
 800e514:	d010      	beq.n	800e538 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e516:	e00a      	b.n	800e52e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e51c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f7fd fd92 	bl	800c052 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1f0      	bne.n	800e518 <tcp_receive+0x7ec>
 800e536:	e0c8      	b.n	800e6ca <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e53c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e53e:	e052      	b.n	800e5e6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	899b      	ldrh	r3, [r3, #12]
 800e546:	b29b      	uxth	r3, r3
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fa fe59 	bl	8009200 <lwip_htons>
 800e54e:	4603      	mov	r3, r0
 800e550:	b2db      	uxtb	r3, r3
 800e552:	f003 0301 	and.w	r3, r3, #1
 800e556:	2b00      	cmp	r3, #0
 800e558:	d03d      	beq.n	800e5d6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e55a:	4b17      	ldr	r3, [pc, #92]	; (800e5b8 <tcp_receive+0x88c>)
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	899b      	ldrh	r3, [r3, #12]
 800e560:	b29b      	uxth	r3, r3
 800e562:	4618      	mov	r0, r3
 800e564:	f7fa fe4c 	bl	8009200 <lwip_htons>
 800e568:	4603      	mov	r3, r0
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e570:	2b00      	cmp	r3, #0
 800e572:	d130      	bne.n	800e5d6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e574:	4b10      	ldr	r3, [pc, #64]	; (800e5b8 <tcp_receive+0x88c>)
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	899b      	ldrh	r3, [r3, #12]
 800e57a:	b29c      	uxth	r4, r3
 800e57c:	2001      	movs	r0, #1
 800e57e:	f7fa fe3f 	bl	8009200 <lwip_htons>
 800e582:	4603      	mov	r3, r0
 800e584:	461a      	mov	r2, r3
 800e586:	4b0c      	ldr	r3, [pc, #48]	; (800e5b8 <tcp_receive+0x88c>)
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	4322      	orrs	r2, r4
 800e58c:	b292      	uxth	r2, r2
 800e58e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e590:	4b09      	ldr	r3, [pc, #36]	; (800e5b8 <tcp_receive+0x88c>)
 800e592:	891c      	ldrh	r4, [r3, #8]
 800e594:	4b08      	ldr	r3, [pc, #32]	; (800e5b8 <tcp_receive+0x88c>)
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	899b      	ldrh	r3, [r3, #12]
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fa fe2f 	bl	8009200 <lwip_htons>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	f003 0303 	and.w	r3, r3, #3
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00e      	beq.n	800e5cc <tcp_receive+0x8a0>
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e00d      	b.n	800e5ce <tcp_receive+0x8a2>
 800e5b2:	bf00      	nop
 800e5b4:	24005d0c 	.word	0x24005d0c
 800e5b8:	24005cec 	.word	0x24005cec
 800e5bc:	24005d16 	.word	0x24005d16
 800e5c0:	080156e8 	.word	0x080156e8
 800e5c4:	08015a90 	.word	0x08015a90
 800e5c8:	08015734 	.word	0x08015734
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	4423      	add	r3, r4
 800e5d0:	b29a      	uxth	r2, r3
 800e5d2:	4b98      	ldr	r3, [pc, #608]	; (800e834 <tcp_receive+0xb08>)
 800e5d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e5e0:	6938      	ldr	r0, [r7, #16]
 800e5e2:	f7fd fd36 	bl	800c052 <tcp_seg_free>
            while (next &&
 800e5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00e      	beq.n	800e60a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e5ec:	4b91      	ldr	r3, [pc, #580]	; (800e834 <tcp_receive+0xb08>)
 800e5ee:	881b      	ldrh	r3, [r3, #0]
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4b91      	ldr	r3, [pc, #580]	; (800e838 <tcp_receive+0xb0c>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	441a      	add	r2, r3
 800e5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e600:	8909      	ldrh	r1, [r1, #8]
 800e602:	440b      	add	r3, r1
 800e604:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e606:	2b00      	cmp	r3, #0
 800e608:	da9a      	bge.n	800e540 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d059      	beq.n	800e6c4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e610:	4b88      	ldr	r3, [pc, #544]	; (800e834 <tcp_receive+0xb08>)
 800e612:	881b      	ldrh	r3, [r3, #0]
 800e614:	461a      	mov	r2, r3
 800e616:	4b88      	ldr	r3, [pc, #544]	; (800e838 <tcp_receive+0xb0c>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	441a      	add	r2, r3
 800e61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e624:	2b00      	cmp	r3, #0
 800e626:	dd4d      	ble.n	800e6c4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	b29a      	uxth	r2, r3
 800e630:	4b81      	ldr	r3, [pc, #516]	; (800e838 <tcp_receive+0xb0c>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	b29b      	uxth	r3, r3
 800e636:	1ad3      	subs	r3, r2, r3
 800e638:	b29a      	uxth	r2, r3
 800e63a:	4b80      	ldr	r3, [pc, #512]	; (800e83c <tcp_receive+0xb10>)
 800e63c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e63e:	4b7f      	ldr	r3, [pc, #508]	; (800e83c <tcp_receive+0xb10>)
 800e640:	68db      	ldr	r3, [r3, #12]
 800e642:	899b      	ldrh	r3, [r3, #12]
 800e644:	b29b      	uxth	r3, r3
 800e646:	4618      	mov	r0, r3
 800e648:	f7fa fdda 	bl	8009200 <lwip_htons>
 800e64c:	4603      	mov	r3, r0
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	f003 0302 	and.w	r3, r3, #2
 800e654:	2b00      	cmp	r3, #0
 800e656:	d005      	beq.n	800e664 <tcp_receive+0x938>
                inseg.len -= 1;
 800e658:	4b78      	ldr	r3, [pc, #480]	; (800e83c <tcp_receive+0xb10>)
 800e65a:	891b      	ldrh	r3, [r3, #8]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	b29a      	uxth	r2, r3
 800e660:	4b76      	ldr	r3, [pc, #472]	; (800e83c <tcp_receive+0xb10>)
 800e662:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e664:	4b75      	ldr	r3, [pc, #468]	; (800e83c <tcp_receive+0xb10>)
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	4a74      	ldr	r2, [pc, #464]	; (800e83c <tcp_receive+0xb10>)
 800e66a:	8912      	ldrh	r2, [r2, #8]
 800e66c:	4611      	mov	r1, r2
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fc f8ea 	bl	800a848 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e674:	4b71      	ldr	r3, [pc, #452]	; (800e83c <tcp_receive+0xb10>)
 800e676:	891c      	ldrh	r4, [r3, #8]
 800e678:	4b70      	ldr	r3, [pc, #448]	; (800e83c <tcp_receive+0xb10>)
 800e67a:	68db      	ldr	r3, [r3, #12]
 800e67c:	899b      	ldrh	r3, [r3, #12]
 800e67e:	b29b      	uxth	r3, r3
 800e680:	4618      	mov	r0, r3
 800e682:	f7fa fdbd 	bl	8009200 <lwip_htons>
 800e686:	4603      	mov	r3, r0
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	f003 0303 	and.w	r3, r3, #3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d001      	beq.n	800e696 <tcp_receive+0x96a>
 800e692:	2301      	movs	r3, #1
 800e694:	e000      	b.n	800e698 <tcp_receive+0x96c>
 800e696:	2300      	movs	r3, #0
 800e698:	4423      	add	r3, r4
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	4b65      	ldr	r3, [pc, #404]	; (800e834 <tcp_receive+0xb08>)
 800e69e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e6a0:	4b64      	ldr	r3, [pc, #400]	; (800e834 <tcp_receive+0xb08>)
 800e6a2:	881b      	ldrh	r3, [r3, #0]
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	4b64      	ldr	r3, [pc, #400]	; (800e838 <tcp_receive+0xb0c>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	441a      	add	r2, r3
 800e6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d006      	beq.n	800e6c4 <tcp_receive+0x998>
 800e6b6:	4b62      	ldr	r3, [pc, #392]	; (800e840 <tcp_receive+0xb14>)
 800e6b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e6bc:	4961      	ldr	r1, [pc, #388]	; (800e844 <tcp_receive+0xb18>)
 800e6be:	4862      	ldr	r0, [pc, #392]	; (800e848 <tcp_receive+0xb1c>)
 800e6c0:	f004 ff28 	bl	8013514 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e6ca:	4b5a      	ldr	r3, [pc, #360]	; (800e834 <tcp_receive+0xb08>)
 800e6cc:	881b      	ldrh	r3, [r3, #0]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	4b59      	ldr	r3, [pc, #356]	; (800e838 <tcp_receive+0xb0c>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	441a      	add	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e6de:	4b55      	ldr	r3, [pc, #340]	; (800e834 <tcp_receive+0xb08>)
 800e6e0:	881b      	ldrh	r3, [r3, #0]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d206      	bcs.n	800e6f4 <tcp_receive+0x9c8>
 800e6e6:	4b56      	ldr	r3, [pc, #344]	; (800e840 <tcp_receive+0xb14>)
 800e6e8:	f240 6207 	movw	r2, #1543	; 0x607
 800e6ec:	4957      	ldr	r1, [pc, #348]	; (800e84c <tcp_receive+0xb20>)
 800e6ee:	4856      	ldr	r0, [pc, #344]	; (800e848 <tcp_receive+0xb1c>)
 800e6f0:	f004 ff10 	bl	8013514 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e6f8:	4b4e      	ldr	r3, [pc, #312]	; (800e834 <tcp_receive+0xb08>)
 800e6fa:	881b      	ldrh	r3, [r3, #0]
 800e6fc:	1ad3      	subs	r3, r2, r3
 800e6fe:	b29a      	uxth	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f7fc ffc5 	bl	800b694 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e70a:	4b4c      	ldr	r3, [pc, #304]	; (800e83c <tcp_receive+0xb10>)
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	891b      	ldrh	r3, [r3, #8]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d006      	beq.n	800e722 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e714:	4b49      	ldr	r3, [pc, #292]	; (800e83c <tcp_receive+0xb10>)
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	4a4d      	ldr	r2, [pc, #308]	; (800e850 <tcp_receive+0xb24>)
 800e71a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e71c:	4b47      	ldr	r3, [pc, #284]	; (800e83c <tcp_receive+0xb10>)
 800e71e:	2200      	movs	r2, #0
 800e720:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e722:	4b46      	ldr	r3, [pc, #280]	; (800e83c <tcp_receive+0xb10>)
 800e724:	68db      	ldr	r3, [r3, #12]
 800e726:	899b      	ldrh	r3, [r3, #12]
 800e728:	b29b      	uxth	r3, r3
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fa fd68 	bl	8009200 <lwip_htons>
 800e730:	4603      	mov	r3, r0
 800e732:	b2db      	uxtb	r3, r3
 800e734:	f003 0301 	and.w	r3, r3, #1
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f000 80b8 	beq.w	800e8ae <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e73e:	4b45      	ldr	r3, [pc, #276]	; (800e854 <tcp_receive+0xb28>)
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	f043 0320 	orr.w	r3, r3, #32
 800e746:	b2da      	uxtb	r2, r3
 800e748:	4b42      	ldr	r3, [pc, #264]	; (800e854 <tcp_receive+0xb28>)
 800e74a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e74c:	e0af      	b.n	800e8ae <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e752:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	4a36      	ldr	r2, [pc, #216]	; (800e838 <tcp_receive+0xb0c>)
 800e75e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	891b      	ldrh	r3, [r3, #8]
 800e764:	461c      	mov	r4, r3
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	68db      	ldr	r3, [r3, #12]
 800e76a:	899b      	ldrh	r3, [r3, #12]
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fa fd46 	bl	8009200 <lwip_htons>
 800e774:	4603      	mov	r3, r0
 800e776:	b2db      	uxtb	r3, r3
 800e778:	f003 0303 	and.w	r3, r3, #3
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d001      	beq.n	800e784 <tcp_receive+0xa58>
 800e780:	2301      	movs	r3, #1
 800e782:	e000      	b.n	800e786 <tcp_receive+0xa5a>
 800e784:	2300      	movs	r3, #0
 800e786:	191a      	adds	r2, r3, r4
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78c:	441a      	add	r2, r3
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e796:	461c      	mov	r4, r3
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	891b      	ldrh	r3, [r3, #8]
 800e79c:	461d      	mov	r5, r3
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	899b      	ldrh	r3, [r3, #12]
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7fa fd2a 	bl	8009200 <lwip_htons>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	f003 0303 	and.w	r3, r3, #3
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d001      	beq.n	800e7bc <tcp_receive+0xa90>
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	e000      	b.n	800e7be <tcp_receive+0xa92>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	442b      	add	r3, r5
 800e7c0:	429c      	cmp	r4, r3
 800e7c2:	d206      	bcs.n	800e7d2 <tcp_receive+0xaa6>
 800e7c4:	4b1e      	ldr	r3, [pc, #120]	; (800e840 <tcp_receive+0xb14>)
 800e7c6:	f240 622b 	movw	r2, #1579	; 0x62b
 800e7ca:	4923      	ldr	r1, [pc, #140]	; (800e858 <tcp_receive+0xb2c>)
 800e7cc:	481e      	ldr	r0, [pc, #120]	; (800e848 <tcp_receive+0xb1c>)
 800e7ce:	f004 fea1 	bl	8013514 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	891b      	ldrh	r3, [r3, #8]
 800e7d6:	461c      	mov	r4, r3
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	899b      	ldrh	r3, [r3, #12]
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7fa fd0d 	bl	8009200 <lwip_htons>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	f003 0303 	and.w	r3, r3, #3
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d001      	beq.n	800e7f6 <tcp_receive+0xaca>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e000      	b.n	800e7f8 <tcp_receive+0xacc>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	1919      	adds	r1, r3, r4
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e7fe:	b28b      	uxth	r3, r1
 800e800:	1ad3      	subs	r3, r2, r3
 800e802:	b29a      	uxth	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7fc ff43 	bl	800b694 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	891b      	ldrh	r3, [r3, #8]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d028      	beq.n	800e86a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e818:	4b0d      	ldr	r3, [pc, #52]	; (800e850 <tcp_receive+0xb24>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d01d      	beq.n	800e85c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e820:	4b0b      	ldr	r3, [pc, #44]	; (800e850 <tcp_receive+0xb24>)
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	4619      	mov	r1, r3
 800e82a:	4610      	mov	r0, r2
 800e82c:	f7fc fa60 	bl	800acf0 <pbuf_cat>
 800e830:	e018      	b.n	800e864 <tcp_receive+0xb38>
 800e832:	bf00      	nop
 800e834:	24005d16 	.word	0x24005d16
 800e838:	24005d0c 	.word	0x24005d0c
 800e83c:	24005cec 	.word	0x24005cec
 800e840:	080156e8 	.word	0x080156e8
 800e844:	08015ac8 	.word	0x08015ac8
 800e848:	08015734 	.word	0x08015734
 800e84c:	08015b04 	.word	0x08015b04
 800e850:	24005d1c 	.word	0x24005d1c
 800e854:	24005d19 	.word	0x24005d19
 800e858:	08015b24 	.word	0x08015b24
            } else {
              recv_data = cseg->p;
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	4a70      	ldr	r2, [pc, #448]	; (800ea24 <tcp_receive+0xcf8>)
 800e862:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	2200      	movs	r2, #0
 800e868:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	899b      	ldrh	r3, [r3, #12]
 800e870:	b29b      	uxth	r3, r3
 800e872:	4618      	mov	r0, r3
 800e874:	f7fa fcc4 	bl	8009200 <lwip_htons>
 800e878:	4603      	mov	r3, r0
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	f003 0301 	and.w	r3, r3, #1
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00d      	beq.n	800e8a0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e884:	4b68      	ldr	r3, [pc, #416]	; (800ea28 <tcp_receive+0xcfc>)
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	f043 0320 	orr.w	r3, r3, #32
 800e88c:	b2da      	uxtb	r2, r3
 800e88e:	4b66      	ldr	r3, [pc, #408]	; (800ea28 <tcp_receive+0xcfc>)
 800e890:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	7d1b      	ldrb	r3, [r3, #20]
 800e896:	2b04      	cmp	r3, #4
 800e898:	d102      	bne.n	800e8a0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2207      	movs	r2, #7
 800e89e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e8a8:	68b8      	ldr	r0, [r7, #8]
 800e8aa:	f7fd fbd2 	bl	800c052 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d008      	beq.n	800e8c8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	685a      	ldr	r2, [r3, #4]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	f43f af43 	beq.w	800e74e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	8b5b      	ldrh	r3, [r3, #26]
 800e8cc:	f003 0301 	and.w	r3, r3, #1
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00e      	beq.n	800e8f2 <tcp_receive+0xbc6>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	8b5b      	ldrh	r3, [r3, #26]
 800e8d8:	f023 0301 	bic.w	r3, r3, #1
 800e8dc:	b29a      	uxth	r2, r3
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	835a      	strh	r2, [r3, #26]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	8b5b      	ldrh	r3, [r3, #26]
 800e8e6:	f043 0302 	orr.w	r3, r3, #2
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e8f0:	e188      	b.n	800ec04 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	8b5b      	ldrh	r3, [r3, #26]
 800e8f6:	f043 0301 	orr.w	r3, r3, #1
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e900:	e180      	b.n	800ec04 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e906:	2b00      	cmp	r3, #0
 800e908:	d106      	bne.n	800e918 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e90a:	4848      	ldr	r0, [pc, #288]	; (800ea2c <tcp_receive+0xd00>)
 800e90c:	f7fd fbba 	bl	800c084 <tcp_seg_copy>
 800e910:	4602      	mov	r2, r0
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	675a      	str	r2, [r3, #116]	; 0x74
 800e916:	e16d      	b.n	800ebf4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e918:	2300      	movs	r3, #0
 800e91a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e920:	63bb      	str	r3, [r7, #56]	; 0x38
 800e922:	e157      	b.n	800ebd4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	685a      	ldr	r2, [r3, #4]
 800e92a:	4b41      	ldr	r3, [pc, #260]	; (800ea30 <tcp_receive+0xd04>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d11d      	bne.n	800e96e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e932:	4b3e      	ldr	r3, [pc, #248]	; (800ea2c <tcp_receive+0xd00>)
 800e934:	891a      	ldrh	r2, [r3, #8]
 800e936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e938:	891b      	ldrh	r3, [r3, #8]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	f240 814f 	bls.w	800ebde <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e940:	483a      	ldr	r0, [pc, #232]	; (800ea2c <tcp_receive+0xd00>)
 800e942:	f7fd fb9f 	bl	800c084 <tcp_seg_copy>
 800e946:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	f000 8149 	beq.w	800ebe2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e952:	2b00      	cmp	r3, #0
 800e954:	d003      	beq.n	800e95e <tcp_receive+0xc32>
                    prev->next = cseg;
 800e956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e958:	697a      	ldr	r2, [r7, #20]
 800e95a:	601a      	str	r2, [r3, #0]
 800e95c:	e002      	b.n	800e964 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	697a      	ldr	r2, [r7, #20]
 800e962:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e966:	6978      	ldr	r0, [r7, #20]
 800e968:	f7ff f8dc 	bl	800db24 <tcp_oos_insert_segment>
                }
                break;
 800e96c:	e139      	b.n	800ebe2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e970:	2b00      	cmp	r3, #0
 800e972:	d117      	bne.n	800e9a4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e974:	4b2e      	ldr	r3, [pc, #184]	; (800ea30 <tcp_receive+0xd04>)
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	1ad3      	subs	r3, r2, r3
 800e980:	2b00      	cmp	r3, #0
 800e982:	da57      	bge.n	800ea34 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e984:	4829      	ldr	r0, [pc, #164]	; (800ea2c <tcp_receive+0xd00>)
 800e986:	f7fd fb7d 	bl	800c084 <tcp_seg_copy>
 800e98a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f000 8129 	beq.w	800ebe6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	69ba      	ldr	r2, [r7, #24]
 800e998:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e99a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e99c:	69b8      	ldr	r0, [r7, #24]
 800e99e:	f7ff f8c1 	bl	800db24 <tcp_oos_insert_segment>
                  }
                  break;
 800e9a2:	e120      	b.n	800ebe6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e9a4:	4b22      	ldr	r3, [pc, #136]	; (800ea30 <tcp_receive+0xd04>)
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	db3e      	blt.n	800ea34 <tcp_receive+0xd08>
 800e9b6:	4b1e      	ldr	r3, [pc, #120]	; (800ea30 <tcp_receive+0xd04>)
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	1ad3      	subs	r3, r2, r3
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	dc35      	bgt.n	800ea34 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e9c8:	4818      	ldr	r0, [pc, #96]	; (800ea2c <tcp_receive+0xd00>)
 800e9ca:	f7fd fb5b 	bl	800c084 <tcp_seg_copy>
 800e9ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 8109 	beq.w	800ebea <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9e0:	8912      	ldrh	r2, [r2, #8]
 800e9e2:	441a      	add	r2, r3
 800e9e4:	4b12      	ldr	r3, [pc, #72]	; (800ea30 <tcp_receive+0xd04>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	1ad3      	subs	r3, r2, r3
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	dd12      	ble.n	800ea14 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e9ee:	4b10      	ldr	r3, [pc, #64]	; (800ea30 <tcp_receive+0xd04>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	1ad3      	subs	r3, r2, r3
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ea04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea06:	685a      	ldr	r2, [r3, #4]
 800ea08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea0a:	891b      	ldrh	r3, [r3, #8]
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	4610      	mov	r0, r2
 800ea10:	f7fb ff1a 	bl	800a848 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ea14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea16:	69fa      	ldr	r2, [r7, #28]
 800ea18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ea1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea1c:	69f8      	ldr	r0, [r7, #28]
 800ea1e:	f7ff f881 	bl	800db24 <tcp_oos_insert_segment>
                  }
                  break;
 800ea22:	e0e2      	b.n	800ebea <tcp_receive+0xebe>
 800ea24:	24005d1c 	.word	0x24005d1c
 800ea28:	24005d19 	.word	0x24005d19
 800ea2c:	24005cec 	.word	0x24005cec
 800ea30:	24005d0c 	.word	0x24005d0c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ea34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea36:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ea38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f040 80c6 	bne.w	800ebce <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ea42:	4b80      	ldr	r3, [pc, #512]	; (800ec44 <tcp_receive+0xf18>)
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea48:	68db      	ldr	r3, [r3, #12]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f340 80bd 	ble.w	800ebce <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ea54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	899b      	ldrh	r3, [r3, #12]
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7fa fbcf 	bl	8009200 <lwip_htons>
 800ea62:	4603      	mov	r3, r0
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	f003 0301 	and.w	r3, r3, #1
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	f040 80bf 	bne.w	800ebee <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ea70:	4875      	ldr	r0, [pc, #468]	; (800ec48 <tcp_receive+0xf1c>)
 800ea72:	f7fd fb07 	bl	800c084 <tcp_seg_copy>
 800ea76:	4602      	mov	r2, r0
 800ea78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ea7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	f000 80b6 	beq.w	800ebf2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ea86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea8e:	8912      	ldrh	r2, [r2, #8]
 800ea90:	441a      	add	r2, r3
 800ea92:	4b6c      	ldr	r3, [pc, #432]	; (800ec44 <tcp_receive+0xf18>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	1ad3      	subs	r3, r2, r3
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	dd12      	ble.n	800eac2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ea9c:	4b69      	ldr	r3, [pc, #420]	; (800ec44 <tcp_receive+0xf18>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	b29a      	uxth	r2, r3
 800eaa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa4:	68db      	ldr	r3, [r3, #12]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	1ad3      	subs	r3, r2, r3
 800eaac:	b29a      	uxth	r2, r3
 800eaae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800eab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab4:	685a      	ldr	r2, [r3, #4]
 800eab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab8:	891b      	ldrh	r3, [r3, #8]
 800eaba:	4619      	mov	r1, r3
 800eabc:	4610      	mov	r0, r2
 800eabe:	f7fb fec3 	bl	800a848 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800eac2:	4b62      	ldr	r3, [pc, #392]	; (800ec4c <tcp_receive+0xf20>)
 800eac4:	881b      	ldrh	r3, [r3, #0]
 800eac6:	461a      	mov	r2, r3
 800eac8:	4b5e      	ldr	r3, [pc, #376]	; (800ec44 <tcp_receive+0xf18>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	441a      	add	r2, r3
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead2:	6879      	ldr	r1, [r7, #4]
 800ead4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ead6:	440b      	add	r3, r1
 800ead8:	1ad3      	subs	r3, r2, r3
 800eada:	2b00      	cmp	r3, #0
 800eadc:	f340 8089 	ble.w	800ebf2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800eae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	899b      	ldrh	r3, [r3, #12]
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fa fb88 	bl	8009200 <lwip_htons>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	f003 0301 	and.w	r3, r3, #1
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d022      	beq.n	800eb42 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800eafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	899b      	ldrh	r3, [r3, #12]
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	b21b      	sxth	r3, r3
 800eb08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eb0c:	b21c      	sxth	r4, r3
 800eb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	899b      	ldrh	r3, [r3, #12]
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7fa fb71 	bl	8009200 <lwip_htons>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7fa fb68 	bl	8009200 <lwip_htons>
 800eb30:	4603      	mov	r3, r0
 800eb32:	b21b      	sxth	r3, r3
 800eb34:	4323      	orrs	r3, r4
 800eb36:	b21a      	sxth	r2, r3
 800eb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	b292      	uxth	r2, r2
 800eb40:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb4c:	4413      	add	r3, r2
 800eb4e:	b299      	uxth	r1, r3
 800eb50:	4b3c      	ldr	r3, [pc, #240]	; (800ec44 <tcp_receive+0xf18>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	b29a      	uxth	r2, r3
 800eb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	1a8a      	subs	r2, r1, r2
 800eb5c:	b292      	uxth	r2, r2
 800eb5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800eb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	685a      	ldr	r2, [r3, #4]
 800eb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	891b      	ldrh	r3, [r3, #8]
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	4610      	mov	r0, r2
 800eb70:	f7fb fe6a 	bl	800a848 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800eb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	891c      	ldrh	r4, [r3, #8]
 800eb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	899b      	ldrh	r3, [r3, #12]
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7fa fb3b 	bl	8009200 <lwip_htons>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	f003 0303 	and.w	r3, r3, #3
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d001      	beq.n	800eb9a <tcp_receive+0xe6e>
 800eb96:	2301      	movs	r3, #1
 800eb98:	e000      	b.n	800eb9c <tcp_receive+0xe70>
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	4423      	add	r3, r4
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	4b2a      	ldr	r3, [pc, #168]	; (800ec4c <tcp_receive+0xf20>)
 800eba2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eba4:	4b29      	ldr	r3, [pc, #164]	; (800ec4c <tcp_receive+0xf20>)
 800eba6:	881b      	ldrh	r3, [r3, #0]
 800eba8:	461a      	mov	r2, r3
 800ebaa:	4b26      	ldr	r3, [pc, #152]	; (800ec44 <tcp_receive+0xf18>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	441a      	add	r2, r3
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb4:	6879      	ldr	r1, [r7, #4]
 800ebb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ebb8:	440b      	add	r3, r1
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d019      	beq.n	800ebf2 <tcp_receive+0xec6>
 800ebbe:	4b24      	ldr	r3, [pc, #144]	; (800ec50 <tcp_receive+0xf24>)
 800ebc0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ebc4:	4923      	ldr	r1, [pc, #140]	; (800ec54 <tcp_receive+0xf28>)
 800ebc6:	4824      	ldr	r0, [pc, #144]	; (800ec58 <tcp_receive+0xf2c>)
 800ebc8:	f004 fca4 	bl	8013514 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ebcc:	e011      	b.n	800ebf2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ebce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ebd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	f47f aea4 	bne.w	800e924 <tcp_receive+0xbf8>
 800ebdc:	e00a      	b.n	800ebf4 <tcp_receive+0xec8>
                break;
 800ebde:	bf00      	nop
 800ebe0:	e008      	b.n	800ebf4 <tcp_receive+0xec8>
                break;
 800ebe2:	bf00      	nop
 800ebe4:	e006      	b.n	800ebf4 <tcp_receive+0xec8>
                  break;
 800ebe6:	bf00      	nop
 800ebe8:	e004      	b.n	800ebf4 <tcp_receive+0xec8>
                  break;
 800ebea:	bf00      	nop
 800ebec:	e002      	b.n	800ebf4 <tcp_receive+0xec8>
                  break;
 800ebee:	bf00      	nop
 800ebf0:	e000      	b.n	800ebf4 <tcp_receive+0xec8>
                break;
 800ebf2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f001 fa33 	bl	8010060 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ebfa:	e003      	b.n	800ec04 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f001 fa2f 	bl	8010060 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ec02:	e01a      	b.n	800ec3a <tcp_receive+0xf0e>
 800ec04:	e019      	b.n	800ec3a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ec06:	4b0f      	ldr	r3, [pc, #60]	; (800ec44 <tcp_receive+0xf18>)
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	db0a      	blt.n	800ec2a <tcp_receive+0xefe>
 800ec14:	4b0b      	ldr	r3, [pc, #44]	; (800ec44 <tcp_receive+0xf18>)
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec1c:	6879      	ldr	r1, [r7, #4]
 800ec1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ec20:	440b      	add	r3, r1
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	3301      	adds	r3, #1
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	dd07      	ble.n	800ec3a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	8b5b      	ldrh	r3, [r3, #26]
 800ec2e:	f043 0302 	orr.w	r3, r3, #2
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ec38:	e7ff      	b.n	800ec3a <tcp_receive+0xf0e>
 800ec3a:	bf00      	nop
 800ec3c:	3750      	adds	r7, #80	; 0x50
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bdb0      	pop	{r4, r5, r7, pc}
 800ec42:	bf00      	nop
 800ec44:	24005d0c 	.word	0x24005d0c
 800ec48:	24005cec 	.word	0x24005cec
 800ec4c:	24005d16 	.word	0x24005d16
 800ec50:	080156e8 	.word	0x080156e8
 800ec54:	08015a90 	.word	0x08015a90
 800ec58:	08015734 	.word	0x08015734

0800ec5c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b083      	sub	sp, #12
 800ec60:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ec62:	4b15      	ldr	r3, [pc, #84]	; (800ecb8 <tcp_get_next_optbyte+0x5c>)
 800ec64:	881b      	ldrh	r3, [r3, #0]
 800ec66:	1c5a      	adds	r2, r3, #1
 800ec68:	b291      	uxth	r1, r2
 800ec6a:	4a13      	ldr	r2, [pc, #76]	; (800ecb8 <tcp_get_next_optbyte+0x5c>)
 800ec6c:	8011      	strh	r1, [r2, #0]
 800ec6e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ec70:	4b12      	ldr	r3, [pc, #72]	; (800ecbc <tcp_get_next_optbyte+0x60>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d004      	beq.n	800ec82 <tcp_get_next_optbyte+0x26>
 800ec78:	4b11      	ldr	r3, [pc, #68]	; (800ecc0 <tcp_get_next_optbyte+0x64>)
 800ec7a:	881b      	ldrh	r3, [r3, #0]
 800ec7c:	88fa      	ldrh	r2, [r7, #6]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d208      	bcs.n	800ec94 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ec82:	4b10      	ldr	r3, [pc, #64]	; (800ecc4 <tcp_get_next_optbyte+0x68>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	3314      	adds	r3, #20
 800ec88:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ec8a:	88fb      	ldrh	r3, [r7, #6]
 800ec8c:	683a      	ldr	r2, [r7, #0]
 800ec8e:	4413      	add	r3, r2
 800ec90:	781b      	ldrb	r3, [r3, #0]
 800ec92:	e00b      	b.n	800ecac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ec94:	88fb      	ldrh	r3, [r7, #6]
 800ec96:	b2da      	uxtb	r2, r3
 800ec98:	4b09      	ldr	r3, [pc, #36]	; (800ecc0 <tcp_get_next_optbyte+0x64>)
 800ec9a:	881b      	ldrh	r3, [r3, #0]
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	1ad3      	subs	r3, r2, r3
 800eca0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800eca2:	4b06      	ldr	r3, [pc, #24]	; (800ecbc <tcp_get_next_optbyte+0x60>)
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	797b      	ldrb	r3, [r7, #5]
 800eca8:	4413      	add	r3, r2
 800ecaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr
 800ecb8:	24005d08 	.word	0x24005d08
 800ecbc:	24005d04 	.word	0x24005d04
 800ecc0:	24005d02 	.word	0x24005d02
 800ecc4:	24005cfc 	.word	0x24005cfc

0800ecc8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d106      	bne.n	800ece4 <tcp_parseopt+0x1c>
 800ecd6:	4b32      	ldr	r3, [pc, #200]	; (800eda0 <tcp_parseopt+0xd8>)
 800ecd8:	f240 727d 	movw	r2, #1917	; 0x77d
 800ecdc:	4931      	ldr	r1, [pc, #196]	; (800eda4 <tcp_parseopt+0xdc>)
 800ecde:	4832      	ldr	r0, [pc, #200]	; (800eda8 <tcp_parseopt+0xe0>)
 800ece0:	f004 fc18 	bl	8013514 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ece4:	4b31      	ldr	r3, [pc, #196]	; (800edac <tcp_parseopt+0xe4>)
 800ece6:	881b      	ldrh	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d055      	beq.n	800ed98 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ecec:	4b30      	ldr	r3, [pc, #192]	; (800edb0 <tcp_parseopt+0xe8>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	801a      	strh	r2, [r3, #0]
 800ecf2:	e045      	b.n	800ed80 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ecf4:	f7ff ffb2 	bl	800ec5c <tcp_get_next_optbyte>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ecfc:	7bfb      	ldrb	r3, [r7, #15]
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	d006      	beq.n	800ed10 <tcp_parseopt+0x48>
 800ed02:	2b02      	cmp	r3, #2
 800ed04:	dc2b      	bgt.n	800ed5e <tcp_parseopt+0x96>
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d041      	beq.n	800ed8e <tcp_parseopt+0xc6>
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d127      	bne.n	800ed5e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ed0e:	e037      	b.n	800ed80 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ed10:	f7ff ffa4 	bl	800ec5c <tcp_get_next_optbyte>
 800ed14:	4603      	mov	r3, r0
 800ed16:	2b04      	cmp	r3, #4
 800ed18:	d13b      	bne.n	800ed92 <tcp_parseopt+0xca>
 800ed1a:	4b25      	ldr	r3, [pc, #148]	; (800edb0 <tcp_parseopt+0xe8>)
 800ed1c:	881b      	ldrh	r3, [r3, #0]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	4a22      	ldr	r2, [pc, #136]	; (800edac <tcp_parseopt+0xe4>)
 800ed22:	8812      	ldrh	r2, [r2, #0]
 800ed24:	4293      	cmp	r3, r2
 800ed26:	da34      	bge.n	800ed92 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ed28:	f7ff ff98 	bl	800ec5c <tcp_get_next_optbyte>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	021b      	lsls	r3, r3, #8
 800ed32:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ed34:	f7ff ff92 	bl	800ec5c <tcp_get_next_optbyte>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	b29a      	uxth	r2, r3
 800ed3c:	89bb      	ldrh	r3, [r7, #12]
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ed42:	89bb      	ldrh	r3, [r7, #12]
 800ed44:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ed48:	d804      	bhi.n	800ed54 <tcp_parseopt+0x8c>
 800ed4a:	89bb      	ldrh	r3, [r7, #12]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <tcp_parseopt+0x8c>
 800ed50:	89ba      	ldrh	r2, [r7, #12]
 800ed52:	e001      	b.n	800ed58 <tcp_parseopt+0x90>
 800ed54:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ed5c:	e010      	b.n	800ed80 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ed5e:	f7ff ff7d 	bl	800ec5c <tcp_get_next_optbyte>
 800ed62:	4603      	mov	r3, r0
 800ed64:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ed66:	7afb      	ldrb	r3, [r7, #11]
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d914      	bls.n	800ed96 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ed6c:	7afb      	ldrb	r3, [r7, #11]
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	4b0f      	ldr	r3, [pc, #60]	; (800edb0 <tcp_parseopt+0xe8>)
 800ed72:	881b      	ldrh	r3, [r3, #0]
 800ed74:	4413      	add	r3, r2
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	3b02      	subs	r3, #2
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	4b0c      	ldr	r3, [pc, #48]	; (800edb0 <tcp_parseopt+0xe8>)
 800ed7e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ed80:	4b0b      	ldr	r3, [pc, #44]	; (800edb0 <tcp_parseopt+0xe8>)
 800ed82:	881a      	ldrh	r2, [r3, #0]
 800ed84:	4b09      	ldr	r3, [pc, #36]	; (800edac <tcp_parseopt+0xe4>)
 800ed86:	881b      	ldrh	r3, [r3, #0]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d3b3      	bcc.n	800ecf4 <tcp_parseopt+0x2c>
 800ed8c:	e004      	b.n	800ed98 <tcp_parseopt+0xd0>
          return;
 800ed8e:	bf00      	nop
 800ed90:	e002      	b.n	800ed98 <tcp_parseopt+0xd0>
            return;
 800ed92:	bf00      	nop
 800ed94:	e000      	b.n	800ed98 <tcp_parseopt+0xd0>
            return;
 800ed96:	bf00      	nop
      }
    }
  }
}
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	080156e8 	.word	0x080156e8
 800eda4:	08015b4c 	.word	0x08015b4c
 800eda8:	08015734 	.word	0x08015734
 800edac:	24005d00 	.word	0x24005d00
 800edb0:	24005d08 	.word	0x24005d08

0800edb4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800edb4:	b480      	push	{r7}
 800edb6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800edb8:	4b05      	ldr	r3, [pc, #20]	; (800edd0 <tcp_trigger_input_pcb_close+0x1c>)
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	f043 0310 	orr.w	r3, r3, #16
 800edc0:	b2da      	uxtb	r2, r3
 800edc2:	4b03      	ldr	r3, [pc, #12]	; (800edd0 <tcp_trigger_input_pcb_close+0x1c>)
 800edc4:	701a      	strb	r2, [r3, #0]
}
 800edc6:	bf00      	nop
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr
 800edd0:	24005d19 	.word	0x24005d19

0800edd4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00a      	beq.n	800edfc <tcp_route+0x28>
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	7a1b      	ldrb	r3, [r3, #8]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d006      	beq.n	800edfc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	7a1b      	ldrb	r3, [r3, #8]
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7fb fb20 	bl	800a438 <netif_get_by_index>
 800edf8:	4603      	mov	r3, r0
 800edfa:	e003      	b.n	800ee04 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f002 fed3 	bl	8011ba8 <ip4_route>
 800ee02:	4603      	mov	r3, r0
  }
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ee0c:	b590      	push	{r4, r7, lr}
 800ee0e:	b087      	sub	sp, #28
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	603b      	str	r3, [r7, #0]
 800ee18:	4613      	mov	r3, r2
 800ee1a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d105      	bne.n	800ee2e <tcp_create_segment+0x22>
 800ee22:	4b44      	ldr	r3, [pc, #272]	; (800ef34 <tcp_create_segment+0x128>)
 800ee24:	22a3      	movs	r2, #163	; 0xa3
 800ee26:	4944      	ldr	r1, [pc, #272]	; (800ef38 <tcp_create_segment+0x12c>)
 800ee28:	4844      	ldr	r0, [pc, #272]	; (800ef3c <tcp_create_segment+0x130>)
 800ee2a:	f004 fb73 	bl	8013514 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d105      	bne.n	800ee40 <tcp_create_segment+0x34>
 800ee34:	4b3f      	ldr	r3, [pc, #252]	; (800ef34 <tcp_create_segment+0x128>)
 800ee36:	22a4      	movs	r2, #164	; 0xa4
 800ee38:	4941      	ldr	r1, [pc, #260]	; (800ef40 <tcp_create_segment+0x134>)
 800ee3a:	4840      	ldr	r0, [pc, #256]	; (800ef3c <tcp_create_segment+0x130>)
 800ee3c:	f004 fb6a 	bl	8013514 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ee40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	f003 0304 	and.w	r3, r3, #4
 800ee4c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ee4e:	2003      	movs	r0, #3
 800ee50:	f7fa ff66 	bl	8009d20 <memp_malloc>
 800ee54:	6138      	str	r0, [r7, #16]
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d104      	bne.n	800ee66 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ee5c:	68b8      	ldr	r0, [r7, #8]
 800ee5e:	f7fb fe79 	bl	800ab54 <pbuf_free>
    return NULL;
 800ee62:	2300      	movs	r3, #0
 800ee64:	e061      	b.n	800ef2a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ee6c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	2200      	movs	r2, #0
 800ee72:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	68ba      	ldr	r2, [r7, #8]
 800ee78:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	891a      	ldrh	r2, [r3, #8]
 800ee7e:	7dfb      	ldrb	r3, [r7, #23]
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d205      	bcs.n	800ee92 <tcp_create_segment+0x86>
 800ee86:	4b2b      	ldr	r3, [pc, #172]	; (800ef34 <tcp_create_segment+0x128>)
 800ee88:	22b0      	movs	r2, #176	; 0xb0
 800ee8a:	492e      	ldr	r1, [pc, #184]	; (800ef44 <tcp_create_segment+0x138>)
 800ee8c:	482b      	ldr	r0, [pc, #172]	; (800ef3c <tcp_create_segment+0x130>)
 800ee8e:	f004 fb41 	bl	8013514 <iprintf>
  seg->len = p->tot_len - optlen;
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	891a      	ldrh	r2, [r3, #8]
 800ee96:	7dfb      	ldrb	r3, [r7, #23]
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	1ad3      	subs	r3, r2, r3
 800ee9c:	b29a      	uxth	r2, r3
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800eea2:	2114      	movs	r1, #20
 800eea4:	68b8      	ldr	r0, [r7, #8]
 800eea6:	f7fb fdbf 	bl	800aa28 <pbuf_add_header>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d004      	beq.n	800eeba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800eeb0:	6938      	ldr	r0, [r7, #16]
 800eeb2:	f7fd f8ce 	bl	800c052 <tcp_seg_free>
    return NULL;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	e037      	b.n	800ef2a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	685a      	ldr	r2, [r3, #4]
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	8ada      	ldrh	r2, [r3, #22]
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	68dc      	ldr	r4, [r3, #12]
 800eecc:	4610      	mov	r0, r2
 800eece:	f7fa f997 	bl	8009200 <lwip_htons>
 800eed2:	4603      	mov	r3, r0
 800eed4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	8b1a      	ldrh	r2, [r3, #24]
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	68dc      	ldr	r4, [r3, #12]
 800eede:	4610      	mov	r0, r2
 800eee0:	f7fa f98e 	bl	8009200 <lwip_htons>
 800eee4:	4603      	mov	r3, r0
 800eee6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	68dc      	ldr	r4, [r3, #12]
 800eeec:	6838      	ldr	r0, [r7, #0]
 800eeee:	f7fa f99c 	bl	800922a <lwip_htonl>
 800eef2:	4603      	mov	r3, r0
 800eef4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800eef6:	7dfb      	ldrb	r3, [r7, #23]
 800eef8:	089b      	lsrs	r3, r3, #2
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	3305      	adds	r3, #5
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	031b      	lsls	r3, r3, #12
 800ef04:	b29a      	uxth	r2, r3
 800ef06:	79fb      	ldrb	r3, [r7, #7]
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	68dc      	ldr	r4, [r3, #12]
 800ef12:	4610      	mov	r0, r2
 800ef14:	f7fa f974 	bl	8009200 <lwip_htons>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	68db      	ldr	r3, [r3, #12]
 800ef20:	2200      	movs	r2, #0
 800ef22:	749a      	strb	r2, [r3, #18]
 800ef24:	2200      	movs	r2, #0
 800ef26:	74da      	strb	r2, [r3, #19]
  return seg;
 800ef28:	693b      	ldr	r3, [r7, #16]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	371c      	adds	r7, #28
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd90      	pop	{r4, r7, pc}
 800ef32:	bf00      	nop
 800ef34:	08015b68 	.word	0x08015b68
 800ef38:	08015b9c 	.word	0x08015b9c
 800ef3c:	08015bbc 	.word	0x08015bbc
 800ef40:	08015be4 	.word	0x08015be4
 800ef44:	08015c08 	.word	0x08015c08

0800ef48 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ef48:	b590      	push	{r4, r7, lr}
 800ef4a:	b08b      	sub	sp, #44	; 0x2c
 800ef4c:	af02      	add	r7, sp, #8
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	460b      	mov	r3, r1
 800ef52:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ef54:	2300      	movs	r3, #0
 800ef56:	61fb      	str	r3, [r7, #28]
 800ef58:	2300      	movs	r3, #0
 800ef5a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d106      	bne.n	800ef74 <tcp_split_unsent_seg+0x2c>
 800ef66:	4b95      	ldr	r3, [pc, #596]	; (800f1bc <tcp_split_unsent_seg+0x274>)
 800ef68:	f240 324b 	movw	r2, #843	; 0x34b
 800ef6c:	4994      	ldr	r1, [pc, #592]	; (800f1c0 <tcp_split_unsent_seg+0x278>)
 800ef6e:	4895      	ldr	r0, [pc, #596]	; (800f1c4 <tcp_split_unsent_seg+0x27c>)
 800ef70:	f004 fad0 	bl	8013514 <iprintf>

  useg = pcb->unsent;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef78:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d102      	bne.n	800ef86 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ef80:	f04f 33ff 	mov.w	r3, #4294967295
 800ef84:	e116      	b.n	800f1b4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ef86:	887b      	ldrh	r3, [r7, #2]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d109      	bne.n	800efa0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ef8c:	4b8b      	ldr	r3, [pc, #556]	; (800f1bc <tcp_split_unsent_seg+0x274>)
 800ef8e:	f240 3253 	movw	r2, #851	; 0x353
 800ef92:	498d      	ldr	r1, [pc, #564]	; (800f1c8 <tcp_split_unsent_seg+0x280>)
 800ef94:	488b      	ldr	r0, [pc, #556]	; (800f1c4 <tcp_split_unsent_seg+0x27c>)
 800ef96:	f004 fabd 	bl	8013514 <iprintf>
    return ERR_VAL;
 800ef9a:	f06f 0305 	mvn.w	r3, #5
 800ef9e:	e109      	b.n	800f1b4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	891b      	ldrh	r3, [r3, #8]
 800efa4:	887a      	ldrh	r2, [r7, #2]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d301      	bcc.n	800efae <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800efaa:	2300      	movs	r3, #0
 800efac:	e102      	b.n	800f1b4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efb2:	887a      	ldrh	r2, [r7, #2]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d906      	bls.n	800efc6 <tcp_split_unsent_seg+0x7e>
 800efb8:	4b80      	ldr	r3, [pc, #512]	; (800f1bc <tcp_split_unsent_seg+0x274>)
 800efba:	f240 325b 	movw	r2, #859	; 0x35b
 800efbe:	4983      	ldr	r1, [pc, #524]	; (800f1cc <tcp_split_unsent_seg+0x284>)
 800efc0:	4880      	ldr	r0, [pc, #512]	; (800f1c4 <tcp_split_unsent_seg+0x27c>)
 800efc2:	f004 faa7 	bl	8013514 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	891b      	ldrh	r3, [r3, #8]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d106      	bne.n	800efdc <tcp_split_unsent_seg+0x94>
 800efce:	4b7b      	ldr	r3, [pc, #492]	; (800f1bc <tcp_split_unsent_seg+0x274>)
 800efd0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800efd4:	497e      	ldr	r1, [pc, #504]	; (800f1d0 <tcp_split_unsent_seg+0x288>)
 800efd6:	487b      	ldr	r0, [pc, #492]	; (800f1c4 <tcp_split_unsent_seg+0x27c>)
 800efd8:	f004 fa9c 	bl	8013514 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	7a9b      	ldrb	r3, [r3, #10]
 800efe0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800efe2:	7bfb      	ldrb	r3, [r7, #15]
 800efe4:	009b      	lsls	r3, r3, #2
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	f003 0304 	and.w	r3, r3, #4
 800efec:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	891a      	ldrh	r2, [r3, #8]
 800eff2:	887b      	ldrh	r3, [r7, #2]
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800eff8:	7bbb      	ldrb	r3, [r7, #14]
 800effa:	b29a      	uxth	r2, r3
 800effc:	89bb      	ldrh	r3, [r7, #12]
 800effe:	4413      	add	r3, r2
 800f000:	b29b      	uxth	r3, r3
 800f002:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f006:	4619      	mov	r1, r3
 800f008:	2036      	movs	r0, #54	; 0x36
 800f00a:	f7fb fabf 	bl	800a58c <pbuf_alloc>
 800f00e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	2b00      	cmp	r3, #0
 800f014:	f000 80b7 	beq.w	800f186 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	891a      	ldrh	r2, [r3, #8]
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	891b      	ldrh	r3, [r3, #8]
 800f022:	1ad3      	subs	r3, r2, r3
 800f024:	b29a      	uxth	r2, r3
 800f026:	887b      	ldrh	r3, [r7, #2]
 800f028:	4413      	add	r3, r2
 800f02a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	6858      	ldr	r0, [r3, #4]
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	685a      	ldr	r2, [r3, #4]
 800f034:	7bbb      	ldrb	r3, [r7, #14]
 800f036:	18d1      	adds	r1, r2, r3
 800f038:	897b      	ldrh	r3, [r7, #10]
 800f03a:	89ba      	ldrh	r2, [r7, #12]
 800f03c:	f7fb ff80 	bl	800af40 <pbuf_copy_partial>
 800f040:	4603      	mov	r3, r0
 800f042:	461a      	mov	r2, r3
 800f044:	89bb      	ldrh	r3, [r7, #12]
 800f046:	4293      	cmp	r3, r2
 800f048:	f040 809f 	bne.w	800f18a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	899b      	ldrh	r3, [r3, #12]
 800f052:	b29b      	uxth	r3, r3
 800f054:	4618      	mov	r0, r3
 800f056:	f7fa f8d3 	bl	8009200 <lwip_htons>
 800f05a:	4603      	mov	r3, r0
 800f05c:	b2db      	uxtb	r3, r3
 800f05e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f062:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f064:	2300      	movs	r3, #0
 800f066:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f068:	7efb      	ldrb	r3, [r7, #27]
 800f06a:	f003 0308 	and.w	r3, r3, #8
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d007      	beq.n	800f082 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f072:	7efb      	ldrb	r3, [r7, #27]
 800f074:	f023 0308 	bic.w	r3, r3, #8
 800f078:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f07a:	7ebb      	ldrb	r3, [r7, #26]
 800f07c:	f043 0308 	orr.w	r3, r3, #8
 800f080:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f082:	7efb      	ldrb	r3, [r7, #27]
 800f084:	f003 0301 	and.w	r3, r3, #1
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d007      	beq.n	800f09c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f08c:	7efb      	ldrb	r3, [r7, #27]
 800f08e:	f023 0301 	bic.w	r3, r3, #1
 800f092:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f094:	7ebb      	ldrb	r3, [r7, #26]
 800f096:	f043 0301 	orr.w	r3, r3, #1
 800f09a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7fa f8c1 	bl	800922a <lwip_htonl>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	887b      	ldrh	r3, [r7, #2]
 800f0ac:	18d1      	adds	r1, r2, r3
 800f0ae:	7eba      	ldrb	r2, [r7, #26]
 800f0b0:	7bfb      	ldrb	r3, [r7, #15]
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	6939      	ldr	r1, [r7, #16]
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7ff fea7 	bl	800ee0c <tcp_create_segment>
 800f0be:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f0c0:	69fb      	ldr	r3, [r7, #28]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d063      	beq.n	800f18e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fb fdd0 	bl	800ac70 <pbuf_clen>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f0da:	1a9b      	subs	r3, r3, r2
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	6858      	ldr	r0, [r3, #4]
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	891a      	ldrh	r2, [r3, #8]
 800f0ee:	89bb      	ldrh	r3, [r7, #12]
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	f7fb fba7 	bl	800a848 <pbuf_realloc>
  useg->len -= remainder;
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	891a      	ldrh	r2, [r3, #8]
 800f0fe:	89bb      	ldrh	r3, [r7, #12]
 800f100:	1ad3      	subs	r3, r2, r3
 800f102:	b29a      	uxth	r2, r3
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	899b      	ldrh	r3, [r3, #12]
 800f10e:	b29c      	uxth	r4, r3
 800f110:	7efb      	ldrb	r3, [r7, #27]
 800f112:	b29b      	uxth	r3, r3
 800f114:	4618      	mov	r0, r3
 800f116:	f7fa f873 	bl	8009200 <lwip_htons>
 800f11a:	4603      	mov	r3, r0
 800f11c:	461a      	mov	r2, r3
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	4322      	orrs	r2, r4
 800f124:	b292      	uxth	r2, r2
 800f126:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7fb fd9f 	bl	800ac70 <pbuf_clen>
 800f132:	4603      	mov	r3, r0
 800f134:	461a      	mov	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f13c:	4413      	add	r3, r2
 800f13e:	b29a      	uxth	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f146:	69fb      	ldr	r3, [r7, #28]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fb fd90 	bl	800ac70 <pbuf_clen>
 800f150:	4603      	mov	r3, r0
 800f152:	461a      	mov	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f15a:	4413      	add	r3, r2
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	69fa      	ldr	r2, [r7, #28]
 800f170:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d103      	bne.n	800f182 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2200      	movs	r2, #0
 800f17e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f182:	2300      	movs	r3, #0
 800f184:	e016      	b.n	800f1b4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f186:	bf00      	nop
 800f188:	e002      	b.n	800f190 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f18a:	bf00      	nop
 800f18c:	e000      	b.n	800f190 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f18e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f190:	69fb      	ldr	r3, [r7, #28]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d006      	beq.n	800f1a4 <tcp_split_unsent_seg+0x25c>
 800f196:	4b09      	ldr	r3, [pc, #36]	; (800f1bc <tcp_split_unsent_seg+0x274>)
 800f198:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f19c:	490d      	ldr	r1, [pc, #52]	; (800f1d4 <tcp_split_unsent_seg+0x28c>)
 800f19e:	4809      	ldr	r0, [pc, #36]	; (800f1c4 <tcp_split_unsent_seg+0x27c>)
 800f1a0:	f004 f9b8 	bl	8013514 <iprintf>
  if (p != NULL) {
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d002      	beq.n	800f1b0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f1aa:	6938      	ldr	r0, [r7, #16]
 800f1ac:	f7fb fcd2 	bl	800ab54 <pbuf_free>
  }

  return ERR_MEM;
 800f1b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3724      	adds	r7, #36	; 0x24
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd90      	pop	{r4, r7, pc}
 800f1bc:	08015b68 	.word	0x08015b68
 800f1c0:	08015efc 	.word	0x08015efc
 800f1c4:	08015bbc 	.word	0x08015bbc
 800f1c8:	08015f20 	.word	0x08015f20
 800f1cc:	08015f44 	.word	0x08015f44
 800f1d0:	08015f54 	.word	0x08015f54
 800f1d4:	08015f64 	.word	0x08015f64

0800f1d8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f1d8:	b590      	push	{r4, r7, lr}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d106      	bne.n	800f1f4 <tcp_send_fin+0x1c>
 800f1e6:	4b21      	ldr	r3, [pc, #132]	; (800f26c <tcp_send_fin+0x94>)
 800f1e8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f1ec:	4920      	ldr	r1, [pc, #128]	; (800f270 <tcp_send_fin+0x98>)
 800f1ee:	4821      	ldr	r0, [pc, #132]	; (800f274 <tcp_send_fin+0x9c>)
 800f1f0:	f004 f990 	bl	8013514 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d02e      	beq.n	800f25a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f200:	60fb      	str	r3, [r7, #12]
 800f202:	e002      	b.n	800f20a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d1f8      	bne.n	800f204 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	899b      	ldrh	r3, [r3, #12]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7f9 fff0 	bl	8009200 <lwip_htons>
 800f220:	4603      	mov	r3, r0
 800f222:	b2db      	uxtb	r3, r3
 800f224:	f003 0307 	and.w	r3, r3, #7
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d116      	bne.n	800f25a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	899b      	ldrh	r3, [r3, #12]
 800f232:	b29c      	uxth	r4, r3
 800f234:	2001      	movs	r0, #1
 800f236:	f7f9 ffe3 	bl	8009200 <lwip_htons>
 800f23a:	4603      	mov	r3, r0
 800f23c:	461a      	mov	r2, r3
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	68db      	ldr	r3, [r3, #12]
 800f242:	4322      	orrs	r2, r4
 800f244:	b292      	uxth	r2, r2
 800f246:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	8b5b      	ldrh	r3, [r3, #26]
 800f24c:	f043 0320 	orr.w	r3, r3, #32
 800f250:	b29a      	uxth	r2, r3
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f256:	2300      	movs	r3, #0
 800f258:	e004      	b.n	800f264 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f25a:	2101      	movs	r1, #1
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f000 f80b 	bl	800f278 <tcp_enqueue_flags>
 800f262:	4603      	mov	r3, r0
}
 800f264:	4618      	mov	r0, r3
 800f266:	3714      	adds	r7, #20
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd90      	pop	{r4, r7, pc}
 800f26c:	08015b68 	.word	0x08015b68
 800f270:	08015f70 	.word	0x08015f70
 800f274:	08015bbc 	.word	0x08015bbc

0800f278 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b08a      	sub	sp, #40	; 0x28
 800f27c:	af02      	add	r7, sp, #8
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	460b      	mov	r3, r1
 800f282:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f284:	2300      	movs	r3, #0
 800f286:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f288:	2300      	movs	r3, #0
 800f28a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f28c:	78fb      	ldrb	r3, [r7, #3]
 800f28e:	f003 0303 	and.w	r3, r3, #3
 800f292:	2b00      	cmp	r3, #0
 800f294:	d106      	bne.n	800f2a4 <tcp_enqueue_flags+0x2c>
 800f296:	4b67      	ldr	r3, [pc, #412]	; (800f434 <tcp_enqueue_flags+0x1bc>)
 800f298:	f240 4211 	movw	r2, #1041	; 0x411
 800f29c:	4966      	ldr	r1, [pc, #408]	; (800f438 <tcp_enqueue_flags+0x1c0>)
 800f29e:	4867      	ldr	r0, [pc, #412]	; (800f43c <tcp_enqueue_flags+0x1c4>)
 800f2a0:	f004 f938 	bl	8013514 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d106      	bne.n	800f2b8 <tcp_enqueue_flags+0x40>
 800f2aa:	4b62      	ldr	r3, [pc, #392]	; (800f434 <tcp_enqueue_flags+0x1bc>)
 800f2ac:	f240 4213 	movw	r2, #1043	; 0x413
 800f2b0:	4963      	ldr	r1, [pc, #396]	; (800f440 <tcp_enqueue_flags+0x1c8>)
 800f2b2:	4862      	ldr	r0, [pc, #392]	; (800f43c <tcp_enqueue_flags+0x1c4>)
 800f2b4:	f004 f92e 	bl	8013514 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f2b8:	78fb      	ldrb	r3, [r7, #3]
 800f2ba:	f003 0302 	and.w	r3, r3, #2
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d001      	beq.n	800f2c6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f2c6:	7ffb      	ldrb	r3, [r7, #31]
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	f003 0304 	and.w	r3, r3, #4
 800f2d0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f2d2:	7dfb      	ldrb	r3, [r7, #23]
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f2da:	4619      	mov	r1, r3
 800f2dc:	2036      	movs	r0, #54	; 0x36
 800f2de:	f7fb f955 	bl	800a58c <pbuf_alloc>
 800f2e2:	6138      	str	r0, [r7, #16]
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d109      	bne.n	800f2fe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	8b5b      	ldrh	r3, [r3, #26]
 800f2ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2f2:	b29a      	uxth	r2, r3
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2fc:	e095      	b.n	800f42a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	895a      	ldrh	r2, [r3, #10]
 800f302:	7dfb      	ldrb	r3, [r7, #23]
 800f304:	b29b      	uxth	r3, r3
 800f306:	429a      	cmp	r2, r3
 800f308:	d206      	bcs.n	800f318 <tcp_enqueue_flags+0xa0>
 800f30a:	4b4a      	ldr	r3, [pc, #296]	; (800f434 <tcp_enqueue_flags+0x1bc>)
 800f30c:	f240 4239 	movw	r2, #1081	; 0x439
 800f310:	494c      	ldr	r1, [pc, #304]	; (800f444 <tcp_enqueue_flags+0x1cc>)
 800f312:	484a      	ldr	r0, [pc, #296]	; (800f43c <tcp_enqueue_flags+0x1c4>)
 800f314:	f004 f8fe 	bl	8013514 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f31c:	78fa      	ldrb	r2, [r7, #3]
 800f31e:	7ffb      	ldrb	r3, [r7, #31]
 800f320:	9300      	str	r3, [sp, #0]
 800f322:	460b      	mov	r3, r1
 800f324:	6939      	ldr	r1, [r7, #16]
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f7ff fd70 	bl	800ee0c <tcp_create_segment>
 800f32c:	60f8      	str	r0, [r7, #12]
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d109      	bne.n	800f348 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	8b5b      	ldrh	r3, [r3, #26]
 800f338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f342:	f04f 33ff 	mov.w	r3, #4294967295
 800f346:	e070      	b.n	800f42a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	f003 0303 	and.w	r3, r3, #3
 800f350:	2b00      	cmp	r3, #0
 800f352:	d006      	beq.n	800f362 <tcp_enqueue_flags+0xea>
 800f354:	4b37      	ldr	r3, [pc, #220]	; (800f434 <tcp_enqueue_flags+0x1bc>)
 800f356:	f240 4242 	movw	r2, #1090	; 0x442
 800f35a:	493b      	ldr	r1, [pc, #236]	; (800f448 <tcp_enqueue_flags+0x1d0>)
 800f35c:	4837      	ldr	r0, [pc, #220]	; (800f43c <tcp_enqueue_flags+0x1c4>)
 800f35e:	f004 f8d9 	bl	8013514 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	891b      	ldrh	r3, [r3, #8]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d006      	beq.n	800f378 <tcp_enqueue_flags+0x100>
 800f36a:	4b32      	ldr	r3, [pc, #200]	; (800f434 <tcp_enqueue_flags+0x1bc>)
 800f36c:	f240 4243 	movw	r2, #1091	; 0x443
 800f370:	4936      	ldr	r1, [pc, #216]	; (800f44c <tcp_enqueue_flags+0x1d4>)
 800f372:	4832      	ldr	r0, [pc, #200]	; (800f43c <tcp_enqueue_flags+0x1c4>)
 800f374:	f004 f8ce 	bl	8013514 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d103      	bne.n	800f388 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	66da      	str	r2, [r3, #108]	; 0x6c
 800f386:	e00d      	b.n	800f3a4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f38c:	61bb      	str	r3, [r7, #24]
 800f38e:	e002      	b.n	800f396 <tcp_enqueue_flags+0x11e>
 800f390:	69bb      	ldr	r3, [r7, #24]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	61bb      	str	r3, [r7, #24]
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d1f8      	bne.n	800f390 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f39e:	69bb      	ldr	r3, [r7, #24]
 800f3a0:	68fa      	ldr	r2, [r7, #12]
 800f3a2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f3ac:	78fb      	ldrb	r3, [r7, #3]
 800f3ae:	f003 0302 	and.w	r3, r3, #2
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d104      	bne.n	800f3c0 <tcp_enqueue_flags+0x148>
 800f3b6:	78fb      	ldrb	r3, [r7, #3]
 800f3b8:	f003 0301 	and.w	r3, r3, #1
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d004      	beq.n	800f3ca <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3c4:	1c5a      	adds	r2, r3, #1
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f3ca:	78fb      	ldrb	r3, [r7, #3]
 800f3cc:	f003 0301 	and.w	r3, r3, #1
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d006      	beq.n	800f3e2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	8b5b      	ldrh	r3, [r3, #26]
 800f3d8:	f043 0320 	orr.w	r3, r3, #32
 800f3dc:	b29a      	uxth	r2, r3
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fb fc42 	bl	800ac70 <pbuf_clen>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f3f6:	4413      	add	r3, r2
 800f3f8:	b29a      	uxth	r2, r3
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f406:	2b00      	cmp	r3, #0
 800f408:	d00e      	beq.n	800f428 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d10a      	bne.n	800f428 <tcp_enqueue_flags+0x1b0>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f416:	2b00      	cmp	r3, #0
 800f418:	d106      	bne.n	800f428 <tcp_enqueue_flags+0x1b0>
 800f41a:	4b06      	ldr	r3, [pc, #24]	; (800f434 <tcp_enqueue_flags+0x1bc>)
 800f41c:	f240 4265 	movw	r2, #1125	; 0x465
 800f420:	490b      	ldr	r1, [pc, #44]	; (800f450 <tcp_enqueue_flags+0x1d8>)
 800f422:	4806      	ldr	r0, [pc, #24]	; (800f43c <tcp_enqueue_flags+0x1c4>)
 800f424:	f004 f876 	bl	8013514 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3720      	adds	r7, #32
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	08015b68 	.word	0x08015b68
 800f438:	08015f8c 	.word	0x08015f8c
 800f43c:	08015bbc 	.word	0x08015bbc
 800f440:	08015fe4 	.word	0x08015fe4
 800f444:	08016004 	.word	0x08016004
 800f448:	08016040 	.word	0x08016040
 800f44c:	08016058 	.word	0x08016058
 800f450:	08016084 	.word	0x08016084

0800f454 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f454:	b5b0      	push	{r4, r5, r7, lr}
 800f456:	b08a      	sub	sp, #40	; 0x28
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d106      	bne.n	800f470 <tcp_output+0x1c>
 800f462:	4b8a      	ldr	r3, [pc, #552]	; (800f68c <tcp_output+0x238>)
 800f464:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f468:	4989      	ldr	r1, [pc, #548]	; (800f690 <tcp_output+0x23c>)
 800f46a:	488a      	ldr	r0, [pc, #552]	; (800f694 <tcp_output+0x240>)
 800f46c:	f004 f852 	bl	8013514 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	7d1b      	ldrb	r3, [r3, #20]
 800f474:	2b01      	cmp	r3, #1
 800f476:	d106      	bne.n	800f486 <tcp_output+0x32>
 800f478:	4b84      	ldr	r3, [pc, #528]	; (800f68c <tcp_output+0x238>)
 800f47a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f47e:	4986      	ldr	r1, [pc, #536]	; (800f698 <tcp_output+0x244>)
 800f480:	4884      	ldr	r0, [pc, #528]	; (800f694 <tcp_output+0x240>)
 800f482:	f004 f847 	bl	8013514 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f486:	4b85      	ldr	r3, [pc, #532]	; (800f69c <tcp_output+0x248>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d101      	bne.n	800f494 <tcp_output+0x40>
    return ERR_OK;
 800f490:	2300      	movs	r3, #0
 800f492:	e1ce      	b.n	800f832 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	bf28      	it	cs
 800f4a4:	4613      	movcs	r3, r2
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d10b      	bne.n	800f4ce <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	8b5b      	ldrh	r3, [r3, #26]
 800f4ba:	f003 0302 	and.w	r3, r3, #2
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	f000 81aa 	beq.w	800f818 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fdcb 	bl	8010060 <tcp_send_empty_ack>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	e1b1      	b.n	800f832 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f4ce:	6879      	ldr	r1, [r7, #4]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	3304      	adds	r3, #4
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f7ff fc7c 	bl	800edd4 <tcp_route>
 800f4dc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d102      	bne.n	800f4ea <tcp_output+0x96>
    return ERR_RTE;
 800f4e4:	f06f 0303 	mvn.w	r3, #3
 800f4e8:	e1a3      	b.n	800f832 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d003      	beq.n	800f4f8 <tcp_output+0xa4>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d111      	bne.n	800f51c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d002      	beq.n	800f504 <tcp_output+0xb0>
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	3304      	adds	r3, #4
 800f502:	e000      	b.n	800f506 <tcp_output+0xb2>
 800f504:	2300      	movs	r3, #0
 800f506:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d102      	bne.n	800f514 <tcp_output+0xc0>
      return ERR_RTE;
 800f50e:	f06f 0303 	mvn.w	r3, #3
 800f512:	e18e      	b.n	800f832 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	4618      	mov	r0, r3
 800f524:	f7f9 fe81 	bl	800922a <lwip_htonl>
 800f528:	4602      	mov	r2, r0
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f532:	8912      	ldrh	r2, [r2, #8]
 800f534:	4413      	add	r3, r2
 800f536:	69ba      	ldr	r2, [r7, #24]
 800f538:	429a      	cmp	r2, r3
 800f53a:	d227      	bcs.n	800f58c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f542:	461a      	mov	r2, r3
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	4293      	cmp	r3, r2
 800f548:	d114      	bne.n	800f574 <tcp_output+0x120>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d110      	bne.n	800f574 <tcp_output+0x120>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d10b      	bne.n	800f574 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2200      	movs	r2, #0
 800f560:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2201      	movs	r2, #1
 800f568:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2200      	movs	r2, #0
 800f570:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	8b5b      	ldrh	r3, [r3, #26]
 800f578:	f003 0302 	and.w	r3, r3, #2
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	f000 814d 	beq.w	800f81c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f000 fd6c 	bl	8010060 <tcp_send_empty_ack>
 800f588:	4603      	mov	r3, r0
 800f58a:	e152      	b.n	800f832 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f598:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f59a:	6a3b      	ldr	r3, [r7, #32]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f000 811c 	beq.w	800f7da <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f5a2:	e002      	b.n	800f5aa <tcp_output+0x156>
 800f5a4:	6a3b      	ldr	r3, [r7, #32]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	623b      	str	r3, [r7, #32]
 800f5aa:	6a3b      	ldr	r3, [r7, #32]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1f8      	bne.n	800f5a4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f5b2:	e112      	b.n	800f7da <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b6:	68db      	ldr	r3, [r3, #12]
 800f5b8:	899b      	ldrh	r3, [r3, #12]
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7f9 fe1f 	bl	8009200 <lwip_htons>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	f003 0304 	and.w	r3, r3, #4
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d006      	beq.n	800f5dc <tcp_output+0x188>
 800f5ce:	4b2f      	ldr	r3, [pc, #188]	; (800f68c <tcp_output+0x238>)
 800f5d0:	f240 5236 	movw	r2, #1334	; 0x536
 800f5d4:	4932      	ldr	r1, [pc, #200]	; (800f6a0 <tcp_output+0x24c>)
 800f5d6:	482f      	ldr	r0, [pc, #188]	; (800f694 <tcp_output+0x240>)
 800f5d8:	f003 ff9c 	bl	8013514 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d01f      	beq.n	800f624 <tcp_output+0x1d0>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	8b5b      	ldrh	r3, [r3, #26]
 800f5e8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d119      	bne.n	800f624 <tcp_output+0x1d0>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d00b      	beq.n	800f610 <tcp_output+0x1bc>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d110      	bne.n	800f624 <tcp_output+0x1d0>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f606:	891a      	ldrh	r2, [r3, #8]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d209      	bcs.n	800f624 <tcp_output+0x1d0>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f616:	2b00      	cmp	r3, #0
 800f618:	d004      	beq.n	800f624 <tcp_output+0x1d0>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f620:	2b08      	cmp	r3, #8
 800f622:	d901      	bls.n	800f628 <tcp_output+0x1d4>
 800f624:	2301      	movs	r3, #1
 800f626:	e000      	b.n	800f62a <tcp_output+0x1d6>
 800f628:	2300      	movs	r3, #0
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d106      	bne.n	800f63c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	8b5b      	ldrh	r3, [r3, #26]
 800f632:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f636:	2b00      	cmp	r3, #0
 800f638:	f000 80e4 	beq.w	800f804 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	7d1b      	ldrb	r3, [r3, #20]
 800f640:	2b02      	cmp	r3, #2
 800f642:	d00d      	beq.n	800f660 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	899b      	ldrh	r3, [r3, #12]
 800f64a:	b29c      	uxth	r4, r3
 800f64c:	2010      	movs	r0, #16
 800f64e:	f7f9 fdd7 	bl	8009200 <lwip_htons>
 800f652:	4603      	mov	r3, r0
 800f654:	461a      	mov	r2, r3
 800f656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	4322      	orrs	r2, r4
 800f65c:	b292      	uxth	r2, r2
 800f65e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f660:	697a      	ldr	r2, [r7, #20]
 800f662:	6879      	ldr	r1, [r7, #4]
 800f664:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f666:	f000 f909 	bl	800f87c <tcp_output_segment>
 800f66a:	4603      	mov	r3, r0
 800f66c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f66e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d016      	beq.n	800f6a4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	8b5b      	ldrh	r3, [r3, #26]
 800f67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f67e:	b29a      	uxth	r2, r3
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	835a      	strh	r2, [r3, #26]
      return err;
 800f684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f688:	e0d3      	b.n	800f832 <tcp_output+0x3de>
 800f68a:	bf00      	nop
 800f68c:	08015b68 	.word	0x08015b68
 800f690:	080160ac 	.word	0x080160ac
 800f694:	08015bbc 	.word	0x08015bbc
 800f698:	080160c4 	.word	0x080160c4
 800f69c:	2400a9c0 	.word	0x2400a9c0
 800f6a0:	080160ec 	.word	0x080160ec
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a6:	681a      	ldr	r2, [r3, #0]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	7d1b      	ldrb	r3, [r3, #20]
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	d006      	beq.n	800f6c2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	8b5b      	ldrh	r3, [r3, #26]
 800f6b8:	f023 0303 	bic.w	r3, r3, #3
 800f6bc:	b29a      	uxth	r2, r3
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7f9 fdae 	bl	800922a <lwip_htonl>
 800f6ce:	4604      	mov	r4, r0
 800f6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d2:	891b      	ldrh	r3, [r3, #8]
 800f6d4:	461d      	mov	r5, r3
 800f6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	899b      	ldrh	r3, [r3, #12]
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7f9 fd8e 	bl	8009200 <lwip_htons>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	f003 0303 	and.w	r3, r3, #3
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d001      	beq.n	800f6f4 <tcp_output+0x2a0>
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	e000      	b.n	800f6f6 <tcp_output+0x2a2>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	442b      	add	r3, r5
 800f6f8:	4423      	add	r3, r4
 800f6fa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	1ad3      	subs	r3, r2, r3
 800f704:	2b00      	cmp	r3, #0
 800f706:	da02      	bge.n	800f70e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f710:	891b      	ldrh	r3, [r3, #8]
 800f712:	461c      	mov	r4, r3
 800f714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	899b      	ldrh	r3, [r3, #12]
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7f9 fd6f 	bl	8009200 <lwip_htons>
 800f722:	4603      	mov	r3, r0
 800f724:	b2db      	uxtb	r3, r3
 800f726:	f003 0303 	and.w	r3, r3, #3
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d001      	beq.n	800f732 <tcp_output+0x2de>
 800f72e:	2301      	movs	r3, #1
 800f730:	e000      	b.n	800f734 <tcp_output+0x2e0>
 800f732:	2300      	movs	r3, #0
 800f734:	4423      	add	r3, r4
 800f736:	2b00      	cmp	r3, #0
 800f738:	d049      	beq.n	800f7ce <tcp_output+0x37a>
      seg->next = NULL;
 800f73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73c:	2200      	movs	r2, #0
 800f73e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f744:	2b00      	cmp	r3, #0
 800f746:	d105      	bne.n	800f754 <tcp_output+0x300>
        pcb->unacked = seg;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f74c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f750:	623b      	str	r3, [r7, #32]
 800f752:	e03f      	b.n	800f7d4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7f9 fd65 	bl	800922a <lwip_htonl>
 800f760:	4604      	mov	r4, r0
 800f762:	6a3b      	ldr	r3, [r7, #32]
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	4618      	mov	r0, r3
 800f76a:	f7f9 fd5e 	bl	800922a <lwip_htonl>
 800f76e:	4603      	mov	r3, r0
 800f770:	1ae3      	subs	r3, r4, r3
 800f772:	2b00      	cmp	r3, #0
 800f774:	da24      	bge.n	800f7c0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	3370      	adds	r3, #112	; 0x70
 800f77a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f77c:	e002      	b.n	800f784 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f77e:	69fb      	ldr	r3, [r7, #28]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d011      	beq.n	800f7b0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	4618      	mov	r0, r3
 800f796:	f7f9 fd48 	bl	800922a <lwip_htonl>
 800f79a:	4604      	mov	r4, r0
 800f79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7f9 fd41 	bl	800922a <lwip_htonl>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	dbe6      	blt.n	800f77e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7bc:	601a      	str	r2, [r3, #0]
 800f7be:	e009      	b.n	800f7d4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f7c0:	6a3b      	ldr	r3, [r7, #32]
 800f7c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7c4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f7c6:	6a3b      	ldr	r3, [r7, #32]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	623b      	str	r3, [r7, #32]
 800f7cc:	e002      	b.n	800f7d4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f7ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7d0:	f7fc fc3f 	bl	800c052 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d012      	beq.n	800f806 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7f9 fd1f 	bl	800922a <lwip_htonl>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7f2:	1ad3      	subs	r3, r2, r3
 800f7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7f6:	8912      	ldrh	r2, [r2, #8]
 800f7f8:	4413      	add	r3, r2
  while (seg != NULL &&
 800f7fa:	69ba      	ldr	r2, [r7, #24]
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	f4bf aed9 	bcs.w	800f5b4 <tcp_output+0x160>
 800f802:	e000      	b.n	800f806 <tcp_output+0x3b2>
      break;
 800f804:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d108      	bne.n	800f820 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2200      	movs	r2, #0
 800f812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f816:	e004      	b.n	800f822 <tcp_output+0x3ce>
    goto output_done;
 800f818:	bf00      	nop
 800f81a:	e002      	b.n	800f822 <tcp_output+0x3ce>
    goto output_done;
 800f81c:	bf00      	nop
 800f81e:	e000      	b.n	800f822 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f820:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	8b5b      	ldrh	r3, [r3, #26]
 800f826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f82a:	b29a      	uxth	r2, r3
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f830:	2300      	movs	r3, #0
}
 800f832:	4618      	mov	r0, r3
 800f834:	3728      	adds	r7, #40	; 0x28
 800f836:	46bd      	mov	sp, r7
 800f838:	bdb0      	pop	{r4, r5, r7, pc}
 800f83a:	bf00      	nop

0800f83c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d106      	bne.n	800f858 <tcp_output_segment_busy+0x1c>
 800f84a:	4b09      	ldr	r3, [pc, #36]	; (800f870 <tcp_output_segment_busy+0x34>)
 800f84c:	f240 529a 	movw	r2, #1434	; 0x59a
 800f850:	4908      	ldr	r1, [pc, #32]	; (800f874 <tcp_output_segment_busy+0x38>)
 800f852:	4809      	ldr	r0, [pc, #36]	; (800f878 <tcp_output_segment_busy+0x3c>)
 800f854:	f003 fe5e 	bl	8013514 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	7b9b      	ldrb	r3, [r3, #14]
 800f85e:	2b01      	cmp	r3, #1
 800f860:	d001      	beq.n	800f866 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f862:	2301      	movs	r3, #1
 800f864:	e000      	b.n	800f868 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f866:	2300      	movs	r3, #0
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3708      	adds	r7, #8
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	08015b68 	.word	0x08015b68
 800f874:	08016104 	.word	0x08016104
 800f878:	08015bbc 	.word	0x08015bbc

0800f87c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f87c:	b5b0      	push	{r4, r5, r7, lr}
 800f87e:	b08c      	sub	sp, #48	; 0x30
 800f880:	af04      	add	r7, sp, #16
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d106      	bne.n	800f89c <tcp_output_segment+0x20>
 800f88e:	4b63      	ldr	r3, [pc, #396]	; (800fa1c <tcp_output_segment+0x1a0>)
 800f890:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f894:	4962      	ldr	r1, [pc, #392]	; (800fa20 <tcp_output_segment+0x1a4>)
 800f896:	4863      	ldr	r0, [pc, #396]	; (800fa24 <tcp_output_segment+0x1a8>)
 800f898:	f003 fe3c 	bl	8013514 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d106      	bne.n	800f8b0 <tcp_output_segment+0x34>
 800f8a2:	4b5e      	ldr	r3, [pc, #376]	; (800fa1c <tcp_output_segment+0x1a0>)
 800f8a4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f8a8:	495f      	ldr	r1, [pc, #380]	; (800fa28 <tcp_output_segment+0x1ac>)
 800f8aa:	485e      	ldr	r0, [pc, #376]	; (800fa24 <tcp_output_segment+0x1a8>)
 800f8ac:	f003 fe32 	bl	8013514 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d106      	bne.n	800f8c4 <tcp_output_segment+0x48>
 800f8b6:	4b59      	ldr	r3, [pc, #356]	; (800fa1c <tcp_output_segment+0x1a0>)
 800f8b8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f8bc:	495b      	ldr	r1, [pc, #364]	; (800fa2c <tcp_output_segment+0x1b0>)
 800f8be:	4859      	ldr	r0, [pc, #356]	; (800fa24 <tcp_output_segment+0x1a8>)
 800f8c0:	f003 fe28 	bl	8013514 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f8c4:	68f8      	ldr	r0, [r7, #12]
 800f8c6:	f7ff ffb9 	bl	800f83c <tcp_output_segment_busy>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d001      	beq.n	800f8d4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	e09f      	b.n	800fa14 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	68dc      	ldr	r4, [r3, #12]
 800f8dc:	4610      	mov	r0, r2
 800f8de:	f7f9 fca4 	bl	800922a <lwip_htonl>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	68dc      	ldr	r4, [r3, #12]
 800f8ee:	4610      	mov	r0, r2
 800f8f0:	f7f9 fc86 	bl	8009200 <lwip_htons>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8fc:	68ba      	ldr	r2, [r7, #8]
 800f8fe:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f900:	441a      	add	r2, r3
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	3314      	adds	r3, #20
 800f90c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	7a9b      	ldrb	r3, [r3, #10]
 800f912:	f003 0301 	and.w	r3, r3, #1
 800f916:	2b00      	cmp	r3, #0
 800f918:	d015      	beq.n	800f946 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	3304      	adds	r3, #4
 800f91e:	461a      	mov	r2, r3
 800f920:	6879      	ldr	r1, [r7, #4]
 800f922:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f926:	f7fc fe8b 	bl	800c640 <tcp_eff_send_mss_netif>
 800f92a:	4603      	mov	r3, r0
 800f92c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f92e:	8b7b      	ldrh	r3, [r7, #26]
 800f930:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f934:	4618      	mov	r0, r3
 800f936:	f7f9 fc78 	bl	800922a <lwip_htonl>
 800f93a:	4602      	mov	r2, r0
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	3304      	adds	r3, #4
 800f944:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	da02      	bge.n	800f956 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	2200      	movs	r2, #0
 800f954:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d10c      	bne.n	800f978 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f95e:	4b34      	ldr	r3, [pc, #208]	; (800fa30 <tcp_output_segment+0x1b4>)
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	68db      	ldr	r3, [r3, #12]
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7f9 fc5c 	bl	800922a <lwip_htonl>
 800f972:	4602      	mov	r2, r0
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	68da      	ldr	r2, [r3, #12]
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	685b      	ldr	r3, [r3, #4]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	1ad3      	subs	r3, r2, r3
 800f984:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	8959      	ldrh	r1, [r3, #10]
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	8b3a      	ldrh	r2, [r7, #24]
 800f992:	1a8a      	subs	r2, r1, r2
 800f994:	b292      	uxth	r2, r2
 800f996:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	8919      	ldrh	r1, [r3, #8]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	8b3a      	ldrh	r2, [r7, #24]
 800f9a4:	1a8a      	subs	r2, r1, r2
 800f9a6:	b292      	uxth	r2, r2
 800f9a8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	68fa      	ldr	r2, [r7, #12]
 800f9b0:	68d2      	ldr	r2, [r2, #12]
 800f9b2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	741a      	strb	r2, [r3, #16]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	f103 0214 	add.w	r2, r3, #20
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	7a9b      	ldrb	r3, [r3, #10]
 800f9cc:	009b      	lsls	r3, r3, #2
 800f9ce:	f003 0304 	and.w	r3, r3, #4
 800f9d2:	4413      	add	r3, r2
 800f9d4:	69fa      	ldr	r2, [r7, #28]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d006      	beq.n	800f9e8 <tcp_output_segment+0x16c>
 800f9da:	4b10      	ldr	r3, [pc, #64]	; (800fa1c <tcp_output_segment+0x1a0>)
 800f9dc:	f240 621c 	movw	r2, #1564	; 0x61c
 800f9e0:	4914      	ldr	r1, [pc, #80]	; (800fa34 <tcp_output_segment+0x1b8>)
 800f9e2:	4810      	ldr	r0, [pc, #64]	; (800fa24 <tcp_output_segment+0x1a8>)
 800f9e4:	f003 fd96 	bl	8013514 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6858      	ldr	r0, [r3, #4]
 800f9ec:	68b9      	ldr	r1, [r7, #8]
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	1d1c      	adds	r4, r3, #4
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	7add      	ldrb	r5, [r3, #11]
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	7a9b      	ldrb	r3, [r3, #10]
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	9202      	str	r2, [sp, #8]
 800f9fe:	2206      	movs	r2, #6
 800fa00:	9201      	str	r2, [sp, #4]
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	462b      	mov	r3, r5
 800fa06:	4622      	mov	r2, r4
 800fa08:	f002 fa8c 	bl	8011f24 <ip4_output_if>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fa10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3720      	adds	r7, #32
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bdb0      	pop	{r4, r5, r7, pc}
 800fa1c:	08015b68 	.word	0x08015b68
 800fa20:	0801612c 	.word	0x0801612c
 800fa24:	08015bbc 	.word	0x08015bbc
 800fa28:	0801614c 	.word	0x0801614c
 800fa2c:	0801616c 	.word	0x0801616c
 800fa30:	2400a9b0 	.word	0x2400a9b0
 800fa34:	08016190 	.word	0x08016190

0800fa38 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fa38:	b5b0      	push	{r4, r5, r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d106      	bne.n	800fa54 <tcp_rexmit_rto_prepare+0x1c>
 800fa46:	4b31      	ldr	r3, [pc, #196]	; (800fb0c <tcp_rexmit_rto_prepare+0xd4>)
 800fa48:	f240 6263 	movw	r2, #1635	; 0x663
 800fa4c:	4930      	ldr	r1, [pc, #192]	; (800fb10 <tcp_rexmit_rto_prepare+0xd8>)
 800fa4e:	4831      	ldr	r0, [pc, #196]	; (800fb14 <tcp_rexmit_rto_prepare+0xdc>)
 800fa50:	f003 fd60 	bl	8013514 <iprintf>

  if (pcb->unacked == NULL) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d102      	bne.n	800fa62 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800fa5c:	f06f 0305 	mvn.w	r3, #5
 800fa60:	e050      	b.n	800fb04 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa66:	60fb      	str	r3, [r7, #12]
 800fa68:	e00b      	b.n	800fa82 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fa6a:	68f8      	ldr	r0, [r7, #12]
 800fa6c:	f7ff fee6 	bl	800f83c <tcp_output_segment_busy>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d002      	beq.n	800fa7c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fa76:	f06f 0305 	mvn.w	r3, #5
 800fa7a:	e043      	b.n	800fb04 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	60fb      	str	r3, [r7, #12]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d1ef      	bne.n	800fa6a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fa8a:	68f8      	ldr	r0, [r7, #12]
 800fa8c:	f7ff fed6 	bl	800f83c <tcp_output_segment_busy>
 800fa90:	4603      	mov	r3, r0
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d002      	beq.n	800fa9c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fa96:	f06f 0305 	mvn.w	r3, #5
 800fa9a:	e033      	b.n	800fb04 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2200      	movs	r2, #0
 800fab0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	8b5b      	ldrh	r3, [r3, #26]
 800fab6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800faba:	b29a      	uxth	r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7f9 fbaf 	bl	800922a <lwip_htonl>
 800facc:	4604      	mov	r4, r0
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	891b      	ldrh	r3, [r3, #8]
 800fad2:	461d      	mov	r5, r3
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	899b      	ldrh	r3, [r3, #12]
 800fada:	b29b      	uxth	r3, r3
 800fadc:	4618      	mov	r0, r3
 800fade:	f7f9 fb8f 	bl	8009200 <lwip_htons>
 800fae2:	4603      	mov	r3, r0
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	f003 0303 	and.w	r3, r3, #3
 800faea:	2b00      	cmp	r3, #0
 800faec:	d001      	beq.n	800faf2 <tcp_rexmit_rto_prepare+0xba>
 800faee:	2301      	movs	r3, #1
 800faf0:	e000      	b.n	800faf4 <tcp_rexmit_rto_prepare+0xbc>
 800faf2:	2300      	movs	r3, #0
 800faf4:	442b      	add	r3, r5
 800faf6:	18e2      	adds	r2, r4, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2200      	movs	r2, #0
 800fb00:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bdb0      	pop	{r4, r5, r7, pc}
 800fb0c:	08015b68 	.word	0x08015b68
 800fb10:	080161a4 	.word	0x080161a4
 800fb14:	08015bbc 	.word	0x08015bbc

0800fb18 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d106      	bne.n	800fb34 <tcp_rexmit_rto_commit+0x1c>
 800fb26:	4b0d      	ldr	r3, [pc, #52]	; (800fb5c <tcp_rexmit_rto_commit+0x44>)
 800fb28:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fb2c:	490c      	ldr	r1, [pc, #48]	; (800fb60 <tcp_rexmit_rto_commit+0x48>)
 800fb2e:	480d      	ldr	r0, [pc, #52]	; (800fb64 <tcp_rexmit_rto_commit+0x4c>)
 800fb30:	f003 fcf0 	bl	8013514 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb3a:	2bff      	cmp	r3, #255	; 0xff
 800fb3c:	d007      	beq.n	800fb4e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb44:	3301      	adds	r3, #1
 800fb46:	b2da      	uxtb	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f7ff fc80 	bl	800f454 <tcp_output>
}
 800fb54:	bf00      	nop
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	08015b68 	.word	0x08015b68
 800fb60:	080161c8 	.word	0x080161c8
 800fb64:	08015bbc 	.word	0x08015bbc

0800fb68 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d106      	bne.n	800fb84 <tcp_rexmit_rto+0x1c>
 800fb76:	4b0a      	ldr	r3, [pc, #40]	; (800fba0 <tcp_rexmit_rto+0x38>)
 800fb78:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800fb7c:	4909      	ldr	r1, [pc, #36]	; (800fba4 <tcp_rexmit_rto+0x3c>)
 800fb7e:	480a      	ldr	r0, [pc, #40]	; (800fba8 <tcp_rexmit_rto+0x40>)
 800fb80:	f003 fcc8 	bl	8013514 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7ff ff57 	bl	800fa38 <tcp_rexmit_rto_prepare>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d102      	bne.n	800fb96 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f7ff ffc1 	bl	800fb18 <tcp_rexmit_rto_commit>
  }
}
 800fb96:	bf00      	nop
 800fb98:	3708      	adds	r7, #8
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	08015b68 	.word	0x08015b68
 800fba4:	080161ec 	.word	0x080161ec
 800fba8:	08015bbc 	.word	0x08015bbc

0800fbac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fbac:	b590      	push	{r4, r7, lr}
 800fbae:	b085      	sub	sp, #20
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d106      	bne.n	800fbc8 <tcp_rexmit+0x1c>
 800fbba:	4b2f      	ldr	r3, [pc, #188]	; (800fc78 <tcp_rexmit+0xcc>)
 800fbbc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800fbc0:	492e      	ldr	r1, [pc, #184]	; (800fc7c <tcp_rexmit+0xd0>)
 800fbc2:	482f      	ldr	r0, [pc, #188]	; (800fc80 <tcp_rexmit+0xd4>)
 800fbc4:	f003 fca6 	bl	8013514 <iprintf>

  if (pcb->unacked == NULL) {
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d102      	bne.n	800fbd6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fbd0:	f06f 0305 	mvn.w	r3, #5
 800fbd4:	e04c      	b.n	800fc70 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbda:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fbdc:	68b8      	ldr	r0, [r7, #8]
 800fbde:	f7ff fe2d 	bl	800f83c <tcp_output_segment_busy>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d002      	beq.n	800fbee <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fbe8:	f06f 0305 	mvn.w	r3, #5
 800fbec:	e040      	b.n	800fc70 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	336c      	adds	r3, #108	; 0x6c
 800fbfa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fbfc:	e002      	b.n	800fc04 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d011      	beq.n	800fc30 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	68db      	ldr	r3, [r3, #12]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7f9 fb08 	bl	800922a <lwip_htonl>
 800fc1a:	4604      	mov	r4, r0
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	68db      	ldr	r3, [r3, #12]
 800fc20:	685b      	ldr	r3, [r3, #4]
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7f9 fb01 	bl	800922a <lwip_htonl>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	dbe6      	blt.n	800fbfe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	681a      	ldr	r2, [r3, #0]
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	68ba      	ldr	r2, [r7, #8]
 800fc3c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d103      	bne.n	800fc4e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc54:	2bff      	cmp	r3, #255	; 0xff
 800fc56:	d007      	beq.n	800fc68 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc5e:	3301      	adds	r3, #1
 800fc60:	b2da      	uxtb	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800fc6e:	2300      	movs	r3, #0
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3714      	adds	r7, #20
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd90      	pop	{r4, r7, pc}
 800fc78:	08015b68 	.word	0x08015b68
 800fc7c:	08016208 	.word	0x08016208
 800fc80:	08015bbc 	.word	0x08015bbc

0800fc84 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d106      	bne.n	800fca0 <tcp_rexmit_fast+0x1c>
 800fc92:	4b2a      	ldr	r3, [pc, #168]	; (800fd3c <tcp_rexmit_fast+0xb8>)
 800fc94:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fc98:	4929      	ldr	r1, [pc, #164]	; (800fd40 <tcp_rexmit_fast+0xbc>)
 800fc9a:	482a      	ldr	r0, [pc, #168]	; (800fd44 <tcp_rexmit_fast+0xc0>)
 800fc9c:	f003 fc3a 	bl	8013514 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d045      	beq.n	800fd34 <tcp_rexmit_fast+0xb0>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	8b5b      	ldrh	r3, [r3, #26]
 800fcac:	f003 0304 	and.w	r3, r3, #4
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d13f      	bne.n	800fd34 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f7ff ff79 	bl	800fbac <tcp_rexmit>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d139      	bne.n	800fd34 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fccc:	4293      	cmp	r3, r2
 800fcce:	bf28      	it	cs
 800fcd0:	4613      	movcs	r3, r2
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	da00      	bge.n	800fcda <tcp_rexmit_fast+0x56>
 800fcd8:	3301      	adds	r3, #1
 800fcda:	105b      	asrs	r3, r3, #1
 800fcdc:	b29a      	uxth	r2, r3
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fcea:	461a      	mov	r2, r3
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcf0:	005b      	lsls	r3, r3, #1
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d206      	bcs.n	800fd04 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcfa:	005b      	lsls	r3, r3, #1
 800fcfc:	b29a      	uxth	r2, r3
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd0e:	4619      	mov	r1, r3
 800fd10:	0049      	lsls	r1, r1, #1
 800fd12:	440b      	add	r3, r1
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	4413      	add	r3, r2
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	8b5b      	ldrh	r3, [r3, #26]
 800fd24:	f043 0304 	orr.w	r3, r3, #4
 800fd28:	b29a      	uxth	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2200      	movs	r2, #0
 800fd32:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800fd34:	bf00      	nop
 800fd36:	3708      	adds	r7, #8
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	08015b68 	.word	0x08015b68
 800fd40:	08016220 	.word	0x08016220
 800fd44:	08015bbc 	.word	0x08015bbc

0800fd48 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b086      	sub	sp, #24
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	607b      	str	r3, [r7, #4]
 800fd52:	460b      	mov	r3, r1
 800fd54:	817b      	strh	r3, [r7, #10]
 800fd56:	4613      	mov	r3, r2
 800fd58:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fd5a:	897a      	ldrh	r2, [r7, #10]
 800fd5c:	893b      	ldrh	r3, [r7, #8]
 800fd5e:	4413      	add	r3, r2
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	3314      	adds	r3, #20
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	2022      	movs	r0, #34	; 0x22
 800fd6e:	f7fa fc0d 	bl	800a58c <pbuf_alloc>
 800fd72:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d04d      	beq.n	800fe16 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fd7a:	897b      	ldrh	r3, [r7, #10]
 800fd7c:	3313      	adds	r3, #19
 800fd7e:	697a      	ldr	r2, [r7, #20]
 800fd80:	8952      	ldrh	r2, [r2, #10]
 800fd82:	4293      	cmp	r3, r2
 800fd84:	db06      	blt.n	800fd94 <tcp_output_alloc_header_common+0x4c>
 800fd86:	4b26      	ldr	r3, [pc, #152]	; (800fe20 <tcp_output_alloc_header_common+0xd8>)
 800fd88:	f240 7223 	movw	r2, #1827	; 0x723
 800fd8c:	4925      	ldr	r1, [pc, #148]	; (800fe24 <tcp_output_alloc_header_common+0xdc>)
 800fd8e:	4826      	ldr	r0, [pc, #152]	; (800fe28 <tcp_output_alloc_header_common+0xe0>)
 800fd90:	f003 fbc0 	bl	8013514 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800fd9a:	8c3b      	ldrh	r3, [r7, #32]
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7f9 fa2f 	bl	8009200 <lwip_htons>
 800fda2:	4603      	mov	r3, r0
 800fda4:	461a      	mov	r2, r3
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fdaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7f9 fa27 	bl	8009200 <lwip_htons>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fdc0:	68f8      	ldr	r0, [r7, #12]
 800fdc2:	f7f9 fa32 	bl	800922a <lwip_htonl>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	693b      	ldr	r3, [r7, #16]
 800fdca:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fdcc:	897b      	ldrh	r3, [r7, #10]
 800fdce:	089b      	lsrs	r3, r3, #2
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	3305      	adds	r3, #5
 800fdd4:	b29b      	uxth	r3, r3
 800fdd6:	031b      	lsls	r3, r3, #12
 800fdd8:	b29a      	uxth	r2, r3
 800fdda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	4313      	orrs	r3, r2
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7f9 fa0b 	bl	8009200 <lwip_htons>
 800fdea:	4603      	mov	r3, r0
 800fdec:	461a      	mov	r2, r3
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fdf2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7f9 fa03 	bl	8009200 <lwip_htons>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	2200      	movs	r2, #0
 800fe06:	741a      	strb	r2, [r3, #16]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	749a      	strb	r2, [r3, #18]
 800fe12:	2200      	movs	r2, #0
 800fe14:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fe16:	697b      	ldr	r3, [r7, #20]
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3718      	adds	r7, #24
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	08015b68 	.word	0x08015b68
 800fe24:	08016240 	.word	0x08016240
 800fe28:	08015bbc 	.word	0x08015bbc

0800fe2c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fe2c:	b5b0      	push	{r4, r5, r7, lr}
 800fe2e:	b08a      	sub	sp, #40	; 0x28
 800fe30:	af04      	add	r7, sp, #16
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	607b      	str	r3, [r7, #4]
 800fe36:	460b      	mov	r3, r1
 800fe38:	817b      	strh	r3, [r7, #10]
 800fe3a:	4613      	mov	r3, r2
 800fe3c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d106      	bne.n	800fe52 <tcp_output_alloc_header+0x26>
 800fe44:	4b15      	ldr	r3, [pc, #84]	; (800fe9c <tcp_output_alloc_header+0x70>)
 800fe46:	f240 7242 	movw	r2, #1858	; 0x742
 800fe4a:	4915      	ldr	r1, [pc, #84]	; (800fea0 <tcp_output_alloc_header+0x74>)
 800fe4c:	4815      	ldr	r0, [pc, #84]	; (800fea4 <tcp_output_alloc_header+0x78>)
 800fe4e:	f003 fb61 	bl	8013514 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	8adb      	ldrh	r3, [r3, #22]
 800fe5a:	68fa      	ldr	r2, [r7, #12]
 800fe5c:	8b12      	ldrh	r2, [r2, #24]
 800fe5e:	68f9      	ldr	r1, [r7, #12]
 800fe60:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800fe62:	893d      	ldrh	r5, [r7, #8]
 800fe64:	897c      	ldrh	r4, [r7, #10]
 800fe66:	9103      	str	r1, [sp, #12]
 800fe68:	2110      	movs	r1, #16
 800fe6a:	9102      	str	r1, [sp, #8]
 800fe6c:	9201      	str	r2, [sp, #4]
 800fe6e:	9300      	str	r3, [sp, #0]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	462a      	mov	r2, r5
 800fe74:	4621      	mov	r1, r4
 800fe76:	f7ff ff67 	bl	800fd48 <tcp_output_alloc_header_common>
 800fe7a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d006      	beq.n	800fe90 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe86:	68fa      	ldr	r2, [r7, #12]
 800fe88:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fe8a:	441a      	add	r2, r3
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fe90:	697b      	ldr	r3, [r7, #20]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3718      	adds	r7, #24
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bdb0      	pop	{r4, r5, r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	08015b68 	.word	0x08015b68
 800fea0:	08016270 	.word	0x08016270
 800fea4:	08015bbc 	.word	0x08015bbc

0800fea8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b088      	sub	sp, #32
 800feac:	af00      	add	r7, sp, #0
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	60b9      	str	r1, [r7, #8]
 800feb2:	4611      	mov	r1, r2
 800feb4:	461a      	mov	r2, r3
 800feb6:	460b      	mov	r3, r1
 800feb8:	71fb      	strb	r3, [r7, #7]
 800feba:	4613      	mov	r3, r2
 800febc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800febe:	2300      	movs	r3, #0
 800fec0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d106      	bne.n	800fed6 <tcp_output_fill_options+0x2e>
 800fec8:	4b13      	ldr	r3, [pc, #76]	; (800ff18 <tcp_output_fill_options+0x70>)
 800feca:	f240 7256 	movw	r2, #1878	; 0x756
 800fece:	4913      	ldr	r1, [pc, #76]	; (800ff1c <tcp_output_fill_options+0x74>)
 800fed0:	4813      	ldr	r0, [pc, #76]	; (800ff20 <tcp_output_fill_options+0x78>)
 800fed2:	f003 fb1f 	bl	8013514 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	3314      	adds	r3, #20
 800fee0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fee2:	69bb      	ldr	r3, [r7, #24]
 800fee4:	f103 0214 	add.w	r2, r3, #20
 800fee8:	8bfb      	ldrh	r3, [r7, #30]
 800feea:	009b      	lsls	r3, r3, #2
 800feec:	4619      	mov	r1, r3
 800feee:	79fb      	ldrb	r3, [r7, #7]
 800fef0:	009b      	lsls	r3, r3, #2
 800fef2:	f003 0304 	and.w	r3, r3, #4
 800fef6:	440b      	add	r3, r1
 800fef8:	4413      	add	r3, r2
 800fefa:	697a      	ldr	r2, [r7, #20]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d006      	beq.n	800ff0e <tcp_output_fill_options+0x66>
 800ff00:	4b05      	ldr	r3, [pc, #20]	; (800ff18 <tcp_output_fill_options+0x70>)
 800ff02:	f240 7275 	movw	r2, #1909	; 0x775
 800ff06:	4907      	ldr	r1, [pc, #28]	; (800ff24 <tcp_output_fill_options+0x7c>)
 800ff08:	4805      	ldr	r0, [pc, #20]	; (800ff20 <tcp_output_fill_options+0x78>)
 800ff0a:	f003 fb03 	bl	8013514 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ff0e:	bf00      	nop
 800ff10:	3720      	adds	r7, #32
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	08015b68 	.word	0x08015b68
 800ff1c:	08016298 	.word	0x08016298
 800ff20:	08015bbc 	.word	0x08015bbc
 800ff24:	08016190 	.word	0x08016190

0800ff28 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b08a      	sub	sp, #40	; 0x28
 800ff2c:	af04      	add	r7, sp, #16
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	607a      	str	r2, [r7, #4]
 800ff34:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d106      	bne.n	800ff4a <tcp_output_control_segment+0x22>
 800ff3c:	4b1c      	ldr	r3, [pc, #112]	; (800ffb0 <tcp_output_control_segment+0x88>)
 800ff3e:	f240 7287 	movw	r2, #1927	; 0x787
 800ff42:	491c      	ldr	r1, [pc, #112]	; (800ffb4 <tcp_output_control_segment+0x8c>)
 800ff44:	481c      	ldr	r0, [pc, #112]	; (800ffb8 <tcp_output_control_segment+0x90>)
 800ff46:	f003 fae5 	bl	8013514 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ff4a:	683a      	ldr	r2, [r7, #0]
 800ff4c:	6879      	ldr	r1, [r7, #4]
 800ff4e:	68f8      	ldr	r0, [r7, #12]
 800ff50:	f7fe ff40 	bl	800edd4 <tcp_route>
 800ff54:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d102      	bne.n	800ff62 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ff5c:	23fc      	movs	r3, #252	; 0xfc
 800ff5e:	75fb      	strb	r3, [r7, #23]
 800ff60:	e01c      	b.n	800ff9c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d006      	beq.n	800ff76 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	7adb      	ldrb	r3, [r3, #11]
 800ff6c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	7a9b      	ldrb	r3, [r3, #10]
 800ff72:	757b      	strb	r3, [r7, #21]
 800ff74:	e003      	b.n	800ff7e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ff76:	23ff      	movs	r3, #255	; 0xff
 800ff78:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ff7e:	7dba      	ldrb	r2, [r7, #22]
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	9302      	str	r3, [sp, #8]
 800ff84:	2306      	movs	r3, #6
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	7d7b      	ldrb	r3, [r7, #21]
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	4613      	mov	r3, r2
 800ff8e:	683a      	ldr	r2, [r7, #0]
 800ff90:	6879      	ldr	r1, [r7, #4]
 800ff92:	68b8      	ldr	r0, [r7, #8]
 800ff94:	f001 ffc6 	bl	8011f24 <ip4_output_if>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ff9c:	68b8      	ldr	r0, [r7, #8]
 800ff9e:	f7fa fdd9 	bl	800ab54 <pbuf_free>
  return err;
 800ffa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3718      	adds	r7, #24
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	08015b68 	.word	0x08015b68
 800ffb4:	080162c0 	.word	0x080162c0
 800ffb8:	08015bbc 	.word	0x08015bbc

0800ffbc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ffbc:	b590      	push	{r4, r7, lr}
 800ffbe:	b08b      	sub	sp, #44	; 0x2c
 800ffc0:	af04      	add	r7, sp, #16
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	607a      	str	r2, [r7, #4]
 800ffc8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d106      	bne.n	800ffde <tcp_rst+0x22>
 800ffd0:	4b1f      	ldr	r3, [pc, #124]	; (8010050 <tcp_rst+0x94>)
 800ffd2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ffd6:	491f      	ldr	r1, [pc, #124]	; (8010054 <tcp_rst+0x98>)
 800ffd8:	481f      	ldr	r0, [pc, #124]	; (8010058 <tcp_rst+0x9c>)
 800ffda:	f003 fa9b 	bl	8013514 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ffde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d106      	bne.n	800fff2 <tcp_rst+0x36>
 800ffe4:	4b1a      	ldr	r3, [pc, #104]	; (8010050 <tcp_rst+0x94>)
 800ffe6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ffea:	491c      	ldr	r1, [pc, #112]	; (801005c <tcp_rst+0xa0>)
 800ffec:	481a      	ldr	r0, [pc, #104]	; (8010058 <tcp_rst+0x9c>)
 800ffee:	f003 fa91 	bl	8013514 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fff2:	2300      	movs	r3, #0
 800fff4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fff6:	f246 0308 	movw	r3, #24584	; 0x6008
 800fffa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fffc:	7dfb      	ldrb	r3, [r7, #23]
 800fffe:	b29c      	uxth	r4, r3
 8010000:	68b8      	ldr	r0, [r7, #8]
 8010002:	f7f9 f912 	bl	800922a <lwip_htonl>
 8010006:	4602      	mov	r2, r0
 8010008:	8abb      	ldrh	r3, [r7, #20]
 801000a:	9303      	str	r3, [sp, #12]
 801000c:	2314      	movs	r3, #20
 801000e:	9302      	str	r3, [sp, #8]
 8010010:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010012:	9301      	str	r3, [sp, #4]
 8010014:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010016:	9300      	str	r3, [sp, #0]
 8010018:	4613      	mov	r3, r2
 801001a:	2200      	movs	r2, #0
 801001c:	4621      	mov	r1, r4
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7ff fe92 	bl	800fd48 <tcp_output_alloc_header_common>
 8010024:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00c      	beq.n	8010046 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801002c:	7dfb      	ldrb	r3, [r7, #23]
 801002e:	2200      	movs	r2, #0
 8010030:	6939      	ldr	r1, [r7, #16]
 8010032:	68f8      	ldr	r0, [r7, #12]
 8010034:	f7ff ff38 	bl	800fea8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003a:	683a      	ldr	r2, [r7, #0]
 801003c:	6939      	ldr	r1, [r7, #16]
 801003e:	68f8      	ldr	r0, [r7, #12]
 8010040:	f7ff ff72 	bl	800ff28 <tcp_output_control_segment>
 8010044:	e000      	b.n	8010048 <tcp_rst+0x8c>
    return;
 8010046:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010048:	371c      	adds	r7, #28
 801004a:	46bd      	mov	sp, r7
 801004c:	bd90      	pop	{r4, r7, pc}
 801004e:	bf00      	nop
 8010050:	08015b68 	.word	0x08015b68
 8010054:	080162ec 	.word	0x080162ec
 8010058:	08015bbc 	.word	0x08015bbc
 801005c:	08016308 	.word	0x08016308

08010060 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010060:	b590      	push	{r4, r7, lr}
 8010062:	b087      	sub	sp, #28
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010068:	2300      	movs	r3, #0
 801006a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801006c:	2300      	movs	r3, #0
 801006e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d106      	bne.n	8010084 <tcp_send_empty_ack+0x24>
 8010076:	4b28      	ldr	r3, [pc, #160]	; (8010118 <tcp_send_empty_ack+0xb8>)
 8010078:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801007c:	4927      	ldr	r1, [pc, #156]	; (801011c <tcp_send_empty_ack+0xbc>)
 801007e:	4828      	ldr	r0, [pc, #160]	; (8010120 <tcp_send_empty_ack+0xc0>)
 8010080:	f003 fa48 	bl	8013514 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010084:	7dfb      	ldrb	r3, [r7, #23]
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	b2db      	uxtb	r3, r3
 801008a:	f003 0304 	and.w	r3, r3, #4
 801008e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010090:	7d7b      	ldrb	r3, [r7, #21]
 8010092:	b29c      	uxth	r4, r3
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010098:	4618      	mov	r0, r3
 801009a:	f7f9 f8c6 	bl	800922a <lwip_htonl>
 801009e:	4603      	mov	r3, r0
 80100a0:	2200      	movs	r2, #0
 80100a2:	4621      	mov	r1, r4
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7ff fec1 	bl	800fe2c <tcp_output_alloc_header>
 80100aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d109      	bne.n	80100c6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	8b5b      	ldrh	r3, [r3, #26]
 80100b6:	f043 0303 	orr.w	r3, r3, #3
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80100c0:	f06f 0301 	mvn.w	r3, #1
 80100c4:	e023      	b.n	801010e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80100c6:	7dbb      	ldrb	r3, [r7, #22]
 80100c8:	7dfa      	ldrb	r2, [r7, #23]
 80100ca:	6939      	ldr	r1, [r7, #16]
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f7ff feeb 	bl	800fea8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	3304      	adds	r3, #4
 80100d8:	6939      	ldr	r1, [r7, #16]
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f7ff ff24 	bl	800ff28 <tcp_output_control_segment>
 80100e0:	4603      	mov	r3, r0
 80100e2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80100e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d007      	beq.n	80100fc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	8b5b      	ldrh	r3, [r3, #26]
 80100f0:	f043 0303 	orr.w	r3, r3, #3
 80100f4:	b29a      	uxth	r2, r3
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	835a      	strh	r2, [r3, #26]
 80100fa:	e006      	b.n	801010a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	8b5b      	ldrh	r3, [r3, #26]
 8010100:	f023 0303 	bic.w	r3, r3, #3
 8010104:	b29a      	uxth	r2, r3
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801010a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801010e:	4618      	mov	r0, r3
 8010110:	371c      	adds	r7, #28
 8010112:	46bd      	mov	sp, r7
 8010114:	bd90      	pop	{r4, r7, pc}
 8010116:	bf00      	nop
 8010118:	08015b68 	.word	0x08015b68
 801011c:	08016324 	.word	0x08016324
 8010120:	08015bbc 	.word	0x08015bbc

08010124 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010124:	b590      	push	{r4, r7, lr}
 8010126:	b087      	sub	sp, #28
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801012c:	2300      	movs	r3, #0
 801012e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d106      	bne.n	8010144 <tcp_keepalive+0x20>
 8010136:	4b18      	ldr	r3, [pc, #96]	; (8010198 <tcp_keepalive+0x74>)
 8010138:	f640 0224 	movw	r2, #2084	; 0x824
 801013c:	4917      	ldr	r1, [pc, #92]	; (801019c <tcp_keepalive+0x78>)
 801013e:	4818      	ldr	r0, [pc, #96]	; (80101a0 <tcp_keepalive+0x7c>)
 8010140:	f003 f9e8 	bl	8013514 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010144:	7dfb      	ldrb	r3, [r7, #23]
 8010146:	b29c      	uxth	r4, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801014c:	3b01      	subs	r3, #1
 801014e:	4618      	mov	r0, r3
 8010150:	f7f9 f86b 	bl	800922a <lwip_htonl>
 8010154:	4603      	mov	r3, r0
 8010156:	2200      	movs	r2, #0
 8010158:	4621      	mov	r1, r4
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f7ff fe66 	bl	800fe2c <tcp_output_alloc_header>
 8010160:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d102      	bne.n	801016e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010168:	f04f 33ff 	mov.w	r3, #4294967295
 801016c:	e010      	b.n	8010190 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801016e:	7dfb      	ldrb	r3, [r7, #23]
 8010170:	2200      	movs	r2, #0
 8010172:	6939      	ldr	r1, [r7, #16]
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f7ff fe97 	bl	800fea8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801017a:	687a      	ldr	r2, [r7, #4]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	3304      	adds	r3, #4
 8010180:	6939      	ldr	r1, [r7, #16]
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7ff fed0 	bl	800ff28 <tcp_output_control_segment>
 8010188:	4603      	mov	r3, r0
 801018a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801018c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010190:	4618      	mov	r0, r3
 8010192:	371c      	adds	r7, #28
 8010194:	46bd      	mov	sp, r7
 8010196:	bd90      	pop	{r4, r7, pc}
 8010198:	08015b68 	.word	0x08015b68
 801019c:	08016344 	.word	0x08016344
 80101a0:	08015bbc 	.word	0x08015bbc

080101a4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80101a4:	b590      	push	{r4, r7, lr}
 80101a6:	b08b      	sub	sp, #44	; 0x2c
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80101ac:	2300      	movs	r3, #0
 80101ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d106      	bne.n	80101c6 <tcp_zero_window_probe+0x22>
 80101b8:	4b4c      	ldr	r3, [pc, #304]	; (80102ec <tcp_zero_window_probe+0x148>)
 80101ba:	f640 024f 	movw	r2, #2127	; 0x84f
 80101be:	494c      	ldr	r1, [pc, #304]	; (80102f0 <tcp_zero_window_probe+0x14c>)
 80101c0:	484c      	ldr	r0, [pc, #304]	; (80102f4 <tcp_zero_window_probe+0x150>)
 80101c2:	f003 f9a7 	bl	8013514 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101ca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80101cc:	6a3b      	ldr	r3, [r7, #32]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d101      	bne.n	80101d6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80101d2:	2300      	movs	r3, #0
 80101d4:	e086      	b.n	80102e4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80101dc:	2bff      	cmp	r3, #255	; 0xff
 80101de:	d007      	beq.n	80101f0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80101e6:	3301      	adds	r3, #1
 80101e8:	b2da      	uxtb	r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80101f0:	6a3b      	ldr	r3, [r7, #32]
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	899b      	ldrh	r3, [r3, #12]
 80101f6:	b29b      	uxth	r3, r3
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7f9 f801 	bl	8009200 <lwip_htons>
 80101fe:	4603      	mov	r3, r0
 8010200:	b2db      	uxtb	r3, r3
 8010202:	f003 0301 	and.w	r3, r3, #1
 8010206:	2b00      	cmp	r3, #0
 8010208:	d005      	beq.n	8010216 <tcp_zero_window_probe+0x72>
 801020a:	6a3b      	ldr	r3, [r7, #32]
 801020c:	891b      	ldrh	r3, [r3, #8]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d101      	bne.n	8010216 <tcp_zero_window_probe+0x72>
 8010212:	2301      	movs	r3, #1
 8010214:	e000      	b.n	8010218 <tcp_zero_window_probe+0x74>
 8010216:	2300      	movs	r3, #0
 8010218:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801021a:	7ffb      	ldrb	r3, [r7, #31]
 801021c:	2b00      	cmp	r3, #0
 801021e:	bf0c      	ite	eq
 8010220:	2301      	moveq	r3, #1
 8010222:	2300      	movne	r3, #0
 8010224:	b2db      	uxtb	r3, r3
 8010226:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801022c:	b299      	uxth	r1, r3
 801022e:	6a3b      	ldr	r3, [r7, #32]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	8bba      	ldrh	r2, [r7, #28]
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f7ff fdf8 	bl	800fe2c <tcp_output_alloc_header>
 801023c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801023e:	69bb      	ldr	r3, [r7, #24]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d102      	bne.n	801024a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010244:	f04f 33ff 	mov.w	r3, #4294967295
 8010248:	e04c      	b.n	80102e4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801024a:	69bb      	ldr	r3, [r7, #24]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010250:	7ffb      	ldrb	r3, [r7, #31]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d011      	beq.n	801027a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	899b      	ldrh	r3, [r3, #12]
 801025a:	b29b      	uxth	r3, r3
 801025c:	b21b      	sxth	r3, r3
 801025e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010262:	b21c      	sxth	r4, r3
 8010264:	2011      	movs	r0, #17
 8010266:	f7f8 ffcb 	bl	8009200 <lwip_htons>
 801026a:	4603      	mov	r3, r0
 801026c:	b21b      	sxth	r3, r3
 801026e:	4323      	orrs	r3, r4
 8010270:	b21b      	sxth	r3, r3
 8010272:	b29a      	uxth	r2, r3
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	819a      	strh	r2, [r3, #12]
 8010278:	e010      	b.n	801029c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801027a:	69bb      	ldr	r3, [r7, #24]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	3314      	adds	r3, #20
 8010280:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010282:	6a3b      	ldr	r3, [r7, #32]
 8010284:	6858      	ldr	r0, [r3, #4]
 8010286:	6a3b      	ldr	r3, [r7, #32]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	891a      	ldrh	r2, [r3, #8]
 801028c:	6a3b      	ldr	r3, [r7, #32]
 801028e:	891b      	ldrh	r3, [r3, #8]
 8010290:	1ad3      	subs	r3, r2, r3
 8010292:	b29b      	uxth	r3, r3
 8010294:	2201      	movs	r2, #1
 8010296:	6939      	ldr	r1, [r7, #16]
 8010298:	f7fa fe52 	bl	800af40 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801029c:	6a3b      	ldr	r3, [r7, #32]
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7f8 ffc1 	bl	800922a <lwip_htonl>
 80102a8:	4603      	mov	r3, r0
 80102aa:	3301      	adds	r3, #1
 80102ac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	1ad3      	subs	r3, r2, r3
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	da02      	bge.n	80102c0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	68fa      	ldr	r2, [r7, #12]
 80102be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80102c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102c4:	2200      	movs	r2, #0
 80102c6:	69b9      	ldr	r1, [r7, #24]
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f7ff fded 	bl	800fea8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80102ce:	687a      	ldr	r2, [r7, #4]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	3304      	adds	r3, #4
 80102d4:	69b9      	ldr	r1, [r7, #24]
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f7ff fe26 	bl	800ff28 <tcp_output_control_segment>
 80102dc:	4603      	mov	r3, r0
 80102de:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80102e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	372c      	adds	r7, #44	; 0x2c
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd90      	pop	{r4, r7, pc}
 80102ec:	08015b68 	.word	0x08015b68
 80102f0:	08016360 	.word	0x08016360
 80102f4:	08015bbc 	.word	0x08015bbc

080102f8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010300:	f7fa ff0c 	bl	800b11c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010304:	4b0a      	ldr	r3, [pc, #40]	; (8010330 <tcpip_tcp_timer+0x38>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d103      	bne.n	8010314 <tcpip_tcp_timer+0x1c>
 801030c:	4b09      	ldr	r3, [pc, #36]	; (8010334 <tcpip_tcp_timer+0x3c>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d005      	beq.n	8010320 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010314:	2200      	movs	r2, #0
 8010316:	4908      	ldr	r1, [pc, #32]	; (8010338 <tcpip_tcp_timer+0x40>)
 8010318:	20fa      	movs	r0, #250	; 0xfa
 801031a:	f000 f8f3 	bl	8010504 <sys_timeout>
 801031e:	e003      	b.n	8010328 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010320:	4b06      	ldr	r3, [pc, #24]	; (801033c <tcpip_tcp_timer+0x44>)
 8010322:	2200      	movs	r2, #0
 8010324:	601a      	str	r2, [r3, #0]
  }
}
 8010326:	bf00      	nop
 8010328:	bf00      	nop
 801032a:	3708      	adds	r7, #8
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	2400a9ac 	.word	0x2400a9ac
 8010334:	2400a9bc 	.word	0x2400a9bc
 8010338:	080102f9 	.word	0x080102f9
 801033c:	24005d28 	.word	0x24005d28

08010340 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010344:	4b0a      	ldr	r3, [pc, #40]	; (8010370 <tcp_timer_needed+0x30>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d10f      	bne.n	801036c <tcp_timer_needed+0x2c>
 801034c:	4b09      	ldr	r3, [pc, #36]	; (8010374 <tcp_timer_needed+0x34>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d103      	bne.n	801035c <tcp_timer_needed+0x1c>
 8010354:	4b08      	ldr	r3, [pc, #32]	; (8010378 <tcp_timer_needed+0x38>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d007      	beq.n	801036c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801035c:	4b04      	ldr	r3, [pc, #16]	; (8010370 <tcp_timer_needed+0x30>)
 801035e:	2201      	movs	r2, #1
 8010360:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010362:	2200      	movs	r2, #0
 8010364:	4905      	ldr	r1, [pc, #20]	; (801037c <tcp_timer_needed+0x3c>)
 8010366:	20fa      	movs	r0, #250	; 0xfa
 8010368:	f000 f8cc 	bl	8010504 <sys_timeout>
  }
}
 801036c:	bf00      	nop
 801036e:	bd80      	pop	{r7, pc}
 8010370:	24005d28 	.word	0x24005d28
 8010374:	2400a9ac 	.word	0x2400a9ac
 8010378:	2400a9bc 	.word	0x2400a9bc
 801037c:	080102f9 	.word	0x080102f9

08010380 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b086      	sub	sp, #24
 8010384:	af00      	add	r7, sp, #0
 8010386:	60f8      	str	r0, [r7, #12]
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801038c:	200a      	movs	r0, #10
 801038e:	f7f9 fcc7 	bl	8009d20 <memp_malloc>
 8010392:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d109      	bne.n	80103ae <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d151      	bne.n	8010444 <sys_timeout_abs+0xc4>
 80103a0:	4b2a      	ldr	r3, [pc, #168]	; (801044c <sys_timeout_abs+0xcc>)
 80103a2:	22be      	movs	r2, #190	; 0xbe
 80103a4:	492a      	ldr	r1, [pc, #168]	; (8010450 <sys_timeout_abs+0xd0>)
 80103a6:	482b      	ldr	r0, [pc, #172]	; (8010454 <sys_timeout_abs+0xd4>)
 80103a8:	f003 f8b4 	bl	8013514 <iprintf>
    return;
 80103ac:	e04a      	b.n	8010444 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	2200      	movs	r2, #0
 80103b2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	68ba      	ldr	r2, [r7, #8]
 80103b8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	68fa      	ldr	r2, [r7, #12]
 80103c4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80103c6:	4b24      	ldr	r3, [pc, #144]	; (8010458 <sys_timeout_abs+0xd8>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d103      	bne.n	80103d6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80103ce:	4a22      	ldr	r2, [pc, #136]	; (8010458 <sys_timeout_abs+0xd8>)
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	6013      	str	r3, [r2, #0]
    return;
 80103d4:	e037      	b.n	8010446 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	685a      	ldr	r2, [r3, #4]
 80103da:	4b1f      	ldr	r3, [pc, #124]	; (8010458 <sys_timeout_abs+0xd8>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	1ad3      	subs	r3, r2, r3
 80103e2:	0fdb      	lsrs	r3, r3, #31
 80103e4:	f003 0301 	and.w	r3, r3, #1
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d007      	beq.n	80103fe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80103ee:	4b1a      	ldr	r3, [pc, #104]	; (8010458 <sys_timeout_abs+0xd8>)
 80103f0:	681a      	ldr	r2, [r3, #0]
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80103f6:	4a18      	ldr	r2, [pc, #96]	; (8010458 <sys_timeout_abs+0xd8>)
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	6013      	str	r3, [r2, #0]
 80103fc:	e023      	b.n	8010446 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80103fe:	4b16      	ldr	r3, [pc, #88]	; (8010458 <sys_timeout_abs+0xd8>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	617b      	str	r3, [r7, #20]
 8010404:	e01a      	b.n	801043c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d00b      	beq.n	8010426 <sys_timeout_abs+0xa6>
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	685a      	ldr	r2, [r3, #4]
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	1ad3      	subs	r3, r2, r3
 801041a:	0fdb      	lsrs	r3, r3, #31
 801041c:	f003 0301 	and.w	r3, r3, #1
 8010420:	b2db      	uxtb	r3, r3
 8010422:	2b00      	cmp	r3, #0
 8010424:	d007      	beq.n	8010436 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	693a      	ldr	r2, [r7, #16]
 8010432:	601a      	str	r2, [r3, #0]
        break;
 8010434:	e007      	b.n	8010446 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	617b      	str	r3, [r7, #20]
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d1e1      	bne.n	8010406 <sys_timeout_abs+0x86>
 8010442:	e000      	b.n	8010446 <sys_timeout_abs+0xc6>
    return;
 8010444:	bf00      	nop
      }
    }
  }
}
 8010446:	3718      	adds	r7, #24
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	08016384 	.word	0x08016384
 8010450:	080163b8 	.word	0x080163b8
 8010454:	080163f8 	.word	0x080163f8
 8010458:	24005d20 	.word	0x24005d20

0801045c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b086      	sub	sp, #24
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	4798      	blx	r3

  now = sys_now();
 801046e:	f7f4 fc91 	bl	8004d94 <sys_now>
 8010472:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	4b0f      	ldr	r3, [pc, #60]	; (80104b8 <lwip_cyclic_timer+0x5c>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4413      	add	r3, r2
 801047e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010480:	68fa      	ldr	r2, [r7, #12]
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	1ad3      	subs	r3, r2, r3
 8010486:	0fdb      	lsrs	r3, r3, #31
 8010488:	f003 0301 	and.w	r3, r3, #1
 801048c:	b2db      	uxtb	r3, r3
 801048e:	2b00      	cmp	r3, #0
 8010490:	d009      	beq.n	80104a6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	681a      	ldr	r2, [r3, #0]
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	4413      	add	r3, r2
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	4907      	ldr	r1, [pc, #28]	; (80104bc <lwip_cyclic_timer+0x60>)
 801049e:	4618      	mov	r0, r3
 80104a0:	f7ff ff6e 	bl	8010380 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80104a4:	e004      	b.n	80104b0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80104a6:	687a      	ldr	r2, [r7, #4]
 80104a8:	4904      	ldr	r1, [pc, #16]	; (80104bc <lwip_cyclic_timer+0x60>)
 80104aa:	68f8      	ldr	r0, [r7, #12]
 80104ac:	f7ff ff68 	bl	8010380 <sys_timeout_abs>
}
 80104b0:	bf00      	nop
 80104b2:	3718      	adds	r7, #24
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	24005d24 	.word	0x24005d24
 80104bc:	0801045d 	.word	0x0801045d

080104c0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80104c6:	2301      	movs	r3, #1
 80104c8:	607b      	str	r3, [r7, #4]
 80104ca:	e00e      	b.n	80104ea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80104cc:	4a0b      	ldr	r2, [pc, #44]	; (80104fc <sys_timeouts_init+0x3c>)
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	00db      	lsls	r3, r3, #3
 80104d8:	4a08      	ldr	r2, [pc, #32]	; (80104fc <sys_timeouts_init+0x3c>)
 80104da:	4413      	add	r3, r2
 80104dc:	461a      	mov	r2, r3
 80104de:	4908      	ldr	r1, [pc, #32]	; (8010500 <sys_timeouts_init+0x40>)
 80104e0:	f000 f810 	bl	8010504 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	3301      	adds	r3, #1
 80104e8:	607b      	str	r3, [r7, #4]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2b02      	cmp	r3, #2
 80104ee:	d9ed      	bls.n	80104cc <sys_timeouts_init+0xc>
  }
}
 80104f0:	bf00      	nop
 80104f2:	bf00      	nop
 80104f4:	3708      	adds	r7, #8
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	08016fcc 	.word	0x08016fcc
 8010500:	0801045d 	.word	0x0801045d

08010504 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b086      	sub	sp, #24
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010516:	d306      	bcc.n	8010526 <sys_timeout+0x22>
 8010518:	4b0a      	ldr	r3, [pc, #40]	; (8010544 <sys_timeout+0x40>)
 801051a:	f240 1229 	movw	r2, #297	; 0x129
 801051e:	490a      	ldr	r1, [pc, #40]	; (8010548 <sys_timeout+0x44>)
 8010520:	480a      	ldr	r0, [pc, #40]	; (801054c <sys_timeout+0x48>)
 8010522:	f002 fff7 	bl	8013514 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010526:	f7f4 fc35 	bl	8004d94 <sys_now>
 801052a:	4602      	mov	r2, r0
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	4413      	add	r3, r2
 8010530:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010532:	687a      	ldr	r2, [r7, #4]
 8010534:	68b9      	ldr	r1, [r7, #8]
 8010536:	6978      	ldr	r0, [r7, #20]
 8010538:	f7ff ff22 	bl	8010380 <sys_timeout_abs>
#endif
}
 801053c:	bf00      	nop
 801053e:	3718      	adds	r7, #24
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}
 8010544:	08016384 	.word	0x08016384
 8010548:	08016420 	.word	0x08016420
 801054c:	080163f8 	.word	0x080163f8

08010550 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b084      	sub	sp, #16
 8010554:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010556:	f7f4 fc1d 	bl	8004d94 <sys_now>
 801055a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801055c:	4b17      	ldr	r3, [pc, #92]	; (80105bc <sys_check_timeouts+0x6c>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d022      	beq.n	80105ae <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	1ad3      	subs	r3, r2, r3
 8010570:	0fdb      	lsrs	r3, r3, #31
 8010572:	f003 0301 	and.w	r3, r3, #1
 8010576:	b2db      	uxtb	r3, r3
 8010578:	2b00      	cmp	r3, #0
 801057a:	d11a      	bne.n	80105b2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4a0e      	ldr	r2, [pc, #56]	; (80105bc <sys_check_timeouts+0x6c>)
 8010582:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	689b      	ldr	r3, [r3, #8]
 8010588:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	68db      	ldr	r3, [r3, #12]
 801058e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	4a0a      	ldr	r2, [pc, #40]	; (80105c0 <sys_check_timeouts+0x70>)
 8010596:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010598:	68b9      	ldr	r1, [r7, #8]
 801059a:	200a      	movs	r0, #10
 801059c:	f7f9 fc36 	bl	8009e0c <memp_free>
    if (handler != NULL) {
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d0da      	beq.n	801055c <sys_check_timeouts+0xc>
      handler(arg);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6838      	ldr	r0, [r7, #0]
 80105aa:	4798      	blx	r3
  do {
 80105ac:	e7d6      	b.n	801055c <sys_check_timeouts+0xc>
      return;
 80105ae:	bf00      	nop
 80105b0:	e000      	b.n	80105b4 <sys_check_timeouts+0x64>
      return;
 80105b2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80105b4:	3710      	adds	r7, #16
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	24005d20 	.word	0x24005d20
 80105c0:	24005d24 	.word	0x24005d24

080105c4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80105ca:	4b16      	ldr	r3, [pc, #88]	; (8010624 <sys_timeouts_sleeptime+0x60>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d102      	bne.n	80105d8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80105d2:	f04f 33ff 	mov.w	r3, #4294967295
 80105d6:	e020      	b.n	801061a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80105d8:	f7f4 fbdc 	bl	8004d94 <sys_now>
 80105dc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80105de:	4b11      	ldr	r3, [pc, #68]	; (8010624 <sys_timeouts_sleeptime+0x60>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	685a      	ldr	r2, [r3, #4]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	1ad3      	subs	r3, r2, r3
 80105e8:	0fdb      	lsrs	r3, r3, #31
 80105ea:	f003 0301 	and.w	r3, r3, #1
 80105ee:	b2db      	uxtb	r3, r3
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d001      	beq.n	80105f8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80105f4:	2300      	movs	r3, #0
 80105f6:	e010      	b.n	801061a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80105f8:	4b0a      	ldr	r3, [pc, #40]	; (8010624 <sys_timeouts_sleeptime+0x60>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	685a      	ldr	r2, [r3, #4]
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	da06      	bge.n	8010618 <sys_timeouts_sleeptime+0x54>
 801060a:	4b07      	ldr	r3, [pc, #28]	; (8010628 <sys_timeouts_sleeptime+0x64>)
 801060c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010610:	4906      	ldr	r1, [pc, #24]	; (801062c <sys_timeouts_sleeptime+0x68>)
 8010612:	4807      	ldr	r0, [pc, #28]	; (8010630 <sys_timeouts_sleeptime+0x6c>)
 8010614:	f002 ff7e 	bl	8013514 <iprintf>
    return ret;
 8010618:	683b      	ldr	r3, [r7, #0]
  }
}
 801061a:	4618      	mov	r0, r3
 801061c:	3708      	adds	r7, #8
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	24005d20 	.word	0x24005d20
 8010628:	08016384 	.word	0x08016384
 801062c:	08016458 	.word	0x08016458
 8010630:	080163f8 	.word	0x080163f8

08010634 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010638:	f002 ff84 	bl	8013544 <rand>
 801063c:	4603      	mov	r3, r0
 801063e:	b29b      	uxth	r3, r3
 8010640:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010644:	b29b      	uxth	r3, r3
 8010646:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801064a:	b29a      	uxth	r2, r3
 801064c:	4b01      	ldr	r3, [pc, #4]	; (8010654 <udp_init+0x20>)
 801064e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010650:	bf00      	nop
 8010652:	bd80      	pop	{r7, pc}
 8010654:	24000030 	.word	0x24000030

08010658 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	4613      	mov	r3, r2
 8010664:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d105      	bne.n	8010678 <udp_input_local_match+0x20>
 801066c:	4b27      	ldr	r3, [pc, #156]	; (801070c <udp_input_local_match+0xb4>)
 801066e:	2287      	movs	r2, #135	; 0x87
 8010670:	4927      	ldr	r1, [pc, #156]	; (8010710 <udp_input_local_match+0xb8>)
 8010672:	4828      	ldr	r0, [pc, #160]	; (8010714 <udp_input_local_match+0xbc>)
 8010674:	f002 ff4e 	bl	8013514 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d105      	bne.n	801068a <udp_input_local_match+0x32>
 801067e:	4b23      	ldr	r3, [pc, #140]	; (801070c <udp_input_local_match+0xb4>)
 8010680:	2288      	movs	r2, #136	; 0x88
 8010682:	4925      	ldr	r1, [pc, #148]	; (8010718 <udp_input_local_match+0xc0>)
 8010684:	4823      	ldr	r0, [pc, #140]	; (8010714 <udp_input_local_match+0xbc>)
 8010686:	f002 ff45 	bl	8013514 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	7a1b      	ldrb	r3, [r3, #8]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00b      	beq.n	80106aa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	7a1a      	ldrb	r2, [r3, #8]
 8010696:	4b21      	ldr	r3, [pc, #132]	; (801071c <udp_input_local_match+0xc4>)
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801069e:	3301      	adds	r3, #1
 80106a0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d001      	beq.n	80106aa <udp_input_local_match+0x52>
    return 0;
 80106a6:	2300      	movs	r3, #0
 80106a8:	e02b      	b.n	8010702 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80106aa:	79fb      	ldrb	r3, [r7, #7]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d018      	beq.n	80106e2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d013      	beq.n	80106de <udp_input_local_match+0x86>
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d00f      	beq.n	80106de <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80106be:	4b17      	ldr	r3, [pc, #92]	; (801071c <udp_input_local_match+0xc4>)
 80106c0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80106c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c6:	d00a      	beq.n	80106de <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	4b13      	ldr	r3, [pc, #76]	; (801071c <udp_input_local_match+0xc4>)
 80106ce:	695b      	ldr	r3, [r3, #20]
 80106d0:	405a      	eors	r2, r3
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	3308      	adds	r3, #8
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d110      	bne.n	8010700 <udp_input_local_match+0xa8>
          return 1;
 80106de:	2301      	movs	r3, #1
 80106e0:	e00f      	b.n	8010702 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d009      	beq.n	80106fc <udp_input_local_match+0xa4>
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d005      	beq.n	80106fc <udp_input_local_match+0xa4>
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	4b09      	ldr	r3, [pc, #36]	; (801071c <udp_input_local_match+0xc4>)
 80106f6:	695b      	ldr	r3, [r3, #20]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d101      	bne.n	8010700 <udp_input_local_match+0xa8>
        return 1;
 80106fc:	2301      	movs	r3, #1
 80106fe:	e000      	b.n	8010702 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010700:	2300      	movs	r3, #0
}
 8010702:	4618      	mov	r0, r3
 8010704:	3710      	adds	r7, #16
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	0801646c 	.word	0x0801646c
 8010710:	0801649c 	.word	0x0801649c
 8010714:	080164c0 	.word	0x080164c0
 8010718:	080164e8 	.word	0x080164e8
 801071c:	240078ec 	.word	0x240078ec

08010720 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010720:	b590      	push	{r4, r7, lr}
 8010722:	b08d      	sub	sp, #52	; 0x34
 8010724:	af02      	add	r7, sp, #8
 8010726:	6078      	str	r0, [r7, #4]
 8010728:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801072a:	2300      	movs	r3, #0
 801072c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d105      	bne.n	8010740 <udp_input+0x20>
 8010734:	4b7c      	ldr	r3, [pc, #496]	; (8010928 <udp_input+0x208>)
 8010736:	22cf      	movs	r2, #207	; 0xcf
 8010738:	497c      	ldr	r1, [pc, #496]	; (801092c <udp_input+0x20c>)
 801073a:	487d      	ldr	r0, [pc, #500]	; (8010930 <udp_input+0x210>)
 801073c:	f002 feea 	bl	8013514 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d105      	bne.n	8010752 <udp_input+0x32>
 8010746:	4b78      	ldr	r3, [pc, #480]	; (8010928 <udp_input+0x208>)
 8010748:	22d0      	movs	r2, #208	; 0xd0
 801074a:	497a      	ldr	r1, [pc, #488]	; (8010934 <udp_input+0x214>)
 801074c:	4878      	ldr	r0, [pc, #480]	; (8010930 <udp_input+0x210>)
 801074e:	f002 fee1 	bl	8013514 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	895b      	ldrh	r3, [r3, #10]
 8010756:	2b07      	cmp	r3, #7
 8010758:	d803      	bhi.n	8010762 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f7fa f9fa 	bl	800ab54 <pbuf_free>
    goto end;
 8010760:	e0de      	b.n	8010920 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010768:	4b73      	ldr	r3, [pc, #460]	; (8010938 <udp_input+0x218>)
 801076a:	695b      	ldr	r3, [r3, #20]
 801076c:	4a72      	ldr	r2, [pc, #456]	; (8010938 <udp_input+0x218>)
 801076e:	6812      	ldr	r2, [r2, #0]
 8010770:	4611      	mov	r1, r2
 8010772:	4618      	mov	r0, r3
 8010774:	f001 fcae 	bl	80120d4 <ip4_addr_isbroadcast_u32>
 8010778:	4603      	mov	r3, r0
 801077a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	881b      	ldrh	r3, [r3, #0]
 8010780:	b29b      	uxth	r3, r3
 8010782:	4618      	mov	r0, r3
 8010784:	f7f8 fd3c 	bl	8009200 <lwip_htons>
 8010788:	4603      	mov	r3, r0
 801078a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	885b      	ldrh	r3, [r3, #2]
 8010790:	b29b      	uxth	r3, r3
 8010792:	4618      	mov	r0, r3
 8010794:	f7f8 fd34 	bl	8009200 <lwip_htons>
 8010798:	4603      	mov	r3, r0
 801079a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801079c:	2300      	movs	r3, #0
 801079e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80107a0:	2300      	movs	r3, #0
 80107a2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80107a4:	2300      	movs	r3, #0
 80107a6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80107a8:	4b64      	ldr	r3, [pc, #400]	; (801093c <udp_input+0x21c>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	627b      	str	r3, [r7, #36]	; 0x24
 80107ae:	e054      	b.n	801085a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80107b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b2:	8a5b      	ldrh	r3, [r3, #18]
 80107b4:	89fa      	ldrh	r2, [r7, #14]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d14a      	bne.n	8010850 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80107ba:	7cfb      	ldrb	r3, [r7, #19]
 80107bc:	461a      	mov	r2, r3
 80107be:	6839      	ldr	r1, [r7, #0]
 80107c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107c2:	f7ff ff49 	bl	8010658 <udp_input_local_match>
 80107c6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d041      	beq.n	8010850 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80107cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ce:	7c1b      	ldrb	r3, [r3, #16]
 80107d0:	f003 0304 	and.w	r3, r3, #4
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d11d      	bne.n	8010814 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d102      	bne.n	80107e4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	61fb      	str	r3, [r7, #28]
 80107e2:	e017      	b.n	8010814 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80107e4:	7cfb      	ldrb	r3, [r7, #19]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d014      	beq.n	8010814 <udp_input+0xf4>
 80107ea:	4b53      	ldr	r3, [pc, #332]	; (8010938 <udp_input+0x218>)
 80107ec:	695b      	ldr	r3, [r3, #20]
 80107ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107f2:	d10f      	bne.n	8010814 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	3304      	adds	r3, #4
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d008      	beq.n	8010814 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	3304      	adds	r3, #4
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	429a      	cmp	r2, r3
 801080e:	d101      	bne.n	8010814 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010812:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010816:	8a9b      	ldrh	r3, [r3, #20]
 8010818:	8a3a      	ldrh	r2, [r7, #16]
 801081a:	429a      	cmp	r2, r3
 801081c:	d118      	bne.n	8010850 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010820:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010822:	2b00      	cmp	r3, #0
 8010824:	d005      	beq.n	8010832 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010828:	685a      	ldr	r2, [r3, #4]
 801082a:	4b43      	ldr	r3, [pc, #268]	; (8010938 <udp_input+0x218>)
 801082c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801082e:	429a      	cmp	r2, r3
 8010830:	d10e      	bne.n	8010850 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010832:	6a3b      	ldr	r3, [r7, #32]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d014      	beq.n	8010862 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083a:	68da      	ldr	r2, [r3, #12]
 801083c:	6a3b      	ldr	r3, [r7, #32]
 801083e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010840:	4b3e      	ldr	r3, [pc, #248]	; (801093c <udp_input+0x21c>)
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010846:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010848:	4a3c      	ldr	r2, [pc, #240]	; (801093c <udp_input+0x21c>)
 801084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801084e:	e008      	b.n	8010862 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010852:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010856:	68db      	ldr	r3, [r3, #12]
 8010858:	627b      	str	r3, [r7, #36]	; 0x24
 801085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085c:	2b00      	cmp	r3, #0
 801085e:	d1a7      	bne.n	80107b0 <udp_input+0x90>
 8010860:	e000      	b.n	8010864 <udp_input+0x144>
        break;
 8010862:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010866:	2b00      	cmp	r3, #0
 8010868:	d101      	bne.n	801086e <udp_input+0x14e>
    pcb = uncon_pcb;
 801086a:	69fb      	ldr	r3, [r7, #28]
 801086c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010870:	2b00      	cmp	r3, #0
 8010872:	d002      	beq.n	801087a <udp_input+0x15a>
    for_us = 1;
 8010874:	2301      	movs	r3, #1
 8010876:	76fb      	strb	r3, [r7, #27]
 8010878:	e00a      	b.n	8010890 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	3304      	adds	r3, #4
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	4b2d      	ldr	r3, [pc, #180]	; (8010938 <udp_input+0x218>)
 8010882:	695b      	ldr	r3, [r3, #20]
 8010884:	429a      	cmp	r2, r3
 8010886:	bf0c      	ite	eq
 8010888:	2301      	moveq	r3, #1
 801088a:	2300      	movne	r3, #0
 801088c:	b2db      	uxtb	r3, r3
 801088e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010890:	7efb      	ldrb	r3, [r7, #27]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d041      	beq.n	801091a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010896:	2108      	movs	r1, #8
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7fa f8d5 	bl	800aa48 <pbuf_remove_header>
 801089e:	4603      	mov	r3, r0
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d00a      	beq.n	80108ba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80108a4:	4b20      	ldr	r3, [pc, #128]	; (8010928 <udp_input+0x208>)
 80108a6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80108aa:	4925      	ldr	r1, [pc, #148]	; (8010940 <udp_input+0x220>)
 80108ac:	4820      	ldr	r0, [pc, #128]	; (8010930 <udp_input+0x210>)
 80108ae:	f002 fe31 	bl	8013514 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f7fa f94e 	bl	800ab54 <pbuf_free>
      goto end;
 80108b8:	e032      	b.n	8010920 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80108ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d012      	beq.n	80108e6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80108c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c2:	699b      	ldr	r3, [r3, #24]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d00a      	beq.n	80108de <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80108c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ca:	699c      	ldr	r4, [r3, #24]
 80108cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ce:	69d8      	ldr	r0, [r3, #28]
 80108d0:	8a3b      	ldrh	r3, [r7, #16]
 80108d2:	9300      	str	r3, [sp, #0]
 80108d4:	4b1b      	ldr	r3, [pc, #108]	; (8010944 <udp_input+0x224>)
 80108d6:	687a      	ldr	r2, [r7, #4]
 80108d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80108da:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80108dc:	e021      	b.n	8010922 <udp_input+0x202>
        pbuf_free(p);
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	f7fa f938 	bl	800ab54 <pbuf_free>
        goto end;
 80108e4:	e01c      	b.n	8010920 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80108e6:	7cfb      	ldrb	r3, [r7, #19]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d112      	bne.n	8010912 <udp_input+0x1f2>
 80108ec:	4b12      	ldr	r3, [pc, #72]	; (8010938 <udp_input+0x218>)
 80108ee:	695b      	ldr	r3, [r3, #20]
 80108f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80108f4:	2be0      	cmp	r3, #224	; 0xe0
 80108f6:	d00c      	beq.n	8010912 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80108f8:	4b0f      	ldr	r3, [pc, #60]	; (8010938 <udp_input+0x218>)
 80108fa:	899b      	ldrh	r3, [r3, #12]
 80108fc:	3308      	adds	r3, #8
 80108fe:	b29b      	uxth	r3, r3
 8010900:	b21b      	sxth	r3, r3
 8010902:	4619      	mov	r1, r3
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7fa f912 	bl	800ab2e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801090a:	2103      	movs	r1, #3
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f001 f8b7 	bl	8011a80 <icmp_dest_unreach>
      pbuf_free(p);
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7fa f91e 	bl	800ab54 <pbuf_free>
  return;
 8010918:	e003      	b.n	8010922 <udp_input+0x202>
    pbuf_free(p);
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f7fa f91a 	bl	800ab54 <pbuf_free>
  return;
 8010920:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010922:	372c      	adds	r7, #44	; 0x2c
 8010924:	46bd      	mov	sp, r7
 8010926:	bd90      	pop	{r4, r7, pc}
 8010928:	0801646c 	.word	0x0801646c
 801092c:	08016510 	.word	0x08016510
 8010930:	080164c0 	.word	0x080164c0
 8010934:	08016528 	.word	0x08016528
 8010938:	240078ec 	.word	0x240078ec
 801093c:	2400a9c4 	.word	0x2400a9c4
 8010940:	08016544 	.word	0x08016544
 8010944:	240078fc 	.word	0x240078fc

08010948 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010948:	b480      	push	{r7}
 801094a:	b085      	sub	sp, #20
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d01e      	beq.n	8010996 <udp_netif_ip_addr_changed+0x4e>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d01a      	beq.n	8010996 <udp_netif_ip_addr_changed+0x4e>
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d017      	beq.n	8010996 <udp_netif_ip_addr_changed+0x4e>
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d013      	beq.n	8010996 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801096e:	4b0d      	ldr	r3, [pc, #52]	; (80109a4 <udp_netif_ip_addr_changed+0x5c>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	60fb      	str	r3, [r7, #12]
 8010974:	e00c      	b.n	8010990 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	429a      	cmp	r2, r3
 8010980:	d103      	bne.n	801098a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	68db      	ldr	r3, [r3, #12]
 801098e:	60fb      	str	r3, [r7, #12]
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d1ef      	bne.n	8010976 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010996:	bf00      	nop
 8010998:	3714      	adds	r7, #20
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	2400a9c4 	.word	0x2400a9c4

080109a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80109b0:	4915      	ldr	r1, [pc, #84]	; (8010a08 <etharp_free_entry+0x60>)
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	4613      	mov	r3, r2
 80109b6:	005b      	lsls	r3, r3, #1
 80109b8:	4413      	add	r3, r2
 80109ba:	00db      	lsls	r3, r3, #3
 80109bc:	440b      	add	r3, r1
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d013      	beq.n	80109ec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80109c4:	4910      	ldr	r1, [pc, #64]	; (8010a08 <etharp_free_entry+0x60>)
 80109c6:	687a      	ldr	r2, [r7, #4]
 80109c8:	4613      	mov	r3, r2
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	4413      	add	r3, r2
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	440b      	add	r3, r1
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7fa f8bd 	bl	800ab54 <pbuf_free>
    arp_table[i].q = NULL;
 80109da:	490b      	ldr	r1, [pc, #44]	; (8010a08 <etharp_free_entry+0x60>)
 80109dc:	687a      	ldr	r2, [r7, #4]
 80109de:	4613      	mov	r3, r2
 80109e0:	005b      	lsls	r3, r3, #1
 80109e2:	4413      	add	r3, r2
 80109e4:	00db      	lsls	r3, r3, #3
 80109e6:	440b      	add	r3, r1
 80109e8:	2200      	movs	r2, #0
 80109ea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80109ec:	4906      	ldr	r1, [pc, #24]	; (8010a08 <etharp_free_entry+0x60>)
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	4613      	mov	r3, r2
 80109f2:	005b      	lsls	r3, r3, #1
 80109f4:	4413      	add	r3, r2
 80109f6:	00db      	lsls	r3, r3, #3
 80109f8:	440b      	add	r3, r1
 80109fa:	3314      	adds	r3, #20
 80109fc:	2200      	movs	r2, #0
 80109fe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010a00:	bf00      	nop
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	24005d2c 	.word	0x24005d2c

08010a0c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a12:	2300      	movs	r3, #0
 8010a14:	607b      	str	r3, [r7, #4]
 8010a16:	e096      	b.n	8010b46 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010a18:	494f      	ldr	r1, [pc, #316]	; (8010b58 <etharp_tmr+0x14c>)
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	4613      	mov	r3, r2
 8010a1e:	005b      	lsls	r3, r3, #1
 8010a20:	4413      	add	r3, r2
 8010a22:	00db      	lsls	r3, r3, #3
 8010a24:	440b      	add	r3, r1
 8010a26:	3314      	adds	r3, #20
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010a2c:	78fb      	ldrb	r3, [r7, #3]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	f000 8086 	beq.w	8010b40 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010a34:	4948      	ldr	r1, [pc, #288]	; (8010b58 <etharp_tmr+0x14c>)
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	4613      	mov	r3, r2
 8010a3a:	005b      	lsls	r3, r3, #1
 8010a3c:	4413      	add	r3, r2
 8010a3e:	00db      	lsls	r3, r3, #3
 8010a40:	440b      	add	r3, r1
 8010a42:	3312      	adds	r3, #18
 8010a44:	881b      	ldrh	r3, [r3, #0]
 8010a46:	3301      	adds	r3, #1
 8010a48:	b298      	uxth	r0, r3
 8010a4a:	4943      	ldr	r1, [pc, #268]	; (8010b58 <etharp_tmr+0x14c>)
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	4613      	mov	r3, r2
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	4413      	add	r3, r2
 8010a54:	00db      	lsls	r3, r3, #3
 8010a56:	440b      	add	r3, r1
 8010a58:	3312      	adds	r3, #18
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010a5e:	493e      	ldr	r1, [pc, #248]	; (8010b58 <etharp_tmr+0x14c>)
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	4613      	mov	r3, r2
 8010a64:	005b      	lsls	r3, r3, #1
 8010a66:	4413      	add	r3, r2
 8010a68:	00db      	lsls	r3, r3, #3
 8010a6a:	440b      	add	r3, r1
 8010a6c:	3312      	adds	r3, #18
 8010a6e:	881b      	ldrh	r3, [r3, #0]
 8010a70:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010a74:	d215      	bcs.n	8010aa2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010a76:	4938      	ldr	r1, [pc, #224]	; (8010b58 <etharp_tmr+0x14c>)
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	4613      	mov	r3, r2
 8010a7c:	005b      	lsls	r3, r3, #1
 8010a7e:	4413      	add	r3, r2
 8010a80:	00db      	lsls	r3, r3, #3
 8010a82:	440b      	add	r3, r1
 8010a84:	3314      	adds	r3, #20
 8010a86:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	d10e      	bne.n	8010aaa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010a8c:	4932      	ldr	r1, [pc, #200]	; (8010b58 <etharp_tmr+0x14c>)
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	4613      	mov	r3, r2
 8010a92:	005b      	lsls	r3, r3, #1
 8010a94:	4413      	add	r3, r2
 8010a96:	00db      	lsls	r3, r3, #3
 8010a98:	440b      	add	r3, r1
 8010a9a:	3312      	adds	r3, #18
 8010a9c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010a9e:	2b04      	cmp	r3, #4
 8010aa0:	d903      	bls.n	8010aaa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f7ff ff80 	bl	80109a8 <etharp_free_entry>
 8010aa8:	e04a      	b.n	8010b40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010aaa:	492b      	ldr	r1, [pc, #172]	; (8010b58 <etharp_tmr+0x14c>)
 8010aac:	687a      	ldr	r2, [r7, #4]
 8010aae:	4613      	mov	r3, r2
 8010ab0:	005b      	lsls	r3, r3, #1
 8010ab2:	4413      	add	r3, r2
 8010ab4:	00db      	lsls	r3, r3, #3
 8010ab6:	440b      	add	r3, r1
 8010ab8:	3314      	adds	r3, #20
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	2b03      	cmp	r3, #3
 8010abe:	d10a      	bne.n	8010ad6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010ac0:	4925      	ldr	r1, [pc, #148]	; (8010b58 <etharp_tmr+0x14c>)
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	4613      	mov	r3, r2
 8010ac6:	005b      	lsls	r3, r3, #1
 8010ac8:	4413      	add	r3, r2
 8010aca:	00db      	lsls	r3, r3, #3
 8010acc:	440b      	add	r3, r1
 8010ace:	3314      	adds	r3, #20
 8010ad0:	2204      	movs	r2, #4
 8010ad2:	701a      	strb	r2, [r3, #0]
 8010ad4:	e034      	b.n	8010b40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010ad6:	4920      	ldr	r1, [pc, #128]	; (8010b58 <etharp_tmr+0x14c>)
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	4613      	mov	r3, r2
 8010adc:	005b      	lsls	r3, r3, #1
 8010ade:	4413      	add	r3, r2
 8010ae0:	00db      	lsls	r3, r3, #3
 8010ae2:	440b      	add	r3, r1
 8010ae4:	3314      	adds	r3, #20
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	2b04      	cmp	r3, #4
 8010aea:	d10a      	bne.n	8010b02 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010aec:	491a      	ldr	r1, [pc, #104]	; (8010b58 <etharp_tmr+0x14c>)
 8010aee:	687a      	ldr	r2, [r7, #4]
 8010af0:	4613      	mov	r3, r2
 8010af2:	005b      	lsls	r3, r3, #1
 8010af4:	4413      	add	r3, r2
 8010af6:	00db      	lsls	r3, r3, #3
 8010af8:	440b      	add	r3, r1
 8010afa:	3314      	adds	r3, #20
 8010afc:	2202      	movs	r2, #2
 8010afe:	701a      	strb	r2, [r3, #0]
 8010b00:	e01e      	b.n	8010b40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010b02:	4915      	ldr	r1, [pc, #84]	; (8010b58 <etharp_tmr+0x14c>)
 8010b04:	687a      	ldr	r2, [r7, #4]
 8010b06:	4613      	mov	r3, r2
 8010b08:	005b      	lsls	r3, r3, #1
 8010b0a:	4413      	add	r3, r2
 8010b0c:	00db      	lsls	r3, r3, #3
 8010b0e:	440b      	add	r3, r1
 8010b10:	3314      	adds	r3, #20
 8010b12:	781b      	ldrb	r3, [r3, #0]
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d113      	bne.n	8010b40 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010b18:	490f      	ldr	r1, [pc, #60]	; (8010b58 <etharp_tmr+0x14c>)
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	005b      	lsls	r3, r3, #1
 8010b20:	4413      	add	r3, r2
 8010b22:	00db      	lsls	r3, r3, #3
 8010b24:	440b      	add	r3, r1
 8010b26:	3308      	adds	r3, #8
 8010b28:	6818      	ldr	r0, [r3, #0]
 8010b2a:	687a      	ldr	r2, [r7, #4]
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	005b      	lsls	r3, r3, #1
 8010b30:	4413      	add	r3, r2
 8010b32:	00db      	lsls	r3, r3, #3
 8010b34:	4a08      	ldr	r2, [pc, #32]	; (8010b58 <etharp_tmr+0x14c>)
 8010b36:	4413      	add	r3, r2
 8010b38:	3304      	adds	r3, #4
 8010b3a:	4619      	mov	r1, r3
 8010b3c:	f000 fe6e 	bl	801181c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	3301      	adds	r3, #1
 8010b44:	607b      	str	r3, [r7, #4]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2b09      	cmp	r3, #9
 8010b4a:	f77f af65 	ble.w	8010a18 <etharp_tmr+0xc>
      }
    }
  }
}
 8010b4e:	bf00      	nop
 8010b50:	bf00      	nop
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	24005d2c 	.word	0x24005d2c

08010b5c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b08a      	sub	sp, #40	; 0x28
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	60f8      	str	r0, [r7, #12]
 8010b64:	460b      	mov	r3, r1
 8010b66:	607a      	str	r2, [r7, #4]
 8010b68:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010b6a:	230a      	movs	r3, #10
 8010b6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010b6e:	230a      	movs	r3, #10
 8010b70:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010b72:	230a      	movs	r3, #10
 8010b74:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010b76:	2300      	movs	r3, #0
 8010b78:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010b7a:	230a      	movs	r3, #10
 8010b7c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	83bb      	strh	r3, [r7, #28]
 8010b82:	2300      	movs	r3, #0
 8010b84:	837b      	strh	r3, [r7, #26]
 8010b86:	2300      	movs	r3, #0
 8010b88:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	843b      	strh	r3, [r7, #32]
 8010b8e:	e0ae      	b.n	8010cee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010b90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b94:	49a6      	ldr	r1, [pc, #664]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010b96:	4613      	mov	r3, r2
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	4413      	add	r3, r2
 8010b9c:	00db      	lsls	r3, r3, #3
 8010b9e:	440b      	add	r3, r1
 8010ba0:	3314      	adds	r3, #20
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010ba6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010baa:	2b0a      	cmp	r3, #10
 8010bac:	d105      	bne.n	8010bba <etharp_find_entry+0x5e>
 8010bae:	7dfb      	ldrb	r3, [r7, #23]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d102      	bne.n	8010bba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010bb4:	8c3b      	ldrh	r3, [r7, #32]
 8010bb6:	847b      	strh	r3, [r7, #34]	; 0x22
 8010bb8:	e095      	b.n	8010ce6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010bba:	7dfb      	ldrb	r3, [r7, #23]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	f000 8092 	beq.w	8010ce6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010bc2:	7dfb      	ldrb	r3, [r7, #23]
 8010bc4:	2b01      	cmp	r3, #1
 8010bc6:	d009      	beq.n	8010bdc <etharp_find_entry+0x80>
 8010bc8:	7dfb      	ldrb	r3, [r7, #23]
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d806      	bhi.n	8010bdc <etharp_find_entry+0x80>
 8010bce:	4b99      	ldr	r3, [pc, #612]	; (8010e34 <etharp_find_entry+0x2d8>)
 8010bd0:	f240 1223 	movw	r2, #291	; 0x123
 8010bd4:	4998      	ldr	r1, [pc, #608]	; (8010e38 <etharp_find_entry+0x2dc>)
 8010bd6:	4899      	ldr	r0, [pc, #612]	; (8010e3c <etharp_find_entry+0x2e0>)
 8010bd8:	f002 fc9c 	bl	8013514 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d020      	beq.n	8010c24 <etharp_find_entry+0xc8>
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	6819      	ldr	r1, [r3, #0]
 8010be6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bea:	4891      	ldr	r0, [pc, #580]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010bec:	4613      	mov	r3, r2
 8010bee:	005b      	lsls	r3, r3, #1
 8010bf0:	4413      	add	r3, r2
 8010bf2:	00db      	lsls	r3, r3, #3
 8010bf4:	4403      	add	r3, r0
 8010bf6:	3304      	adds	r3, #4
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	4299      	cmp	r1, r3
 8010bfc:	d112      	bne.n	8010c24 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d00c      	beq.n	8010c1e <etharp_find_entry+0xc2>
 8010c04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c08:	4989      	ldr	r1, [pc, #548]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	005b      	lsls	r3, r3, #1
 8010c0e:	4413      	add	r3, r2
 8010c10:	00db      	lsls	r3, r3, #3
 8010c12:	440b      	add	r3, r1
 8010c14:	3308      	adds	r3, #8
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d102      	bne.n	8010c24 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010c1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c22:	e100      	b.n	8010e26 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010c24:	7dfb      	ldrb	r3, [r7, #23]
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	d140      	bne.n	8010cac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010c2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c2e:	4980      	ldr	r1, [pc, #512]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010c30:	4613      	mov	r3, r2
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	4413      	add	r3, r2
 8010c36:	00db      	lsls	r3, r3, #3
 8010c38:	440b      	add	r3, r1
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d01a      	beq.n	8010c76 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010c40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c44:	497a      	ldr	r1, [pc, #488]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010c46:	4613      	mov	r3, r2
 8010c48:	005b      	lsls	r3, r3, #1
 8010c4a:	4413      	add	r3, r2
 8010c4c:	00db      	lsls	r3, r3, #3
 8010c4e:	440b      	add	r3, r1
 8010c50:	3312      	adds	r3, #18
 8010c52:	881b      	ldrh	r3, [r3, #0]
 8010c54:	8bba      	ldrh	r2, [r7, #28]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d845      	bhi.n	8010ce6 <etharp_find_entry+0x18a>
            old_queue = i;
 8010c5a:	8c3b      	ldrh	r3, [r7, #32]
 8010c5c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010c5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c62:	4973      	ldr	r1, [pc, #460]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010c64:	4613      	mov	r3, r2
 8010c66:	005b      	lsls	r3, r3, #1
 8010c68:	4413      	add	r3, r2
 8010c6a:	00db      	lsls	r3, r3, #3
 8010c6c:	440b      	add	r3, r1
 8010c6e:	3312      	adds	r3, #18
 8010c70:	881b      	ldrh	r3, [r3, #0]
 8010c72:	83bb      	strh	r3, [r7, #28]
 8010c74:	e037      	b.n	8010ce6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010c76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c7a:	496d      	ldr	r1, [pc, #436]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	005b      	lsls	r3, r3, #1
 8010c80:	4413      	add	r3, r2
 8010c82:	00db      	lsls	r3, r3, #3
 8010c84:	440b      	add	r3, r1
 8010c86:	3312      	adds	r3, #18
 8010c88:	881b      	ldrh	r3, [r3, #0]
 8010c8a:	8b7a      	ldrh	r2, [r7, #26]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d82a      	bhi.n	8010ce6 <etharp_find_entry+0x18a>
            old_pending = i;
 8010c90:	8c3b      	ldrh	r3, [r7, #32]
 8010c92:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010c94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c98:	4965      	ldr	r1, [pc, #404]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010c9a:	4613      	mov	r3, r2
 8010c9c:	005b      	lsls	r3, r3, #1
 8010c9e:	4413      	add	r3, r2
 8010ca0:	00db      	lsls	r3, r3, #3
 8010ca2:	440b      	add	r3, r1
 8010ca4:	3312      	adds	r3, #18
 8010ca6:	881b      	ldrh	r3, [r3, #0]
 8010ca8:	837b      	strh	r3, [r7, #26]
 8010caa:	e01c      	b.n	8010ce6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010cac:	7dfb      	ldrb	r3, [r7, #23]
 8010cae:	2b01      	cmp	r3, #1
 8010cb0:	d919      	bls.n	8010ce6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010cb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cb6:	495e      	ldr	r1, [pc, #376]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010cb8:	4613      	mov	r3, r2
 8010cba:	005b      	lsls	r3, r3, #1
 8010cbc:	4413      	add	r3, r2
 8010cbe:	00db      	lsls	r3, r3, #3
 8010cc0:	440b      	add	r3, r1
 8010cc2:	3312      	adds	r3, #18
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	8b3a      	ldrh	r2, [r7, #24]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d80c      	bhi.n	8010ce6 <etharp_find_entry+0x18a>
            old_stable = i;
 8010ccc:	8c3b      	ldrh	r3, [r7, #32]
 8010cce:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010cd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cd4:	4956      	ldr	r1, [pc, #344]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010cd6:	4613      	mov	r3, r2
 8010cd8:	005b      	lsls	r3, r3, #1
 8010cda:	4413      	add	r3, r2
 8010cdc:	00db      	lsls	r3, r3, #3
 8010cde:	440b      	add	r3, r1
 8010ce0:	3312      	adds	r3, #18
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ce6:	8c3b      	ldrh	r3, [r7, #32]
 8010ce8:	3301      	adds	r3, #1
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	843b      	strh	r3, [r7, #32]
 8010cee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010cf2:	2b09      	cmp	r3, #9
 8010cf4:	f77f af4c 	ble.w	8010b90 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010cf8:	7afb      	ldrb	r3, [r7, #11]
 8010cfa:	f003 0302 	and.w	r3, r3, #2
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d108      	bne.n	8010d14 <etharp_find_entry+0x1b8>
 8010d02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010d06:	2b0a      	cmp	r3, #10
 8010d08:	d107      	bne.n	8010d1a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010d0a:	7afb      	ldrb	r3, [r7, #11]
 8010d0c:	f003 0301 	and.w	r3, r3, #1
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d102      	bne.n	8010d1a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010d14:	f04f 33ff 	mov.w	r3, #4294967295
 8010d18:	e085      	b.n	8010e26 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010d1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010d1e:	2b09      	cmp	r3, #9
 8010d20:	dc02      	bgt.n	8010d28 <etharp_find_entry+0x1cc>
    i = empty;
 8010d22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d24:	843b      	strh	r3, [r7, #32]
 8010d26:	e039      	b.n	8010d9c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010d28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010d2c:	2b09      	cmp	r3, #9
 8010d2e:	dc14      	bgt.n	8010d5a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d32:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010d34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d38:	493d      	ldr	r1, [pc, #244]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010d3a:	4613      	mov	r3, r2
 8010d3c:	005b      	lsls	r3, r3, #1
 8010d3e:	4413      	add	r3, r2
 8010d40:	00db      	lsls	r3, r3, #3
 8010d42:	440b      	add	r3, r1
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d018      	beq.n	8010d7c <etharp_find_entry+0x220>
 8010d4a:	4b3a      	ldr	r3, [pc, #232]	; (8010e34 <etharp_find_entry+0x2d8>)
 8010d4c:	f240 126d 	movw	r2, #365	; 0x16d
 8010d50:	493b      	ldr	r1, [pc, #236]	; (8010e40 <etharp_find_entry+0x2e4>)
 8010d52:	483a      	ldr	r0, [pc, #232]	; (8010e3c <etharp_find_entry+0x2e0>)
 8010d54:	f002 fbde 	bl	8013514 <iprintf>
 8010d58:	e010      	b.n	8010d7c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010d5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010d5e:	2b09      	cmp	r3, #9
 8010d60:	dc02      	bgt.n	8010d68 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010d62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010d64:	843b      	strh	r3, [r7, #32]
 8010d66:	e009      	b.n	8010d7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010d68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010d6c:	2b09      	cmp	r3, #9
 8010d6e:	dc02      	bgt.n	8010d76 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010d70:	8bfb      	ldrh	r3, [r7, #30]
 8010d72:	843b      	strh	r3, [r7, #32]
 8010d74:	e002      	b.n	8010d7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010d76:	f04f 33ff 	mov.w	r3, #4294967295
 8010d7a:	e054      	b.n	8010e26 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010d7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010d80:	2b09      	cmp	r3, #9
 8010d82:	dd06      	ble.n	8010d92 <etharp_find_entry+0x236>
 8010d84:	4b2b      	ldr	r3, [pc, #172]	; (8010e34 <etharp_find_entry+0x2d8>)
 8010d86:	f240 127f 	movw	r2, #383	; 0x17f
 8010d8a:	492e      	ldr	r1, [pc, #184]	; (8010e44 <etharp_find_entry+0x2e8>)
 8010d8c:	482b      	ldr	r0, [pc, #172]	; (8010e3c <etharp_find_entry+0x2e0>)
 8010d8e:	f002 fbc1 	bl	8013514 <iprintf>
    etharp_free_entry(i);
 8010d92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7ff fe06 	bl	80109a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010d9c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010da0:	2b09      	cmp	r3, #9
 8010da2:	dd06      	ble.n	8010db2 <etharp_find_entry+0x256>
 8010da4:	4b23      	ldr	r3, [pc, #140]	; (8010e34 <etharp_find_entry+0x2d8>)
 8010da6:	f240 1283 	movw	r2, #387	; 0x183
 8010daa:	4926      	ldr	r1, [pc, #152]	; (8010e44 <etharp_find_entry+0x2e8>)
 8010dac:	4823      	ldr	r0, [pc, #140]	; (8010e3c <etharp_find_entry+0x2e0>)
 8010dae:	f002 fbb1 	bl	8013514 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010db2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010db6:	491e      	ldr	r1, [pc, #120]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010db8:	4613      	mov	r3, r2
 8010dba:	005b      	lsls	r3, r3, #1
 8010dbc:	4413      	add	r3, r2
 8010dbe:	00db      	lsls	r3, r3, #3
 8010dc0:	440b      	add	r3, r1
 8010dc2:	3314      	adds	r3, #20
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d006      	beq.n	8010dd8 <etharp_find_entry+0x27c>
 8010dca:	4b1a      	ldr	r3, [pc, #104]	; (8010e34 <etharp_find_entry+0x2d8>)
 8010dcc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010dd0:	491d      	ldr	r1, [pc, #116]	; (8010e48 <etharp_find_entry+0x2ec>)
 8010dd2:	481a      	ldr	r0, [pc, #104]	; (8010e3c <etharp_find_entry+0x2e0>)
 8010dd4:	f002 fb9e 	bl	8013514 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d00b      	beq.n	8010df6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010dde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	6819      	ldr	r1, [r3, #0]
 8010de6:	4812      	ldr	r0, [pc, #72]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010de8:	4613      	mov	r3, r2
 8010dea:	005b      	lsls	r3, r3, #1
 8010dec:	4413      	add	r3, r2
 8010dee:	00db      	lsls	r3, r3, #3
 8010df0:	4403      	add	r3, r0
 8010df2:	3304      	adds	r3, #4
 8010df4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010df6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010dfa:	490d      	ldr	r1, [pc, #52]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	005b      	lsls	r3, r3, #1
 8010e00:	4413      	add	r3, r2
 8010e02:	00db      	lsls	r3, r3, #3
 8010e04:	440b      	add	r3, r1
 8010e06:	3312      	adds	r3, #18
 8010e08:	2200      	movs	r2, #0
 8010e0a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010e0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e10:	4907      	ldr	r1, [pc, #28]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010e12:	4613      	mov	r3, r2
 8010e14:	005b      	lsls	r3, r3, #1
 8010e16:	4413      	add	r3, r2
 8010e18:	00db      	lsls	r3, r3, #3
 8010e1a:	440b      	add	r3, r1
 8010e1c:	3308      	adds	r3, #8
 8010e1e:	687a      	ldr	r2, [r7, #4]
 8010e20:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010e22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3728      	adds	r7, #40	; 0x28
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}
 8010e2e:	bf00      	nop
 8010e30:	24005d2c 	.word	0x24005d2c
 8010e34:	080167d0 	.word	0x080167d0
 8010e38:	08016808 	.word	0x08016808
 8010e3c:	08016848 	.word	0x08016848
 8010e40:	08016870 	.word	0x08016870
 8010e44:	08016888 	.word	0x08016888
 8010e48:	0801689c 	.word	0x0801689c

08010e4c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b088      	sub	sp, #32
 8010e50:	af02      	add	r7, sp, #8
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	607a      	str	r2, [r7, #4]
 8010e58:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010e60:	2b06      	cmp	r3, #6
 8010e62:	d006      	beq.n	8010e72 <etharp_update_arp_entry+0x26>
 8010e64:	4b48      	ldr	r3, [pc, #288]	; (8010f88 <etharp_update_arp_entry+0x13c>)
 8010e66:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010e6a:	4948      	ldr	r1, [pc, #288]	; (8010f8c <etharp_update_arp_entry+0x140>)
 8010e6c:	4848      	ldr	r0, [pc, #288]	; (8010f90 <etharp_update_arp_entry+0x144>)
 8010e6e:	f002 fb51 	bl	8013514 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d012      	beq.n	8010e9e <etharp_update_arp_entry+0x52>
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d00e      	beq.n	8010e9e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	68f9      	ldr	r1, [r7, #12]
 8010e86:	4618      	mov	r0, r3
 8010e88:	f001 f924 	bl	80120d4 <ip4_addr_isbroadcast_u32>
 8010e8c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d105      	bne.n	8010e9e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010e9a:	2be0      	cmp	r3, #224	; 0xe0
 8010e9c:	d102      	bne.n	8010ea4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010e9e:	f06f 030f 	mvn.w	r3, #15
 8010ea2:	e06c      	b.n	8010f7e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010ea4:	78fb      	ldrb	r3, [r7, #3]
 8010ea6:	68fa      	ldr	r2, [r7, #12]
 8010ea8:	4619      	mov	r1, r3
 8010eaa:	68b8      	ldr	r0, [r7, #8]
 8010eac:	f7ff fe56 	bl	8010b5c <etharp_find_entry>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010eb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	da02      	bge.n	8010ec2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010ebc:	8afb      	ldrh	r3, [r7, #22]
 8010ebe:	b25b      	sxtb	r3, r3
 8010ec0:	e05d      	b.n	8010f7e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010ec2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ec6:	4933      	ldr	r1, [pc, #204]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010ec8:	4613      	mov	r3, r2
 8010eca:	005b      	lsls	r3, r3, #1
 8010ecc:	4413      	add	r3, r2
 8010ece:	00db      	lsls	r3, r3, #3
 8010ed0:	440b      	add	r3, r1
 8010ed2:	3314      	adds	r3, #20
 8010ed4:	2202      	movs	r2, #2
 8010ed6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010ed8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010edc:	492d      	ldr	r1, [pc, #180]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010ede:	4613      	mov	r3, r2
 8010ee0:	005b      	lsls	r3, r3, #1
 8010ee2:	4413      	add	r3, r2
 8010ee4:	00db      	lsls	r3, r3, #3
 8010ee6:	440b      	add	r3, r1
 8010ee8:	3308      	adds	r3, #8
 8010eea:	68fa      	ldr	r2, [r7, #12]
 8010eec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010eee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	005b      	lsls	r3, r3, #1
 8010ef6:	4413      	add	r3, r2
 8010ef8:	00db      	lsls	r3, r3, #3
 8010efa:	3308      	adds	r3, #8
 8010efc:	4a25      	ldr	r2, [pc, #148]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010efe:	4413      	add	r3, r2
 8010f00:	3304      	adds	r3, #4
 8010f02:	2206      	movs	r2, #6
 8010f04:	6879      	ldr	r1, [r7, #4]
 8010f06:	4618      	mov	r0, r3
 8010f08:	f002 fa59 	bl	80133be <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010f0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f10:	4920      	ldr	r1, [pc, #128]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010f12:	4613      	mov	r3, r2
 8010f14:	005b      	lsls	r3, r3, #1
 8010f16:	4413      	add	r3, r2
 8010f18:	00db      	lsls	r3, r3, #3
 8010f1a:	440b      	add	r3, r1
 8010f1c:	3312      	adds	r3, #18
 8010f1e:	2200      	movs	r2, #0
 8010f20:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010f22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f26:	491b      	ldr	r1, [pc, #108]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010f28:	4613      	mov	r3, r2
 8010f2a:	005b      	lsls	r3, r3, #1
 8010f2c:	4413      	add	r3, r2
 8010f2e:	00db      	lsls	r3, r3, #3
 8010f30:	440b      	add	r3, r1
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d021      	beq.n	8010f7c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010f38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f3c:	4915      	ldr	r1, [pc, #84]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010f3e:	4613      	mov	r3, r2
 8010f40:	005b      	lsls	r3, r3, #1
 8010f42:	4413      	add	r3, r2
 8010f44:	00db      	lsls	r3, r3, #3
 8010f46:	440b      	add	r3, r1
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010f4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f50:	4910      	ldr	r1, [pc, #64]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010f52:	4613      	mov	r3, r2
 8010f54:	005b      	lsls	r3, r3, #1
 8010f56:	4413      	add	r3, r2
 8010f58:	00db      	lsls	r3, r3, #3
 8010f5a:	440b      	add	r3, r1
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010f6a:	9300      	str	r3, [sp, #0]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6939      	ldr	r1, [r7, #16]
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	f001 ffbd 	bl	8012ef0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010f76:	6938      	ldr	r0, [r7, #16]
 8010f78:	f7f9 fdec 	bl	800ab54 <pbuf_free>
  }
  return ERR_OK;
 8010f7c:	2300      	movs	r3, #0
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3718      	adds	r7, #24
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	080167d0 	.word	0x080167d0
 8010f8c:	080168c8 	.word	0x080168c8
 8010f90:	08016848 	.word	0x08016848
 8010f94:	24005d2c 	.word	0x24005d2c

08010f98 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b084      	sub	sp, #16
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	60fb      	str	r3, [r7, #12]
 8010fa4:	e01e      	b.n	8010fe4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010fa6:	4913      	ldr	r1, [pc, #76]	; (8010ff4 <etharp_cleanup_netif+0x5c>)
 8010fa8:	68fa      	ldr	r2, [r7, #12]
 8010faa:	4613      	mov	r3, r2
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	4413      	add	r3, r2
 8010fb0:	00db      	lsls	r3, r3, #3
 8010fb2:	440b      	add	r3, r1
 8010fb4:	3314      	adds	r3, #20
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010fba:	7afb      	ldrb	r3, [r7, #11]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d00e      	beq.n	8010fde <etharp_cleanup_netif+0x46>
 8010fc0:	490c      	ldr	r1, [pc, #48]	; (8010ff4 <etharp_cleanup_netif+0x5c>)
 8010fc2:	68fa      	ldr	r2, [r7, #12]
 8010fc4:	4613      	mov	r3, r2
 8010fc6:	005b      	lsls	r3, r3, #1
 8010fc8:	4413      	add	r3, r2
 8010fca:	00db      	lsls	r3, r3, #3
 8010fcc:	440b      	add	r3, r1
 8010fce:	3308      	adds	r3, #8
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d102      	bne.n	8010fde <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010fd8:	68f8      	ldr	r0, [r7, #12]
 8010fda:	f7ff fce5 	bl	80109a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	60fb      	str	r3, [r7, #12]
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2b09      	cmp	r3, #9
 8010fe8:	dddd      	ble.n	8010fa6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010fea:	bf00      	nop
 8010fec:	bf00      	nop
 8010fee:	3710      	adds	r7, #16
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	24005d2c 	.word	0x24005d2c

08010ff8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010ff8:	b5b0      	push	{r4, r5, r7, lr}
 8010ffa:	b08a      	sub	sp, #40	; 0x28
 8010ffc:	af04      	add	r7, sp, #16
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d107      	bne.n	8011018 <etharp_input+0x20>
 8011008:	4b3d      	ldr	r3, [pc, #244]	; (8011100 <etharp_input+0x108>)
 801100a:	f240 228a 	movw	r2, #650	; 0x28a
 801100e:	493d      	ldr	r1, [pc, #244]	; (8011104 <etharp_input+0x10c>)
 8011010:	483d      	ldr	r0, [pc, #244]	; (8011108 <etharp_input+0x110>)
 8011012:	f002 fa7f 	bl	8013514 <iprintf>
 8011016:	e06f      	b.n	80110f8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	685b      	ldr	r3, [r3, #4]
 801101c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	881b      	ldrh	r3, [r3, #0]
 8011022:	b29b      	uxth	r3, r3
 8011024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011028:	d10c      	bne.n	8011044 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801102e:	2b06      	cmp	r3, #6
 8011030:	d108      	bne.n	8011044 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011036:	2b04      	cmp	r3, #4
 8011038:	d104      	bne.n	8011044 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	885b      	ldrh	r3, [r3, #2]
 801103e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011040:	2b08      	cmp	r3, #8
 8011042:	d003      	beq.n	801104c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f7f9 fd85 	bl	800ab54 <pbuf_free>
    return;
 801104a:	e055      	b.n	80110f8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	330e      	adds	r3, #14
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	3318      	adds	r3, #24
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	3304      	adds	r3, #4
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d102      	bne.n	801106c <etharp_input+0x74>
    for_us = 0;
 8011066:	2300      	movs	r3, #0
 8011068:	75fb      	strb	r3, [r7, #23]
 801106a:	e009      	b.n	8011080 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801106c:	68ba      	ldr	r2, [r7, #8]
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	3304      	adds	r3, #4
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	429a      	cmp	r2, r3
 8011076:	bf0c      	ite	eq
 8011078:	2301      	moveq	r3, #1
 801107a:	2300      	movne	r3, #0
 801107c:	b2db      	uxtb	r3, r3
 801107e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	f103 0208 	add.w	r2, r3, #8
 8011086:	7dfb      	ldrb	r3, [r7, #23]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d001      	beq.n	8011090 <etharp_input+0x98>
 801108c:	2301      	movs	r3, #1
 801108e:	e000      	b.n	8011092 <etharp_input+0x9a>
 8011090:	2302      	movs	r3, #2
 8011092:	f107 010c 	add.w	r1, r7, #12
 8011096:	6838      	ldr	r0, [r7, #0]
 8011098:	f7ff fed8 	bl	8010e4c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	88db      	ldrh	r3, [r3, #6]
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80110a6:	d003      	beq.n	80110b0 <etharp_input+0xb8>
 80110a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110ac:	d01e      	beq.n	80110ec <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80110ae:	e020      	b.n	80110f2 <etharp_input+0xfa>
      if (for_us) {
 80110b0:	7dfb      	ldrb	r3, [r7, #23]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d01c      	beq.n	80110f0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80110cc:	693a      	ldr	r2, [r7, #16]
 80110ce:	3208      	adds	r2, #8
        etharp_raw(netif,
 80110d0:	2102      	movs	r1, #2
 80110d2:	9103      	str	r1, [sp, #12]
 80110d4:	f107 010c 	add.w	r1, r7, #12
 80110d8:	9102      	str	r1, [sp, #8]
 80110da:	9201      	str	r2, [sp, #4]
 80110dc:	9300      	str	r3, [sp, #0]
 80110de:	462b      	mov	r3, r5
 80110e0:	4622      	mov	r2, r4
 80110e2:	4601      	mov	r1, r0
 80110e4:	6838      	ldr	r0, [r7, #0]
 80110e6:	f000 faeb 	bl	80116c0 <etharp_raw>
      break;
 80110ea:	e001      	b.n	80110f0 <etharp_input+0xf8>
      break;
 80110ec:	bf00      	nop
 80110ee:	e000      	b.n	80110f2 <etharp_input+0xfa>
      break;
 80110f0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f7f9 fd2e 	bl	800ab54 <pbuf_free>
}
 80110f8:	3718      	adds	r7, #24
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bdb0      	pop	{r4, r5, r7, pc}
 80110fe:	bf00      	nop
 8011100:	080167d0 	.word	0x080167d0
 8011104:	08016920 	.word	0x08016920
 8011108:	08016848 	.word	0x08016848

0801110c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b086      	sub	sp, #24
 8011110:	af02      	add	r7, sp, #8
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	60b9      	str	r1, [r7, #8]
 8011116:	4613      	mov	r3, r2
 8011118:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801111a:	79fa      	ldrb	r2, [r7, #7]
 801111c:	4944      	ldr	r1, [pc, #272]	; (8011230 <etharp_output_to_arp_index+0x124>)
 801111e:	4613      	mov	r3, r2
 8011120:	005b      	lsls	r3, r3, #1
 8011122:	4413      	add	r3, r2
 8011124:	00db      	lsls	r3, r3, #3
 8011126:	440b      	add	r3, r1
 8011128:	3314      	adds	r3, #20
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	2b01      	cmp	r3, #1
 801112e:	d806      	bhi.n	801113e <etharp_output_to_arp_index+0x32>
 8011130:	4b40      	ldr	r3, [pc, #256]	; (8011234 <etharp_output_to_arp_index+0x128>)
 8011132:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011136:	4940      	ldr	r1, [pc, #256]	; (8011238 <etharp_output_to_arp_index+0x12c>)
 8011138:	4840      	ldr	r0, [pc, #256]	; (801123c <etharp_output_to_arp_index+0x130>)
 801113a:	f002 f9eb 	bl	8013514 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801113e:	79fa      	ldrb	r2, [r7, #7]
 8011140:	493b      	ldr	r1, [pc, #236]	; (8011230 <etharp_output_to_arp_index+0x124>)
 8011142:	4613      	mov	r3, r2
 8011144:	005b      	lsls	r3, r3, #1
 8011146:	4413      	add	r3, r2
 8011148:	00db      	lsls	r3, r3, #3
 801114a:	440b      	add	r3, r1
 801114c:	3314      	adds	r3, #20
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	2b02      	cmp	r3, #2
 8011152:	d153      	bne.n	80111fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011154:	79fa      	ldrb	r2, [r7, #7]
 8011156:	4936      	ldr	r1, [pc, #216]	; (8011230 <etharp_output_to_arp_index+0x124>)
 8011158:	4613      	mov	r3, r2
 801115a:	005b      	lsls	r3, r3, #1
 801115c:	4413      	add	r3, r2
 801115e:	00db      	lsls	r3, r3, #3
 8011160:	440b      	add	r3, r1
 8011162:	3312      	adds	r3, #18
 8011164:	881b      	ldrh	r3, [r3, #0]
 8011166:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801116a:	d919      	bls.n	80111a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801116c:	79fa      	ldrb	r2, [r7, #7]
 801116e:	4613      	mov	r3, r2
 8011170:	005b      	lsls	r3, r3, #1
 8011172:	4413      	add	r3, r2
 8011174:	00db      	lsls	r3, r3, #3
 8011176:	4a2e      	ldr	r2, [pc, #184]	; (8011230 <etharp_output_to_arp_index+0x124>)
 8011178:	4413      	add	r3, r2
 801117a:	3304      	adds	r3, #4
 801117c:	4619      	mov	r1, r3
 801117e:	68f8      	ldr	r0, [r7, #12]
 8011180:	f000 fb4c 	bl	801181c <etharp_request>
 8011184:	4603      	mov	r3, r0
 8011186:	2b00      	cmp	r3, #0
 8011188:	d138      	bne.n	80111fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801118a:	79fa      	ldrb	r2, [r7, #7]
 801118c:	4928      	ldr	r1, [pc, #160]	; (8011230 <etharp_output_to_arp_index+0x124>)
 801118e:	4613      	mov	r3, r2
 8011190:	005b      	lsls	r3, r3, #1
 8011192:	4413      	add	r3, r2
 8011194:	00db      	lsls	r3, r3, #3
 8011196:	440b      	add	r3, r1
 8011198:	3314      	adds	r3, #20
 801119a:	2203      	movs	r2, #3
 801119c:	701a      	strb	r2, [r3, #0]
 801119e:	e02d      	b.n	80111fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80111a0:	79fa      	ldrb	r2, [r7, #7]
 80111a2:	4923      	ldr	r1, [pc, #140]	; (8011230 <etharp_output_to_arp_index+0x124>)
 80111a4:	4613      	mov	r3, r2
 80111a6:	005b      	lsls	r3, r3, #1
 80111a8:	4413      	add	r3, r2
 80111aa:	00db      	lsls	r3, r3, #3
 80111ac:	440b      	add	r3, r1
 80111ae:	3312      	adds	r3, #18
 80111b0:	881b      	ldrh	r3, [r3, #0]
 80111b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80111b6:	d321      	bcc.n	80111fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80111b8:	79fa      	ldrb	r2, [r7, #7]
 80111ba:	4613      	mov	r3, r2
 80111bc:	005b      	lsls	r3, r3, #1
 80111be:	4413      	add	r3, r2
 80111c0:	00db      	lsls	r3, r3, #3
 80111c2:	4a1b      	ldr	r2, [pc, #108]	; (8011230 <etharp_output_to_arp_index+0x124>)
 80111c4:	4413      	add	r3, r2
 80111c6:	1d19      	adds	r1, r3, #4
 80111c8:	79fa      	ldrb	r2, [r7, #7]
 80111ca:	4613      	mov	r3, r2
 80111cc:	005b      	lsls	r3, r3, #1
 80111ce:	4413      	add	r3, r2
 80111d0:	00db      	lsls	r3, r3, #3
 80111d2:	3308      	adds	r3, #8
 80111d4:	4a16      	ldr	r2, [pc, #88]	; (8011230 <etharp_output_to_arp_index+0x124>)
 80111d6:	4413      	add	r3, r2
 80111d8:	3304      	adds	r3, #4
 80111da:	461a      	mov	r2, r3
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f000 fafb 	bl	80117d8 <etharp_request_dst>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d109      	bne.n	80111fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80111e8:	79fa      	ldrb	r2, [r7, #7]
 80111ea:	4911      	ldr	r1, [pc, #68]	; (8011230 <etharp_output_to_arp_index+0x124>)
 80111ec:	4613      	mov	r3, r2
 80111ee:	005b      	lsls	r3, r3, #1
 80111f0:	4413      	add	r3, r2
 80111f2:	00db      	lsls	r3, r3, #3
 80111f4:	440b      	add	r3, r1
 80111f6:	3314      	adds	r3, #20
 80111f8:	2203      	movs	r2, #3
 80111fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011202:	79fa      	ldrb	r2, [r7, #7]
 8011204:	4613      	mov	r3, r2
 8011206:	005b      	lsls	r3, r3, #1
 8011208:	4413      	add	r3, r2
 801120a:	00db      	lsls	r3, r3, #3
 801120c:	3308      	adds	r3, #8
 801120e:	4a08      	ldr	r2, [pc, #32]	; (8011230 <etharp_output_to_arp_index+0x124>)
 8011210:	4413      	add	r3, r2
 8011212:	3304      	adds	r3, #4
 8011214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011218:	9200      	str	r2, [sp, #0]
 801121a:	460a      	mov	r2, r1
 801121c:	68b9      	ldr	r1, [r7, #8]
 801121e:	68f8      	ldr	r0, [r7, #12]
 8011220:	f001 fe66 	bl	8012ef0 <ethernet_output>
 8011224:	4603      	mov	r3, r0
}
 8011226:	4618      	mov	r0, r3
 8011228:	3710      	adds	r7, #16
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}
 801122e:	bf00      	nop
 8011230:	24005d2c 	.word	0x24005d2c
 8011234:	080167d0 	.word	0x080167d0
 8011238:	08016940 	.word	0x08016940
 801123c:	08016848 	.word	0x08016848

08011240 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b08a      	sub	sp, #40	; 0x28
 8011244:	af02      	add	r7, sp, #8
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	60b9      	str	r1, [r7, #8]
 801124a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d106      	bne.n	8011264 <etharp_output+0x24>
 8011256:	4b73      	ldr	r3, [pc, #460]	; (8011424 <etharp_output+0x1e4>)
 8011258:	f240 321e 	movw	r2, #798	; 0x31e
 801125c:	4972      	ldr	r1, [pc, #456]	; (8011428 <etharp_output+0x1e8>)
 801125e:	4873      	ldr	r0, [pc, #460]	; (801142c <etharp_output+0x1ec>)
 8011260:	f002 f958 	bl	8013514 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d106      	bne.n	8011278 <etharp_output+0x38>
 801126a:	4b6e      	ldr	r3, [pc, #440]	; (8011424 <etharp_output+0x1e4>)
 801126c:	f240 321f 	movw	r2, #799	; 0x31f
 8011270:	496f      	ldr	r1, [pc, #444]	; (8011430 <etharp_output+0x1f0>)
 8011272:	486e      	ldr	r0, [pc, #440]	; (801142c <etharp_output+0x1ec>)
 8011274:	f002 f94e 	bl	8013514 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d106      	bne.n	801128c <etharp_output+0x4c>
 801127e:	4b69      	ldr	r3, [pc, #420]	; (8011424 <etharp_output+0x1e4>)
 8011280:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011284:	496b      	ldr	r1, [pc, #428]	; (8011434 <etharp_output+0x1f4>)
 8011286:	4869      	ldr	r0, [pc, #420]	; (801142c <etharp_output+0x1ec>)
 8011288:	f002 f944 	bl	8013514 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	68f9      	ldr	r1, [r7, #12]
 8011292:	4618      	mov	r0, r3
 8011294:	f000 ff1e 	bl	80120d4 <ip4_addr_isbroadcast_u32>
 8011298:	4603      	mov	r3, r0
 801129a:	2b00      	cmp	r3, #0
 801129c:	d002      	beq.n	80112a4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801129e:	4b66      	ldr	r3, [pc, #408]	; (8011438 <etharp_output+0x1f8>)
 80112a0:	61fb      	str	r3, [r7, #28]
 80112a2:	e0af      	b.n	8011404 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80112ac:	2be0      	cmp	r3, #224	; 0xe0
 80112ae:	d118      	bne.n	80112e2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80112b0:	2301      	movs	r3, #1
 80112b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80112b4:	2300      	movs	r3, #0
 80112b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80112b8:	235e      	movs	r3, #94	; 0x5e
 80112ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	3301      	adds	r3, #1
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	3302      	adds	r3, #2
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	3303      	adds	r3, #3
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80112da:	f107 0310 	add.w	r3, r7, #16
 80112de:	61fb      	str	r3, [r7, #28]
 80112e0:	e090      	b.n	8011404 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	3304      	adds	r3, #4
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	405a      	eors	r2, r3
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	3308      	adds	r3, #8
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	4013      	ands	r3, r2
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d012      	beq.n	8011320 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011300:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011304:	4293      	cmp	r3, r2
 8011306:	d00b      	beq.n	8011320 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	330c      	adds	r3, #12
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d003      	beq.n	801131a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	330c      	adds	r3, #12
 8011316:	61bb      	str	r3, [r7, #24]
 8011318:	e002      	b.n	8011320 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801131a:	f06f 0303 	mvn.w	r3, #3
 801131e:	e07d      	b.n	801141c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011320:	4b46      	ldr	r3, [pc, #280]	; (801143c <etharp_output+0x1fc>)
 8011322:	781b      	ldrb	r3, [r3, #0]
 8011324:	4619      	mov	r1, r3
 8011326:	4a46      	ldr	r2, [pc, #280]	; (8011440 <etharp_output+0x200>)
 8011328:	460b      	mov	r3, r1
 801132a:	005b      	lsls	r3, r3, #1
 801132c:	440b      	add	r3, r1
 801132e:	00db      	lsls	r3, r3, #3
 8011330:	4413      	add	r3, r2
 8011332:	3314      	adds	r3, #20
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	2b01      	cmp	r3, #1
 8011338:	d925      	bls.n	8011386 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801133a:	4b40      	ldr	r3, [pc, #256]	; (801143c <etharp_output+0x1fc>)
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	4619      	mov	r1, r3
 8011340:	4a3f      	ldr	r2, [pc, #252]	; (8011440 <etharp_output+0x200>)
 8011342:	460b      	mov	r3, r1
 8011344:	005b      	lsls	r3, r3, #1
 8011346:	440b      	add	r3, r1
 8011348:	00db      	lsls	r3, r3, #3
 801134a:	4413      	add	r3, r2
 801134c:	3308      	adds	r3, #8
 801134e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011350:	68fa      	ldr	r2, [r7, #12]
 8011352:	429a      	cmp	r2, r3
 8011354:	d117      	bne.n	8011386 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011356:	69bb      	ldr	r3, [r7, #24]
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	4b38      	ldr	r3, [pc, #224]	; (801143c <etharp_output+0x1fc>)
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	4618      	mov	r0, r3
 8011360:	4937      	ldr	r1, [pc, #220]	; (8011440 <etharp_output+0x200>)
 8011362:	4603      	mov	r3, r0
 8011364:	005b      	lsls	r3, r3, #1
 8011366:	4403      	add	r3, r0
 8011368:	00db      	lsls	r3, r3, #3
 801136a:	440b      	add	r3, r1
 801136c:	3304      	adds	r3, #4
 801136e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011370:	429a      	cmp	r2, r3
 8011372:	d108      	bne.n	8011386 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011374:	4b31      	ldr	r3, [pc, #196]	; (801143c <etharp_output+0x1fc>)
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	461a      	mov	r2, r3
 801137a:	68b9      	ldr	r1, [r7, #8]
 801137c:	68f8      	ldr	r0, [r7, #12]
 801137e:	f7ff fec5 	bl	801110c <etharp_output_to_arp_index>
 8011382:	4603      	mov	r3, r0
 8011384:	e04a      	b.n	801141c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011386:	2300      	movs	r3, #0
 8011388:	75fb      	strb	r3, [r7, #23]
 801138a:	e031      	b.n	80113f0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801138c:	7dfa      	ldrb	r2, [r7, #23]
 801138e:	492c      	ldr	r1, [pc, #176]	; (8011440 <etharp_output+0x200>)
 8011390:	4613      	mov	r3, r2
 8011392:	005b      	lsls	r3, r3, #1
 8011394:	4413      	add	r3, r2
 8011396:	00db      	lsls	r3, r3, #3
 8011398:	440b      	add	r3, r1
 801139a:	3314      	adds	r3, #20
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	2b01      	cmp	r3, #1
 80113a0:	d923      	bls.n	80113ea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80113a2:	7dfa      	ldrb	r2, [r7, #23]
 80113a4:	4926      	ldr	r1, [pc, #152]	; (8011440 <etharp_output+0x200>)
 80113a6:	4613      	mov	r3, r2
 80113a8:	005b      	lsls	r3, r3, #1
 80113aa:	4413      	add	r3, r2
 80113ac:	00db      	lsls	r3, r3, #3
 80113ae:	440b      	add	r3, r1
 80113b0:	3308      	adds	r3, #8
 80113b2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80113b4:	68fa      	ldr	r2, [r7, #12]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d117      	bne.n	80113ea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	6819      	ldr	r1, [r3, #0]
 80113be:	7dfa      	ldrb	r2, [r7, #23]
 80113c0:	481f      	ldr	r0, [pc, #124]	; (8011440 <etharp_output+0x200>)
 80113c2:	4613      	mov	r3, r2
 80113c4:	005b      	lsls	r3, r3, #1
 80113c6:	4413      	add	r3, r2
 80113c8:	00db      	lsls	r3, r3, #3
 80113ca:	4403      	add	r3, r0
 80113cc:	3304      	adds	r3, #4
 80113ce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80113d0:	4299      	cmp	r1, r3
 80113d2:	d10a      	bne.n	80113ea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80113d4:	4a19      	ldr	r2, [pc, #100]	; (801143c <etharp_output+0x1fc>)
 80113d6:	7dfb      	ldrb	r3, [r7, #23]
 80113d8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80113da:	7dfb      	ldrb	r3, [r7, #23]
 80113dc:	461a      	mov	r2, r3
 80113de:	68b9      	ldr	r1, [r7, #8]
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f7ff fe93 	bl	801110c <etharp_output_to_arp_index>
 80113e6:	4603      	mov	r3, r0
 80113e8:	e018      	b.n	801141c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80113ea:	7dfb      	ldrb	r3, [r7, #23]
 80113ec:	3301      	adds	r3, #1
 80113ee:	75fb      	strb	r3, [r7, #23]
 80113f0:	7dfb      	ldrb	r3, [r7, #23]
 80113f2:	2b09      	cmp	r3, #9
 80113f4:	d9ca      	bls.n	801138c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80113f6:	68ba      	ldr	r2, [r7, #8]
 80113f8:	69b9      	ldr	r1, [r7, #24]
 80113fa:	68f8      	ldr	r0, [r7, #12]
 80113fc:	f000 f822 	bl	8011444 <etharp_query>
 8011400:	4603      	mov	r3, r0
 8011402:	e00b      	b.n	801141c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801140a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801140e:	9300      	str	r3, [sp, #0]
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	68b9      	ldr	r1, [r7, #8]
 8011414:	68f8      	ldr	r0, [r7, #12]
 8011416:	f001 fd6b 	bl	8012ef0 <ethernet_output>
 801141a:	4603      	mov	r3, r0
}
 801141c:	4618      	mov	r0, r3
 801141e:	3720      	adds	r7, #32
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}
 8011424:	080167d0 	.word	0x080167d0
 8011428:	08016920 	.word	0x08016920
 801142c:	08016848 	.word	0x08016848
 8011430:	08016970 	.word	0x08016970
 8011434:	08016910 	.word	0x08016910
 8011438:	08016fe8 	.word	0x08016fe8
 801143c:	24005e1c 	.word	0x24005e1c
 8011440:	24005d2c 	.word	0x24005d2c

08011444 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b08c      	sub	sp, #48	; 0x30
 8011448:	af02      	add	r7, sp, #8
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	60b9      	str	r1, [r7, #8]
 801144e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	3326      	adds	r3, #38	; 0x26
 8011454:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011456:	23ff      	movs	r3, #255	; 0xff
 8011458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801145c:	2300      	movs	r3, #0
 801145e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	68f9      	ldr	r1, [r7, #12]
 8011466:	4618      	mov	r0, r3
 8011468:	f000 fe34 	bl	80120d4 <ip4_addr_isbroadcast_u32>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	d10c      	bne.n	801148c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801147a:	2be0      	cmp	r3, #224	; 0xe0
 801147c:	d006      	beq.n	801148c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d003      	beq.n	801148c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d102      	bne.n	8011492 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801148c:	f06f 030f 	mvn.w	r3, #15
 8011490:	e101      	b.n	8011696 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011492:	68fa      	ldr	r2, [r7, #12]
 8011494:	2101      	movs	r1, #1
 8011496:	68b8      	ldr	r0, [r7, #8]
 8011498:	f7ff fb60 	bl	8010b5c <etharp_find_entry>
 801149c:	4603      	mov	r3, r0
 801149e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80114a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	da02      	bge.n	80114ae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80114a8:	8a7b      	ldrh	r3, [r7, #18]
 80114aa:	b25b      	sxtb	r3, r3
 80114ac:	e0f3      	b.n	8011696 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80114ae:	8a7b      	ldrh	r3, [r7, #18]
 80114b0:	2b7e      	cmp	r3, #126	; 0x7e
 80114b2:	d906      	bls.n	80114c2 <etharp_query+0x7e>
 80114b4:	4b7a      	ldr	r3, [pc, #488]	; (80116a0 <etharp_query+0x25c>)
 80114b6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80114ba:	497a      	ldr	r1, [pc, #488]	; (80116a4 <etharp_query+0x260>)
 80114bc:	487a      	ldr	r0, [pc, #488]	; (80116a8 <etharp_query+0x264>)
 80114be:	f002 f829 	bl	8013514 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80114c2:	8a7b      	ldrh	r3, [r7, #18]
 80114c4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80114c6:	7c7a      	ldrb	r2, [r7, #17]
 80114c8:	4978      	ldr	r1, [pc, #480]	; (80116ac <etharp_query+0x268>)
 80114ca:	4613      	mov	r3, r2
 80114cc:	005b      	lsls	r3, r3, #1
 80114ce:	4413      	add	r3, r2
 80114d0:	00db      	lsls	r3, r3, #3
 80114d2:	440b      	add	r3, r1
 80114d4:	3314      	adds	r3, #20
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d115      	bne.n	8011508 <etharp_query+0xc4>
    is_new_entry = 1;
 80114dc:	2301      	movs	r3, #1
 80114de:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80114e0:	7c7a      	ldrb	r2, [r7, #17]
 80114e2:	4972      	ldr	r1, [pc, #456]	; (80116ac <etharp_query+0x268>)
 80114e4:	4613      	mov	r3, r2
 80114e6:	005b      	lsls	r3, r3, #1
 80114e8:	4413      	add	r3, r2
 80114ea:	00db      	lsls	r3, r3, #3
 80114ec:	440b      	add	r3, r1
 80114ee:	3314      	adds	r3, #20
 80114f0:	2201      	movs	r2, #1
 80114f2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80114f4:	7c7a      	ldrb	r2, [r7, #17]
 80114f6:	496d      	ldr	r1, [pc, #436]	; (80116ac <etharp_query+0x268>)
 80114f8:	4613      	mov	r3, r2
 80114fa:	005b      	lsls	r3, r3, #1
 80114fc:	4413      	add	r3, r2
 80114fe:	00db      	lsls	r3, r3, #3
 8011500:	440b      	add	r3, r1
 8011502:	3308      	adds	r3, #8
 8011504:	68fa      	ldr	r2, [r7, #12]
 8011506:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011508:	7c7a      	ldrb	r2, [r7, #17]
 801150a:	4968      	ldr	r1, [pc, #416]	; (80116ac <etharp_query+0x268>)
 801150c:	4613      	mov	r3, r2
 801150e:	005b      	lsls	r3, r3, #1
 8011510:	4413      	add	r3, r2
 8011512:	00db      	lsls	r3, r3, #3
 8011514:	440b      	add	r3, r1
 8011516:	3314      	adds	r3, #20
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	2b01      	cmp	r3, #1
 801151c:	d011      	beq.n	8011542 <etharp_query+0xfe>
 801151e:	7c7a      	ldrb	r2, [r7, #17]
 8011520:	4962      	ldr	r1, [pc, #392]	; (80116ac <etharp_query+0x268>)
 8011522:	4613      	mov	r3, r2
 8011524:	005b      	lsls	r3, r3, #1
 8011526:	4413      	add	r3, r2
 8011528:	00db      	lsls	r3, r3, #3
 801152a:	440b      	add	r3, r1
 801152c:	3314      	adds	r3, #20
 801152e:	781b      	ldrb	r3, [r3, #0]
 8011530:	2b01      	cmp	r3, #1
 8011532:	d806      	bhi.n	8011542 <etharp_query+0xfe>
 8011534:	4b5a      	ldr	r3, [pc, #360]	; (80116a0 <etharp_query+0x25c>)
 8011536:	f240 32cd 	movw	r2, #973	; 0x3cd
 801153a:	495d      	ldr	r1, [pc, #372]	; (80116b0 <etharp_query+0x26c>)
 801153c:	485a      	ldr	r0, [pc, #360]	; (80116a8 <etharp_query+0x264>)
 801153e:	f001 ffe9 	bl	8013514 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011542:	6a3b      	ldr	r3, [r7, #32]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d102      	bne.n	801154e <etharp_query+0x10a>
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d10c      	bne.n	8011568 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801154e:	68b9      	ldr	r1, [r7, #8]
 8011550:	68f8      	ldr	r0, [r7, #12]
 8011552:	f000 f963 	bl	801181c <etharp_request>
 8011556:	4603      	mov	r3, r0
 8011558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d102      	bne.n	8011568 <etharp_query+0x124>
      return result;
 8011562:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011566:	e096      	b.n	8011696 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d106      	bne.n	801157c <etharp_query+0x138>
 801156e:	4b4c      	ldr	r3, [pc, #304]	; (80116a0 <etharp_query+0x25c>)
 8011570:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011574:	494f      	ldr	r1, [pc, #316]	; (80116b4 <etharp_query+0x270>)
 8011576:	484c      	ldr	r0, [pc, #304]	; (80116a8 <etharp_query+0x264>)
 8011578:	f001 ffcc 	bl	8013514 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801157c:	7c7a      	ldrb	r2, [r7, #17]
 801157e:	494b      	ldr	r1, [pc, #300]	; (80116ac <etharp_query+0x268>)
 8011580:	4613      	mov	r3, r2
 8011582:	005b      	lsls	r3, r3, #1
 8011584:	4413      	add	r3, r2
 8011586:	00db      	lsls	r3, r3, #3
 8011588:	440b      	add	r3, r1
 801158a:	3314      	adds	r3, #20
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	2b01      	cmp	r3, #1
 8011590:	d917      	bls.n	80115c2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011592:	4a49      	ldr	r2, [pc, #292]	; (80116b8 <etharp_query+0x274>)
 8011594:	7c7b      	ldrb	r3, [r7, #17]
 8011596:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011598:	7c7a      	ldrb	r2, [r7, #17]
 801159a:	4613      	mov	r3, r2
 801159c:	005b      	lsls	r3, r3, #1
 801159e:	4413      	add	r3, r2
 80115a0:	00db      	lsls	r3, r3, #3
 80115a2:	3308      	adds	r3, #8
 80115a4:	4a41      	ldr	r2, [pc, #260]	; (80116ac <etharp_query+0x268>)
 80115a6:	4413      	add	r3, r2
 80115a8:	3304      	adds	r3, #4
 80115aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80115ae:	9200      	str	r2, [sp, #0]
 80115b0:	697a      	ldr	r2, [r7, #20]
 80115b2:	6879      	ldr	r1, [r7, #4]
 80115b4:	68f8      	ldr	r0, [r7, #12]
 80115b6:	f001 fc9b 	bl	8012ef0 <ethernet_output>
 80115ba:	4603      	mov	r3, r0
 80115bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80115c0:	e067      	b.n	8011692 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80115c2:	7c7a      	ldrb	r2, [r7, #17]
 80115c4:	4939      	ldr	r1, [pc, #228]	; (80116ac <etharp_query+0x268>)
 80115c6:	4613      	mov	r3, r2
 80115c8:	005b      	lsls	r3, r3, #1
 80115ca:	4413      	add	r3, r2
 80115cc:	00db      	lsls	r3, r3, #3
 80115ce:	440b      	add	r3, r1
 80115d0:	3314      	adds	r3, #20
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d15c      	bne.n	8011692 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80115d8:	2300      	movs	r3, #0
 80115da:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	61fb      	str	r3, [r7, #28]
    while (p) {
 80115e0:	e01c      	b.n	801161c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	895a      	ldrh	r2, [r3, #10]
 80115e6:	69fb      	ldr	r3, [r7, #28]
 80115e8:	891b      	ldrh	r3, [r3, #8]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d10a      	bne.n	8011604 <etharp_query+0x1c0>
 80115ee:	69fb      	ldr	r3, [r7, #28]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d006      	beq.n	8011604 <etharp_query+0x1c0>
 80115f6:	4b2a      	ldr	r3, [pc, #168]	; (80116a0 <etharp_query+0x25c>)
 80115f8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80115fc:	492f      	ldr	r1, [pc, #188]	; (80116bc <etharp_query+0x278>)
 80115fe:	482a      	ldr	r0, [pc, #168]	; (80116a8 <etharp_query+0x264>)
 8011600:	f001 ff88 	bl	8013514 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	7b1b      	ldrb	r3, [r3, #12]
 8011608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801160c:	2b00      	cmp	r3, #0
 801160e:	d002      	beq.n	8011616 <etharp_query+0x1d2>
        copy_needed = 1;
 8011610:	2301      	movs	r3, #1
 8011612:	61bb      	str	r3, [r7, #24]
        break;
 8011614:	e005      	b.n	8011622 <etharp_query+0x1de>
      }
      p = p->next;
 8011616:	69fb      	ldr	r3, [r7, #28]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801161c:	69fb      	ldr	r3, [r7, #28]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d1df      	bne.n	80115e2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d007      	beq.n	8011638 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011628:	687a      	ldr	r2, [r7, #4]
 801162a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801162e:	200e      	movs	r0, #14
 8011630:	f7f9 fcf8 	bl	800b024 <pbuf_clone>
 8011634:	61f8      	str	r0, [r7, #28]
 8011636:	e004      	b.n	8011642 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801163c:	69f8      	ldr	r0, [r7, #28]
 801163e:	f7f9 fb2f 	bl	800aca0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d021      	beq.n	801168c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011648:	7c7a      	ldrb	r2, [r7, #17]
 801164a:	4918      	ldr	r1, [pc, #96]	; (80116ac <etharp_query+0x268>)
 801164c:	4613      	mov	r3, r2
 801164e:	005b      	lsls	r3, r3, #1
 8011650:	4413      	add	r3, r2
 8011652:	00db      	lsls	r3, r3, #3
 8011654:	440b      	add	r3, r1
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d00a      	beq.n	8011672 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801165c:	7c7a      	ldrb	r2, [r7, #17]
 801165e:	4913      	ldr	r1, [pc, #76]	; (80116ac <etharp_query+0x268>)
 8011660:	4613      	mov	r3, r2
 8011662:	005b      	lsls	r3, r3, #1
 8011664:	4413      	add	r3, r2
 8011666:	00db      	lsls	r3, r3, #3
 8011668:	440b      	add	r3, r1
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	4618      	mov	r0, r3
 801166e:	f7f9 fa71 	bl	800ab54 <pbuf_free>
      }
      arp_table[i].q = p;
 8011672:	7c7a      	ldrb	r2, [r7, #17]
 8011674:	490d      	ldr	r1, [pc, #52]	; (80116ac <etharp_query+0x268>)
 8011676:	4613      	mov	r3, r2
 8011678:	005b      	lsls	r3, r3, #1
 801167a:	4413      	add	r3, r2
 801167c:	00db      	lsls	r3, r3, #3
 801167e:	440b      	add	r3, r1
 8011680:	69fa      	ldr	r2, [r7, #28]
 8011682:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011684:	2300      	movs	r3, #0
 8011686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801168a:	e002      	b.n	8011692 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801168c:	23ff      	movs	r3, #255	; 0xff
 801168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011692:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011696:	4618      	mov	r0, r3
 8011698:	3728      	adds	r7, #40	; 0x28
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
 801169e:	bf00      	nop
 80116a0:	080167d0 	.word	0x080167d0
 80116a4:	0801697c 	.word	0x0801697c
 80116a8:	08016848 	.word	0x08016848
 80116ac:	24005d2c 	.word	0x24005d2c
 80116b0:	0801698c 	.word	0x0801698c
 80116b4:	08016970 	.word	0x08016970
 80116b8:	24005e1c 	.word	0x24005e1c
 80116bc:	080169b4 	.word	0x080169b4

080116c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b08a      	sub	sp, #40	; 0x28
 80116c4:	af02      	add	r7, sp, #8
 80116c6:	60f8      	str	r0, [r7, #12]
 80116c8:	60b9      	str	r1, [r7, #8]
 80116ca:	607a      	str	r2, [r7, #4]
 80116cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80116ce:	2300      	movs	r3, #0
 80116d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d106      	bne.n	80116e6 <etharp_raw+0x26>
 80116d8:	4b3a      	ldr	r3, [pc, #232]	; (80117c4 <etharp_raw+0x104>)
 80116da:	f240 4257 	movw	r2, #1111	; 0x457
 80116de:	493a      	ldr	r1, [pc, #232]	; (80117c8 <etharp_raw+0x108>)
 80116e0:	483a      	ldr	r0, [pc, #232]	; (80117cc <etharp_raw+0x10c>)
 80116e2:	f001 ff17 	bl	8013514 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80116e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116ea:	211c      	movs	r1, #28
 80116ec:	200e      	movs	r0, #14
 80116ee:	f7f8 ff4d 	bl	800a58c <pbuf_alloc>
 80116f2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80116f4:	69bb      	ldr	r3, [r7, #24]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d102      	bne.n	8011700 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80116fa:	f04f 33ff 	mov.w	r3, #4294967295
 80116fe:	e05d      	b.n	80117bc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011700:	69bb      	ldr	r3, [r7, #24]
 8011702:	895b      	ldrh	r3, [r3, #10]
 8011704:	2b1b      	cmp	r3, #27
 8011706:	d806      	bhi.n	8011716 <etharp_raw+0x56>
 8011708:	4b2e      	ldr	r3, [pc, #184]	; (80117c4 <etharp_raw+0x104>)
 801170a:	f240 4262 	movw	r2, #1122	; 0x462
 801170e:	4930      	ldr	r1, [pc, #192]	; (80117d0 <etharp_raw+0x110>)
 8011710:	482e      	ldr	r0, [pc, #184]	; (80117cc <etharp_raw+0x10c>)
 8011712:	f001 feff 	bl	8013514 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011716:	69bb      	ldr	r3, [r7, #24]
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801171c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801171e:	4618      	mov	r0, r3
 8011720:	f7f7 fd6e 	bl	8009200 <lwip_htons>
 8011724:	4603      	mov	r3, r0
 8011726:	461a      	mov	r2, r3
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011732:	2b06      	cmp	r3, #6
 8011734:	d006      	beq.n	8011744 <etharp_raw+0x84>
 8011736:	4b23      	ldr	r3, [pc, #140]	; (80117c4 <etharp_raw+0x104>)
 8011738:	f240 4269 	movw	r2, #1129	; 0x469
 801173c:	4925      	ldr	r1, [pc, #148]	; (80117d4 <etharp_raw+0x114>)
 801173e:	4823      	ldr	r0, [pc, #140]	; (80117cc <etharp_raw+0x10c>)
 8011740:	f001 fee8 	bl	8013514 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	3308      	adds	r3, #8
 8011748:	2206      	movs	r2, #6
 801174a:	6839      	ldr	r1, [r7, #0]
 801174c:	4618      	mov	r0, r3
 801174e:	f001 fe36 	bl	80133be <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	3312      	adds	r3, #18
 8011756:	2206      	movs	r2, #6
 8011758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801175a:	4618      	mov	r0, r3
 801175c:	f001 fe2f 	bl	80133be <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	330e      	adds	r3, #14
 8011764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011766:	6812      	ldr	r2, [r2, #0]
 8011768:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	3318      	adds	r3, #24
 801176e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011770:	6812      	ldr	r2, [r2, #0]
 8011772:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	2200      	movs	r2, #0
 8011778:	701a      	strb	r2, [r3, #0]
 801177a:	2200      	movs	r2, #0
 801177c:	f042 0201 	orr.w	r2, r2, #1
 8011780:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	2200      	movs	r2, #0
 8011786:	f042 0208 	orr.w	r2, r2, #8
 801178a:	709a      	strb	r2, [r3, #2]
 801178c:	2200      	movs	r2, #0
 801178e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	2206      	movs	r2, #6
 8011794:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	2204      	movs	r2, #4
 801179a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801179c:	f640 0306 	movw	r3, #2054	; 0x806
 80117a0:	9300      	str	r3, [sp, #0]
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	68ba      	ldr	r2, [r7, #8]
 80117a6:	69b9      	ldr	r1, [r7, #24]
 80117a8:	68f8      	ldr	r0, [r7, #12]
 80117aa:	f001 fba1 	bl	8012ef0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80117ae:	69b8      	ldr	r0, [r7, #24]
 80117b0:	f7f9 f9d0 	bl	800ab54 <pbuf_free>
  p = NULL;
 80117b4:	2300      	movs	r3, #0
 80117b6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80117b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3720      	adds	r7, #32
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	080167d0 	.word	0x080167d0
 80117c8:	08016920 	.word	0x08016920
 80117cc:	08016848 	.word	0x08016848
 80117d0:	080169d0 	.word	0x080169d0
 80117d4:	08016a04 	.word	0x08016a04

080117d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b088      	sub	sp, #32
 80117dc:	af04      	add	r7, sp, #16
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80117f4:	2201      	movs	r2, #1
 80117f6:	9203      	str	r2, [sp, #12]
 80117f8:	68ba      	ldr	r2, [r7, #8]
 80117fa:	9202      	str	r2, [sp, #8]
 80117fc:	4a06      	ldr	r2, [pc, #24]	; (8011818 <etharp_request_dst+0x40>)
 80117fe:	9201      	str	r2, [sp, #4]
 8011800:	9300      	str	r3, [sp, #0]
 8011802:	4603      	mov	r3, r0
 8011804:	687a      	ldr	r2, [r7, #4]
 8011806:	68f8      	ldr	r0, [r7, #12]
 8011808:	f7ff ff5a 	bl	80116c0 <etharp_raw>
 801180c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801180e:	4618      	mov	r0, r3
 8011810:	3710      	adds	r7, #16
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	08016ff0 	.word	0x08016ff0

0801181c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b082      	sub	sp, #8
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011826:	4a05      	ldr	r2, [pc, #20]	; (801183c <etharp_request+0x20>)
 8011828:	6839      	ldr	r1, [r7, #0]
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f7ff ffd4 	bl	80117d8 <etharp_request_dst>
 8011830:	4603      	mov	r3, r0
}
 8011832:	4618      	mov	r0, r3
 8011834:	3708      	adds	r7, #8
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	08016fe8 	.word	0x08016fe8

08011840 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b08e      	sub	sp, #56	; 0x38
 8011844:	af04      	add	r7, sp, #16
 8011846:	6078      	str	r0, [r7, #4]
 8011848:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801184a:	4b87      	ldr	r3, [pc, #540]	; (8011a68 <icmp_input+0x228>)
 801184c:	689b      	ldr	r3, [r3, #8]
 801184e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	f003 030f 	and.w	r3, r3, #15
 8011858:	b2db      	uxtb	r3, r3
 801185a:	009b      	lsls	r3, r3, #2
 801185c:	b2db      	uxtb	r3, r3
 801185e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011862:	2b13      	cmp	r3, #19
 8011864:	f240 80e8 	bls.w	8011a38 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	895b      	ldrh	r3, [r3, #10]
 801186c:	2b03      	cmp	r3, #3
 801186e:	f240 80e5 	bls.w	8011a3c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	781b      	ldrb	r3, [r3, #0]
 8011878:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801187c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011880:	2b00      	cmp	r3, #0
 8011882:	f000 80d2 	beq.w	8011a2a <icmp_input+0x1ea>
 8011886:	2b08      	cmp	r3, #8
 8011888:	f040 80d2 	bne.w	8011a30 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801188c:	4b77      	ldr	r3, [pc, #476]	; (8011a6c <icmp_input+0x22c>)
 801188e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011890:	4b75      	ldr	r3, [pc, #468]	; (8011a68 <icmp_input+0x228>)
 8011892:	695b      	ldr	r3, [r3, #20]
 8011894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011898:	2be0      	cmp	r3, #224	; 0xe0
 801189a:	f000 80d6 	beq.w	8011a4a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801189e:	4b72      	ldr	r3, [pc, #456]	; (8011a68 <icmp_input+0x228>)
 80118a0:	695b      	ldr	r3, [r3, #20]
 80118a2:	4a71      	ldr	r2, [pc, #452]	; (8011a68 <icmp_input+0x228>)
 80118a4:	6812      	ldr	r2, [r2, #0]
 80118a6:	4611      	mov	r1, r2
 80118a8:	4618      	mov	r0, r3
 80118aa:	f000 fc13 	bl	80120d4 <ip4_addr_isbroadcast_u32>
 80118ae:	4603      	mov	r3, r0
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	f040 80cc 	bne.w	8011a4e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	891b      	ldrh	r3, [r3, #8]
 80118ba:	2b07      	cmp	r3, #7
 80118bc:	f240 80c0 	bls.w	8011a40 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f7f7 fd3a 	bl	800933a <inet_chksum_pbuf>
 80118c6:	4603      	mov	r3, r0
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d003      	beq.n	80118d4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f7f9 f941 	bl	800ab54 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80118d2:	e0c5      	b.n	8011a60 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80118d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80118d6:	330e      	adds	r3, #14
 80118d8:	4619      	mov	r1, r3
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f7f9 f8a4 	bl	800aa28 <pbuf_add_header>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d04b      	beq.n	801197e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	891a      	ldrh	r2, [r3, #8]
 80118ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80118ec:	4413      	add	r3, r2
 80118ee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	891b      	ldrh	r3, [r3, #8]
 80118f4:	8b7a      	ldrh	r2, [r7, #26]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	f0c0 80ab 	bcc.w	8011a52 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80118fc:	8b7b      	ldrh	r3, [r7, #26]
 80118fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011902:	4619      	mov	r1, r3
 8011904:	200e      	movs	r0, #14
 8011906:	f7f8 fe41 	bl	800a58c <pbuf_alloc>
 801190a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	2b00      	cmp	r3, #0
 8011910:	f000 80a1 	beq.w	8011a56 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011914:	697b      	ldr	r3, [r7, #20]
 8011916:	895b      	ldrh	r3, [r3, #10]
 8011918:	461a      	mov	r2, r3
 801191a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801191c:	3308      	adds	r3, #8
 801191e:	429a      	cmp	r2, r3
 8011920:	d203      	bcs.n	801192a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011922:	6978      	ldr	r0, [r7, #20]
 8011924:	f7f9 f916 	bl	800ab54 <pbuf_free>
          goto icmperr;
 8011928:	e096      	b.n	8011a58 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011932:	4618      	mov	r0, r3
 8011934:	f001 fd43 	bl	80133be <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801193a:	4619      	mov	r1, r3
 801193c:	6978      	ldr	r0, [r7, #20]
 801193e:	f7f9 f883 	bl	800aa48 <pbuf_remove_header>
 8011942:	4603      	mov	r3, r0
 8011944:	2b00      	cmp	r3, #0
 8011946:	d009      	beq.n	801195c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011948:	4b49      	ldr	r3, [pc, #292]	; (8011a70 <icmp_input+0x230>)
 801194a:	22b6      	movs	r2, #182	; 0xb6
 801194c:	4949      	ldr	r1, [pc, #292]	; (8011a74 <icmp_input+0x234>)
 801194e:	484a      	ldr	r0, [pc, #296]	; (8011a78 <icmp_input+0x238>)
 8011950:	f001 fde0 	bl	8013514 <iprintf>
          pbuf_free(r);
 8011954:	6978      	ldr	r0, [r7, #20]
 8011956:	f7f9 f8fd 	bl	800ab54 <pbuf_free>
          goto icmperr;
 801195a:	e07d      	b.n	8011a58 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801195c:	6879      	ldr	r1, [r7, #4]
 801195e:	6978      	ldr	r0, [r7, #20]
 8011960:	f7f9 fa1c 	bl	800ad9c <pbuf_copy>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d003      	beq.n	8011972 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801196a:	6978      	ldr	r0, [r7, #20]
 801196c:	f7f9 f8f2 	bl	800ab54 <pbuf_free>
          goto icmperr;
 8011970:	e072      	b.n	8011a58 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f7f9 f8ee 	bl	800ab54 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	607b      	str	r3, [r7, #4]
 801197c:	e00f      	b.n	801199e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801197e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011980:	330e      	adds	r3, #14
 8011982:	4619      	mov	r1, r3
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f7f9 f85f 	bl	800aa48 <pbuf_remove_header>
 801198a:	4603      	mov	r3, r0
 801198c:	2b00      	cmp	r3, #0
 801198e:	d006      	beq.n	801199e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011990:	4b37      	ldr	r3, [pc, #220]	; (8011a70 <icmp_input+0x230>)
 8011992:	22c7      	movs	r2, #199	; 0xc7
 8011994:	4939      	ldr	r1, [pc, #228]	; (8011a7c <icmp_input+0x23c>)
 8011996:	4838      	ldr	r0, [pc, #224]	; (8011a78 <icmp_input+0x238>)
 8011998:	f001 fdbc 	bl	8013514 <iprintf>
          goto icmperr;
 801199c:	e05c      	b.n	8011a58 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80119a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119a6:	4619      	mov	r1, r3
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f7f9 f83d 	bl	800aa28 <pbuf_add_header>
 80119ae:	4603      	mov	r3, r0
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d13c      	bne.n	8011a2e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80119ba:	69fb      	ldr	r3, [r7, #28]
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80119c2:	4b29      	ldr	r3, [pc, #164]	; (8011a68 <icmp_input+0x228>)
 80119c4:	691a      	ldr	r2, [r3, #16]
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	2200      	movs	r2, #0
 80119ce:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	885b      	ldrh	r3, [r3, #2]
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80119da:	4293      	cmp	r3, r2
 80119dc:	d907      	bls.n	80119ee <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	885b      	ldrh	r3, [r3, #2]
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	3309      	adds	r3, #9
 80119e6:	b29a      	uxth	r2, r3
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	805a      	strh	r2, [r3, #2]
 80119ec:	e006      	b.n	80119fc <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	885b      	ldrh	r3, [r3, #2]
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	3308      	adds	r3, #8
 80119f6:	b29a      	uxth	r2, r3
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	22ff      	movs	r2, #255	; 0xff
 8011a00:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	2200      	movs	r2, #0
 8011a06:	729a      	strb	r2, [r3, #10]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	9302      	str	r3, [sp, #8]
 8011a10:	2301      	movs	r3, #1
 8011a12:	9301      	str	r3, [sp, #4]
 8011a14:	2300      	movs	r3, #0
 8011a16:	9300      	str	r3, [sp, #0]
 8011a18:	23ff      	movs	r3, #255	; 0xff
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	69f9      	ldr	r1, [r7, #28]
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f000 fa80 	bl	8011f24 <ip4_output_if>
 8011a24:	4603      	mov	r3, r0
 8011a26:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011a28:	e001      	b.n	8011a2e <icmp_input+0x1ee>
      break;
 8011a2a:	bf00      	nop
 8011a2c:	e000      	b.n	8011a30 <icmp_input+0x1f0>
      break;
 8011a2e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f7f9 f88f 	bl	800ab54 <pbuf_free>
  return;
 8011a36:	e013      	b.n	8011a60 <icmp_input+0x220>
    goto lenerr;
 8011a38:	bf00      	nop
 8011a3a:	e002      	b.n	8011a42 <icmp_input+0x202>
    goto lenerr;
 8011a3c:	bf00      	nop
 8011a3e:	e000      	b.n	8011a42 <icmp_input+0x202>
        goto lenerr;
 8011a40:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7f9 f886 	bl	800ab54 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011a48:	e00a      	b.n	8011a60 <icmp_input+0x220>
        goto icmperr;
 8011a4a:	bf00      	nop
 8011a4c:	e004      	b.n	8011a58 <icmp_input+0x218>
        goto icmperr;
 8011a4e:	bf00      	nop
 8011a50:	e002      	b.n	8011a58 <icmp_input+0x218>
          goto icmperr;
 8011a52:	bf00      	nop
 8011a54:	e000      	b.n	8011a58 <icmp_input+0x218>
          goto icmperr;
 8011a56:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f7f9 f87b 	bl	800ab54 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011a5e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011a60:	3728      	adds	r7, #40	; 0x28
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	240078ec 	.word	0x240078ec
 8011a6c:	24007900 	.word	0x24007900
 8011a70:	08016a48 	.word	0x08016a48
 8011a74:	08016a80 	.word	0x08016a80
 8011a78:	08016ab8 	.word	0x08016ab8
 8011a7c:	08016ae0 	.word	0x08016ae0

08011a80 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	460b      	mov	r3, r1
 8011a8a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011a8c:	78fb      	ldrb	r3, [r7, #3]
 8011a8e:	461a      	mov	r2, r3
 8011a90:	2103      	movs	r1, #3
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f000 f814 	bl	8011ac0 <icmp_send_response>
}
 8011a98:	bf00      	nop
 8011a9a:	3708      	adds	r7, #8
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b082      	sub	sp, #8
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011aac:	78fb      	ldrb	r3, [r7, #3]
 8011aae:	461a      	mov	r2, r3
 8011ab0:	210b      	movs	r1, #11
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f000 f804 	bl	8011ac0 <icmp_send_response>
}
 8011ab8:	bf00      	nop
 8011aba:	3708      	adds	r7, #8
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b08c      	sub	sp, #48	; 0x30
 8011ac4:	af04      	add	r7, sp, #16
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	460b      	mov	r3, r1
 8011aca:	70fb      	strb	r3, [r7, #3]
 8011acc:	4613      	mov	r3, r2
 8011ace:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011ad0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ad4:	2124      	movs	r1, #36	; 0x24
 8011ad6:	2022      	movs	r0, #34	; 0x22
 8011ad8:	f7f8 fd58 	bl	800a58c <pbuf_alloc>
 8011adc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011ade:	69fb      	ldr	r3, [r7, #28]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d056      	beq.n	8011b92 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	895b      	ldrh	r3, [r3, #10]
 8011ae8:	2b23      	cmp	r3, #35	; 0x23
 8011aea:	d806      	bhi.n	8011afa <icmp_send_response+0x3a>
 8011aec:	4b2b      	ldr	r3, [pc, #172]	; (8011b9c <icmp_send_response+0xdc>)
 8011aee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011af2:	492b      	ldr	r1, [pc, #172]	; (8011ba0 <icmp_send_response+0xe0>)
 8011af4:	482b      	ldr	r0, [pc, #172]	; (8011ba4 <icmp_send_response+0xe4>)
 8011af6:	f001 fd0d 	bl	8013514 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	78fa      	ldrb	r2, [r7, #3]
 8011b0a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	78ba      	ldrb	r2, [r7, #2]
 8011b10:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	2200      	movs	r2, #0
 8011b16:	711a      	strb	r2, [r3, #4]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	719a      	strb	r2, [r3, #6]
 8011b22:	2200      	movs	r2, #0
 8011b24:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	f103 0008 	add.w	r0, r3, #8
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	221c      	movs	r2, #28
 8011b34:	4619      	mov	r1, r3
 8011b36:	f001 fc42 	bl	80133be <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011b3a:	69bb      	ldr	r3, [r7, #24]
 8011b3c:	68db      	ldr	r3, [r3, #12]
 8011b3e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011b40:	f107 030c 	add.w	r3, r7, #12
 8011b44:	4618      	mov	r0, r3
 8011b46:	f000 f82f 	bl	8011ba8 <ip4_route>
 8011b4a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011b4c:	693b      	ldr	r3, [r7, #16]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d01b      	beq.n	8011b8a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	2200      	movs	r2, #0
 8011b56:	709a      	strb	r2, [r3, #2]
 8011b58:	2200      	movs	r2, #0
 8011b5a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	895b      	ldrh	r3, [r3, #10]
 8011b60:	4619      	mov	r1, r3
 8011b62:	6978      	ldr	r0, [r7, #20]
 8011b64:	f7f7 fbd7 	bl	8009316 <inet_chksum>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	461a      	mov	r2, r3
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011b70:	f107 020c 	add.w	r2, r7, #12
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	9302      	str	r3, [sp, #8]
 8011b78:	2301      	movs	r3, #1
 8011b7a:	9301      	str	r3, [sp, #4]
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	9300      	str	r3, [sp, #0]
 8011b80:	23ff      	movs	r3, #255	; 0xff
 8011b82:	2100      	movs	r1, #0
 8011b84:	69f8      	ldr	r0, [r7, #28]
 8011b86:	f000 f9cd 	bl	8011f24 <ip4_output_if>
  }
  pbuf_free(q);
 8011b8a:	69f8      	ldr	r0, [r7, #28]
 8011b8c:	f7f8 ffe2 	bl	800ab54 <pbuf_free>
 8011b90:	e000      	b.n	8011b94 <icmp_send_response+0xd4>
    return;
 8011b92:	bf00      	nop
}
 8011b94:	3720      	adds	r7, #32
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	08016a48 	.word	0x08016a48
 8011ba0:	08016b14 	.word	0x08016b14
 8011ba4:	08016ab8 	.word	0x08016ab8

08011ba8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b085      	sub	sp, #20
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011bb0:	4b33      	ldr	r3, [pc, #204]	; (8011c80 <ip4_route+0xd8>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	60fb      	str	r3, [r7, #12]
 8011bb6:	e036      	b.n	8011c26 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bbe:	f003 0301 	and.w	r3, r3, #1
 8011bc2:	b2db      	uxtb	r3, r3
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d02b      	beq.n	8011c20 <ip4_route+0x78>
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bce:	089b      	lsrs	r3, r3, #2
 8011bd0:	f003 0301 	and.w	r3, r3, #1
 8011bd4:	b2db      	uxtb	r3, r3
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d022      	beq.n	8011c20 <ip4_route+0x78>
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	3304      	adds	r3, #4
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d01d      	beq.n	8011c20 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	3304      	adds	r3, #4
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	405a      	eors	r2, r3
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	3308      	adds	r3, #8
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	4013      	ands	r3, r2
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d101      	bne.n	8011c00 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	e038      	b.n	8011c72 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c06:	f003 0302 	and.w	r3, r3, #2
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d108      	bne.n	8011c20 <ip4_route+0x78>
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681a      	ldr	r2, [r3, #0]
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	330c      	adds	r3, #12
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d101      	bne.n	8011c20 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	e028      	b.n	8011c72 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	60fb      	str	r3, [r7, #12]
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d1c5      	bne.n	8011bb8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011c2c:	4b15      	ldr	r3, [pc, #84]	; (8011c84 <ip4_route+0xdc>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d01a      	beq.n	8011c6a <ip4_route+0xc2>
 8011c34:	4b13      	ldr	r3, [pc, #76]	; (8011c84 <ip4_route+0xdc>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c3c:	f003 0301 	and.w	r3, r3, #1
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d012      	beq.n	8011c6a <ip4_route+0xc2>
 8011c44:	4b0f      	ldr	r3, [pc, #60]	; (8011c84 <ip4_route+0xdc>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c4c:	f003 0304 	and.w	r3, r3, #4
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d00a      	beq.n	8011c6a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011c54:	4b0b      	ldr	r3, [pc, #44]	; (8011c84 <ip4_route+0xdc>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	3304      	adds	r3, #4
 8011c5a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d004      	beq.n	8011c6a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	b2db      	uxtb	r3, r3
 8011c66:	2b7f      	cmp	r3, #127	; 0x7f
 8011c68:	d101      	bne.n	8011c6e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	e001      	b.n	8011c72 <ip4_route+0xca>
  }

  return netif_default;
 8011c6e:	4b05      	ldr	r3, [pc, #20]	; (8011c84 <ip4_route+0xdc>)
 8011c70:	681b      	ldr	r3, [r3, #0]
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3714      	adds	r7, #20
 8011c76:	46bd      	mov	sp, r7
 8011c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7c:	4770      	bx	lr
 8011c7e:	bf00      	nop
 8011c80:	2400a99c 	.word	0x2400a99c
 8011c84:	2400a9a0 	.word	0x2400a9a0

08011c88 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c96:	f003 0301 	and.w	r3, r3, #1
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d016      	beq.n	8011cce <ip4_input_accept+0x46>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	3304      	adds	r3, #4
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d011      	beq.n	8011cce <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011caa:	4b0b      	ldr	r3, [pc, #44]	; (8011cd8 <ip4_input_accept+0x50>)
 8011cac:	695a      	ldr	r2, [r3, #20]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	3304      	adds	r3, #4
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d008      	beq.n	8011cca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011cb8:	4b07      	ldr	r3, [pc, #28]	; (8011cd8 <ip4_input_accept+0x50>)
 8011cba:	695b      	ldr	r3, [r3, #20]
 8011cbc:	6879      	ldr	r1, [r7, #4]
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f000 fa08 	bl	80120d4 <ip4_addr_isbroadcast_u32>
 8011cc4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d001      	beq.n	8011cce <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011cca:	2301      	movs	r3, #1
 8011ccc:	e000      	b.n	8011cd0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011cce:	2300      	movs	r3, #0
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3708      	adds	r7, #8
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	240078ec 	.word	0x240078ec

08011cdc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b086      	sub	sp, #24
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
 8011ce4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	685b      	ldr	r3, [r3, #4]
 8011cea:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	781b      	ldrb	r3, [r3, #0]
 8011cf0:	091b      	lsrs	r3, r3, #4
 8011cf2:	b2db      	uxtb	r3, r3
 8011cf4:	2b04      	cmp	r3, #4
 8011cf6:	d004      	beq.n	8011d02 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f7f8 ff2b 	bl	800ab54 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	e107      	b.n	8011f12 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	f003 030f 	and.w	r3, r3, #15
 8011d0a:	b2db      	uxtb	r3, r3
 8011d0c:	009b      	lsls	r3, r3, #2
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	885b      	ldrh	r3, [r3, #2]
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7f7 fa71 	bl	8009200 <lwip_htons>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	891b      	ldrh	r3, [r3, #8]
 8011d26:	89ba      	ldrh	r2, [r7, #12]
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d204      	bcs.n	8011d36 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011d2c:	89bb      	ldrh	r3, [r7, #12]
 8011d2e:	4619      	mov	r1, r3
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f7f8 fd89 	bl	800a848 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	895b      	ldrh	r3, [r3, #10]
 8011d3a:	89fa      	ldrh	r2, [r7, #14]
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d807      	bhi.n	8011d50 <ip4_input+0x74>
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	891b      	ldrh	r3, [r3, #8]
 8011d44:	89ba      	ldrh	r2, [r7, #12]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d802      	bhi.n	8011d50 <ip4_input+0x74>
 8011d4a:	89fb      	ldrh	r3, [r7, #14]
 8011d4c:	2b13      	cmp	r3, #19
 8011d4e:	d804      	bhi.n	8011d5a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f7f8 feff 	bl	800ab54 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011d56:	2300      	movs	r3, #0
 8011d58:	e0db      	b.n	8011f12 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	691b      	ldr	r3, [r3, #16]
 8011d5e:	4a6f      	ldr	r2, [pc, #444]	; (8011f1c <ip4_input+0x240>)
 8011d60:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	68db      	ldr	r3, [r3, #12]
 8011d66:	4a6d      	ldr	r2, [pc, #436]	; (8011f1c <ip4_input+0x240>)
 8011d68:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011d6a:	4b6c      	ldr	r3, [pc, #432]	; (8011f1c <ip4_input+0x240>)
 8011d6c:	695b      	ldr	r3, [r3, #20]
 8011d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d72:	2be0      	cmp	r3, #224	; 0xe0
 8011d74:	d112      	bne.n	8011d9c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d7c:	f003 0301 	and.w	r3, r3, #1
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d007      	beq.n	8011d96 <ip4_input+0xba>
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	3304      	adds	r3, #4
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d002      	beq.n	8011d96 <ip4_input+0xba>
      netif = inp;
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	613b      	str	r3, [r7, #16]
 8011d94:	e02a      	b.n	8011dec <ip4_input+0x110>
    } else {
      netif = NULL;
 8011d96:	2300      	movs	r3, #0
 8011d98:	613b      	str	r3, [r7, #16]
 8011d9a:	e027      	b.n	8011dec <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011d9c:	6838      	ldr	r0, [r7, #0]
 8011d9e:	f7ff ff73 	bl	8011c88 <ip4_input_accept>
 8011da2:	4603      	mov	r3, r0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d002      	beq.n	8011dae <ip4_input+0xd2>
      netif = inp;
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	613b      	str	r3, [r7, #16]
 8011dac:	e01e      	b.n	8011dec <ip4_input+0x110>
    } else {
      netif = NULL;
 8011dae:	2300      	movs	r3, #0
 8011db0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011db2:	4b5a      	ldr	r3, [pc, #360]	; (8011f1c <ip4_input+0x240>)
 8011db4:	695b      	ldr	r3, [r3, #20]
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	2b7f      	cmp	r3, #127	; 0x7f
 8011dba:	d017      	beq.n	8011dec <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011dbc:	4b58      	ldr	r3, [pc, #352]	; (8011f20 <ip4_input+0x244>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	613b      	str	r3, [r7, #16]
 8011dc2:	e00e      	b.n	8011de2 <ip4_input+0x106>
          if (netif == inp) {
 8011dc4:	693a      	ldr	r2, [r7, #16]
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d006      	beq.n	8011dda <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011dcc:	6938      	ldr	r0, [r7, #16]
 8011dce:	f7ff ff5b 	bl	8011c88 <ip4_input_accept>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d108      	bne.n	8011dea <ip4_input+0x10e>
 8011dd8:	e000      	b.n	8011ddc <ip4_input+0x100>
            continue;
 8011dda:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011ddc:	693b      	ldr	r3, [r7, #16]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	613b      	str	r3, [r7, #16]
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d1ed      	bne.n	8011dc4 <ip4_input+0xe8>
 8011de8:	e000      	b.n	8011dec <ip4_input+0x110>
            break;
 8011dea:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011dec:	4b4b      	ldr	r3, [pc, #300]	; (8011f1c <ip4_input+0x240>)
 8011dee:	691b      	ldr	r3, [r3, #16]
 8011df0:	6839      	ldr	r1, [r7, #0]
 8011df2:	4618      	mov	r0, r3
 8011df4:	f000 f96e 	bl	80120d4 <ip4_addr_isbroadcast_u32>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d105      	bne.n	8011e0a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011dfe:	4b47      	ldr	r3, [pc, #284]	; (8011f1c <ip4_input+0x240>)
 8011e00:	691b      	ldr	r3, [r3, #16]
 8011e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011e06:	2be0      	cmp	r3, #224	; 0xe0
 8011e08:	d104      	bne.n	8011e14 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f7f8 fea2 	bl	800ab54 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011e10:	2300      	movs	r3, #0
 8011e12:	e07e      	b.n	8011f12 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d104      	bne.n	8011e24 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f7f8 fe9a 	bl	800ab54 <pbuf_free>
    return ERR_OK;
 8011e20:	2300      	movs	r3, #0
 8011e22:	e076      	b.n	8011f12 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	88db      	ldrh	r3, [r3, #6]
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011e30:	4013      	ands	r3, r2
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d00b      	beq.n	8011e4e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f000 fc92 	bl	8012760 <ip4_reass>
 8011e3c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d101      	bne.n	8011e48 <ip4_input+0x16c>
      return ERR_OK;
 8011e44:	2300      	movs	r3, #0
 8011e46:	e064      	b.n	8011f12 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011e4e:	4a33      	ldr	r2, [pc, #204]	; (8011f1c <ip4_input+0x240>)
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011e54:	4a31      	ldr	r2, [pc, #196]	; (8011f1c <ip4_input+0x240>)
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011e5a:	4a30      	ldr	r2, [pc, #192]	; (8011f1c <ip4_input+0x240>)
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	f003 030f 	and.w	r3, r3, #15
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	009b      	lsls	r3, r3, #2
 8011e6c:	b2db      	uxtb	r3, r3
 8011e6e:	b29a      	uxth	r2, r3
 8011e70:	4b2a      	ldr	r3, [pc, #168]	; (8011f1c <ip4_input+0x240>)
 8011e72:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011e74:	89fb      	ldrh	r3, [r7, #14]
 8011e76:	4619      	mov	r1, r3
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f7f8 fde5 	bl	800aa48 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	7a5b      	ldrb	r3, [r3, #9]
 8011e82:	2b11      	cmp	r3, #17
 8011e84:	d006      	beq.n	8011e94 <ip4_input+0x1b8>
 8011e86:	2b11      	cmp	r3, #17
 8011e88:	dc13      	bgt.n	8011eb2 <ip4_input+0x1d6>
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	d00c      	beq.n	8011ea8 <ip4_input+0x1cc>
 8011e8e:	2b06      	cmp	r3, #6
 8011e90:	d005      	beq.n	8011e9e <ip4_input+0x1c2>
 8011e92:	e00e      	b.n	8011eb2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011e94:	6839      	ldr	r1, [r7, #0]
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f7fe fc42 	bl	8010720 <udp_input>
        break;
 8011e9c:	e026      	b.n	8011eec <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011e9e:	6839      	ldr	r1, [r7, #0]
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f7fa fc8b 	bl	800c7bc <tcp_input>
        break;
 8011ea6:	e021      	b.n	8011eec <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011ea8:	6839      	ldr	r1, [r7, #0]
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f7ff fcc8 	bl	8011840 <icmp_input>
        break;
 8011eb0:	e01c      	b.n	8011eec <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011eb2:	4b1a      	ldr	r3, [pc, #104]	; (8011f1c <ip4_input+0x240>)
 8011eb4:	695b      	ldr	r3, [r3, #20]
 8011eb6:	6939      	ldr	r1, [r7, #16]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f000 f90b 	bl	80120d4 <ip4_addr_isbroadcast_u32>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d10f      	bne.n	8011ee4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011ec4:	4b15      	ldr	r3, [pc, #84]	; (8011f1c <ip4_input+0x240>)
 8011ec6:	695b      	ldr	r3, [r3, #20]
 8011ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011ecc:	2be0      	cmp	r3, #224	; 0xe0
 8011ece:	d009      	beq.n	8011ee4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011ed0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f7f8 fe29 	bl	800ab2e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011edc:	2102      	movs	r1, #2
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f7ff fdce 	bl	8011a80 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f7f8 fe35 	bl	800ab54 <pbuf_free>
        break;
 8011eea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011eec:	4b0b      	ldr	r3, [pc, #44]	; (8011f1c <ip4_input+0x240>)
 8011eee:	2200      	movs	r2, #0
 8011ef0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011ef2:	4b0a      	ldr	r3, [pc, #40]	; (8011f1c <ip4_input+0x240>)
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011ef8:	4b08      	ldr	r3, [pc, #32]	; (8011f1c <ip4_input+0x240>)
 8011efa:	2200      	movs	r2, #0
 8011efc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011efe:	4b07      	ldr	r3, [pc, #28]	; (8011f1c <ip4_input+0x240>)
 8011f00:	2200      	movs	r2, #0
 8011f02:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011f04:	4b05      	ldr	r3, [pc, #20]	; (8011f1c <ip4_input+0x240>)
 8011f06:	2200      	movs	r2, #0
 8011f08:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011f0a:	4b04      	ldr	r3, [pc, #16]	; (8011f1c <ip4_input+0x240>)
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011f10:	2300      	movs	r3, #0
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3718      	adds	r7, #24
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	240078ec 	.word	0x240078ec
 8011f20:	2400a99c 	.word	0x2400a99c

08011f24 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b08a      	sub	sp, #40	; 0x28
 8011f28:	af04      	add	r7, sp, #16
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
 8011f30:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d009      	beq.n	8011f50 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d003      	beq.n	8011f4a <ip4_output_if+0x26>
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d102      	bne.n	8011f50 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f4c:	3304      	adds	r3, #4
 8011f4e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011f50:	78fa      	ldrb	r2, [r7, #3]
 8011f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f54:	9302      	str	r3, [sp, #8]
 8011f56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011f5a:	9301      	str	r3, [sp, #4]
 8011f5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011f60:	9300      	str	r3, [sp, #0]
 8011f62:	4613      	mov	r3, r2
 8011f64:	687a      	ldr	r2, [r7, #4]
 8011f66:	6979      	ldr	r1, [r7, #20]
 8011f68:	68f8      	ldr	r0, [r7, #12]
 8011f6a:	f000 f805 	bl	8011f78 <ip4_output_if_src>
 8011f6e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3718      	adds	r7, #24
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b088      	sub	sp, #32
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	60f8      	str	r0, [r7, #12]
 8011f80:	60b9      	str	r1, [r7, #8]
 8011f82:	607a      	str	r2, [r7, #4]
 8011f84:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	7b9b      	ldrb	r3, [r3, #14]
 8011f8a:	2b01      	cmp	r3, #1
 8011f8c:	d006      	beq.n	8011f9c <ip4_output_if_src+0x24>
 8011f8e:	4b4b      	ldr	r3, [pc, #300]	; (80120bc <ip4_output_if_src+0x144>)
 8011f90:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011f94:	494a      	ldr	r1, [pc, #296]	; (80120c0 <ip4_output_if_src+0x148>)
 8011f96:	484b      	ldr	r0, [pc, #300]	; (80120c4 <ip4_output_if_src+0x14c>)
 8011f98:	f001 fabc 	bl	8013514 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d060      	beq.n	8012064 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011fa2:	2314      	movs	r3, #20
 8011fa4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011fa6:	2114      	movs	r1, #20
 8011fa8:	68f8      	ldr	r0, [r7, #12]
 8011faa:	f7f8 fd3d 	bl	800aa28 <pbuf_add_header>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d002      	beq.n	8011fba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011fb4:	f06f 0301 	mvn.w	r3, #1
 8011fb8:	e07c      	b.n	80120b4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	895b      	ldrh	r3, [r3, #10]
 8011fc4:	2b13      	cmp	r3, #19
 8011fc6:	d806      	bhi.n	8011fd6 <ip4_output_if_src+0x5e>
 8011fc8:	4b3c      	ldr	r3, [pc, #240]	; (80120bc <ip4_output_if_src+0x144>)
 8011fca:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011fce:	493e      	ldr	r1, [pc, #248]	; (80120c8 <ip4_output_if_src+0x150>)
 8011fd0:	483c      	ldr	r0, [pc, #240]	; (80120c4 <ip4_output_if_src+0x14c>)
 8011fd2:	f001 fa9f 	bl	8013514 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011fd6:	69fb      	ldr	r3, [r7, #28]
 8011fd8:	78fa      	ldrb	r2, [r7, #3]
 8011fda:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011fdc:	69fb      	ldr	r3, [r7, #28]
 8011fde:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011fe2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681a      	ldr	r2, [r3, #0]
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011fec:	8b7b      	ldrh	r3, [r7, #26]
 8011fee:	089b      	lsrs	r3, r3, #2
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	69fb      	ldr	r3, [r7, #28]
 8011ffc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012004:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	891b      	ldrh	r3, [r3, #8]
 801200a:	4618      	mov	r0, r3
 801200c:	f7f7 f8f8 	bl	8009200 <lwip_htons>
 8012010:	4603      	mov	r3, r0
 8012012:	461a      	mov	r2, r3
 8012014:	69fb      	ldr	r3, [r7, #28]
 8012016:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012018:	69fb      	ldr	r3, [r7, #28]
 801201a:	2200      	movs	r2, #0
 801201c:	719a      	strb	r2, [r3, #6]
 801201e:	2200      	movs	r2, #0
 8012020:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012022:	4b2a      	ldr	r3, [pc, #168]	; (80120cc <ip4_output_if_src+0x154>)
 8012024:	881b      	ldrh	r3, [r3, #0]
 8012026:	4618      	mov	r0, r3
 8012028:	f7f7 f8ea 	bl	8009200 <lwip_htons>
 801202c:	4603      	mov	r3, r0
 801202e:	461a      	mov	r2, r3
 8012030:	69fb      	ldr	r3, [r7, #28]
 8012032:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012034:	4b25      	ldr	r3, [pc, #148]	; (80120cc <ip4_output_if_src+0x154>)
 8012036:	881b      	ldrh	r3, [r3, #0]
 8012038:	3301      	adds	r3, #1
 801203a:	b29a      	uxth	r2, r3
 801203c:	4b23      	ldr	r3, [pc, #140]	; (80120cc <ip4_output_if_src+0x154>)
 801203e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d104      	bne.n	8012050 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012046:	4b22      	ldr	r3, [pc, #136]	; (80120d0 <ip4_output_if_src+0x158>)
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	69fb      	ldr	r3, [r7, #28]
 801204c:	60da      	str	r2, [r3, #12]
 801204e:	e003      	b.n	8012058 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	681a      	ldr	r2, [r3, #0]
 8012054:	69fb      	ldr	r3, [r7, #28]
 8012056:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012058:	69fb      	ldr	r3, [r7, #28]
 801205a:	2200      	movs	r2, #0
 801205c:	729a      	strb	r2, [r3, #10]
 801205e:	2200      	movs	r2, #0
 8012060:	72da      	strb	r2, [r3, #11]
 8012062:	e00f      	b.n	8012084 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	895b      	ldrh	r3, [r3, #10]
 8012068:	2b13      	cmp	r3, #19
 801206a:	d802      	bhi.n	8012072 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801206c:	f06f 0301 	mvn.w	r3, #1
 8012070:	e020      	b.n	80120b4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	685b      	ldr	r3, [r3, #4]
 8012076:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	691b      	ldr	r3, [r3, #16]
 801207c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801207e:	f107 0314 	add.w	r3, r7, #20
 8012082:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012086:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012088:	2b00      	cmp	r3, #0
 801208a:	d00c      	beq.n	80120a6 <ip4_output_if_src+0x12e>
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	891a      	ldrh	r2, [r3, #8]
 8012090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012092:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012094:	429a      	cmp	r2, r3
 8012096:	d906      	bls.n	80120a6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012098:	687a      	ldr	r2, [r7, #4]
 801209a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801209c:	68f8      	ldr	r0, [r7, #12]
 801209e:	f000 fd53 	bl	8012b48 <ip4_frag>
 80120a2:	4603      	mov	r3, r0
 80120a4:	e006      	b.n	80120b4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80120a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a8:	695b      	ldr	r3, [r3, #20]
 80120aa:	687a      	ldr	r2, [r7, #4]
 80120ac:	68f9      	ldr	r1, [r7, #12]
 80120ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120b0:	4798      	blx	r3
 80120b2:	4603      	mov	r3, r0
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3720      	adds	r7, #32
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}
 80120bc:	08016b40 	.word	0x08016b40
 80120c0:	08016b74 	.word	0x08016b74
 80120c4:	08016b80 	.word	0x08016b80
 80120c8:	08016ba8 	.word	0x08016ba8
 80120cc:	24005e1e 	.word	0x24005e1e
 80120d0:	08016fe4 	.word	0x08016fe4

080120d4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80120d4:	b480      	push	{r7}
 80120d6:	b085      	sub	sp, #20
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120e8:	d002      	beq.n	80120f0 <ip4_addr_isbroadcast_u32+0x1c>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d101      	bne.n	80120f4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80120f0:	2301      	movs	r3, #1
 80120f2:	e02a      	b.n	801214a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80120fa:	f003 0302 	and.w	r3, r3, #2
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d101      	bne.n	8012106 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012102:	2300      	movs	r3, #0
 8012104:	e021      	b.n	801214a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	3304      	adds	r3, #4
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	429a      	cmp	r2, r3
 8012110:	d101      	bne.n	8012116 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012112:	2300      	movs	r3, #0
 8012114:	e019      	b.n	801214a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012116:	68fa      	ldr	r2, [r7, #12]
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	3304      	adds	r3, #4
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	405a      	eors	r2, r3
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	3308      	adds	r3, #8
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	4013      	ands	r3, r2
 8012128:	2b00      	cmp	r3, #0
 801212a:	d10d      	bne.n	8012148 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	3308      	adds	r3, #8
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	43da      	mvns	r2, r3
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	3308      	adds	r3, #8
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012140:	429a      	cmp	r2, r3
 8012142:	d101      	bne.n	8012148 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012144:	2301      	movs	r3, #1
 8012146:	e000      	b.n	801214a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012148:	2300      	movs	r3, #0
  }
}
 801214a:	4618      	mov	r0, r3
 801214c:	3714      	adds	r7, #20
 801214e:	46bd      	mov	sp, r7
 8012150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012154:	4770      	bx	lr
	...

08012158 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801215e:	2300      	movs	r3, #0
 8012160:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012162:	4b12      	ldr	r3, [pc, #72]	; (80121ac <ip_reass_tmr+0x54>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012168:	e018      	b.n	801219c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	7fdb      	ldrb	r3, [r3, #31]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d00b      	beq.n	801218a <ip_reass_tmr+0x32>
      r->timer--;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	7fdb      	ldrb	r3, [r3, #31]
 8012176:	3b01      	subs	r3, #1
 8012178:	b2da      	uxtb	r2, r3
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	60fb      	str	r3, [r7, #12]
 8012188:	e008      	b.n	801219c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012194:	68b9      	ldr	r1, [r7, #8]
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	f000 f80a 	bl	80121b0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d1e3      	bne.n	801216a <ip_reass_tmr+0x12>
    }
  }
}
 80121a2:	bf00      	nop
 80121a4:	bf00      	nop
 80121a6:	3710      	adds	r7, #16
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}
 80121ac:	24005e20 	.word	0x24005e20

080121b0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b088      	sub	sp, #32
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80121ba:	2300      	movs	r3, #0
 80121bc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80121be:	683a      	ldr	r2, [r7, #0]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d105      	bne.n	80121d2 <ip_reass_free_complete_datagram+0x22>
 80121c6:	4b45      	ldr	r3, [pc, #276]	; (80122dc <ip_reass_free_complete_datagram+0x12c>)
 80121c8:	22ab      	movs	r2, #171	; 0xab
 80121ca:	4945      	ldr	r1, [pc, #276]	; (80122e0 <ip_reass_free_complete_datagram+0x130>)
 80121cc:	4845      	ldr	r0, [pc, #276]	; (80122e4 <ip_reass_free_complete_datagram+0x134>)
 80121ce:	f001 f9a1 	bl	8013514 <iprintf>
  if (prev != NULL) {
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d00a      	beq.n	80121ee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	687a      	ldr	r2, [r7, #4]
 80121de:	429a      	cmp	r2, r3
 80121e0:	d005      	beq.n	80121ee <ip_reass_free_complete_datagram+0x3e>
 80121e2:	4b3e      	ldr	r3, [pc, #248]	; (80122dc <ip_reass_free_complete_datagram+0x12c>)
 80121e4:	22ad      	movs	r2, #173	; 0xad
 80121e6:	4940      	ldr	r1, [pc, #256]	; (80122e8 <ip_reass_free_complete_datagram+0x138>)
 80121e8:	483e      	ldr	r0, [pc, #248]	; (80122e4 <ip_reass_free_complete_datagram+0x134>)
 80121ea:	f001 f993 	bl	8013514 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	685b      	ldr	r3, [r3, #4]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	889b      	ldrh	r3, [r3, #4]
 80121fa:	b29b      	uxth	r3, r3
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d12a      	bne.n	8012256 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	6858      	ldr	r0, [r3, #4]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	3308      	adds	r3, #8
 8012216:	2214      	movs	r2, #20
 8012218:	4619      	mov	r1, r3
 801221a:	f001 f8d0 	bl	80133be <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801221e:	2101      	movs	r1, #1
 8012220:	69b8      	ldr	r0, [r7, #24]
 8012222:	f7ff fc3d 	bl	8011aa0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012226:	69b8      	ldr	r0, [r7, #24]
 8012228:	f7f8 fd22 	bl	800ac70 <pbuf_clen>
 801222c:	4603      	mov	r3, r0
 801222e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012230:	8bfa      	ldrh	r2, [r7, #30]
 8012232:	8a7b      	ldrh	r3, [r7, #18]
 8012234:	4413      	add	r3, r2
 8012236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801223a:	db05      	blt.n	8012248 <ip_reass_free_complete_datagram+0x98>
 801223c:	4b27      	ldr	r3, [pc, #156]	; (80122dc <ip_reass_free_complete_datagram+0x12c>)
 801223e:	22bc      	movs	r2, #188	; 0xbc
 8012240:	492a      	ldr	r1, [pc, #168]	; (80122ec <ip_reass_free_complete_datagram+0x13c>)
 8012242:	4828      	ldr	r0, [pc, #160]	; (80122e4 <ip_reass_free_complete_datagram+0x134>)
 8012244:	f001 f966 	bl	8013514 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012248:	8bfa      	ldrh	r2, [r7, #30]
 801224a:	8a7b      	ldrh	r3, [r7, #18]
 801224c:	4413      	add	r3, r2
 801224e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012250:	69b8      	ldr	r0, [r7, #24]
 8012252:	f7f8 fc7f 	bl	800ab54 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801225c:	e01f      	b.n	801229e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801225e:	69bb      	ldr	r3, [r7, #24]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012264:	69bb      	ldr	r3, [r7, #24]
 8012266:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801226e:	68f8      	ldr	r0, [r7, #12]
 8012270:	f7f8 fcfe 	bl	800ac70 <pbuf_clen>
 8012274:	4603      	mov	r3, r0
 8012276:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012278:	8bfa      	ldrh	r2, [r7, #30]
 801227a:	8a7b      	ldrh	r3, [r7, #18]
 801227c:	4413      	add	r3, r2
 801227e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012282:	db05      	blt.n	8012290 <ip_reass_free_complete_datagram+0xe0>
 8012284:	4b15      	ldr	r3, [pc, #84]	; (80122dc <ip_reass_free_complete_datagram+0x12c>)
 8012286:	22cc      	movs	r2, #204	; 0xcc
 8012288:	4918      	ldr	r1, [pc, #96]	; (80122ec <ip_reass_free_complete_datagram+0x13c>)
 801228a:	4816      	ldr	r0, [pc, #88]	; (80122e4 <ip_reass_free_complete_datagram+0x134>)
 801228c:	f001 f942 	bl	8013514 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012290:	8bfa      	ldrh	r2, [r7, #30]
 8012292:	8a7b      	ldrh	r3, [r7, #18]
 8012294:	4413      	add	r3, r2
 8012296:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012298:	68f8      	ldr	r0, [r7, #12]
 801229a:	f7f8 fc5b 	bl	800ab54 <pbuf_free>
  while (p != NULL) {
 801229e:	69bb      	ldr	r3, [r7, #24]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d1dc      	bne.n	801225e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80122a4:	6839      	ldr	r1, [r7, #0]
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f000 f8c2 	bl	8012430 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80122ac:	4b10      	ldr	r3, [pc, #64]	; (80122f0 <ip_reass_free_complete_datagram+0x140>)
 80122ae:	881b      	ldrh	r3, [r3, #0]
 80122b0:	8bfa      	ldrh	r2, [r7, #30]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d905      	bls.n	80122c2 <ip_reass_free_complete_datagram+0x112>
 80122b6:	4b09      	ldr	r3, [pc, #36]	; (80122dc <ip_reass_free_complete_datagram+0x12c>)
 80122b8:	22d2      	movs	r2, #210	; 0xd2
 80122ba:	490e      	ldr	r1, [pc, #56]	; (80122f4 <ip_reass_free_complete_datagram+0x144>)
 80122bc:	4809      	ldr	r0, [pc, #36]	; (80122e4 <ip_reass_free_complete_datagram+0x134>)
 80122be:	f001 f929 	bl	8013514 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80122c2:	4b0b      	ldr	r3, [pc, #44]	; (80122f0 <ip_reass_free_complete_datagram+0x140>)
 80122c4:	881a      	ldrh	r2, [r3, #0]
 80122c6:	8bfb      	ldrh	r3, [r7, #30]
 80122c8:	1ad3      	subs	r3, r2, r3
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	4b08      	ldr	r3, [pc, #32]	; (80122f0 <ip_reass_free_complete_datagram+0x140>)
 80122ce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80122d0:	8bfb      	ldrh	r3, [r7, #30]
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3720      	adds	r7, #32
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	08016bd8 	.word	0x08016bd8
 80122e0:	08016c14 	.word	0x08016c14
 80122e4:	08016c20 	.word	0x08016c20
 80122e8:	08016c48 	.word	0x08016c48
 80122ec:	08016c5c 	.word	0x08016c5c
 80122f0:	24005e24 	.word	0x24005e24
 80122f4:	08016c7c 	.word	0x08016c7c

080122f8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b08a      	sub	sp, #40	; 0x28
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012302:	2300      	movs	r3, #0
 8012304:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012306:	2300      	movs	r3, #0
 8012308:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801230a:	2300      	movs	r3, #0
 801230c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801230e:	2300      	movs	r3, #0
 8012310:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012312:	2300      	movs	r3, #0
 8012314:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012316:	4b28      	ldr	r3, [pc, #160]	; (80123b8 <ip_reass_remove_oldest_datagram+0xc0>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801231c:	e030      	b.n	8012380 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012320:	695a      	ldr	r2, [r3, #20]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	68db      	ldr	r3, [r3, #12]
 8012326:	429a      	cmp	r2, r3
 8012328:	d10c      	bne.n	8012344 <ip_reass_remove_oldest_datagram+0x4c>
 801232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232c:	699a      	ldr	r2, [r3, #24]
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	691b      	ldr	r3, [r3, #16]
 8012332:	429a      	cmp	r2, r3
 8012334:	d106      	bne.n	8012344 <ip_reass_remove_oldest_datagram+0x4c>
 8012336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012338:	899a      	ldrh	r2, [r3, #12]
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	889b      	ldrh	r3, [r3, #4]
 801233e:	b29b      	uxth	r3, r3
 8012340:	429a      	cmp	r2, r3
 8012342:	d014      	beq.n	801236e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	3301      	adds	r3, #1
 8012348:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801234a:	6a3b      	ldr	r3, [r7, #32]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d104      	bne.n	801235a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012352:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012354:	69fb      	ldr	r3, [r7, #28]
 8012356:	61bb      	str	r3, [r7, #24]
 8012358:	e009      	b.n	801236e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235c:	7fda      	ldrb	r2, [r3, #31]
 801235e:	6a3b      	ldr	r3, [r7, #32]
 8012360:	7fdb      	ldrb	r3, [r3, #31]
 8012362:	429a      	cmp	r2, r3
 8012364:	d803      	bhi.n	801236e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012368:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801236a:	69fb      	ldr	r3, [r7, #28]
 801236c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d001      	beq.n	801237a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012378:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012382:	2b00      	cmp	r3, #0
 8012384:	d1cb      	bne.n	801231e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012386:	6a3b      	ldr	r3, [r7, #32]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d008      	beq.n	801239e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801238c:	69b9      	ldr	r1, [r7, #24]
 801238e:	6a38      	ldr	r0, [r7, #32]
 8012390:	f7ff ff0e 	bl	80121b0 <ip_reass_free_complete_datagram>
 8012394:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012396:	697a      	ldr	r2, [r7, #20]
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	4413      	add	r3, r2
 801239c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801239e:	697a      	ldr	r2, [r7, #20]
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	da02      	bge.n	80123ac <ip_reass_remove_oldest_datagram+0xb4>
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	dcac      	bgt.n	8012306 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80123ac:	697b      	ldr	r3, [r7, #20]
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3728      	adds	r7, #40	; 0x28
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	24005e20 	.word	0x24005e20

080123bc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b084      	sub	sp, #16
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
 80123c4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80123c6:	2004      	movs	r0, #4
 80123c8:	f7f7 fcaa 	bl	8009d20 <memp_malloc>
 80123cc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d110      	bne.n	80123f6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80123d4:	6839      	ldr	r1, [r7, #0]
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f7ff ff8e 	bl	80122f8 <ip_reass_remove_oldest_datagram>
 80123dc:	4602      	mov	r2, r0
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	4293      	cmp	r3, r2
 80123e2:	dc03      	bgt.n	80123ec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80123e4:	2004      	movs	r0, #4
 80123e6:	f7f7 fc9b 	bl	8009d20 <memp_malloc>
 80123ea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d101      	bne.n	80123f6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80123f2:	2300      	movs	r3, #0
 80123f4:	e016      	b.n	8012424 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80123f6:	2220      	movs	r2, #32
 80123f8:	2100      	movs	r1, #0
 80123fa:	68f8      	ldr	r0, [r7, #12]
 80123fc:	f000 ffed 	bl	80133da <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	220f      	movs	r2, #15
 8012404:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012406:	4b09      	ldr	r3, [pc, #36]	; (801242c <ip_reass_enqueue_new_datagram+0x70>)
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801240e:	4a07      	ldr	r2, [pc, #28]	; (801242c <ip_reass_enqueue_new_datagram+0x70>)
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	3308      	adds	r3, #8
 8012418:	2214      	movs	r2, #20
 801241a:	6879      	ldr	r1, [r7, #4]
 801241c:	4618      	mov	r0, r3
 801241e:	f000 ffce 	bl	80133be <memcpy>
  return ipr;
 8012422:	68fb      	ldr	r3, [r7, #12]
}
 8012424:	4618      	mov	r0, r3
 8012426:	3710      	adds	r7, #16
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}
 801242c:	24005e20 	.word	0x24005e20

08012430 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801243a:	4b10      	ldr	r3, [pc, #64]	; (801247c <ip_reass_dequeue_datagram+0x4c>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	687a      	ldr	r2, [r7, #4]
 8012440:	429a      	cmp	r2, r3
 8012442:	d104      	bne.n	801244e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	4a0c      	ldr	r2, [pc, #48]	; (801247c <ip_reass_dequeue_datagram+0x4c>)
 801244a:	6013      	str	r3, [r2, #0]
 801244c:	e00d      	b.n	801246a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d106      	bne.n	8012462 <ip_reass_dequeue_datagram+0x32>
 8012454:	4b0a      	ldr	r3, [pc, #40]	; (8012480 <ip_reass_dequeue_datagram+0x50>)
 8012456:	f240 1245 	movw	r2, #325	; 0x145
 801245a:	490a      	ldr	r1, [pc, #40]	; (8012484 <ip_reass_dequeue_datagram+0x54>)
 801245c:	480a      	ldr	r0, [pc, #40]	; (8012488 <ip_reass_dequeue_datagram+0x58>)
 801245e:	f001 f859 	bl	8013514 <iprintf>
    prev->next = ipr->next;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681a      	ldr	r2, [r3, #0]
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801246a:	6879      	ldr	r1, [r7, #4]
 801246c:	2004      	movs	r0, #4
 801246e:	f7f7 fccd 	bl	8009e0c <memp_free>
}
 8012472:	bf00      	nop
 8012474:	3708      	adds	r7, #8
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	24005e20 	.word	0x24005e20
 8012480:	08016bd8 	.word	0x08016bd8
 8012484:	08016ca0 	.word	0x08016ca0
 8012488:	08016c20 	.word	0x08016c20

0801248c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b08c      	sub	sp, #48	; 0x30
 8012490:	af00      	add	r7, sp, #0
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	60b9      	str	r1, [r7, #8]
 8012496:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012498:	2300      	movs	r3, #0
 801249a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801249c:	2301      	movs	r3, #1
 801249e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	685b      	ldr	r3, [r3, #4]
 80124a4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80124a6:	69fb      	ldr	r3, [r7, #28]
 80124a8:	885b      	ldrh	r3, [r3, #2]
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7f6 fea7 	bl	8009200 <lwip_htons>
 80124b2:	4603      	mov	r3, r0
 80124b4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80124b6:	69fb      	ldr	r3, [r7, #28]
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	f003 030f 	and.w	r3, r3, #15
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	009b      	lsls	r3, r3, #2
 80124c2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80124c4:	7e7b      	ldrb	r3, [r7, #25]
 80124c6:	b29b      	uxth	r3, r3
 80124c8:	8b7a      	ldrh	r2, [r7, #26]
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d202      	bcs.n	80124d4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80124ce:	f04f 33ff 	mov.w	r3, #4294967295
 80124d2:	e135      	b.n	8012740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80124d4:	7e7b      	ldrb	r3, [r7, #25]
 80124d6:	b29b      	uxth	r3, r3
 80124d8:	8b7a      	ldrh	r2, [r7, #26]
 80124da:	1ad3      	subs	r3, r2, r3
 80124dc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80124de:	69fb      	ldr	r3, [r7, #28]
 80124e0:	88db      	ldrh	r3, [r3, #6]
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7f6 fe8b 	bl	8009200 <lwip_htons>
 80124ea:	4603      	mov	r3, r0
 80124ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	00db      	lsls	r3, r3, #3
 80124f4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80124fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124fe:	2200      	movs	r2, #0
 8012500:	701a      	strb	r2, [r3, #0]
 8012502:	2200      	movs	r2, #0
 8012504:	705a      	strb	r2, [r3, #1]
 8012506:	2200      	movs	r2, #0
 8012508:	709a      	strb	r2, [r3, #2]
 801250a:	2200      	movs	r2, #0
 801250c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012510:	8afa      	ldrh	r2, [r7, #22]
 8012512:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012514:	8afa      	ldrh	r2, [r7, #22]
 8012516:	8b7b      	ldrh	r3, [r7, #26]
 8012518:	4413      	add	r3, r2
 801251a:	b29a      	uxth	r2, r3
 801251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801251e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012522:	88db      	ldrh	r3, [r3, #6]
 8012524:	b29b      	uxth	r3, r3
 8012526:	8afa      	ldrh	r2, [r7, #22]
 8012528:	429a      	cmp	r2, r3
 801252a:	d902      	bls.n	8012532 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801252c:	f04f 33ff 	mov.w	r3, #4294967295
 8012530:	e106      	b.n	8012740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	627b      	str	r3, [r7, #36]	; 0x24
 8012538:	e068      	b.n	801260c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012542:	889b      	ldrh	r3, [r3, #4]
 8012544:	b29a      	uxth	r2, r3
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	889b      	ldrh	r3, [r3, #4]
 801254a:	b29b      	uxth	r3, r3
 801254c:	429a      	cmp	r2, r3
 801254e:	d235      	bcs.n	80125bc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012554:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012558:	2b00      	cmp	r3, #0
 801255a:	d020      	beq.n	801259e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255e:	889b      	ldrh	r3, [r3, #4]
 8012560:	b29a      	uxth	r2, r3
 8012562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012564:	88db      	ldrh	r3, [r3, #6]
 8012566:	b29b      	uxth	r3, r3
 8012568:	429a      	cmp	r2, r3
 801256a:	d307      	bcc.n	801257c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801256e:	88db      	ldrh	r3, [r3, #6]
 8012570:	b29a      	uxth	r2, r3
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	889b      	ldrh	r3, [r3, #4]
 8012576:	b29b      	uxth	r3, r3
 8012578:	429a      	cmp	r2, r3
 801257a:	d902      	bls.n	8012582 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801257c:	f04f 33ff 	mov.w	r3, #4294967295
 8012580:	e0de      	b.n	8012740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012584:	68ba      	ldr	r2, [r7, #8]
 8012586:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801258a:	88db      	ldrh	r3, [r3, #6]
 801258c:	b29a      	uxth	r2, r3
 801258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012590:	889b      	ldrh	r3, [r3, #4]
 8012592:	b29b      	uxth	r3, r3
 8012594:	429a      	cmp	r2, r3
 8012596:	d03d      	beq.n	8012614 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012598:	2300      	movs	r3, #0
 801259a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801259c:	e03a      	b.n	8012614 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a0:	88db      	ldrh	r3, [r3, #6]
 80125a2:	b29a      	uxth	r2, r3
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	889b      	ldrh	r3, [r3, #4]
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d902      	bls.n	80125b4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80125ae:	f04f 33ff 	mov.w	r3, #4294967295
 80125b2:	e0c5      	b.n	8012740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	68ba      	ldr	r2, [r7, #8]
 80125b8:	605a      	str	r2, [r3, #4]
      break;
 80125ba:	e02b      	b.n	8012614 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80125bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125be:	889b      	ldrh	r3, [r3, #4]
 80125c0:	b29a      	uxth	r2, r3
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	889b      	ldrh	r3, [r3, #4]
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d102      	bne.n	80125d2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80125cc:	f04f 33ff 	mov.w	r3, #4294967295
 80125d0:	e0b6      	b.n	8012740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80125d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d4:	889b      	ldrh	r3, [r3, #4]
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	693b      	ldr	r3, [r7, #16]
 80125da:	88db      	ldrh	r3, [r3, #6]
 80125dc:	b29b      	uxth	r3, r3
 80125de:	429a      	cmp	r2, r3
 80125e0:	d202      	bcs.n	80125e8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80125e2:	f04f 33ff 	mov.w	r3, #4294967295
 80125e6:	e0ab      	b.n	8012740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80125e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d009      	beq.n	8012602 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80125ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f0:	88db      	ldrh	r3, [r3, #6]
 80125f2:	b29a      	uxth	r2, r3
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	889b      	ldrh	r3, [r3, #4]
 80125f8:	b29b      	uxth	r3, r3
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d001      	beq.n	8012602 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80125fe:	2300      	movs	r3, #0
 8012600:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012602:	693b      	ldr	r3, [r7, #16]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012608:	693b      	ldr	r3, [r7, #16]
 801260a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260e:	2b00      	cmp	r3, #0
 8012610:	d193      	bne.n	801253a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012612:	e000      	b.n	8012616 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012614:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012618:	2b00      	cmp	r3, #0
 801261a:	d12d      	bne.n	8012678 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801261e:	2b00      	cmp	r3, #0
 8012620:	d01c      	beq.n	801265c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012624:	88db      	ldrh	r3, [r3, #6]
 8012626:	b29a      	uxth	r2, r3
 8012628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801262a:	889b      	ldrh	r3, [r3, #4]
 801262c:	b29b      	uxth	r3, r3
 801262e:	429a      	cmp	r2, r3
 8012630:	d906      	bls.n	8012640 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012632:	4b45      	ldr	r3, [pc, #276]	; (8012748 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012634:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012638:	4944      	ldr	r1, [pc, #272]	; (801274c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801263a:	4845      	ldr	r0, [pc, #276]	; (8012750 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801263c:	f000 ff6a 	bl	8013514 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012642:	68ba      	ldr	r2, [r7, #8]
 8012644:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012648:	88db      	ldrh	r3, [r3, #6]
 801264a:	b29a      	uxth	r2, r3
 801264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264e:	889b      	ldrh	r3, [r3, #4]
 8012650:	b29b      	uxth	r3, r3
 8012652:	429a      	cmp	r2, r3
 8012654:	d010      	beq.n	8012678 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012656:	2300      	movs	r3, #0
 8012658:	623b      	str	r3, [r7, #32]
 801265a:	e00d      	b.n	8012678 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d006      	beq.n	8012672 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012664:	4b38      	ldr	r3, [pc, #224]	; (8012748 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012666:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801266a:	493a      	ldr	r1, [pc, #232]	; (8012754 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801266c:	4838      	ldr	r0, [pc, #224]	; (8012750 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801266e:	f000 ff51 	bl	8013514 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	68ba      	ldr	r2, [r7, #8]
 8012676:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d105      	bne.n	801268a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	7f9b      	ldrb	r3, [r3, #30]
 8012682:	f003 0301 	and.w	r3, r3, #1
 8012686:	2b00      	cmp	r3, #0
 8012688:	d059      	beq.n	801273e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801268a:	6a3b      	ldr	r3, [r7, #32]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d04f      	beq.n	8012730 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	685b      	ldr	r3, [r3, #4]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d006      	beq.n	80126a6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	685b      	ldr	r3, [r3, #4]
 801269c:	685b      	ldr	r3, [r3, #4]
 801269e:	889b      	ldrh	r3, [r3, #4]
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d002      	beq.n	80126ac <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80126a6:	2300      	movs	r3, #0
 80126a8:	623b      	str	r3, [r7, #32]
 80126aa:	e041      	b.n	8012730 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80126ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ae:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80126b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80126b6:	e012      	b.n	80126de <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80126b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ba:	685b      	ldr	r3, [r3, #4]
 80126bc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80126be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c0:	88db      	ldrh	r3, [r3, #6]
 80126c2:	b29a      	uxth	r2, r3
 80126c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c6:	889b      	ldrh	r3, [r3, #4]
 80126c8:	b29b      	uxth	r3, r3
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d002      	beq.n	80126d4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80126ce:	2300      	movs	r3, #0
 80126d0:	623b      	str	r3, [r7, #32]
            break;
 80126d2:	e007      	b.n	80126e4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80126d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80126d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80126de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d1e9      	bne.n	80126b8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80126e4:	6a3b      	ldr	r3, [r7, #32]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d022      	beq.n	8012730 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d106      	bne.n	8012700 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80126f2:	4b15      	ldr	r3, [pc, #84]	; (8012748 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80126f4:	f240 12df 	movw	r2, #479	; 0x1df
 80126f8:	4917      	ldr	r1, [pc, #92]	; (8012758 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80126fa:	4815      	ldr	r0, [pc, #84]	; (8012750 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80126fc:	f000 ff0a 	bl	8013514 <iprintf>
          LWIP_ASSERT("sanity check",
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012708:	429a      	cmp	r2, r3
 801270a:	d106      	bne.n	801271a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801270c:	4b0e      	ldr	r3, [pc, #56]	; (8012748 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801270e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012712:	4911      	ldr	r1, [pc, #68]	; (8012758 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012714:	480e      	ldr	r0, [pc, #56]	; (8012750 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012716:	f000 fefd 	bl	8013514 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d006      	beq.n	8012730 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012722:	4b09      	ldr	r3, [pc, #36]	; (8012748 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012724:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012728:	490c      	ldr	r1, [pc, #48]	; (801275c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801272a:	4809      	ldr	r0, [pc, #36]	; (8012750 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801272c:	f000 fef2 	bl	8013514 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012730:	6a3b      	ldr	r3, [r7, #32]
 8012732:	2b00      	cmp	r3, #0
 8012734:	bf14      	ite	ne
 8012736:	2301      	movne	r3, #1
 8012738:	2300      	moveq	r3, #0
 801273a:	b2db      	uxtb	r3, r3
 801273c:	e000      	b.n	8012740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801273e:	2300      	movs	r3, #0
}
 8012740:	4618      	mov	r0, r3
 8012742:	3730      	adds	r7, #48	; 0x30
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}
 8012748:	08016bd8 	.word	0x08016bd8
 801274c:	08016cbc 	.word	0x08016cbc
 8012750:	08016c20 	.word	0x08016c20
 8012754:	08016cdc 	.word	0x08016cdc
 8012758:	08016d14 	.word	0x08016d14
 801275c:	08016d24 	.word	0x08016d24

08012760 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b08e      	sub	sp, #56	; 0x38
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	685b      	ldr	r3, [r3, #4]
 801276c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	f003 030f 	and.w	r3, r3, #15
 8012776:	b2db      	uxtb	r3, r3
 8012778:	009b      	lsls	r3, r3, #2
 801277a:	b2db      	uxtb	r3, r3
 801277c:	2b14      	cmp	r3, #20
 801277e:	f040 8171 	bne.w	8012a64 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012784:	88db      	ldrh	r3, [r3, #6]
 8012786:	b29b      	uxth	r3, r3
 8012788:	4618      	mov	r0, r3
 801278a:	f7f6 fd39 	bl	8009200 <lwip_htons>
 801278e:	4603      	mov	r3, r0
 8012790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012794:	b29b      	uxth	r3, r3
 8012796:	00db      	lsls	r3, r3, #3
 8012798:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279c:	885b      	ldrh	r3, [r3, #2]
 801279e:	b29b      	uxth	r3, r3
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7f6 fd2d 	bl	8009200 <lwip_htons>
 80127a6:	4603      	mov	r3, r0
 80127a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80127aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	f003 030f 	and.w	r3, r3, #15
 80127b2:	b2db      	uxtb	r3, r3
 80127b4:	009b      	lsls	r3, r3, #2
 80127b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80127ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80127be:	b29b      	uxth	r3, r3
 80127c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80127c2:	429a      	cmp	r2, r3
 80127c4:	f0c0 8150 	bcc.w	8012a68 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80127c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80127cc:	b29b      	uxth	r3, r3
 80127ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80127d0:	1ad3      	subs	r3, r2, r3
 80127d2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f7f8 fa4b 	bl	800ac70 <pbuf_clen>
 80127da:	4603      	mov	r3, r0
 80127dc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80127de:	4b8c      	ldr	r3, [pc, #560]	; (8012a10 <ip4_reass+0x2b0>)
 80127e0:	881b      	ldrh	r3, [r3, #0]
 80127e2:	461a      	mov	r2, r3
 80127e4:	8c3b      	ldrh	r3, [r7, #32]
 80127e6:	4413      	add	r3, r2
 80127e8:	2b0a      	cmp	r3, #10
 80127ea:	dd10      	ble.n	801280e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80127ec:	8c3b      	ldrh	r3, [r7, #32]
 80127ee:	4619      	mov	r1, r3
 80127f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127f2:	f7ff fd81 	bl	80122f8 <ip_reass_remove_oldest_datagram>
 80127f6:	4603      	mov	r3, r0
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f000 8137 	beq.w	8012a6c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80127fe:	4b84      	ldr	r3, [pc, #528]	; (8012a10 <ip4_reass+0x2b0>)
 8012800:	881b      	ldrh	r3, [r3, #0]
 8012802:	461a      	mov	r2, r3
 8012804:	8c3b      	ldrh	r3, [r7, #32]
 8012806:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012808:	2b0a      	cmp	r3, #10
 801280a:	f300 812f 	bgt.w	8012a6c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801280e:	4b81      	ldr	r3, [pc, #516]	; (8012a14 <ip4_reass+0x2b4>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	633b      	str	r3, [r7, #48]	; 0x30
 8012814:	e015      	b.n	8012842 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012818:	695a      	ldr	r2, [r3, #20]
 801281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801281c:	68db      	ldr	r3, [r3, #12]
 801281e:	429a      	cmp	r2, r3
 8012820:	d10c      	bne.n	801283c <ip4_reass+0xdc>
 8012822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012824:	699a      	ldr	r2, [r3, #24]
 8012826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012828:	691b      	ldr	r3, [r3, #16]
 801282a:	429a      	cmp	r2, r3
 801282c:	d106      	bne.n	801283c <ip4_reass+0xdc>
 801282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012830:	899a      	ldrh	r2, [r3, #12]
 8012832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012834:	889b      	ldrh	r3, [r3, #4]
 8012836:	b29b      	uxth	r3, r3
 8012838:	429a      	cmp	r2, r3
 801283a:	d006      	beq.n	801284a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	633b      	str	r3, [r7, #48]	; 0x30
 8012842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012844:	2b00      	cmp	r3, #0
 8012846:	d1e6      	bne.n	8012816 <ip4_reass+0xb6>
 8012848:	e000      	b.n	801284c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801284a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284e:	2b00      	cmp	r3, #0
 8012850:	d109      	bne.n	8012866 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012852:	8c3b      	ldrh	r3, [r7, #32]
 8012854:	4619      	mov	r1, r3
 8012856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012858:	f7ff fdb0 	bl	80123bc <ip_reass_enqueue_new_datagram>
 801285c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012860:	2b00      	cmp	r3, #0
 8012862:	d11c      	bne.n	801289e <ip4_reass+0x13e>
      goto nullreturn;
 8012864:	e105      	b.n	8012a72 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012868:	88db      	ldrh	r3, [r3, #6]
 801286a:	b29b      	uxth	r3, r3
 801286c:	4618      	mov	r0, r3
 801286e:	f7f6 fcc7 	bl	8009200 <lwip_htons>
 8012872:	4603      	mov	r3, r0
 8012874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012878:	2b00      	cmp	r3, #0
 801287a:	d110      	bne.n	801289e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801287c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801287e:	89db      	ldrh	r3, [r3, #14]
 8012880:	4618      	mov	r0, r3
 8012882:	f7f6 fcbd 	bl	8009200 <lwip_htons>
 8012886:	4603      	mov	r3, r0
 8012888:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801288c:	2b00      	cmp	r3, #0
 801288e:	d006      	beq.n	801289e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012892:	3308      	adds	r3, #8
 8012894:	2214      	movs	r2, #20
 8012896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012898:	4618      	mov	r0, r3
 801289a:	f000 fd90 	bl	80133be <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a0:	88db      	ldrh	r3, [r3, #6]
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	f003 0320 	and.w	r3, r3, #32
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	bf0c      	ite	eq
 80128ac:	2301      	moveq	r3, #1
 80128ae:	2300      	movne	r3, #0
 80128b0:	b2db      	uxtb	r3, r3
 80128b2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80128b4:	69fb      	ldr	r3, [r7, #28]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d00e      	beq.n	80128d8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80128ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80128bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80128be:	4413      	add	r3, r2
 80128c0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80128c2:	8b7a      	ldrh	r2, [r7, #26]
 80128c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80128c6:	429a      	cmp	r2, r3
 80128c8:	f0c0 80a0 	bcc.w	8012a0c <ip4_reass+0x2ac>
 80128cc:	8b7b      	ldrh	r3, [r7, #26]
 80128ce:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80128d2:	4293      	cmp	r3, r2
 80128d4:	f200 809a 	bhi.w	8012a0c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80128d8:	69fa      	ldr	r2, [r7, #28]
 80128da:	6879      	ldr	r1, [r7, #4]
 80128dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128de:	f7ff fdd5 	bl	801248c <ip_reass_chain_frag_into_datagram_and_validate>
 80128e2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128ea:	f000 809b 	beq.w	8012a24 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80128ee:	4b48      	ldr	r3, [pc, #288]	; (8012a10 <ip4_reass+0x2b0>)
 80128f0:	881a      	ldrh	r2, [r3, #0]
 80128f2:	8c3b      	ldrh	r3, [r7, #32]
 80128f4:	4413      	add	r3, r2
 80128f6:	b29a      	uxth	r2, r3
 80128f8:	4b45      	ldr	r3, [pc, #276]	; (8012a10 <ip4_reass+0x2b0>)
 80128fa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80128fc:	69fb      	ldr	r3, [r7, #28]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d00d      	beq.n	801291e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012902:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012904:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012906:	4413      	add	r3, r2
 8012908:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801290c:	8a7a      	ldrh	r2, [r7, #18]
 801290e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012912:	7f9b      	ldrb	r3, [r3, #30]
 8012914:	f043 0301 	orr.w	r3, r3, #1
 8012918:	b2da      	uxtb	r2, r3
 801291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	2b01      	cmp	r3, #1
 8012922:	d171      	bne.n	8012a08 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012926:	8b9b      	ldrh	r3, [r3, #28]
 8012928:	3314      	adds	r3, #20
 801292a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801292e:	685b      	ldr	r3, [r3, #4]
 8012930:	685b      	ldr	r3, [r3, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012940:	3308      	adds	r3, #8
 8012942:	2214      	movs	r2, #20
 8012944:	4619      	mov	r1, r3
 8012946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012948:	f000 fd39 	bl	80133be <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801294c:	8a3b      	ldrh	r3, [r7, #16]
 801294e:	4618      	mov	r0, r3
 8012950:	f7f6 fc56 	bl	8009200 <lwip_htons>
 8012954:	4603      	mov	r3, r0
 8012956:	461a      	mov	r2, r3
 8012958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295e:	2200      	movs	r2, #0
 8012960:	719a      	strb	r2, [r3, #6]
 8012962:	2200      	movs	r2, #0
 8012964:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012968:	2200      	movs	r2, #0
 801296a:	729a      	strb	r2, [r3, #10]
 801296c:	2200      	movs	r2, #0
 801296e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012972:	685b      	ldr	r3, [r3, #4]
 8012974:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012976:	e00d      	b.n	8012994 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801297a:	685b      	ldr	r3, [r3, #4]
 801297c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801297e:	2114      	movs	r1, #20
 8012980:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012982:	f7f8 f861 	bl	800aa48 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012986:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f7f8 f9b1 	bl	800acf0 <pbuf_cat>
      r = iprh->next_pbuf;
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012996:	2b00      	cmp	r3, #0
 8012998:	d1ee      	bne.n	8012978 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801299a:	4b1e      	ldr	r3, [pc, #120]	; (8012a14 <ip4_reass+0x2b4>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d102      	bne.n	80129aa <ip4_reass+0x24a>
      ipr_prev = NULL;
 80129a4:	2300      	movs	r3, #0
 80129a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129a8:	e010      	b.n	80129cc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80129aa:	4b1a      	ldr	r3, [pc, #104]	; (8012a14 <ip4_reass+0x2b4>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129b0:	e007      	b.n	80129c2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80129b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129b8:	429a      	cmp	r2, r3
 80129ba:	d006      	beq.n	80129ca <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80129bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d1f4      	bne.n	80129b2 <ip4_reass+0x252>
 80129c8:	e000      	b.n	80129cc <ip4_reass+0x26c>
          break;
 80129ca:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80129cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129d0:	f7ff fd2e 	bl	8012430 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f7f8 f94b 	bl	800ac70 <pbuf_clen>
 80129da:	4603      	mov	r3, r0
 80129dc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80129de:	4b0c      	ldr	r3, [pc, #48]	; (8012a10 <ip4_reass+0x2b0>)
 80129e0:	881b      	ldrh	r3, [r3, #0]
 80129e2:	8c3a      	ldrh	r2, [r7, #32]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d906      	bls.n	80129f6 <ip4_reass+0x296>
 80129e8:	4b0b      	ldr	r3, [pc, #44]	; (8012a18 <ip4_reass+0x2b8>)
 80129ea:	f240 229b 	movw	r2, #667	; 0x29b
 80129ee:	490b      	ldr	r1, [pc, #44]	; (8012a1c <ip4_reass+0x2bc>)
 80129f0:	480b      	ldr	r0, [pc, #44]	; (8012a20 <ip4_reass+0x2c0>)
 80129f2:	f000 fd8f 	bl	8013514 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80129f6:	4b06      	ldr	r3, [pc, #24]	; (8012a10 <ip4_reass+0x2b0>)
 80129f8:	881a      	ldrh	r2, [r3, #0]
 80129fa:	8c3b      	ldrh	r3, [r7, #32]
 80129fc:	1ad3      	subs	r3, r2, r3
 80129fe:	b29a      	uxth	r2, r3
 8012a00:	4b03      	ldr	r3, [pc, #12]	; (8012a10 <ip4_reass+0x2b0>)
 8012a02:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	e038      	b.n	8012a7a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	e036      	b.n	8012a7a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012a0c:	bf00      	nop
 8012a0e:	e00a      	b.n	8012a26 <ip4_reass+0x2c6>
 8012a10:	24005e24 	.word	0x24005e24
 8012a14:	24005e20 	.word	0x24005e20
 8012a18:	08016bd8 	.word	0x08016bd8
 8012a1c:	08016d48 	.word	0x08016d48
 8012a20:	08016c20 	.word	0x08016c20
    goto nullreturn_ipr;
 8012a24:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d106      	bne.n	8012a3a <ip4_reass+0x2da>
 8012a2c:	4b15      	ldr	r3, [pc, #84]	; (8012a84 <ip4_reass+0x324>)
 8012a2e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012a32:	4915      	ldr	r1, [pc, #84]	; (8012a88 <ip4_reass+0x328>)
 8012a34:	4815      	ldr	r0, [pc, #84]	; (8012a8c <ip4_reass+0x32c>)
 8012a36:	f000 fd6d 	bl	8013514 <iprintf>
  if (ipr->p == NULL) {
 8012a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d116      	bne.n	8012a70 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012a42:	4b13      	ldr	r3, [pc, #76]	; (8012a90 <ip4_reass+0x330>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d006      	beq.n	8012a5a <ip4_reass+0x2fa>
 8012a4c:	4b0d      	ldr	r3, [pc, #52]	; (8012a84 <ip4_reass+0x324>)
 8012a4e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012a52:	4910      	ldr	r1, [pc, #64]	; (8012a94 <ip4_reass+0x334>)
 8012a54:	480d      	ldr	r0, [pc, #52]	; (8012a8c <ip4_reass+0x32c>)
 8012a56:	f000 fd5d 	bl	8013514 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012a5a:	2100      	movs	r1, #0
 8012a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a5e:	f7ff fce7 	bl	8012430 <ip_reass_dequeue_datagram>
 8012a62:	e006      	b.n	8012a72 <ip4_reass+0x312>
    goto nullreturn;
 8012a64:	bf00      	nop
 8012a66:	e004      	b.n	8012a72 <ip4_reass+0x312>
    goto nullreturn;
 8012a68:	bf00      	nop
 8012a6a:	e002      	b.n	8012a72 <ip4_reass+0x312>
      goto nullreturn;
 8012a6c:	bf00      	nop
 8012a6e:	e000      	b.n	8012a72 <ip4_reass+0x312>
  }

nullreturn:
 8012a70:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f7f8 f86e 	bl	800ab54 <pbuf_free>
  return NULL;
 8012a78:	2300      	movs	r3, #0
}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	3738      	adds	r7, #56	; 0x38
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}
 8012a82:	bf00      	nop
 8012a84:	08016bd8 	.word	0x08016bd8
 8012a88:	08016d64 	.word	0x08016d64
 8012a8c:	08016c20 	.word	0x08016c20
 8012a90:	24005e20 	.word	0x24005e20
 8012a94:	08016d70 	.word	0x08016d70

08012a98 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012a9c:	2005      	movs	r0, #5
 8012a9e:	f7f7 f93f 	bl	8009d20 <memp_malloc>
 8012aa2:	4603      	mov	r3, r0
}
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b082      	sub	sp, #8
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d106      	bne.n	8012ac4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012ab6:	4b07      	ldr	r3, [pc, #28]	; (8012ad4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012ab8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012abc:	4906      	ldr	r1, [pc, #24]	; (8012ad8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012abe:	4807      	ldr	r0, [pc, #28]	; (8012adc <ip_frag_free_pbuf_custom_ref+0x34>)
 8012ac0:	f000 fd28 	bl	8013514 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012ac4:	6879      	ldr	r1, [r7, #4]
 8012ac6:	2005      	movs	r0, #5
 8012ac8:	f7f7 f9a0 	bl	8009e0c <memp_free>
}
 8012acc:	bf00      	nop
 8012ace:	3708      	adds	r7, #8
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}
 8012ad4:	08016bd8 	.word	0x08016bd8
 8012ad8:	08016d90 	.word	0x08016d90
 8012adc:	08016c20 	.word	0x08016c20

08012ae0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b084      	sub	sp, #16
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d106      	bne.n	8012b00 <ipfrag_free_pbuf_custom+0x20>
 8012af2:	4b11      	ldr	r3, [pc, #68]	; (8012b38 <ipfrag_free_pbuf_custom+0x58>)
 8012af4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012af8:	4910      	ldr	r1, [pc, #64]	; (8012b3c <ipfrag_free_pbuf_custom+0x5c>)
 8012afa:	4811      	ldr	r0, [pc, #68]	; (8012b40 <ipfrag_free_pbuf_custom+0x60>)
 8012afc:	f000 fd0a 	bl	8013514 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012b00:	68fa      	ldr	r2, [r7, #12]
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	429a      	cmp	r2, r3
 8012b06:	d006      	beq.n	8012b16 <ipfrag_free_pbuf_custom+0x36>
 8012b08:	4b0b      	ldr	r3, [pc, #44]	; (8012b38 <ipfrag_free_pbuf_custom+0x58>)
 8012b0a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012b0e:	490d      	ldr	r1, [pc, #52]	; (8012b44 <ipfrag_free_pbuf_custom+0x64>)
 8012b10:	480b      	ldr	r0, [pc, #44]	; (8012b40 <ipfrag_free_pbuf_custom+0x60>)
 8012b12:	f000 fcff 	bl	8013514 <iprintf>
  if (pcr->original != NULL) {
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	695b      	ldr	r3, [r3, #20]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d004      	beq.n	8012b28 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	695b      	ldr	r3, [r3, #20]
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7f8 f816 	bl	800ab54 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012b28:	68f8      	ldr	r0, [r7, #12]
 8012b2a:	f7ff ffbd 	bl	8012aa8 <ip_frag_free_pbuf_custom_ref>
}
 8012b2e:	bf00      	nop
 8012b30:	3710      	adds	r7, #16
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}
 8012b36:	bf00      	nop
 8012b38:	08016bd8 	.word	0x08016bd8
 8012b3c:	08016d9c 	.word	0x08016d9c
 8012b40:	08016c20 	.word	0x08016c20
 8012b44:	08016da8 	.word	0x08016da8

08012b48 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b094      	sub	sp, #80	; 0x50
 8012b4c:	af02      	add	r7, sp, #8
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012b54:	2300      	movs	r3, #0
 8012b56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012b5e:	3b14      	subs	r3, #20
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	da00      	bge.n	8012b66 <ip4_frag+0x1e>
 8012b64:	3307      	adds	r3, #7
 8012b66:	10db      	asrs	r3, r3, #3
 8012b68:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012b6a:	2314      	movs	r3, #20
 8012b6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b76:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	f003 030f 	and.w	r3, r3, #15
 8012b80:	b2db      	uxtb	r3, r3
 8012b82:	009b      	lsls	r3, r3, #2
 8012b84:	b2db      	uxtb	r3, r3
 8012b86:	2b14      	cmp	r3, #20
 8012b88:	d002      	beq.n	8012b90 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012b8a:	f06f 0305 	mvn.w	r3, #5
 8012b8e:	e110      	b.n	8012db2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	895b      	ldrh	r3, [r3, #10]
 8012b94:	2b13      	cmp	r3, #19
 8012b96:	d809      	bhi.n	8012bac <ip4_frag+0x64>
 8012b98:	4b88      	ldr	r3, [pc, #544]	; (8012dbc <ip4_frag+0x274>)
 8012b9a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012b9e:	4988      	ldr	r1, [pc, #544]	; (8012dc0 <ip4_frag+0x278>)
 8012ba0:	4888      	ldr	r0, [pc, #544]	; (8012dc4 <ip4_frag+0x27c>)
 8012ba2:	f000 fcb7 	bl	8013514 <iprintf>
 8012ba6:	f06f 0305 	mvn.w	r3, #5
 8012baa:	e102      	b.n	8012db2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bae:	88db      	ldrh	r3, [r3, #6]
 8012bb0:	b29b      	uxth	r3, r3
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7f6 fb24 	bl	8009200 <lwip_htons>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012bbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012bbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012bc2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012bc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012bcc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	891b      	ldrh	r3, [r3, #8]
 8012bd2:	3b14      	subs	r3, #20
 8012bd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012bd8:	e0e1      	b.n	8012d9e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012bda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012bdc:	00db      	lsls	r3, r3, #3
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012be4:	4293      	cmp	r3, r2
 8012be6:	bf28      	it	cs
 8012be8:	4613      	movcs	r3, r2
 8012bea:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012bec:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012bf0:	2114      	movs	r1, #20
 8012bf2:	200e      	movs	r0, #14
 8012bf4:	f7f7 fcca 	bl	800a58c <pbuf_alloc>
 8012bf8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	f000 80d5 	beq.w	8012dac <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c04:	895b      	ldrh	r3, [r3, #10]
 8012c06:	2b13      	cmp	r3, #19
 8012c08:	d806      	bhi.n	8012c18 <ip4_frag+0xd0>
 8012c0a:	4b6c      	ldr	r3, [pc, #432]	; (8012dbc <ip4_frag+0x274>)
 8012c0c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012c10:	496d      	ldr	r1, [pc, #436]	; (8012dc8 <ip4_frag+0x280>)
 8012c12:	486c      	ldr	r0, [pc, #432]	; (8012dc4 <ip4_frag+0x27c>)
 8012c14:	f000 fc7e 	bl	8013514 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	2214      	movs	r2, #20
 8012c1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012c20:	4618      	mov	r0, r3
 8012c22:	f000 fbcc 	bl	80133be <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012c2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012c2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012c32:	e064      	b.n	8012cfe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	895a      	ldrh	r2, [r3, #10]
 8012c38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c3a:	1ad3      	subs	r3, r2, r3
 8012c3c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	895b      	ldrh	r3, [r3, #10]
 8012c42:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d906      	bls.n	8012c56 <ip4_frag+0x10e>
 8012c48:	4b5c      	ldr	r3, [pc, #368]	; (8012dbc <ip4_frag+0x274>)
 8012c4a:	f240 322d 	movw	r2, #813	; 0x32d
 8012c4e:	495f      	ldr	r1, [pc, #380]	; (8012dcc <ip4_frag+0x284>)
 8012c50:	485c      	ldr	r0, [pc, #368]	; (8012dc4 <ip4_frag+0x27c>)
 8012c52:	f000 fc5f 	bl	8013514 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012c56:	8bfa      	ldrh	r2, [r7, #30]
 8012c58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012c5c:	4293      	cmp	r3, r2
 8012c5e:	bf28      	it	cs
 8012c60:	4613      	movcs	r3, r2
 8012c62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012c66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d105      	bne.n	8012c7a <ip4_frag+0x132>
        poff = 0;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	60fb      	str	r3, [r7, #12]
        continue;
 8012c78:	e041      	b.n	8012cfe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012c7a:	f7ff ff0d 	bl	8012a98 <ip_frag_alloc_pbuf_custom_ref>
 8012c7e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012c80:	69bb      	ldr	r3, [r7, #24]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d103      	bne.n	8012c8e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012c86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c88:	f7f7 ff64 	bl	800ab54 <pbuf_free>
        goto memerr;
 8012c8c:	e08f      	b.n	8012dae <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012c8e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012c94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c96:	4413      	add	r3, r2
 8012c98:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012c9c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012ca0:	9201      	str	r2, [sp, #4]
 8012ca2:	9300      	str	r3, [sp, #0]
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	2241      	movs	r2, #65	; 0x41
 8012ca8:	2000      	movs	r0, #0
 8012caa:	f7f7 fd99 	bl	800a7e0 <pbuf_alloced_custom>
 8012cae:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d106      	bne.n	8012cc4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012cb6:	69b8      	ldr	r0, [r7, #24]
 8012cb8:	f7ff fef6 	bl	8012aa8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012cbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cbe:	f7f7 ff49 	bl	800ab54 <pbuf_free>
        goto memerr;
 8012cc2:	e074      	b.n	8012dae <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012cc4:	68f8      	ldr	r0, [r7, #12]
 8012cc6:	f7f7 ffeb 	bl	800aca0 <pbuf_ref>
      pcr->original = p;
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	68fa      	ldr	r2, [r7, #12]
 8012cce:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	4a3f      	ldr	r2, [pc, #252]	; (8012dd0 <ip4_frag+0x288>)
 8012cd4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012cd6:	6979      	ldr	r1, [r7, #20]
 8012cd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cda:	f7f8 f809 	bl	800acf0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012cde:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012ce2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012ce6:	1ad3      	subs	r3, r2, r3
 8012ce8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012cec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d004      	beq.n	8012cfe <ip4_frag+0x1b6>
        poff = 0;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012cfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d196      	bne.n	8012c34 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012d06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012d08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012d0c:	4413      	add	r3, r2
 8012d0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012d14:	f1a3 0213 	sub.w	r2, r3, #19
 8012d18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	bfcc      	ite	gt
 8012d20:	2301      	movgt	r3, #1
 8012d22:	2300      	movle	r3, #0
 8012d24:	b2db      	uxtb	r3, r3
 8012d26:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012d28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012d30:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012d32:	6a3b      	ldr	r3, [r7, #32]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d002      	beq.n	8012d3e <ip4_frag+0x1f6>
 8012d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d003      	beq.n	8012d46 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012d3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012d44:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012d46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7f6 fa59 	bl	8009200 <lwip_htons>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	461a      	mov	r2, r3
 8012d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d54:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012d56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012d58:	3314      	adds	r3, #20
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7f6 fa4f 	bl	8009200 <lwip_htons>
 8012d62:	4603      	mov	r3, r0
 8012d64:	461a      	mov	r2, r3
 8012d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d68:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	729a      	strb	r2, [r3, #10]
 8012d70:	2200      	movs	r2, #0
 8012d72:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	695b      	ldr	r3, [r3, #20]
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d7c:	68b8      	ldr	r0, [r7, #8]
 8012d7e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d82:	f7f7 fee7 	bl	800ab54 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012d86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012d8c:	1ad3      	subs	r3, r2, r3
 8012d8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012d92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012d96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012d98:	4413      	add	r3, r2
 8012d9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012d9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	f47f af19 	bne.w	8012bda <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012da8:	2300      	movs	r3, #0
 8012daa:	e002      	b.n	8012db2 <ip4_frag+0x26a>
      goto memerr;
 8012dac:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3748      	adds	r7, #72	; 0x48
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
 8012dba:	bf00      	nop
 8012dbc:	08016bd8 	.word	0x08016bd8
 8012dc0:	08016db4 	.word	0x08016db4
 8012dc4:	08016c20 	.word	0x08016c20
 8012dc8:	08016dd0 	.word	0x08016dd0
 8012dcc:	08016df0 	.word	0x08016df0
 8012dd0:	08012ae1 	.word	0x08012ae1

08012dd4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b086      	sub	sp, #24
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012dde:	230e      	movs	r3, #14
 8012de0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	895b      	ldrh	r3, [r3, #10]
 8012de6:	2b0e      	cmp	r3, #14
 8012de8:	d96e      	bls.n	8012ec8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	7bdb      	ldrb	r3, [r3, #15]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d106      	bne.n	8012e00 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012df8:	3301      	adds	r3, #1
 8012dfa:	b2da      	uxtb	r2, r3
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	685b      	ldr	r3, [r3, #4]
 8012e04:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	7b1a      	ldrb	r2, [r3, #12]
 8012e0a:	7b5b      	ldrb	r3, [r3, #13]
 8012e0c:	021b      	lsls	r3, r3, #8
 8012e0e:	4313      	orrs	r3, r2
 8012e10:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012e12:	693b      	ldr	r3, [r7, #16]
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	f003 0301 	and.w	r3, r3, #1
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d023      	beq.n	8012e66 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	2b01      	cmp	r3, #1
 8012e24:	d10f      	bne.n	8012e46 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	785b      	ldrb	r3, [r3, #1]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d11b      	bne.n	8012e66 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012e32:	2b5e      	cmp	r3, #94	; 0x5e
 8012e34:	d117      	bne.n	8012e66 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	7b5b      	ldrb	r3, [r3, #13]
 8012e3a:	f043 0310 	orr.w	r3, r3, #16
 8012e3e:	b2da      	uxtb	r2, r3
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	735a      	strb	r2, [r3, #13]
 8012e44:	e00f      	b.n	8012e66 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	2206      	movs	r2, #6
 8012e4a:	4928      	ldr	r1, [pc, #160]	; (8012eec <ethernet_input+0x118>)
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f000 faa6 	bl	801339e <memcmp>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d106      	bne.n	8012e66 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	7b5b      	ldrb	r3, [r3, #13]
 8012e5c:	f043 0308 	orr.w	r3, r3, #8
 8012e60:	b2da      	uxtb	r2, r3
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012e66:	89fb      	ldrh	r3, [r7, #14]
 8012e68:	2b08      	cmp	r3, #8
 8012e6a:	d003      	beq.n	8012e74 <ethernet_input+0xa0>
 8012e6c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012e70:	d014      	beq.n	8012e9c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012e72:	e032      	b.n	8012eda <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e7a:	f003 0308 	and.w	r3, r3, #8
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d024      	beq.n	8012ecc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012e82:	8afb      	ldrh	r3, [r7, #22]
 8012e84:	4619      	mov	r1, r3
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f7f7 fdde 	bl	800aa48 <pbuf_remove_header>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d11e      	bne.n	8012ed0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012e92:	6839      	ldr	r1, [r7, #0]
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f7fe ff21 	bl	8011cdc <ip4_input>
      break;
 8012e9a:	e013      	b.n	8012ec4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ea2:	f003 0308 	and.w	r3, r3, #8
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d014      	beq.n	8012ed4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012eaa:	8afb      	ldrh	r3, [r7, #22]
 8012eac:	4619      	mov	r1, r3
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f7f7 fdca 	bl	800aa48 <pbuf_remove_header>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d10e      	bne.n	8012ed8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012eba:	6839      	ldr	r1, [r7, #0]
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f7fe f89b 	bl	8010ff8 <etharp_input>
      break;
 8012ec2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	e00c      	b.n	8012ee2 <ethernet_input+0x10e>
    goto free_and_return;
 8012ec8:	bf00      	nop
 8012eca:	e006      	b.n	8012eda <ethernet_input+0x106>
        goto free_and_return;
 8012ecc:	bf00      	nop
 8012ece:	e004      	b.n	8012eda <ethernet_input+0x106>
        goto free_and_return;
 8012ed0:	bf00      	nop
 8012ed2:	e002      	b.n	8012eda <ethernet_input+0x106>
        goto free_and_return;
 8012ed4:	bf00      	nop
 8012ed6:	e000      	b.n	8012eda <ethernet_input+0x106>
        goto free_and_return;
 8012ed8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	f7f7 fe3a 	bl	800ab54 <pbuf_free>
  return ERR_OK;
 8012ee0:	2300      	movs	r3, #0
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	3718      	adds	r7, #24
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}
 8012eea:	bf00      	nop
 8012eec:	08016fe8 	.word	0x08016fe8

08012ef0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b086      	sub	sp, #24
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	60f8      	str	r0, [r7, #12]
 8012ef8:	60b9      	str	r1, [r7, #8]
 8012efa:	607a      	str	r2, [r7, #4]
 8012efc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012efe:	8c3b      	ldrh	r3, [r7, #32]
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7f6 f97d 	bl	8009200 <lwip_htons>
 8012f06:	4603      	mov	r3, r0
 8012f08:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012f0a:	210e      	movs	r1, #14
 8012f0c:	68b8      	ldr	r0, [r7, #8]
 8012f0e:	f7f7 fd8b 	bl	800aa28 <pbuf_add_header>
 8012f12:	4603      	mov	r3, r0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d125      	bne.n	8012f64 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	8afa      	ldrh	r2, [r7, #22]
 8012f22:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	2206      	movs	r2, #6
 8012f28:	6839      	ldr	r1, [r7, #0]
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f000 fa47 	bl	80133be <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	3306      	adds	r3, #6
 8012f34:	2206      	movs	r2, #6
 8012f36:	6879      	ldr	r1, [r7, #4]
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f000 fa40 	bl	80133be <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012f44:	2b06      	cmp	r3, #6
 8012f46:	d006      	beq.n	8012f56 <ethernet_output+0x66>
 8012f48:	4b0a      	ldr	r3, [pc, #40]	; (8012f74 <ethernet_output+0x84>)
 8012f4a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012f4e:	490a      	ldr	r1, [pc, #40]	; (8012f78 <ethernet_output+0x88>)
 8012f50:	480a      	ldr	r0, [pc, #40]	; (8012f7c <ethernet_output+0x8c>)
 8012f52:	f000 fadf 	bl	8013514 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	699b      	ldr	r3, [r3, #24]
 8012f5a:	68b9      	ldr	r1, [r7, #8]
 8012f5c:	68f8      	ldr	r0, [r7, #12]
 8012f5e:	4798      	blx	r3
 8012f60:	4603      	mov	r3, r0
 8012f62:	e002      	b.n	8012f6a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012f64:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012f66:	f06f 0301 	mvn.w	r3, #1
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3718      	adds	r7, #24
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}
 8012f72:	bf00      	nop
 8012f74:	08016e00 	.word	0x08016e00
 8012f78:	08016e38 	.word	0x08016e38
 8012f7c:	08016e6c 	.word	0x08016e6c

08012f80 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b082      	sub	sp, #8
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
 8012f88:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8012f8a:	683b      	ldr	r3, [r7, #0]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	2104      	movs	r1, #4
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7f2 fce9 	bl	8005968 <osMessageQueueNew>
 8012f96:	4602      	mov	r2, r0
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d102      	bne.n	8012faa <sys_mbox_new+0x2a>
    return ERR_MEM;
 8012fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8012fa8:	e000      	b.n	8012fac <sys_mbox_new+0x2c>

  return ERR_OK;
 8012faa:	2300      	movs	r3, #0
}
 8012fac:	4618      	mov	r0, r3
 8012fae:	3708      	adds	r7, #8
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b084      	sub	sp, #16
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	6818      	ldr	r0, [r3, #0]
 8012fc2:	4639      	mov	r1, r7
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	f7f2 fd42 	bl	8005a50 <osMessageQueuePut>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d102      	bne.n	8012fd8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	73fb      	strb	r3, [r7, #15]
 8012fd6:	e001      	b.n	8012fdc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8012fd8:	23ff      	movs	r3, #255	; 0xff
 8012fda:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3710      	adds	r7, #16
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}

08012fe8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b086      	sub	sp, #24
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	60f8      	str	r0, [r7, #12]
 8012ff0:	60b9      	str	r1, [r7, #8]
 8012ff2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8012ff4:	f7f2 f9c8 	bl	8005388 <osKernelGetTickCount>
 8012ff8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d013      	beq.n	8013028 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	6818      	ldr	r0, [r3, #0]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2200      	movs	r2, #0
 8013008:	68b9      	ldr	r1, [r7, #8]
 801300a:	f7f2 fd81 	bl	8005b10 <osMessageQueueGet>
 801300e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d105      	bne.n	8013022 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8013016:	f7f2 f9b7 	bl	8005388 <osKernelGetTickCount>
 801301a:	4602      	mov	r2, r0
 801301c:	697b      	ldr	r3, [r7, #20]
 801301e:	1ad3      	subs	r3, r2, r3
 8013020:	e00f      	b.n	8013042 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013022:	f04f 33ff 	mov.w	r3, #4294967295
 8013026:	e00c      	b.n	8013042 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	6818      	ldr	r0, [r3, #0]
 801302c:	f04f 33ff 	mov.w	r3, #4294967295
 8013030:	2200      	movs	r2, #0
 8013032:	68b9      	ldr	r1, [r7, #8]
 8013034:	f7f2 fd6c 	bl	8005b10 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8013038:	f7f2 f9a6 	bl	8005388 <osKernelGetTickCount>
 801303c:	4602      	mov	r2, r0
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8013042:	4618      	mov	r0, r3
 8013044:	3718      	adds	r7, #24
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}

0801304a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801304a:	b480      	push	{r7}
 801304c:	b083      	sub	sp, #12
 801304e:	af00      	add	r7, sp, #0
 8013050:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d101      	bne.n	801305e <sys_mbox_valid+0x14>
    return 0;
 801305a:	2300      	movs	r3, #0
 801305c:	e000      	b.n	8013060 <sys_mbox_valid+0x16>
  else
    return 1;
 801305e:	2301      	movs	r3, #1
}
 8013060:	4618      	mov	r0, r3
 8013062:	370c      	adds	r7, #12
 8013064:	46bd      	mov	sp, r7
 8013066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306a:	4770      	bx	lr

0801306c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8013070:	2000      	movs	r0, #0
 8013072:	f7f2 fa4c 	bl	800550e <osMutexNew>
 8013076:	4603      	mov	r3, r0
 8013078:	4a01      	ldr	r2, [pc, #4]	; (8013080 <sys_init+0x14>)
 801307a:	6013      	str	r3, [r2, #0]
#endif
}
 801307c:	bf00      	nop
 801307e:	bd80      	pop	{r7, pc}
 8013080:	2400a9c8 	.word	0x2400a9c8

08013084 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801308c:	2000      	movs	r0, #0
 801308e:	f7f2 fa3e 	bl	800550e <osMutexNew>
 8013092:	4602      	mov	r2, r0
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d102      	bne.n	80130a6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80130a0:	f04f 33ff 	mov.w	r3, #4294967295
 80130a4:	e000      	b.n	80130a8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80130a6:	2300      	movs	r3, #0
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	3708      	adds	r7, #8
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}

080130b0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	f04f 31ff 	mov.w	r1, #4294967295
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7f2 faaa 	bl	800561a <osMutexAcquire>
#endif
}
 80130c6:	bf00      	nop
 80130c8:	3708      	adds	r7, #8
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}

080130ce <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80130ce:	b580      	push	{r7, lr}
 80130d0:	b082      	sub	sp, #8
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	4618      	mov	r0, r3
 80130dc:	f7f2 fae8 	bl	80056b0 <osMutexRelease>
}
 80130e0:	bf00      	nop
 80130e2:	3708      	adds	r7, #8
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}

080130e8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b08e      	sub	sp, #56	; 0x38
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	60f8      	str	r0, [r7, #12]
 80130f0:	60b9      	str	r1, [r7, #8]
 80130f2:	607a      	str	r2, [r7, #4]
 80130f4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80130f6:	f107 0314 	add.w	r3, r7, #20
 80130fa:	2224      	movs	r2, #36	; 0x24
 80130fc:	2100      	movs	r1, #0
 80130fe:	4618      	mov	r0, r3
 8013100:	f000 f96b 	bl	80133da <memset>
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	617b      	str	r3, [r7, #20]
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	62bb      	str	r3, [r7, #40]	; 0x28
 801310c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801310e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8013110:	f107 0314 	add.w	r3, r7, #20
 8013114:	461a      	mov	r2, r3
 8013116:	6879      	ldr	r1, [r7, #4]
 8013118:	68b8      	ldr	r0, [r7, #8]
 801311a:	f7f2 f94a 	bl	80053b2 <osThreadNew>
 801311e:	4603      	mov	r3, r0
#endif
}
 8013120:	4618      	mov	r0, r3
 8013122:	3738      	adds	r7, #56	; 0x38
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801312c:	4b04      	ldr	r3, [pc, #16]	; (8013140 <sys_arch_protect+0x18>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	f04f 31ff 	mov.w	r1, #4294967295
 8013134:	4618      	mov	r0, r3
 8013136:	f7f2 fa70 	bl	800561a <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801313a:	2301      	movs	r3, #1
}
 801313c:	4618      	mov	r0, r3
 801313e:	bd80      	pop	{r7, pc}
 8013140:	2400a9c8 	.word	0x2400a9c8

08013144 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b082      	sub	sp, #8
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801314c:	4b04      	ldr	r3, [pc, #16]	; (8013160 <sys_arch_unprotect+0x1c>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	4618      	mov	r0, r3
 8013152:	f7f2 faad 	bl	80056b0 <osMutexRelease>
}
 8013156:	bf00      	nop
 8013158:	3708      	adds	r7, #8
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}
 801315e:	bf00      	nop
 8013160:	2400a9c8 	.word	0x2400a9c8

08013164 <std>:
 8013164:	2300      	movs	r3, #0
 8013166:	b510      	push	{r4, lr}
 8013168:	4604      	mov	r4, r0
 801316a:	e9c0 3300 	strd	r3, r3, [r0]
 801316e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013172:	6083      	str	r3, [r0, #8]
 8013174:	8181      	strh	r1, [r0, #12]
 8013176:	6643      	str	r3, [r0, #100]	; 0x64
 8013178:	81c2      	strh	r2, [r0, #14]
 801317a:	6183      	str	r3, [r0, #24]
 801317c:	4619      	mov	r1, r3
 801317e:	2208      	movs	r2, #8
 8013180:	305c      	adds	r0, #92	; 0x5c
 8013182:	f000 f92a 	bl	80133da <memset>
 8013186:	4b05      	ldr	r3, [pc, #20]	; (801319c <std+0x38>)
 8013188:	6263      	str	r3, [r4, #36]	; 0x24
 801318a:	4b05      	ldr	r3, [pc, #20]	; (80131a0 <std+0x3c>)
 801318c:	62a3      	str	r3, [r4, #40]	; 0x28
 801318e:	4b05      	ldr	r3, [pc, #20]	; (80131a4 <std+0x40>)
 8013190:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013192:	4b05      	ldr	r3, [pc, #20]	; (80131a8 <std+0x44>)
 8013194:	6224      	str	r4, [r4, #32]
 8013196:	6323      	str	r3, [r4, #48]	; 0x30
 8013198:	bd10      	pop	{r4, pc}
 801319a:	bf00      	nop
 801319c:	080136b5 	.word	0x080136b5
 80131a0:	080136d7 	.word	0x080136d7
 80131a4:	0801370f 	.word	0x0801370f
 80131a8:	08013733 	.word	0x08013733

080131ac <_cleanup_r>:
 80131ac:	4901      	ldr	r1, [pc, #4]	; (80131b4 <_cleanup_r+0x8>)
 80131ae:	f000 b8af 	b.w	8013310 <_fwalk_reent>
 80131b2:	bf00      	nop
 80131b4:	080138c9 	.word	0x080138c9

080131b8 <__sfmoreglue>:
 80131b8:	b570      	push	{r4, r5, r6, lr}
 80131ba:	2268      	movs	r2, #104	; 0x68
 80131bc:	1e4d      	subs	r5, r1, #1
 80131be:	4355      	muls	r5, r2
 80131c0:	460e      	mov	r6, r1
 80131c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80131c6:	f000 f931 	bl	801342c <_malloc_r>
 80131ca:	4604      	mov	r4, r0
 80131cc:	b140      	cbz	r0, 80131e0 <__sfmoreglue+0x28>
 80131ce:	2100      	movs	r1, #0
 80131d0:	e9c0 1600 	strd	r1, r6, [r0]
 80131d4:	300c      	adds	r0, #12
 80131d6:	60a0      	str	r0, [r4, #8]
 80131d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80131dc:	f000 f8fd 	bl	80133da <memset>
 80131e0:	4620      	mov	r0, r4
 80131e2:	bd70      	pop	{r4, r5, r6, pc}

080131e4 <__sfp_lock_acquire>:
 80131e4:	4801      	ldr	r0, [pc, #4]	; (80131ec <__sfp_lock_acquire+0x8>)
 80131e6:	f000 b8d8 	b.w	801339a <__retarget_lock_acquire_recursive>
 80131ea:	bf00      	nop
 80131ec:	24005e27 	.word	0x24005e27

080131f0 <__sfp_lock_release>:
 80131f0:	4801      	ldr	r0, [pc, #4]	; (80131f8 <__sfp_lock_release+0x8>)
 80131f2:	f000 b8d3 	b.w	801339c <__retarget_lock_release_recursive>
 80131f6:	bf00      	nop
 80131f8:	24005e27 	.word	0x24005e27

080131fc <__sinit_lock_acquire>:
 80131fc:	4801      	ldr	r0, [pc, #4]	; (8013204 <__sinit_lock_acquire+0x8>)
 80131fe:	f000 b8cc 	b.w	801339a <__retarget_lock_acquire_recursive>
 8013202:	bf00      	nop
 8013204:	24005e28 	.word	0x24005e28

08013208 <__sinit_lock_release>:
 8013208:	4801      	ldr	r0, [pc, #4]	; (8013210 <__sinit_lock_release+0x8>)
 801320a:	f000 b8c7 	b.w	801339c <__retarget_lock_release_recursive>
 801320e:	bf00      	nop
 8013210:	24005e28 	.word	0x24005e28

08013214 <__sinit>:
 8013214:	b510      	push	{r4, lr}
 8013216:	4604      	mov	r4, r0
 8013218:	f7ff fff0 	bl	80131fc <__sinit_lock_acquire>
 801321c:	69a3      	ldr	r3, [r4, #24]
 801321e:	b11b      	cbz	r3, 8013228 <__sinit+0x14>
 8013220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013224:	f7ff bff0 	b.w	8013208 <__sinit_lock_release>
 8013228:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801322c:	6523      	str	r3, [r4, #80]	; 0x50
 801322e:	4b13      	ldr	r3, [pc, #76]	; (801327c <__sinit+0x68>)
 8013230:	4a13      	ldr	r2, [pc, #76]	; (8013280 <__sinit+0x6c>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	62a2      	str	r2, [r4, #40]	; 0x28
 8013236:	42a3      	cmp	r3, r4
 8013238:	bf04      	itt	eq
 801323a:	2301      	moveq	r3, #1
 801323c:	61a3      	streq	r3, [r4, #24]
 801323e:	4620      	mov	r0, r4
 8013240:	f000 f820 	bl	8013284 <__sfp>
 8013244:	6060      	str	r0, [r4, #4]
 8013246:	4620      	mov	r0, r4
 8013248:	f000 f81c 	bl	8013284 <__sfp>
 801324c:	60a0      	str	r0, [r4, #8]
 801324e:	4620      	mov	r0, r4
 8013250:	f000 f818 	bl	8013284 <__sfp>
 8013254:	2200      	movs	r2, #0
 8013256:	60e0      	str	r0, [r4, #12]
 8013258:	2104      	movs	r1, #4
 801325a:	6860      	ldr	r0, [r4, #4]
 801325c:	f7ff ff82 	bl	8013164 <std>
 8013260:	68a0      	ldr	r0, [r4, #8]
 8013262:	2201      	movs	r2, #1
 8013264:	2109      	movs	r1, #9
 8013266:	f7ff ff7d 	bl	8013164 <std>
 801326a:	68e0      	ldr	r0, [r4, #12]
 801326c:	2202      	movs	r2, #2
 801326e:	2112      	movs	r1, #18
 8013270:	f7ff ff78 	bl	8013164 <std>
 8013274:	2301      	movs	r3, #1
 8013276:	61a3      	str	r3, [r4, #24]
 8013278:	e7d2      	b.n	8013220 <__sinit+0xc>
 801327a:	bf00      	nop
 801327c:	08017058 	.word	0x08017058
 8013280:	080131ad 	.word	0x080131ad

08013284 <__sfp>:
 8013284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013286:	4607      	mov	r7, r0
 8013288:	f7ff ffac 	bl	80131e4 <__sfp_lock_acquire>
 801328c:	4b1e      	ldr	r3, [pc, #120]	; (8013308 <__sfp+0x84>)
 801328e:	681e      	ldr	r6, [r3, #0]
 8013290:	69b3      	ldr	r3, [r6, #24]
 8013292:	b913      	cbnz	r3, 801329a <__sfp+0x16>
 8013294:	4630      	mov	r0, r6
 8013296:	f7ff ffbd 	bl	8013214 <__sinit>
 801329a:	3648      	adds	r6, #72	; 0x48
 801329c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80132a0:	3b01      	subs	r3, #1
 80132a2:	d503      	bpl.n	80132ac <__sfp+0x28>
 80132a4:	6833      	ldr	r3, [r6, #0]
 80132a6:	b30b      	cbz	r3, 80132ec <__sfp+0x68>
 80132a8:	6836      	ldr	r6, [r6, #0]
 80132aa:	e7f7      	b.n	801329c <__sfp+0x18>
 80132ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80132b0:	b9d5      	cbnz	r5, 80132e8 <__sfp+0x64>
 80132b2:	4b16      	ldr	r3, [pc, #88]	; (801330c <__sfp+0x88>)
 80132b4:	60e3      	str	r3, [r4, #12]
 80132b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80132ba:	6665      	str	r5, [r4, #100]	; 0x64
 80132bc:	f000 f86c 	bl	8013398 <__retarget_lock_init_recursive>
 80132c0:	f7ff ff96 	bl	80131f0 <__sfp_lock_release>
 80132c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80132c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80132cc:	6025      	str	r5, [r4, #0]
 80132ce:	61a5      	str	r5, [r4, #24]
 80132d0:	2208      	movs	r2, #8
 80132d2:	4629      	mov	r1, r5
 80132d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80132d8:	f000 f87f 	bl	80133da <memset>
 80132dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80132e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80132e4:	4620      	mov	r0, r4
 80132e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132e8:	3468      	adds	r4, #104	; 0x68
 80132ea:	e7d9      	b.n	80132a0 <__sfp+0x1c>
 80132ec:	2104      	movs	r1, #4
 80132ee:	4638      	mov	r0, r7
 80132f0:	f7ff ff62 	bl	80131b8 <__sfmoreglue>
 80132f4:	4604      	mov	r4, r0
 80132f6:	6030      	str	r0, [r6, #0]
 80132f8:	2800      	cmp	r0, #0
 80132fa:	d1d5      	bne.n	80132a8 <__sfp+0x24>
 80132fc:	f7ff ff78 	bl	80131f0 <__sfp_lock_release>
 8013300:	230c      	movs	r3, #12
 8013302:	603b      	str	r3, [r7, #0]
 8013304:	e7ee      	b.n	80132e4 <__sfp+0x60>
 8013306:	bf00      	nop
 8013308:	08017058 	.word	0x08017058
 801330c:	ffff0001 	.word	0xffff0001

08013310 <_fwalk_reent>:
 8013310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013314:	4606      	mov	r6, r0
 8013316:	4688      	mov	r8, r1
 8013318:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801331c:	2700      	movs	r7, #0
 801331e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013322:	f1b9 0901 	subs.w	r9, r9, #1
 8013326:	d505      	bpl.n	8013334 <_fwalk_reent+0x24>
 8013328:	6824      	ldr	r4, [r4, #0]
 801332a:	2c00      	cmp	r4, #0
 801332c:	d1f7      	bne.n	801331e <_fwalk_reent+0xe>
 801332e:	4638      	mov	r0, r7
 8013330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013334:	89ab      	ldrh	r3, [r5, #12]
 8013336:	2b01      	cmp	r3, #1
 8013338:	d907      	bls.n	801334a <_fwalk_reent+0x3a>
 801333a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801333e:	3301      	adds	r3, #1
 8013340:	d003      	beq.n	801334a <_fwalk_reent+0x3a>
 8013342:	4629      	mov	r1, r5
 8013344:	4630      	mov	r0, r6
 8013346:	47c0      	blx	r8
 8013348:	4307      	orrs	r7, r0
 801334a:	3568      	adds	r5, #104	; 0x68
 801334c:	e7e9      	b.n	8013322 <_fwalk_reent+0x12>
	...

08013350 <__libc_init_array>:
 8013350:	b570      	push	{r4, r5, r6, lr}
 8013352:	4d0d      	ldr	r5, [pc, #52]	; (8013388 <__libc_init_array+0x38>)
 8013354:	4c0d      	ldr	r4, [pc, #52]	; (801338c <__libc_init_array+0x3c>)
 8013356:	1b64      	subs	r4, r4, r5
 8013358:	10a4      	asrs	r4, r4, #2
 801335a:	2600      	movs	r6, #0
 801335c:	42a6      	cmp	r6, r4
 801335e:	d109      	bne.n	8013374 <__libc_init_array+0x24>
 8013360:	4d0b      	ldr	r5, [pc, #44]	; (8013390 <__libc_init_array+0x40>)
 8013362:	4c0c      	ldr	r4, [pc, #48]	; (8013394 <__libc_init_array+0x44>)
 8013364:	f001 f802 	bl	801436c <_init>
 8013368:	1b64      	subs	r4, r4, r5
 801336a:	10a4      	asrs	r4, r4, #2
 801336c:	2600      	movs	r6, #0
 801336e:	42a6      	cmp	r6, r4
 8013370:	d105      	bne.n	801337e <__libc_init_array+0x2e>
 8013372:	bd70      	pop	{r4, r5, r6, pc}
 8013374:	f855 3b04 	ldr.w	r3, [r5], #4
 8013378:	4798      	blx	r3
 801337a:	3601      	adds	r6, #1
 801337c:	e7ee      	b.n	801335c <__libc_init_array+0xc>
 801337e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013382:	4798      	blx	r3
 8013384:	3601      	adds	r6, #1
 8013386:	e7f2      	b.n	801336e <__libc_init_array+0x1e>
 8013388:	08017140 	.word	0x08017140
 801338c:	08017140 	.word	0x08017140
 8013390:	08017140 	.word	0x08017140
 8013394:	08017144 	.word	0x08017144

08013398 <__retarget_lock_init_recursive>:
 8013398:	4770      	bx	lr

0801339a <__retarget_lock_acquire_recursive>:
 801339a:	4770      	bx	lr

0801339c <__retarget_lock_release_recursive>:
 801339c:	4770      	bx	lr

0801339e <memcmp>:
 801339e:	b510      	push	{r4, lr}
 80133a0:	3901      	subs	r1, #1
 80133a2:	4402      	add	r2, r0
 80133a4:	4290      	cmp	r0, r2
 80133a6:	d101      	bne.n	80133ac <memcmp+0xe>
 80133a8:	2000      	movs	r0, #0
 80133aa:	e005      	b.n	80133b8 <memcmp+0x1a>
 80133ac:	7803      	ldrb	r3, [r0, #0]
 80133ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80133b2:	42a3      	cmp	r3, r4
 80133b4:	d001      	beq.n	80133ba <memcmp+0x1c>
 80133b6:	1b18      	subs	r0, r3, r4
 80133b8:	bd10      	pop	{r4, pc}
 80133ba:	3001      	adds	r0, #1
 80133bc:	e7f2      	b.n	80133a4 <memcmp+0x6>

080133be <memcpy>:
 80133be:	440a      	add	r2, r1
 80133c0:	4291      	cmp	r1, r2
 80133c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80133c6:	d100      	bne.n	80133ca <memcpy+0xc>
 80133c8:	4770      	bx	lr
 80133ca:	b510      	push	{r4, lr}
 80133cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80133d4:	4291      	cmp	r1, r2
 80133d6:	d1f9      	bne.n	80133cc <memcpy+0xe>
 80133d8:	bd10      	pop	{r4, pc}

080133da <memset>:
 80133da:	4402      	add	r2, r0
 80133dc:	4603      	mov	r3, r0
 80133de:	4293      	cmp	r3, r2
 80133e0:	d100      	bne.n	80133e4 <memset+0xa>
 80133e2:	4770      	bx	lr
 80133e4:	f803 1b01 	strb.w	r1, [r3], #1
 80133e8:	e7f9      	b.n	80133de <memset+0x4>
	...

080133ec <sbrk_aligned>:
 80133ec:	b570      	push	{r4, r5, r6, lr}
 80133ee:	4e0e      	ldr	r6, [pc, #56]	; (8013428 <sbrk_aligned+0x3c>)
 80133f0:	460c      	mov	r4, r1
 80133f2:	6831      	ldr	r1, [r6, #0]
 80133f4:	4605      	mov	r5, r0
 80133f6:	b911      	cbnz	r1, 80133fe <sbrk_aligned+0x12>
 80133f8:	f000 f94c 	bl	8013694 <_sbrk_r>
 80133fc:	6030      	str	r0, [r6, #0]
 80133fe:	4621      	mov	r1, r4
 8013400:	4628      	mov	r0, r5
 8013402:	f000 f947 	bl	8013694 <_sbrk_r>
 8013406:	1c43      	adds	r3, r0, #1
 8013408:	d00a      	beq.n	8013420 <sbrk_aligned+0x34>
 801340a:	1cc4      	adds	r4, r0, #3
 801340c:	f024 0403 	bic.w	r4, r4, #3
 8013410:	42a0      	cmp	r0, r4
 8013412:	d007      	beq.n	8013424 <sbrk_aligned+0x38>
 8013414:	1a21      	subs	r1, r4, r0
 8013416:	4628      	mov	r0, r5
 8013418:	f000 f93c 	bl	8013694 <_sbrk_r>
 801341c:	3001      	adds	r0, #1
 801341e:	d101      	bne.n	8013424 <sbrk_aligned+0x38>
 8013420:	f04f 34ff 	mov.w	r4, #4294967295
 8013424:	4620      	mov	r0, r4
 8013426:	bd70      	pop	{r4, r5, r6, pc}
 8013428:	24005e30 	.word	0x24005e30

0801342c <_malloc_r>:
 801342c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013430:	1ccd      	adds	r5, r1, #3
 8013432:	f025 0503 	bic.w	r5, r5, #3
 8013436:	3508      	adds	r5, #8
 8013438:	2d0c      	cmp	r5, #12
 801343a:	bf38      	it	cc
 801343c:	250c      	movcc	r5, #12
 801343e:	2d00      	cmp	r5, #0
 8013440:	4607      	mov	r7, r0
 8013442:	db01      	blt.n	8013448 <_malloc_r+0x1c>
 8013444:	42a9      	cmp	r1, r5
 8013446:	d905      	bls.n	8013454 <_malloc_r+0x28>
 8013448:	230c      	movs	r3, #12
 801344a:	603b      	str	r3, [r7, #0]
 801344c:	2600      	movs	r6, #0
 801344e:	4630      	mov	r0, r6
 8013450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013454:	4e2e      	ldr	r6, [pc, #184]	; (8013510 <_malloc_r+0xe4>)
 8013456:	f000 fa9f 	bl	8013998 <__malloc_lock>
 801345a:	6833      	ldr	r3, [r6, #0]
 801345c:	461c      	mov	r4, r3
 801345e:	bb34      	cbnz	r4, 80134ae <_malloc_r+0x82>
 8013460:	4629      	mov	r1, r5
 8013462:	4638      	mov	r0, r7
 8013464:	f7ff ffc2 	bl	80133ec <sbrk_aligned>
 8013468:	1c43      	adds	r3, r0, #1
 801346a:	4604      	mov	r4, r0
 801346c:	d14d      	bne.n	801350a <_malloc_r+0xde>
 801346e:	6834      	ldr	r4, [r6, #0]
 8013470:	4626      	mov	r6, r4
 8013472:	2e00      	cmp	r6, #0
 8013474:	d140      	bne.n	80134f8 <_malloc_r+0xcc>
 8013476:	6823      	ldr	r3, [r4, #0]
 8013478:	4631      	mov	r1, r6
 801347a:	4638      	mov	r0, r7
 801347c:	eb04 0803 	add.w	r8, r4, r3
 8013480:	f000 f908 	bl	8013694 <_sbrk_r>
 8013484:	4580      	cmp	r8, r0
 8013486:	d13a      	bne.n	80134fe <_malloc_r+0xd2>
 8013488:	6821      	ldr	r1, [r4, #0]
 801348a:	3503      	adds	r5, #3
 801348c:	1a6d      	subs	r5, r5, r1
 801348e:	f025 0503 	bic.w	r5, r5, #3
 8013492:	3508      	adds	r5, #8
 8013494:	2d0c      	cmp	r5, #12
 8013496:	bf38      	it	cc
 8013498:	250c      	movcc	r5, #12
 801349a:	4629      	mov	r1, r5
 801349c:	4638      	mov	r0, r7
 801349e:	f7ff ffa5 	bl	80133ec <sbrk_aligned>
 80134a2:	3001      	adds	r0, #1
 80134a4:	d02b      	beq.n	80134fe <_malloc_r+0xd2>
 80134a6:	6823      	ldr	r3, [r4, #0]
 80134a8:	442b      	add	r3, r5
 80134aa:	6023      	str	r3, [r4, #0]
 80134ac:	e00e      	b.n	80134cc <_malloc_r+0xa0>
 80134ae:	6822      	ldr	r2, [r4, #0]
 80134b0:	1b52      	subs	r2, r2, r5
 80134b2:	d41e      	bmi.n	80134f2 <_malloc_r+0xc6>
 80134b4:	2a0b      	cmp	r2, #11
 80134b6:	d916      	bls.n	80134e6 <_malloc_r+0xba>
 80134b8:	1961      	adds	r1, r4, r5
 80134ba:	42a3      	cmp	r3, r4
 80134bc:	6025      	str	r5, [r4, #0]
 80134be:	bf18      	it	ne
 80134c0:	6059      	strne	r1, [r3, #4]
 80134c2:	6863      	ldr	r3, [r4, #4]
 80134c4:	bf08      	it	eq
 80134c6:	6031      	streq	r1, [r6, #0]
 80134c8:	5162      	str	r2, [r4, r5]
 80134ca:	604b      	str	r3, [r1, #4]
 80134cc:	4638      	mov	r0, r7
 80134ce:	f104 060b 	add.w	r6, r4, #11
 80134d2:	f000 fa67 	bl	80139a4 <__malloc_unlock>
 80134d6:	f026 0607 	bic.w	r6, r6, #7
 80134da:	1d23      	adds	r3, r4, #4
 80134dc:	1af2      	subs	r2, r6, r3
 80134de:	d0b6      	beq.n	801344e <_malloc_r+0x22>
 80134e0:	1b9b      	subs	r3, r3, r6
 80134e2:	50a3      	str	r3, [r4, r2]
 80134e4:	e7b3      	b.n	801344e <_malloc_r+0x22>
 80134e6:	6862      	ldr	r2, [r4, #4]
 80134e8:	42a3      	cmp	r3, r4
 80134ea:	bf0c      	ite	eq
 80134ec:	6032      	streq	r2, [r6, #0]
 80134ee:	605a      	strne	r2, [r3, #4]
 80134f0:	e7ec      	b.n	80134cc <_malloc_r+0xa0>
 80134f2:	4623      	mov	r3, r4
 80134f4:	6864      	ldr	r4, [r4, #4]
 80134f6:	e7b2      	b.n	801345e <_malloc_r+0x32>
 80134f8:	4634      	mov	r4, r6
 80134fa:	6876      	ldr	r6, [r6, #4]
 80134fc:	e7b9      	b.n	8013472 <_malloc_r+0x46>
 80134fe:	230c      	movs	r3, #12
 8013500:	603b      	str	r3, [r7, #0]
 8013502:	4638      	mov	r0, r7
 8013504:	f000 fa4e 	bl	80139a4 <__malloc_unlock>
 8013508:	e7a1      	b.n	801344e <_malloc_r+0x22>
 801350a:	6025      	str	r5, [r4, #0]
 801350c:	e7de      	b.n	80134cc <_malloc_r+0xa0>
 801350e:	bf00      	nop
 8013510:	24005e2c 	.word	0x24005e2c

08013514 <iprintf>:
 8013514:	b40f      	push	{r0, r1, r2, r3}
 8013516:	4b0a      	ldr	r3, [pc, #40]	; (8013540 <iprintf+0x2c>)
 8013518:	b513      	push	{r0, r1, r4, lr}
 801351a:	681c      	ldr	r4, [r3, #0]
 801351c:	b124      	cbz	r4, 8013528 <iprintf+0x14>
 801351e:	69a3      	ldr	r3, [r4, #24]
 8013520:	b913      	cbnz	r3, 8013528 <iprintf+0x14>
 8013522:	4620      	mov	r0, r4
 8013524:	f7ff fe76 	bl	8013214 <__sinit>
 8013528:	ab05      	add	r3, sp, #20
 801352a:	9a04      	ldr	r2, [sp, #16]
 801352c:	68a1      	ldr	r1, [r4, #8]
 801352e:	9301      	str	r3, [sp, #4]
 8013530:	4620      	mov	r0, r4
 8013532:	f000 fab3 	bl	8013a9c <_vfiprintf_r>
 8013536:	b002      	add	sp, #8
 8013538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801353c:	b004      	add	sp, #16
 801353e:	4770      	bx	lr
 8013540:	24000034 	.word	0x24000034

08013544 <rand>:
 8013544:	4b16      	ldr	r3, [pc, #88]	; (80135a0 <rand+0x5c>)
 8013546:	b510      	push	{r4, lr}
 8013548:	681c      	ldr	r4, [r3, #0]
 801354a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801354c:	b9b3      	cbnz	r3, 801357c <rand+0x38>
 801354e:	2018      	movs	r0, #24
 8013550:	f000 fa1a 	bl	8013988 <malloc>
 8013554:	63a0      	str	r0, [r4, #56]	; 0x38
 8013556:	b928      	cbnz	r0, 8013564 <rand+0x20>
 8013558:	4602      	mov	r2, r0
 801355a:	4b12      	ldr	r3, [pc, #72]	; (80135a4 <rand+0x60>)
 801355c:	4812      	ldr	r0, [pc, #72]	; (80135a8 <rand+0x64>)
 801355e:	214e      	movs	r1, #78	; 0x4e
 8013560:	f000 f8fe 	bl	8013760 <__assert_func>
 8013564:	4a11      	ldr	r2, [pc, #68]	; (80135ac <rand+0x68>)
 8013566:	4b12      	ldr	r3, [pc, #72]	; (80135b0 <rand+0x6c>)
 8013568:	e9c0 2300 	strd	r2, r3, [r0]
 801356c:	4b11      	ldr	r3, [pc, #68]	; (80135b4 <rand+0x70>)
 801356e:	6083      	str	r3, [r0, #8]
 8013570:	230b      	movs	r3, #11
 8013572:	8183      	strh	r3, [r0, #12]
 8013574:	2201      	movs	r2, #1
 8013576:	2300      	movs	r3, #0
 8013578:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801357c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801357e:	4a0e      	ldr	r2, [pc, #56]	; (80135b8 <rand+0x74>)
 8013580:	6920      	ldr	r0, [r4, #16]
 8013582:	6963      	ldr	r3, [r4, #20]
 8013584:	490d      	ldr	r1, [pc, #52]	; (80135bc <rand+0x78>)
 8013586:	4342      	muls	r2, r0
 8013588:	fb01 2203 	mla	r2, r1, r3, r2
 801358c:	fba0 0101 	umull	r0, r1, r0, r1
 8013590:	1c43      	adds	r3, r0, #1
 8013592:	eb42 0001 	adc.w	r0, r2, r1
 8013596:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801359a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801359e:	bd10      	pop	{r4, pc}
 80135a0:	24000034 	.word	0x24000034
 80135a4:	0801705c 	.word	0x0801705c
 80135a8:	08017073 	.word	0x08017073
 80135ac:	abcd330e 	.word	0xabcd330e
 80135b0:	e66d1234 	.word	0xe66d1234
 80135b4:	0005deec 	.word	0x0005deec
 80135b8:	5851f42d 	.word	0x5851f42d
 80135bc:	4c957f2d 	.word	0x4c957f2d

080135c0 <cleanup_glue>:
 80135c0:	b538      	push	{r3, r4, r5, lr}
 80135c2:	460c      	mov	r4, r1
 80135c4:	6809      	ldr	r1, [r1, #0]
 80135c6:	4605      	mov	r5, r0
 80135c8:	b109      	cbz	r1, 80135ce <cleanup_glue+0xe>
 80135ca:	f7ff fff9 	bl	80135c0 <cleanup_glue>
 80135ce:	4621      	mov	r1, r4
 80135d0:	4628      	mov	r0, r5
 80135d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135d6:	f000 b9eb 	b.w	80139b0 <_free_r>
	...

080135dc <_reclaim_reent>:
 80135dc:	4b2c      	ldr	r3, [pc, #176]	; (8013690 <_reclaim_reent+0xb4>)
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	4283      	cmp	r3, r0
 80135e2:	b570      	push	{r4, r5, r6, lr}
 80135e4:	4604      	mov	r4, r0
 80135e6:	d051      	beq.n	801368c <_reclaim_reent+0xb0>
 80135e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80135ea:	b143      	cbz	r3, 80135fe <_reclaim_reent+0x22>
 80135ec:	68db      	ldr	r3, [r3, #12]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d14a      	bne.n	8013688 <_reclaim_reent+0xac>
 80135f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135f4:	6819      	ldr	r1, [r3, #0]
 80135f6:	b111      	cbz	r1, 80135fe <_reclaim_reent+0x22>
 80135f8:	4620      	mov	r0, r4
 80135fa:	f000 f9d9 	bl	80139b0 <_free_r>
 80135fe:	6961      	ldr	r1, [r4, #20]
 8013600:	b111      	cbz	r1, 8013608 <_reclaim_reent+0x2c>
 8013602:	4620      	mov	r0, r4
 8013604:	f000 f9d4 	bl	80139b0 <_free_r>
 8013608:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801360a:	b111      	cbz	r1, 8013612 <_reclaim_reent+0x36>
 801360c:	4620      	mov	r0, r4
 801360e:	f000 f9cf 	bl	80139b0 <_free_r>
 8013612:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013614:	b111      	cbz	r1, 801361c <_reclaim_reent+0x40>
 8013616:	4620      	mov	r0, r4
 8013618:	f000 f9ca 	bl	80139b0 <_free_r>
 801361c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801361e:	b111      	cbz	r1, 8013626 <_reclaim_reent+0x4a>
 8013620:	4620      	mov	r0, r4
 8013622:	f000 f9c5 	bl	80139b0 <_free_r>
 8013626:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013628:	b111      	cbz	r1, 8013630 <_reclaim_reent+0x54>
 801362a:	4620      	mov	r0, r4
 801362c:	f000 f9c0 	bl	80139b0 <_free_r>
 8013630:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013632:	b111      	cbz	r1, 801363a <_reclaim_reent+0x5e>
 8013634:	4620      	mov	r0, r4
 8013636:	f000 f9bb 	bl	80139b0 <_free_r>
 801363a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801363c:	b111      	cbz	r1, 8013644 <_reclaim_reent+0x68>
 801363e:	4620      	mov	r0, r4
 8013640:	f000 f9b6 	bl	80139b0 <_free_r>
 8013644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013646:	b111      	cbz	r1, 801364e <_reclaim_reent+0x72>
 8013648:	4620      	mov	r0, r4
 801364a:	f000 f9b1 	bl	80139b0 <_free_r>
 801364e:	69a3      	ldr	r3, [r4, #24]
 8013650:	b1e3      	cbz	r3, 801368c <_reclaim_reent+0xb0>
 8013652:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013654:	4620      	mov	r0, r4
 8013656:	4798      	blx	r3
 8013658:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801365a:	b1b9      	cbz	r1, 801368c <_reclaim_reent+0xb0>
 801365c:	4620      	mov	r0, r4
 801365e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013662:	f7ff bfad 	b.w	80135c0 <cleanup_glue>
 8013666:	5949      	ldr	r1, [r1, r5]
 8013668:	b941      	cbnz	r1, 801367c <_reclaim_reent+0xa0>
 801366a:	3504      	adds	r5, #4
 801366c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801366e:	2d80      	cmp	r5, #128	; 0x80
 8013670:	68d9      	ldr	r1, [r3, #12]
 8013672:	d1f8      	bne.n	8013666 <_reclaim_reent+0x8a>
 8013674:	4620      	mov	r0, r4
 8013676:	f000 f99b 	bl	80139b0 <_free_r>
 801367a:	e7ba      	b.n	80135f2 <_reclaim_reent+0x16>
 801367c:	680e      	ldr	r6, [r1, #0]
 801367e:	4620      	mov	r0, r4
 8013680:	f000 f996 	bl	80139b0 <_free_r>
 8013684:	4631      	mov	r1, r6
 8013686:	e7ef      	b.n	8013668 <_reclaim_reent+0x8c>
 8013688:	2500      	movs	r5, #0
 801368a:	e7ef      	b.n	801366c <_reclaim_reent+0x90>
 801368c:	bd70      	pop	{r4, r5, r6, pc}
 801368e:	bf00      	nop
 8013690:	24000034 	.word	0x24000034

08013694 <_sbrk_r>:
 8013694:	b538      	push	{r3, r4, r5, lr}
 8013696:	4d06      	ldr	r5, [pc, #24]	; (80136b0 <_sbrk_r+0x1c>)
 8013698:	2300      	movs	r3, #0
 801369a:	4604      	mov	r4, r0
 801369c:	4608      	mov	r0, r1
 801369e:	602b      	str	r3, [r5, #0]
 80136a0:	f7ed fb76 	bl	8000d90 <_sbrk>
 80136a4:	1c43      	adds	r3, r0, #1
 80136a6:	d102      	bne.n	80136ae <_sbrk_r+0x1a>
 80136a8:	682b      	ldr	r3, [r5, #0]
 80136aa:	b103      	cbz	r3, 80136ae <_sbrk_r+0x1a>
 80136ac:	6023      	str	r3, [r4, #0]
 80136ae:	bd38      	pop	{r3, r4, r5, pc}
 80136b0:	24005e34 	.word	0x24005e34

080136b4 <__sread>:
 80136b4:	b510      	push	{r4, lr}
 80136b6:	460c      	mov	r4, r1
 80136b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136bc:	f000 fcb2 	bl	8014024 <_read_r>
 80136c0:	2800      	cmp	r0, #0
 80136c2:	bfab      	itete	ge
 80136c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80136c6:	89a3      	ldrhlt	r3, [r4, #12]
 80136c8:	181b      	addge	r3, r3, r0
 80136ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80136ce:	bfac      	ite	ge
 80136d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80136d2:	81a3      	strhlt	r3, [r4, #12]
 80136d4:	bd10      	pop	{r4, pc}

080136d6 <__swrite>:
 80136d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136da:	461f      	mov	r7, r3
 80136dc:	898b      	ldrh	r3, [r1, #12]
 80136de:	05db      	lsls	r3, r3, #23
 80136e0:	4605      	mov	r5, r0
 80136e2:	460c      	mov	r4, r1
 80136e4:	4616      	mov	r6, r2
 80136e6:	d505      	bpl.n	80136f4 <__swrite+0x1e>
 80136e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136ec:	2302      	movs	r3, #2
 80136ee:	2200      	movs	r2, #0
 80136f0:	f000 f938 	bl	8013964 <_lseek_r>
 80136f4:	89a3      	ldrh	r3, [r4, #12]
 80136f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80136fe:	81a3      	strh	r3, [r4, #12]
 8013700:	4632      	mov	r2, r6
 8013702:	463b      	mov	r3, r7
 8013704:	4628      	mov	r0, r5
 8013706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801370a:	f000 b817 	b.w	801373c <_write_r>

0801370e <__sseek>:
 801370e:	b510      	push	{r4, lr}
 8013710:	460c      	mov	r4, r1
 8013712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013716:	f000 f925 	bl	8013964 <_lseek_r>
 801371a:	1c43      	adds	r3, r0, #1
 801371c:	89a3      	ldrh	r3, [r4, #12]
 801371e:	bf15      	itete	ne
 8013720:	6560      	strne	r0, [r4, #84]	; 0x54
 8013722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801372a:	81a3      	strheq	r3, [r4, #12]
 801372c:	bf18      	it	ne
 801372e:	81a3      	strhne	r3, [r4, #12]
 8013730:	bd10      	pop	{r4, pc}

08013732 <__sclose>:
 8013732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013736:	f000 b831 	b.w	801379c <_close_r>
	...

0801373c <_write_r>:
 801373c:	b538      	push	{r3, r4, r5, lr}
 801373e:	4d07      	ldr	r5, [pc, #28]	; (801375c <_write_r+0x20>)
 8013740:	4604      	mov	r4, r0
 8013742:	4608      	mov	r0, r1
 8013744:	4611      	mov	r1, r2
 8013746:	2200      	movs	r2, #0
 8013748:	602a      	str	r2, [r5, #0]
 801374a:	461a      	mov	r2, r3
 801374c:	f7ed facf 	bl	8000cee <_write>
 8013750:	1c43      	adds	r3, r0, #1
 8013752:	d102      	bne.n	801375a <_write_r+0x1e>
 8013754:	682b      	ldr	r3, [r5, #0]
 8013756:	b103      	cbz	r3, 801375a <_write_r+0x1e>
 8013758:	6023      	str	r3, [r4, #0]
 801375a:	bd38      	pop	{r3, r4, r5, pc}
 801375c:	24005e34 	.word	0x24005e34

08013760 <__assert_func>:
 8013760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013762:	4614      	mov	r4, r2
 8013764:	461a      	mov	r2, r3
 8013766:	4b09      	ldr	r3, [pc, #36]	; (801378c <__assert_func+0x2c>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	4605      	mov	r5, r0
 801376c:	68d8      	ldr	r0, [r3, #12]
 801376e:	b14c      	cbz	r4, 8013784 <__assert_func+0x24>
 8013770:	4b07      	ldr	r3, [pc, #28]	; (8013790 <__assert_func+0x30>)
 8013772:	9100      	str	r1, [sp, #0]
 8013774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013778:	4906      	ldr	r1, [pc, #24]	; (8013794 <__assert_func+0x34>)
 801377a:	462b      	mov	r3, r5
 801377c:	f000 f8e0 	bl	8013940 <fiprintf>
 8013780:	f000 fd22 	bl	80141c8 <abort>
 8013784:	4b04      	ldr	r3, [pc, #16]	; (8013798 <__assert_func+0x38>)
 8013786:	461c      	mov	r4, r3
 8013788:	e7f3      	b.n	8013772 <__assert_func+0x12>
 801378a:	bf00      	nop
 801378c:	24000034 	.word	0x24000034
 8013790:	080170ce 	.word	0x080170ce
 8013794:	080170db 	.word	0x080170db
 8013798:	08017109 	.word	0x08017109

0801379c <_close_r>:
 801379c:	b538      	push	{r3, r4, r5, lr}
 801379e:	4d06      	ldr	r5, [pc, #24]	; (80137b8 <_close_r+0x1c>)
 80137a0:	2300      	movs	r3, #0
 80137a2:	4604      	mov	r4, r0
 80137a4:	4608      	mov	r0, r1
 80137a6:	602b      	str	r3, [r5, #0]
 80137a8:	f7ed fabd 	bl	8000d26 <_close>
 80137ac:	1c43      	adds	r3, r0, #1
 80137ae:	d102      	bne.n	80137b6 <_close_r+0x1a>
 80137b0:	682b      	ldr	r3, [r5, #0]
 80137b2:	b103      	cbz	r3, 80137b6 <_close_r+0x1a>
 80137b4:	6023      	str	r3, [r4, #0]
 80137b6:	bd38      	pop	{r3, r4, r5, pc}
 80137b8:	24005e34 	.word	0x24005e34

080137bc <__sflush_r>:
 80137bc:	898a      	ldrh	r2, [r1, #12]
 80137be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c2:	4605      	mov	r5, r0
 80137c4:	0710      	lsls	r0, r2, #28
 80137c6:	460c      	mov	r4, r1
 80137c8:	d458      	bmi.n	801387c <__sflush_r+0xc0>
 80137ca:	684b      	ldr	r3, [r1, #4]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	dc05      	bgt.n	80137dc <__sflush_r+0x20>
 80137d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	dc02      	bgt.n	80137dc <__sflush_r+0x20>
 80137d6:	2000      	movs	r0, #0
 80137d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80137de:	2e00      	cmp	r6, #0
 80137e0:	d0f9      	beq.n	80137d6 <__sflush_r+0x1a>
 80137e2:	2300      	movs	r3, #0
 80137e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80137e8:	682f      	ldr	r7, [r5, #0]
 80137ea:	602b      	str	r3, [r5, #0]
 80137ec:	d032      	beq.n	8013854 <__sflush_r+0x98>
 80137ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80137f0:	89a3      	ldrh	r3, [r4, #12]
 80137f2:	075a      	lsls	r2, r3, #29
 80137f4:	d505      	bpl.n	8013802 <__sflush_r+0x46>
 80137f6:	6863      	ldr	r3, [r4, #4]
 80137f8:	1ac0      	subs	r0, r0, r3
 80137fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80137fc:	b10b      	cbz	r3, 8013802 <__sflush_r+0x46>
 80137fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013800:	1ac0      	subs	r0, r0, r3
 8013802:	2300      	movs	r3, #0
 8013804:	4602      	mov	r2, r0
 8013806:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013808:	6a21      	ldr	r1, [r4, #32]
 801380a:	4628      	mov	r0, r5
 801380c:	47b0      	blx	r6
 801380e:	1c43      	adds	r3, r0, #1
 8013810:	89a3      	ldrh	r3, [r4, #12]
 8013812:	d106      	bne.n	8013822 <__sflush_r+0x66>
 8013814:	6829      	ldr	r1, [r5, #0]
 8013816:	291d      	cmp	r1, #29
 8013818:	d82c      	bhi.n	8013874 <__sflush_r+0xb8>
 801381a:	4a2a      	ldr	r2, [pc, #168]	; (80138c4 <__sflush_r+0x108>)
 801381c:	40ca      	lsrs	r2, r1
 801381e:	07d6      	lsls	r6, r2, #31
 8013820:	d528      	bpl.n	8013874 <__sflush_r+0xb8>
 8013822:	2200      	movs	r2, #0
 8013824:	6062      	str	r2, [r4, #4]
 8013826:	04d9      	lsls	r1, r3, #19
 8013828:	6922      	ldr	r2, [r4, #16]
 801382a:	6022      	str	r2, [r4, #0]
 801382c:	d504      	bpl.n	8013838 <__sflush_r+0x7c>
 801382e:	1c42      	adds	r2, r0, #1
 8013830:	d101      	bne.n	8013836 <__sflush_r+0x7a>
 8013832:	682b      	ldr	r3, [r5, #0]
 8013834:	b903      	cbnz	r3, 8013838 <__sflush_r+0x7c>
 8013836:	6560      	str	r0, [r4, #84]	; 0x54
 8013838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801383a:	602f      	str	r7, [r5, #0]
 801383c:	2900      	cmp	r1, #0
 801383e:	d0ca      	beq.n	80137d6 <__sflush_r+0x1a>
 8013840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013844:	4299      	cmp	r1, r3
 8013846:	d002      	beq.n	801384e <__sflush_r+0x92>
 8013848:	4628      	mov	r0, r5
 801384a:	f000 f8b1 	bl	80139b0 <_free_r>
 801384e:	2000      	movs	r0, #0
 8013850:	6360      	str	r0, [r4, #52]	; 0x34
 8013852:	e7c1      	b.n	80137d8 <__sflush_r+0x1c>
 8013854:	6a21      	ldr	r1, [r4, #32]
 8013856:	2301      	movs	r3, #1
 8013858:	4628      	mov	r0, r5
 801385a:	47b0      	blx	r6
 801385c:	1c41      	adds	r1, r0, #1
 801385e:	d1c7      	bne.n	80137f0 <__sflush_r+0x34>
 8013860:	682b      	ldr	r3, [r5, #0]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d0c4      	beq.n	80137f0 <__sflush_r+0x34>
 8013866:	2b1d      	cmp	r3, #29
 8013868:	d001      	beq.n	801386e <__sflush_r+0xb2>
 801386a:	2b16      	cmp	r3, #22
 801386c:	d101      	bne.n	8013872 <__sflush_r+0xb6>
 801386e:	602f      	str	r7, [r5, #0]
 8013870:	e7b1      	b.n	80137d6 <__sflush_r+0x1a>
 8013872:	89a3      	ldrh	r3, [r4, #12]
 8013874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013878:	81a3      	strh	r3, [r4, #12]
 801387a:	e7ad      	b.n	80137d8 <__sflush_r+0x1c>
 801387c:	690f      	ldr	r7, [r1, #16]
 801387e:	2f00      	cmp	r7, #0
 8013880:	d0a9      	beq.n	80137d6 <__sflush_r+0x1a>
 8013882:	0793      	lsls	r3, r2, #30
 8013884:	680e      	ldr	r6, [r1, #0]
 8013886:	bf08      	it	eq
 8013888:	694b      	ldreq	r3, [r1, #20]
 801388a:	600f      	str	r7, [r1, #0]
 801388c:	bf18      	it	ne
 801388e:	2300      	movne	r3, #0
 8013890:	eba6 0807 	sub.w	r8, r6, r7
 8013894:	608b      	str	r3, [r1, #8]
 8013896:	f1b8 0f00 	cmp.w	r8, #0
 801389a:	dd9c      	ble.n	80137d6 <__sflush_r+0x1a>
 801389c:	6a21      	ldr	r1, [r4, #32]
 801389e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80138a0:	4643      	mov	r3, r8
 80138a2:	463a      	mov	r2, r7
 80138a4:	4628      	mov	r0, r5
 80138a6:	47b0      	blx	r6
 80138a8:	2800      	cmp	r0, #0
 80138aa:	dc06      	bgt.n	80138ba <__sflush_r+0xfe>
 80138ac:	89a3      	ldrh	r3, [r4, #12]
 80138ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138b2:	81a3      	strh	r3, [r4, #12]
 80138b4:	f04f 30ff 	mov.w	r0, #4294967295
 80138b8:	e78e      	b.n	80137d8 <__sflush_r+0x1c>
 80138ba:	4407      	add	r7, r0
 80138bc:	eba8 0800 	sub.w	r8, r8, r0
 80138c0:	e7e9      	b.n	8013896 <__sflush_r+0xda>
 80138c2:	bf00      	nop
 80138c4:	20400001 	.word	0x20400001

080138c8 <_fflush_r>:
 80138c8:	b538      	push	{r3, r4, r5, lr}
 80138ca:	690b      	ldr	r3, [r1, #16]
 80138cc:	4605      	mov	r5, r0
 80138ce:	460c      	mov	r4, r1
 80138d0:	b913      	cbnz	r3, 80138d8 <_fflush_r+0x10>
 80138d2:	2500      	movs	r5, #0
 80138d4:	4628      	mov	r0, r5
 80138d6:	bd38      	pop	{r3, r4, r5, pc}
 80138d8:	b118      	cbz	r0, 80138e2 <_fflush_r+0x1a>
 80138da:	6983      	ldr	r3, [r0, #24]
 80138dc:	b90b      	cbnz	r3, 80138e2 <_fflush_r+0x1a>
 80138de:	f7ff fc99 	bl	8013214 <__sinit>
 80138e2:	4b14      	ldr	r3, [pc, #80]	; (8013934 <_fflush_r+0x6c>)
 80138e4:	429c      	cmp	r4, r3
 80138e6:	d11b      	bne.n	8013920 <_fflush_r+0x58>
 80138e8:	686c      	ldr	r4, [r5, #4]
 80138ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d0ef      	beq.n	80138d2 <_fflush_r+0xa>
 80138f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80138f4:	07d0      	lsls	r0, r2, #31
 80138f6:	d404      	bmi.n	8013902 <_fflush_r+0x3a>
 80138f8:	0599      	lsls	r1, r3, #22
 80138fa:	d402      	bmi.n	8013902 <_fflush_r+0x3a>
 80138fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138fe:	f7ff fd4c 	bl	801339a <__retarget_lock_acquire_recursive>
 8013902:	4628      	mov	r0, r5
 8013904:	4621      	mov	r1, r4
 8013906:	f7ff ff59 	bl	80137bc <__sflush_r>
 801390a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801390c:	07da      	lsls	r2, r3, #31
 801390e:	4605      	mov	r5, r0
 8013910:	d4e0      	bmi.n	80138d4 <_fflush_r+0xc>
 8013912:	89a3      	ldrh	r3, [r4, #12]
 8013914:	059b      	lsls	r3, r3, #22
 8013916:	d4dd      	bmi.n	80138d4 <_fflush_r+0xc>
 8013918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801391a:	f7ff fd3f 	bl	801339c <__retarget_lock_release_recursive>
 801391e:	e7d9      	b.n	80138d4 <_fflush_r+0xc>
 8013920:	4b05      	ldr	r3, [pc, #20]	; (8013938 <_fflush_r+0x70>)
 8013922:	429c      	cmp	r4, r3
 8013924:	d101      	bne.n	801392a <_fflush_r+0x62>
 8013926:	68ac      	ldr	r4, [r5, #8]
 8013928:	e7df      	b.n	80138ea <_fflush_r+0x22>
 801392a:	4b04      	ldr	r3, [pc, #16]	; (801393c <_fflush_r+0x74>)
 801392c:	429c      	cmp	r4, r3
 801392e:	bf08      	it	eq
 8013930:	68ec      	ldreq	r4, [r5, #12]
 8013932:	e7da      	b.n	80138ea <_fflush_r+0x22>
 8013934:	08017018 	.word	0x08017018
 8013938:	08017038 	.word	0x08017038
 801393c:	08016ff8 	.word	0x08016ff8

08013940 <fiprintf>:
 8013940:	b40e      	push	{r1, r2, r3}
 8013942:	b503      	push	{r0, r1, lr}
 8013944:	4601      	mov	r1, r0
 8013946:	ab03      	add	r3, sp, #12
 8013948:	4805      	ldr	r0, [pc, #20]	; (8013960 <fiprintf+0x20>)
 801394a:	f853 2b04 	ldr.w	r2, [r3], #4
 801394e:	6800      	ldr	r0, [r0, #0]
 8013950:	9301      	str	r3, [sp, #4]
 8013952:	f000 f8a3 	bl	8013a9c <_vfiprintf_r>
 8013956:	b002      	add	sp, #8
 8013958:	f85d eb04 	ldr.w	lr, [sp], #4
 801395c:	b003      	add	sp, #12
 801395e:	4770      	bx	lr
 8013960:	24000034 	.word	0x24000034

08013964 <_lseek_r>:
 8013964:	b538      	push	{r3, r4, r5, lr}
 8013966:	4d07      	ldr	r5, [pc, #28]	; (8013984 <_lseek_r+0x20>)
 8013968:	4604      	mov	r4, r0
 801396a:	4608      	mov	r0, r1
 801396c:	4611      	mov	r1, r2
 801396e:	2200      	movs	r2, #0
 8013970:	602a      	str	r2, [r5, #0]
 8013972:	461a      	mov	r2, r3
 8013974:	f7ed f9fe 	bl	8000d74 <_lseek>
 8013978:	1c43      	adds	r3, r0, #1
 801397a:	d102      	bne.n	8013982 <_lseek_r+0x1e>
 801397c:	682b      	ldr	r3, [r5, #0]
 801397e:	b103      	cbz	r3, 8013982 <_lseek_r+0x1e>
 8013980:	6023      	str	r3, [r4, #0]
 8013982:	bd38      	pop	{r3, r4, r5, pc}
 8013984:	24005e34 	.word	0x24005e34

08013988 <malloc>:
 8013988:	4b02      	ldr	r3, [pc, #8]	; (8013994 <malloc+0xc>)
 801398a:	4601      	mov	r1, r0
 801398c:	6818      	ldr	r0, [r3, #0]
 801398e:	f7ff bd4d 	b.w	801342c <_malloc_r>
 8013992:	bf00      	nop
 8013994:	24000034 	.word	0x24000034

08013998 <__malloc_lock>:
 8013998:	4801      	ldr	r0, [pc, #4]	; (80139a0 <__malloc_lock+0x8>)
 801399a:	f7ff bcfe 	b.w	801339a <__retarget_lock_acquire_recursive>
 801399e:	bf00      	nop
 80139a0:	24005e26 	.word	0x24005e26

080139a4 <__malloc_unlock>:
 80139a4:	4801      	ldr	r0, [pc, #4]	; (80139ac <__malloc_unlock+0x8>)
 80139a6:	f7ff bcf9 	b.w	801339c <__retarget_lock_release_recursive>
 80139aa:	bf00      	nop
 80139ac:	24005e26 	.word	0x24005e26

080139b0 <_free_r>:
 80139b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80139b2:	2900      	cmp	r1, #0
 80139b4:	d044      	beq.n	8013a40 <_free_r+0x90>
 80139b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139ba:	9001      	str	r0, [sp, #4]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	f1a1 0404 	sub.w	r4, r1, #4
 80139c2:	bfb8      	it	lt
 80139c4:	18e4      	addlt	r4, r4, r3
 80139c6:	f7ff ffe7 	bl	8013998 <__malloc_lock>
 80139ca:	4a1e      	ldr	r2, [pc, #120]	; (8013a44 <_free_r+0x94>)
 80139cc:	9801      	ldr	r0, [sp, #4]
 80139ce:	6813      	ldr	r3, [r2, #0]
 80139d0:	b933      	cbnz	r3, 80139e0 <_free_r+0x30>
 80139d2:	6063      	str	r3, [r4, #4]
 80139d4:	6014      	str	r4, [r2, #0]
 80139d6:	b003      	add	sp, #12
 80139d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80139dc:	f7ff bfe2 	b.w	80139a4 <__malloc_unlock>
 80139e0:	42a3      	cmp	r3, r4
 80139e2:	d908      	bls.n	80139f6 <_free_r+0x46>
 80139e4:	6825      	ldr	r5, [r4, #0]
 80139e6:	1961      	adds	r1, r4, r5
 80139e8:	428b      	cmp	r3, r1
 80139ea:	bf01      	itttt	eq
 80139ec:	6819      	ldreq	r1, [r3, #0]
 80139ee:	685b      	ldreq	r3, [r3, #4]
 80139f0:	1949      	addeq	r1, r1, r5
 80139f2:	6021      	streq	r1, [r4, #0]
 80139f4:	e7ed      	b.n	80139d2 <_free_r+0x22>
 80139f6:	461a      	mov	r2, r3
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	b10b      	cbz	r3, 8013a00 <_free_r+0x50>
 80139fc:	42a3      	cmp	r3, r4
 80139fe:	d9fa      	bls.n	80139f6 <_free_r+0x46>
 8013a00:	6811      	ldr	r1, [r2, #0]
 8013a02:	1855      	adds	r5, r2, r1
 8013a04:	42a5      	cmp	r5, r4
 8013a06:	d10b      	bne.n	8013a20 <_free_r+0x70>
 8013a08:	6824      	ldr	r4, [r4, #0]
 8013a0a:	4421      	add	r1, r4
 8013a0c:	1854      	adds	r4, r2, r1
 8013a0e:	42a3      	cmp	r3, r4
 8013a10:	6011      	str	r1, [r2, #0]
 8013a12:	d1e0      	bne.n	80139d6 <_free_r+0x26>
 8013a14:	681c      	ldr	r4, [r3, #0]
 8013a16:	685b      	ldr	r3, [r3, #4]
 8013a18:	6053      	str	r3, [r2, #4]
 8013a1a:	4421      	add	r1, r4
 8013a1c:	6011      	str	r1, [r2, #0]
 8013a1e:	e7da      	b.n	80139d6 <_free_r+0x26>
 8013a20:	d902      	bls.n	8013a28 <_free_r+0x78>
 8013a22:	230c      	movs	r3, #12
 8013a24:	6003      	str	r3, [r0, #0]
 8013a26:	e7d6      	b.n	80139d6 <_free_r+0x26>
 8013a28:	6825      	ldr	r5, [r4, #0]
 8013a2a:	1961      	adds	r1, r4, r5
 8013a2c:	428b      	cmp	r3, r1
 8013a2e:	bf04      	itt	eq
 8013a30:	6819      	ldreq	r1, [r3, #0]
 8013a32:	685b      	ldreq	r3, [r3, #4]
 8013a34:	6063      	str	r3, [r4, #4]
 8013a36:	bf04      	itt	eq
 8013a38:	1949      	addeq	r1, r1, r5
 8013a3a:	6021      	streq	r1, [r4, #0]
 8013a3c:	6054      	str	r4, [r2, #4]
 8013a3e:	e7ca      	b.n	80139d6 <_free_r+0x26>
 8013a40:	b003      	add	sp, #12
 8013a42:	bd30      	pop	{r4, r5, pc}
 8013a44:	24005e2c 	.word	0x24005e2c

08013a48 <__sfputc_r>:
 8013a48:	6893      	ldr	r3, [r2, #8]
 8013a4a:	3b01      	subs	r3, #1
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	b410      	push	{r4}
 8013a50:	6093      	str	r3, [r2, #8]
 8013a52:	da08      	bge.n	8013a66 <__sfputc_r+0x1e>
 8013a54:	6994      	ldr	r4, [r2, #24]
 8013a56:	42a3      	cmp	r3, r4
 8013a58:	db01      	blt.n	8013a5e <__sfputc_r+0x16>
 8013a5a:	290a      	cmp	r1, #10
 8013a5c:	d103      	bne.n	8013a66 <__sfputc_r+0x1e>
 8013a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a62:	f000 baf1 	b.w	8014048 <__swbuf_r>
 8013a66:	6813      	ldr	r3, [r2, #0]
 8013a68:	1c58      	adds	r0, r3, #1
 8013a6a:	6010      	str	r0, [r2, #0]
 8013a6c:	7019      	strb	r1, [r3, #0]
 8013a6e:	4608      	mov	r0, r1
 8013a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a74:	4770      	bx	lr

08013a76 <__sfputs_r>:
 8013a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a78:	4606      	mov	r6, r0
 8013a7a:	460f      	mov	r7, r1
 8013a7c:	4614      	mov	r4, r2
 8013a7e:	18d5      	adds	r5, r2, r3
 8013a80:	42ac      	cmp	r4, r5
 8013a82:	d101      	bne.n	8013a88 <__sfputs_r+0x12>
 8013a84:	2000      	movs	r0, #0
 8013a86:	e007      	b.n	8013a98 <__sfputs_r+0x22>
 8013a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a8c:	463a      	mov	r2, r7
 8013a8e:	4630      	mov	r0, r6
 8013a90:	f7ff ffda 	bl	8013a48 <__sfputc_r>
 8013a94:	1c43      	adds	r3, r0, #1
 8013a96:	d1f3      	bne.n	8013a80 <__sfputs_r+0xa>
 8013a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013a9c <_vfiprintf_r>:
 8013a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa0:	460d      	mov	r5, r1
 8013aa2:	b09d      	sub	sp, #116	; 0x74
 8013aa4:	4614      	mov	r4, r2
 8013aa6:	4698      	mov	r8, r3
 8013aa8:	4606      	mov	r6, r0
 8013aaa:	b118      	cbz	r0, 8013ab4 <_vfiprintf_r+0x18>
 8013aac:	6983      	ldr	r3, [r0, #24]
 8013aae:	b90b      	cbnz	r3, 8013ab4 <_vfiprintf_r+0x18>
 8013ab0:	f7ff fbb0 	bl	8013214 <__sinit>
 8013ab4:	4b89      	ldr	r3, [pc, #548]	; (8013cdc <_vfiprintf_r+0x240>)
 8013ab6:	429d      	cmp	r5, r3
 8013ab8:	d11b      	bne.n	8013af2 <_vfiprintf_r+0x56>
 8013aba:	6875      	ldr	r5, [r6, #4]
 8013abc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013abe:	07d9      	lsls	r1, r3, #31
 8013ac0:	d405      	bmi.n	8013ace <_vfiprintf_r+0x32>
 8013ac2:	89ab      	ldrh	r3, [r5, #12]
 8013ac4:	059a      	lsls	r2, r3, #22
 8013ac6:	d402      	bmi.n	8013ace <_vfiprintf_r+0x32>
 8013ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013aca:	f7ff fc66 	bl	801339a <__retarget_lock_acquire_recursive>
 8013ace:	89ab      	ldrh	r3, [r5, #12]
 8013ad0:	071b      	lsls	r3, r3, #28
 8013ad2:	d501      	bpl.n	8013ad8 <_vfiprintf_r+0x3c>
 8013ad4:	692b      	ldr	r3, [r5, #16]
 8013ad6:	b9eb      	cbnz	r3, 8013b14 <_vfiprintf_r+0x78>
 8013ad8:	4629      	mov	r1, r5
 8013ada:	4630      	mov	r0, r6
 8013adc:	f000 fb06 	bl	80140ec <__swsetup_r>
 8013ae0:	b1c0      	cbz	r0, 8013b14 <_vfiprintf_r+0x78>
 8013ae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ae4:	07dc      	lsls	r4, r3, #31
 8013ae6:	d50e      	bpl.n	8013b06 <_vfiprintf_r+0x6a>
 8013ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8013aec:	b01d      	add	sp, #116	; 0x74
 8013aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013af2:	4b7b      	ldr	r3, [pc, #492]	; (8013ce0 <_vfiprintf_r+0x244>)
 8013af4:	429d      	cmp	r5, r3
 8013af6:	d101      	bne.n	8013afc <_vfiprintf_r+0x60>
 8013af8:	68b5      	ldr	r5, [r6, #8]
 8013afa:	e7df      	b.n	8013abc <_vfiprintf_r+0x20>
 8013afc:	4b79      	ldr	r3, [pc, #484]	; (8013ce4 <_vfiprintf_r+0x248>)
 8013afe:	429d      	cmp	r5, r3
 8013b00:	bf08      	it	eq
 8013b02:	68f5      	ldreq	r5, [r6, #12]
 8013b04:	e7da      	b.n	8013abc <_vfiprintf_r+0x20>
 8013b06:	89ab      	ldrh	r3, [r5, #12]
 8013b08:	0598      	lsls	r0, r3, #22
 8013b0a:	d4ed      	bmi.n	8013ae8 <_vfiprintf_r+0x4c>
 8013b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b0e:	f7ff fc45 	bl	801339c <__retarget_lock_release_recursive>
 8013b12:	e7e9      	b.n	8013ae8 <_vfiprintf_r+0x4c>
 8013b14:	2300      	movs	r3, #0
 8013b16:	9309      	str	r3, [sp, #36]	; 0x24
 8013b18:	2320      	movs	r3, #32
 8013b1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b22:	2330      	movs	r3, #48	; 0x30
 8013b24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013ce8 <_vfiprintf_r+0x24c>
 8013b28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b2c:	f04f 0901 	mov.w	r9, #1
 8013b30:	4623      	mov	r3, r4
 8013b32:	469a      	mov	sl, r3
 8013b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b38:	b10a      	cbz	r2, 8013b3e <_vfiprintf_r+0xa2>
 8013b3a:	2a25      	cmp	r2, #37	; 0x25
 8013b3c:	d1f9      	bne.n	8013b32 <_vfiprintf_r+0x96>
 8013b3e:	ebba 0b04 	subs.w	fp, sl, r4
 8013b42:	d00b      	beq.n	8013b5c <_vfiprintf_r+0xc0>
 8013b44:	465b      	mov	r3, fp
 8013b46:	4622      	mov	r2, r4
 8013b48:	4629      	mov	r1, r5
 8013b4a:	4630      	mov	r0, r6
 8013b4c:	f7ff ff93 	bl	8013a76 <__sfputs_r>
 8013b50:	3001      	adds	r0, #1
 8013b52:	f000 80aa 	beq.w	8013caa <_vfiprintf_r+0x20e>
 8013b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b58:	445a      	add	r2, fp
 8013b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8013b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	f000 80a2 	beq.w	8013caa <_vfiprintf_r+0x20e>
 8013b66:	2300      	movs	r3, #0
 8013b68:	f04f 32ff 	mov.w	r2, #4294967295
 8013b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b70:	f10a 0a01 	add.w	sl, sl, #1
 8013b74:	9304      	str	r3, [sp, #16]
 8013b76:	9307      	str	r3, [sp, #28]
 8013b78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b7c:	931a      	str	r3, [sp, #104]	; 0x68
 8013b7e:	4654      	mov	r4, sl
 8013b80:	2205      	movs	r2, #5
 8013b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b86:	4858      	ldr	r0, [pc, #352]	; (8013ce8 <_vfiprintf_r+0x24c>)
 8013b88:	f7ec fbc2 	bl	8000310 <memchr>
 8013b8c:	9a04      	ldr	r2, [sp, #16]
 8013b8e:	b9d8      	cbnz	r0, 8013bc8 <_vfiprintf_r+0x12c>
 8013b90:	06d1      	lsls	r1, r2, #27
 8013b92:	bf44      	itt	mi
 8013b94:	2320      	movmi	r3, #32
 8013b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b9a:	0713      	lsls	r3, r2, #28
 8013b9c:	bf44      	itt	mi
 8013b9e:	232b      	movmi	r3, #43	; 0x2b
 8013ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8013ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8013baa:	d015      	beq.n	8013bd8 <_vfiprintf_r+0x13c>
 8013bac:	9a07      	ldr	r2, [sp, #28]
 8013bae:	4654      	mov	r4, sl
 8013bb0:	2000      	movs	r0, #0
 8013bb2:	f04f 0c0a 	mov.w	ip, #10
 8013bb6:	4621      	mov	r1, r4
 8013bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bbc:	3b30      	subs	r3, #48	; 0x30
 8013bbe:	2b09      	cmp	r3, #9
 8013bc0:	d94e      	bls.n	8013c60 <_vfiprintf_r+0x1c4>
 8013bc2:	b1b0      	cbz	r0, 8013bf2 <_vfiprintf_r+0x156>
 8013bc4:	9207      	str	r2, [sp, #28]
 8013bc6:	e014      	b.n	8013bf2 <_vfiprintf_r+0x156>
 8013bc8:	eba0 0308 	sub.w	r3, r0, r8
 8013bcc:	fa09 f303 	lsl.w	r3, r9, r3
 8013bd0:	4313      	orrs	r3, r2
 8013bd2:	9304      	str	r3, [sp, #16]
 8013bd4:	46a2      	mov	sl, r4
 8013bd6:	e7d2      	b.n	8013b7e <_vfiprintf_r+0xe2>
 8013bd8:	9b03      	ldr	r3, [sp, #12]
 8013bda:	1d19      	adds	r1, r3, #4
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	9103      	str	r1, [sp, #12]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	bfbb      	ittet	lt
 8013be4:	425b      	neglt	r3, r3
 8013be6:	f042 0202 	orrlt.w	r2, r2, #2
 8013bea:	9307      	strge	r3, [sp, #28]
 8013bec:	9307      	strlt	r3, [sp, #28]
 8013bee:	bfb8      	it	lt
 8013bf0:	9204      	strlt	r2, [sp, #16]
 8013bf2:	7823      	ldrb	r3, [r4, #0]
 8013bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8013bf6:	d10c      	bne.n	8013c12 <_vfiprintf_r+0x176>
 8013bf8:	7863      	ldrb	r3, [r4, #1]
 8013bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8013bfc:	d135      	bne.n	8013c6a <_vfiprintf_r+0x1ce>
 8013bfe:	9b03      	ldr	r3, [sp, #12]
 8013c00:	1d1a      	adds	r2, r3, #4
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	9203      	str	r2, [sp, #12]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	bfb8      	it	lt
 8013c0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c0e:	3402      	adds	r4, #2
 8013c10:	9305      	str	r3, [sp, #20]
 8013c12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013cf8 <_vfiprintf_r+0x25c>
 8013c16:	7821      	ldrb	r1, [r4, #0]
 8013c18:	2203      	movs	r2, #3
 8013c1a:	4650      	mov	r0, sl
 8013c1c:	f7ec fb78 	bl	8000310 <memchr>
 8013c20:	b140      	cbz	r0, 8013c34 <_vfiprintf_r+0x198>
 8013c22:	2340      	movs	r3, #64	; 0x40
 8013c24:	eba0 000a 	sub.w	r0, r0, sl
 8013c28:	fa03 f000 	lsl.w	r0, r3, r0
 8013c2c:	9b04      	ldr	r3, [sp, #16]
 8013c2e:	4303      	orrs	r3, r0
 8013c30:	3401      	adds	r4, #1
 8013c32:	9304      	str	r3, [sp, #16]
 8013c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c38:	482c      	ldr	r0, [pc, #176]	; (8013cec <_vfiprintf_r+0x250>)
 8013c3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c3e:	2206      	movs	r2, #6
 8013c40:	f7ec fb66 	bl	8000310 <memchr>
 8013c44:	2800      	cmp	r0, #0
 8013c46:	d03f      	beq.n	8013cc8 <_vfiprintf_r+0x22c>
 8013c48:	4b29      	ldr	r3, [pc, #164]	; (8013cf0 <_vfiprintf_r+0x254>)
 8013c4a:	bb1b      	cbnz	r3, 8013c94 <_vfiprintf_r+0x1f8>
 8013c4c:	9b03      	ldr	r3, [sp, #12]
 8013c4e:	3307      	adds	r3, #7
 8013c50:	f023 0307 	bic.w	r3, r3, #7
 8013c54:	3308      	adds	r3, #8
 8013c56:	9303      	str	r3, [sp, #12]
 8013c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c5a:	443b      	add	r3, r7
 8013c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8013c5e:	e767      	b.n	8013b30 <_vfiprintf_r+0x94>
 8013c60:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c64:	460c      	mov	r4, r1
 8013c66:	2001      	movs	r0, #1
 8013c68:	e7a5      	b.n	8013bb6 <_vfiprintf_r+0x11a>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	3401      	adds	r4, #1
 8013c6e:	9305      	str	r3, [sp, #20]
 8013c70:	4619      	mov	r1, r3
 8013c72:	f04f 0c0a 	mov.w	ip, #10
 8013c76:	4620      	mov	r0, r4
 8013c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c7c:	3a30      	subs	r2, #48	; 0x30
 8013c7e:	2a09      	cmp	r2, #9
 8013c80:	d903      	bls.n	8013c8a <_vfiprintf_r+0x1ee>
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d0c5      	beq.n	8013c12 <_vfiprintf_r+0x176>
 8013c86:	9105      	str	r1, [sp, #20]
 8013c88:	e7c3      	b.n	8013c12 <_vfiprintf_r+0x176>
 8013c8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c8e:	4604      	mov	r4, r0
 8013c90:	2301      	movs	r3, #1
 8013c92:	e7f0      	b.n	8013c76 <_vfiprintf_r+0x1da>
 8013c94:	ab03      	add	r3, sp, #12
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	462a      	mov	r2, r5
 8013c9a:	4b16      	ldr	r3, [pc, #88]	; (8013cf4 <_vfiprintf_r+0x258>)
 8013c9c:	a904      	add	r1, sp, #16
 8013c9e:	4630      	mov	r0, r6
 8013ca0:	f3af 8000 	nop.w
 8013ca4:	4607      	mov	r7, r0
 8013ca6:	1c78      	adds	r0, r7, #1
 8013ca8:	d1d6      	bne.n	8013c58 <_vfiprintf_r+0x1bc>
 8013caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013cac:	07d9      	lsls	r1, r3, #31
 8013cae:	d405      	bmi.n	8013cbc <_vfiprintf_r+0x220>
 8013cb0:	89ab      	ldrh	r3, [r5, #12]
 8013cb2:	059a      	lsls	r2, r3, #22
 8013cb4:	d402      	bmi.n	8013cbc <_vfiprintf_r+0x220>
 8013cb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013cb8:	f7ff fb70 	bl	801339c <__retarget_lock_release_recursive>
 8013cbc:	89ab      	ldrh	r3, [r5, #12]
 8013cbe:	065b      	lsls	r3, r3, #25
 8013cc0:	f53f af12 	bmi.w	8013ae8 <_vfiprintf_r+0x4c>
 8013cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cc6:	e711      	b.n	8013aec <_vfiprintf_r+0x50>
 8013cc8:	ab03      	add	r3, sp, #12
 8013cca:	9300      	str	r3, [sp, #0]
 8013ccc:	462a      	mov	r2, r5
 8013cce:	4b09      	ldr	r3, [pc, #36]	; (8013cf4 <_vfiprintf_r+0x258>)
 8013cd0:	a904      	add	r1, sp, #16
 8013cd2:	4630      	mov	r0, r6
 8013cd4:	f000 f880 	bl	8013dd8 <_printf_i>
 8013cd8:	e7e4      	b.n	8013ca4 <_vfiprintf_r+0x208>
 8013cda:	bf00      	nop
 8013cdc:	08017018 	.word	0x08017018
 8013ce0:	08017038 	.word	0x08017038
 8013ce4:	08016ff8 	.word	0x08016ff8
 8013ce8:	0801710a 	.word	0x0801710a
 8013cec:	08017114 	.word	0x08017114
 8013cf0:	00000000 	.word	0x00000000
 8013cf4:	08013a77 	.word	0x08013a77
 8013cf8:	08017110 	.word	0x08017110

08013cfc <_printf_common>:
 8013cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d00:	4616      	mov	r6, r2
 8013d02:	4699      	mov	r9, r3
 8013d04:	688a      	ldr	r2, [r1, #8]
 8013d06:	690b      	ldr	r3, [r1, #16]
 8013d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013d0c:	4293      	cmp	r3, r2
 8013d0e:	bfb8      	it	lt
 8013d10:	4613      	movlt	r3, r2
 8013d12:	6033      	str	r3, [r6, #0]
 8013d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013d18:	4607      	mov	r7, r0
 8013d1a:	460c      	mov	r4, r1
 8013d1c:	b10a      	cbz	r2, 8013d22 <_printf_common+0x26>
 8013d1e:	3301      	adds	r3, #1
 8013d20:	6033      	str	r3, [r6, #0]
 8013d22:	6823      	ldr	r3, [r4, #0]
 8013d24:	0699      	lsls	r1, r3, #26
 8013d26:	bf42      	ittt	mi
 8013d28:	6833      	ldrmi	r3, [r6, #0]
 8013d2a:	3302      	addmi	r3, #2
 8013d2c:	6033      	strmi	r3, [r6, #0]
 8013d2e:	6825      	ldr	r5, [r4, #0]
 8013d30:	f015 0506 	ands.w	r5, r5, #6
 8013d34:	d106      	bne.n	8013d44 <_printf_common+0x48>
 8013d36:	f104 0a19 	add.w	sl, r4, #25
 8013d3a:	68e3      	ldr	r3, [r4, #12]
 8013d3c:	6832      	ldr	r2, [r6, #0]
 8013d3e:	1a9b      	subs	r3, r3, r2
 8013d40:	42ab      	cmp	r3, r5
 8013d42:	dc26      	bgt.n	8013d92 <_printf_common+0x96>
 8013d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013d48:	1e13      	subs	r3, r2, #0
 8013d4a:	6822      	ldr	r2, [r4, #0]
 8013d4c:	bf18      	it	ne
 8013d4e:	2301      	movne	r3, #1
 8013d50:	0692      	lsls	r2, r2, #26
 8013d52:	d42b      	bmi.n	8013dac <_printf_common+0xb0>
 8013d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013d58:	4649      	mov	r1, r9
 8013d5a:	4638      	mov	r0, r7
 8013d5c:	47c0      	blx	r8
 8013d5e:	3001      	adds	r0, #1
 8013d60:	d01e      	beq.n	8013da0 <_printf_common+0xa4>
 8013d62:	6823      	ldr	r3, [r4, #0]
 8013d64:	68e5      	ldr	r5, [r4, #12]
 8013d66:	6832      	ldr	r2, [r6, #0]
 8013d68:	f003 0306 	and.w	r3, r3, #6
 8013d6c:	2b04      	cmp	r3, #4
 8013d6e:	bf08      	it	eq
 8013d70:	1aad      	subeq	r5, r5, r2
 8013d72:	68a3      	ldr	r3, [r4, #8]
 8013d74:	6922      	ldr	r2, [r4, #16]
 8013d76:	bf0c      	ite	eq
 8013d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d7c:	2500      	movne	r5, #0
 8013d7e:	4293      	cmp	r3, r2
 8013d80:	bfc4      	itt	gt
 8013d82:	1a9b      	subgt	r3, r3, r2
 8013d84:	18ed      	addgt	r5, r5, r3
 8013d86:	2600      	movs	r6, #0
 8013d88:	341a      	adds	r4, #26
 8013d8a:	42b5      	cmp	r5, r6
 8013d8c:	d11a      	bne.n	8013dc4 <_printf_common+0xc8>
 8013d8e:	2000      	movs	r0, #0
 8013d90:	e008      	b.n	8013da4 <_printf_common+0xa8>
 8013d92:	2301      	movs	r3, #1
 8013d94:	4652      	mov	r2, sl
 8013d96:	4649      	mov	r1, r9
 8013d98:	4638      	mov	r0, r7
 8013d9a:	47c0      	blx	r8
 8013d9c:	3001      	adds	r0, #1
 8013d9e:	d103      	bne.n	8013da8 <_printf_common+0xac>
 8013da0:	f04f 30ff 	mov.w	r0, #4294967295
 8013da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013da8:	3501      	adds	r5, #1
 8013daa:	e7c6      	b.n	8013d3a <_printf_common+0x3e>
 8013dac:	18e1      	adds	r1, r4, r3
 8013dae:	1c5a      	adds	r2, r3, #1
 8013db0:	2030      	movs	r0, #48	; 0x30
 8013db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013db6:	4422      	add	r2, r4
 8013db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013dc0:	3302      	adds	r3, #2
 8013dc2:	e7c7      	b.n	8013d54 <_printf_common+0x58>
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	4622      	mov	r2, r4
 8013dc8:	4649      	mov	r1, r9
 8013dca:	4638      	mov	r0, r7
 8013dcc:	47c0      	blx	r8
 8013dce:	3001      	adds	r0, #1
 8013dd0:	d0e6      	beq.n	8013da0 <_printf_common+0xa4>
 8013dd2:	3601      	adds	r6, #1
 8013dd4:	e7d9      	b.n	8013d8a <_printf_common+0x8e>
	...

08013dd8 <_printf_i>:
 8013dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ddc:	7e0f      	ldrb	r7, [r1, #24]
 8013dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013de0:	2f78      	cmp	r7, #120	; 0x78
 8013de2:	4691      	mov	r9, r2
 8013de4:	4680      	mov	r8, r0
 8013de6:	460c      	mov	r4, r1
 8013de8:	469a      	mov	sl, r3
 8013dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013dee:	d807      	bhi.n	8013e00 <_printf_i+0x28>
 8013df0:	2f62      	cmp	r7, #98	; 0x62
 8013df2:	d80a      	bhi.n	8013e0a <_printf_i+0x32>
 8013df4:	2f00      	cmp	r7, #0
 8013df6:	f000 80d8 	beq.w	8013faa <_printf_i+0x1d2>
 8013dfa:	2f58      	cmp	r7, #88	; 0x58
 8013dfc:	f000 80a3 	beq.w	8013f46 <_printf_i+0x16e>
 8013e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013e08:	e03a      	b.n	8013e80 <_printf_i+0xa8>
 8013e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013e0e:	2b15      	cmp	r3, #21
 8013e10:	d8f6      	bhi.n	8013e00 <_printf_i+0x28>
 8013e12:	a101      	add	r1, pc, #4	; (adr r1, 8013e18 <_printf_i+0x40>)
 8013e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e18:	08013e71 	.word	0x08013e71
 8013e1c:	08013e85 	.word	0x08013e85
 8013e20:	08013e01 	.word	0x08013e01
 8013e24:	08013e01 	.word	0x08013e01
 8013e28:	08013e01 	.word	0x08013e01
 8013e2c:	08013e01 	.word	0x08013e01
 8013e30:	08013e85 	.word	0x08013e85
 8013e34:	08013e01 	.word	0x08013e01
 8013e38:	08013e01 	.word	0x08013e01
 8013e3c:	08013e01 	.word	0x08013e01
 8013e40:	08013e01 	.word	0x08013e01
 8013e44:	08013f91 	.word	0x08013f91
 8013e48:	08013eb5 	.word	0x08013eb5
 8013e4c:	08013f73 	.word	0x08013f73
 8013e50:	08013e01 	.word	0x08013e01
 8013e54:	08013e01 	.word	0x08013e01
 8013e58:	08013fb3 	.word	0x08013fb3
 8013e5c:	08013e01 	.word	0x08013e01
 8013e60:	08013eb5 	.word	0x08013eb5
 8013e64:	08013e01 	.word	0x08013e01
 8013e68:	08013e01 	.word	0x08013e01
 8013e6c:	08013f7b 	.word	0x08013f7b
 8013e70:	682b      	ldr	r3, [r5, #0]
 8013e72:	1d1a      	adds	r2, r3, #4
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	602a      	str	r2, [r5, #0]
 8013e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013e80:	2301      	movs	r3, #1
 8013e82:	e0a3      	b.n	8013fcc <_printf_i+0x1f4>
 8013e84:	6820      	ldr	r0, [r4, #0]
 8013e86:	6829      	ldr	r1, [r5, #0]
 8013e88:	0606      	lsls	r6, r0, #24
 8013e8a:	f101 0304 	add.w	r3, r1, #4
 8013e8e:	d50a      	bpl.n	8013ea6 <_printf_i+0xce>
 8013e90:	680e      	ldr	r6, [r1, #0]
 8013e92:	602b      	str	r3, [r5, #0]
 8013e94:	2e00      	cmp	r6, #0
 8013e96:	da03      	bge.n	8013ea0 <_printf_i+0xc8>
 8013e98:	232d      	movs	r3, #45	; 0x2d
 8013e9a:	4276      	negs	r6, r6
 8013e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ea0:	485e      	ldr	r0, [pc, #376]	; (801401c <_printf_i+0x244>)
 8013ea2:	230a      	movs	r3, #10
 8013ea4:	e019      	b.n	8013eda <_printf_i+0x102>
 8013ea6:	680e      	ldr	r6, [r1, #0]
 8013ea8:	602b      	str	r3, [r5, #0]
 8013eaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013eae:	bf18      	it	ne
 8013eb0:	b236      	sxthne	r6, r6
 8013eb2:	e7ef      	b.n	8013e94 <_printf_i+0xbc>
 8013eb4:	682b      	ldr	r3, [r5, #0]
 8013eb6:	6820      	ldr	r0, [r4, #0]
 8013eb8:	1d19      	adds	r1, r3, #4
 8013eba:	6029      	str	r1, [r5, #0]
 8013ebc:	0601      	lsls	r1, r0, #24
 8013ebe:	d501      	bpl.n	8013ec4 <_printf_i+0xec>
 8013ec0:	681e      	ldr	r6, [r3, #0]
 8013ec2:	e002      	b.n	8013eca <_printf_i+0xf2>
 8013ec4:	0646      	lsls	r6, r0, #25
 8013ec6:	d5fb      	bpl.n	8013ec0 <_printf_i+0xe8>
 8013ec8:	881e      	ldrh	r6, [r3, #0]
 8013eca:	4854      	ldr	r0, [pc, #336]	; (801401c <_printf_i+0x244>)
 8013ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8013ece:	bf0c      	ite	eq
 8013ed0:	2308      	moveq	r3, #8
 8013ed2:	230a      	movne	r3, #10
 8013ed4:	2100      	movs	r1, #0
 8013ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013eda:	6865      	ldr	r5, [r4, #4]
 8013edc:	60a5      	str	r5, [r4, #8]
 8013ede:	2d00      	cmp	r5, #0
 8013ee0:	bfa2      	ittt	ge
 8013ee2:	6821      	ldrge	r1, [r4, #0]
 8013ee4:	f021 0104 	bicge.w	r1, r1, #4
 8013ee8:	6021      	strge	r1, [r4, #0]
 8013eea:	b90e      	cbnz	r6, 8013ef0 <_printf_i+0x118>
 8013eec:	2d00      	cmp	r5, #0
 8013eee:	d04d      	beq.n	8013f8c <_printf_i+0x1b4>
 8013ef0:	4615      	mov	r5, r2
 8013ef2:	fbb6 f1f3 	udiv	r1, r6, r3
 8013ef6:	fb03 6711 	mls	r7, r3, r1, r6
 8013efa:	5dc7      	ldrb	r7, [r0, r7]
 8013efc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013f00:	4637      	mov	r7, r6
 8013f02:	42bb      	cmp	r3, r7
 8013f04:	460e      	mov	r6, r1
 8013f06:	d9f4      	bls.n	8013ef2 <_printf_i+0x11a>
 8013f08:	2b08      	cmp	r3, #8
 8013f0a:	d10b      	bne.n	8013f24 <_printf_i+0x14c>
 8013f0c:	6823      	ldr	r3, [r4, #0]
 8013f0e:	07de      	lsls	r6, r3, #31
 8013f10:	d508      	bpl.n	8013f24 <_printf_i+0x14c>
 8013f12:	6923      	ldr	r3, [r4, #16]
 8013f14:	6861      	ldr	r1, [r4, #4]
 8013f16:	4299      	cmp	r1, r3
 8013f18:	bfde      	ittt	le
 8013f1a:	2330      	movle	r3, #48	; 0x30
 8013f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013f24:	1b52      	subs	r2, r2, r5
 8013f26:	6122      	str	r2, [r4, #16]
 8013f28:	f8cd a000 	str.w	sl, [sp]
 8013f2c:	464b      	mov	r3, r9
 8013f2e:	aa03      	add	r2, sp, #12
 8013f30:	4621      	mov	r1, r4
 8013f32:	4640      	mov	r0, r8
 8013f34:	f7ff fee2 	bl	8013cfc <_printf_common>
 8013f38:	3001      	adds	r0, #1
 8013f3a:	d14c      	bne.n	8013fd6 <_printf_i+0x1fe>
 8013f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f40:	b004      	add	sp, #16
 8013f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f46:	4835      	ldr	r0, [pc, #212]	; (801401c <_printf_i+0x244>)
 8013f48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013f4c:	6829      	ldr	r1, [r5, #0]
 8013f4e:	6823      	ldr	r3, [r4, #0]
 8013f50:	f851 6b04 	ldr.w	r6, [r1], #4
 8013f54:	6029      	str	r1, [r5, #0]
 8013f56:	061d      	lsls	r5, r3, #24
 8013f58:	d514      	bpl.n	8013f84 <_printf_i+0x1ac>
 8013f5a:	07df      	lsls	r7, r3, #31
 8013f5c:	bf44      	itt	mi
 8013f5e:	f043 0320 	orrmi.w	r3, r3, #32
 8013f62:	6023      	strmi	r3, [r4, #0]
 8013f64:	b91e      	cbnz	r6, 8013f6e <_printf_i+0x196>
 8013f66:	6823      	ldr	r3, [r4, #0]
 8013f68:	f023 0320 	bic.w	r3, r3, #32
 8013f6c:	6023      	str	r3, [r4, #0]
 8013f6e:	2310      	movs	r3, #16
 8013f70:	e7b0      	b.n	8013ed4 <_printf_i+0xfc>
 8013f72:	6823      	ldr	r3, [r4, #0]
 8013f74:	f043 0320 	orr.w	r3, r3, #32
 8013f78:	6023      	str	r3, [r4, #0]
 8013f7a:	2378      	movs	r3, #120	; 0x78
 8013f7c:	4828      	ldr	r0, [pc, #160]	; (8014020 <_printf_i+0x248>)
 8013f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013f82:	e7e3      	b.n	8013f4c <_printf_i+0x174>
 8013f84:	0659      	lsls	r1, r3, #25
 8013f86:	bf48      	it	mi
 8013f88:	b2b6      	uxthmi	r6, r6
 8013f8a:	e7e6      	b.n	8013f5a <_printf_i+0x182>
 8013f8c:	4615      	mov	r5, r2
 8013f8e:	e7bb      	b.n	8013f08 <_printf_i+0x130>
 8013f90:	682b      	ldr	r3, [r5, #0]
 8013f92:	6826      	ldr	r6, [r4, #0]
 8013f94:	6961      	ldr	r1, [r4, #20]
 8013f96:	1d18      	adds	r0, r3, #4
 8013f98:	6028      	str	r0, [r5, #0]
 8013f9a:	0635      	lsls	r5, r6, #24
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	d501      	bpl.n	8013fa4 <_printf_i+0x1cc>
 8013fa0:	6019      	str	r1, [r3, #0]
 8013fa2:	e002      	b.n	8013faa <_printf_i+0x1d2>
 8013fa4:	0670      	lsls	r0, r6, #25
 8013fa6:	d5fb      	bpl.n	8013fa0 <_printf_i+0x1c8>
 8013fa8:	8019      	strh	r1, [r3, #0]
 8013faa:	2300      	movs	r3, #0
 8013fac:	6123      	str	r3, [r4, #16]
 8013fae:	4615      	mov	r5, r2
 8013fb0:	e7ba      	b.n	8013f28 <_printf_i+0x150>
 8013fb2:	682b      	ldr	r3, [r5, #0]
 8013fb4:	1d1a      	adds	r2, r3, #4
 8013fb6:	602a      	str	r2, [r5, #0]
 8013fb8:	681d      	ldr	r5, [r3, #0]
 8013fba:	6862      	ldr	r2, [r4, #4]
 8013fbc:	2100      	movs	r1, #0
 8013fbe:	4628      	mov	r0, r5
 8013fc0:	f7ec f9a6 	bl	8000310 <memchr>
 8013fc4:	b108      	cbz	r0, 8013fca <_printf_i+0x1f2>
 8013fc6:	1b40      	subs	r0, r0, r5
 8013fc8:	6060      	str	r0, [r4, #4]
 8013fca:	6863      	ldr	r3, [r4, #4]
 8013fcc:	6123      	str	r3, [r4, #16]
 8013fce:	2300      	movs	r3, #0
 8013fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fd4:	e7a8      	b.n	8013f28 <_printf_i+0x150>
 8013fd6:	6923      	ldr	r3, [r4, #16]
 8013fd8:	462a      	mov	r2, r5
 8013fda:	4649      	mov	r1, r9
 8013fdc:	4640      	mov	r0, r8
 8013fde:	47d0      	blx	sl
 8013fe0:	3001      	adds	r0, #1
 8013fe2:	d0ab      	beq.n	8013f3c <_printf_i+0x164>
 8013fe4:	6823      	ldr	r3, [r4, #0]
 8013fe6:	079b      	lsls	r3, r3, #30
 8013fe8:	d413      	bmi.n	8014012 <_printf_i+0x23a>
 8013fea:	68e0      	ldr	r0, [r4, #12]
 8013fec:	9b03      	ldr	r3, [sp, #12]
 8013fee:	4298      	cmp	r0, r3
 8013ff0:	bfb8      	it	lt
 8013ff2:	4618      	movlt	r0, r3
 8013ff4:	e7a4      	b.n	8013f40 <_printf_i+0x168>
 8013ff6:	2301      	movs	r3, #1
 8013ff8:	4632      	mov	r2, r6
 8013ffa:	4649      	mov	r1, r9
 8013ffc:	4640      	mov	r0, r8
 8013ffe:	47d0      	blx	sl
 8014000:	3001      	adds	r0, #1
 8014002:	d09b      	beq.n	8013f3c <_printf_i+0x164>
 8014004:	3501      	adds	r5, #1
 8014006:	68e3      	ldr	r3, [r4, #12]
 8014008:	9903      	ldr	r1, [sp, #12]
 801400a:	1a5b      	subs	r3, r3, r1
 801400c:	42ab      	cmp	r3, r5
 801400e:	dcf2      	bgt.n	8013ff6 <_printf_i+0x21e>
 8014010:	e7eb      	b.n	8013fea <_printf_i+0x212>
 8014012:	2500      	movs	r5, #0
 8014014:	f104 0619 	add.w	r6, r4, #25
 8014018:	e7f5      	b.n	8014006 <_printf_i+0x22e>
 801401a:	bf00      	nop
 801401c:	0801711b 	.word	0x0801711b
 8014020:	0801712c 	.word	0x0801712c

08014024 <_read_r>:
 8014024:	b538      	push	{r3, r4, r5, lr}
 8014026:	4d07      	ldr	r5, [pc, #28]	; (8014044 <_read_r+0x20>)
 8014028:	4604      	mov	r4, r0
 801402a:	4608      	mov	r0, r1
 801402c:	4611      	mov	r1, r2
 801402e:	2200      	movs	r2, #0
 8014030:	602a      	str	r2, [r5, #0]
 8014032:	461a      	mov	r2, r3
 8014034:	f7ec fe3e 	bl	8000cb4 <_read>
 8014038:	1c43      	adds	r3, r0, #1
 801403a:	d102      	bne.n	8014042 <_read_r+0x1e>
 801403c:	682b      	ldr	r3, [r5, #0]
 801403e:	b103      	cbz	r3, 8014042 <_read_r+0x1e>
 8014040:	6023      	str	r3, [r4, #0]
 8014042:	bd38      	pop	{r3, r4, r5, pc}
 8014044:	24005e34 	.word	0x24005e34

08014048 <__swbuf_r>:
 8014048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801404a:	460e      	mov	r6, r1
 801404c:	4614      	mov	r4, r2
 801404e:	4605      	mov	r5, r0
 8014050:	b118      	cbz	r0, 801405a <__swbuf_r+0x12>
 8014052:	6983      	ldr	r3, [r0, #24]
 8014054:	b90b      	cbnz	r3, 801405a <__swbuf_r+0x12>
 8014056:	f7ff f8dd 	bl	8013214 <__sinit>
 801405a:	4b21      	ldr	r3, [pc, #132]	; (80140e0 <__swbuf_r+0x98>)
 801405c:	429c      	cmp	r4, r3
 801405e:	d12b      	bne.n	80140b8 <__swbuf_r+0x70>
 8014060:	686c      	ldr	r4, [r5, #4]
 8014062:	69a3      	ldr	r3, [r4, #24]
 8014064:	60a3      	str	r3, [r4, #8]
 8014066:	89a3      	ldrh	r3, [r4, #12]
 8014068:	071a      	lsls	r2, r3, #28
 801406a:	d52f      	bpl.n	80140cc <__swbuf_r+0x84>
 801406c:	6923      	ldr	r3, [r4, #16]
 801406e:	b36b      	cbz	r3, 80140cc <__swbuf_r+0x84>
 8014070:	6923      	ldr	r3, [r4, #16]
 8014072:	6820      	ldr	r0, [r4, #0]
 8014074:	1ac0      	subs	r0, r0, r3
 8014076:	6963      	ldr	r3, [r4, #20]
 8014078:	b2f6      	uxtb	r6, r6
 801407a:	4283      	cmp	r3, r0
 801407c:	4637      	mov	r7, r6
 801407e:	dc04      	bgt.n	801408a <__swbuf_r+0x42>
 8014080:	4621      	mov	r1, r4
 8014082:	4628      	mov	r0, r5
 8014084:	f7ff fc20 	bl	80138c8 <_fflush_r>
 8014088:	bb30      	cbnz	r0, 80140d8 <__swbuf_r+0x90>
 801408a:	68a3      	ldr	r3, [r4, #8]
 801408c:	3b01      	subs	r3, #1
 801408e:	60a3      	str	r3, [r4, #8]
 8014090:	6823      	ldr	r3, [r4, #0]
 8014092:	1c5a      	adds	r2, r3, #1
 8014094:	6022      	str	r2, [r4, #0]
 8014096:	701e      	strb	r6, [r3, #0]
 8014098:	6963      	ldr	r3, [r4, #20]
 801409a:	3001      	adds	r0, #1
 801409c:	4283      	cmp	r3, r0
 801409e:	d004      	beq.n	80140aa <__swbuf_r+0x62>
 80140a0:	89a3      	ldrh	r3, [r4, #12]
 80140a2:	07db      	lsls	r3, r3, #31
 80140a4:	d506      	bpl.n	80140b4 <__swbuf_r+0x6c>
 80140a6:	2e0a      	cmp	r6, #10
 80140a8:	d104      	bne.n	80140b4 <__swbuf_r+0x6c>
 80140aa:	4621      	mov	r1, r4
 80140ac:	4628      	mov	r0, r5
 80140ae:	f7ff fc0b 	bl	80138c8 <_fflush_r>
 80140b2:	b988      	cbnz	r0, 80140d8 <__swbuf_r+0x90>
 80140b4:	4638      	mov	r0, r7
 80140b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140b8:	4b0a      	ldr	r3, [pc, #40]	; (80140e4 <__swbuf_r+0x9c>)
 80140ba:	429c      	cmp	r4, r3
 80140bc:	d101      	bne.n	80140c2 <__swbuf_r+0x7a>
 80140be:	68ac      	ldr	r4, [r5, #8]
 80140c0:	e7cf      	b.n	8014062 <__swbuf_r+0x1a>
 80140c2:	4b09      	ldr	r3, [pc, #36]	; (80140e8 <__swbuf_r+0xa0>)
 80140c4:	429c      	cmp	r4, r3
 80140c6:	bf08      	it	eq
 80140c8:	68ec      	ldreq	r4, [r5, #12]
 80140ca:	e7ca      	b.n	8014062 <__swbuf_r+0x1a>
 80140cc:	4621      	mov	r1, r4
 80140ce:	4628      	mov	r0, r5
 80140d0:	f000 f80c 	bl	80140ec <__swsetup_r>
 80140d4:	2800      	cmp	r0, #0
 80140d6:	d0cb      	beq.n	8014070 <__swbuf_r+0x28>
 80140d8:	f04f 37ff 	mov.w	r7, #4294967295
 80140dc:	e7ea      	b.n	80140b4 <__swbuf_r+0x6c>
 80140de:	bf00      	nop
 80140e0:	08017018 	.word	0x08017018
 80140e4:	08017038 	.word	0x08017038
 80140e8:	08016ff8 	.word	0x08016ff8

080140ec <__swsetup_r>:
 80140ec:	4b32      	ldr	r3, [pc, #200]	; (80141b8 <__swsetup_r+0xcc>)
 80140ee:	b570      	push	{r4, r5, r6, lr}
 80140f0:	681d      	ldr	r5, [r3, #0]
 80140f2:	4606      	mov	r6, r0
 80140f4:	460c      	mov	r4, r1
 80140f6:	b125      	cbz	r5, 8014102 <__swsetup_r+0x16>
 80140f8:	69ab      	ldr	r3, [r5, #24]
 80140fa:	b913      	cbnz	r3, 8014102 <__swsetup_r+0x16>
 80140fc:	4628      	mov	r0, r5
 80140fe:	f7ff f889 	bl	8013214 <__sinit>
 8014102:	4b2e      	ldr	r3, [pc, #184]	; (80141bc <__swsetup_r+0xd0>)
 8014104:	429c      	cmp	r4, r3
 8014106:	d10f      	bne.n	8014128 <__swsetup_r+0x3c>
 8014108:	686c      	ldr	r4, [r5, #4]
 801410a:	89a3      	ldrh	r3, [r4, #12]
 801410c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014110:	0719      	lsls	r1, r3, #28
 8014112:	d42c      	bmi.n	801416e <__swsetup_r+0x82>
 8014114:	06dd      	lsls	r5, r3, #27
 8014116:	d411      	bmi.n	801413c <__swsetup_r+0x50>
 8014118:	2309      	movs	r3, #9
 801411a:	6033      	str	r3, [r6, #0]
 801411c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014120:	81a3      	strh	r3, [r4, #12]
 8014122:	f04f 30ff 	mov.w	r0, #4294967295
 8014126:	e03e      	b.n	80141a6 <__swsetup_r+0xba>
 8014128:	4b25      	ldr	r3, [pc, #148]	; (80141c0 <__swsetup_r+0xd4>)
 801412a:	429c      	cmp	r4, r3
 801412c:	d101      	bne.n	8014132 <__swsetup_r+0x46>
 801412e:	68ac      	ldr	r4, [r5, #8]
 8014130:	e7eb      	b.n	801410a <__swsetup_r+0x1e>
 8014132:	4b24      	ldr	r3, [pc, #144]	; (80141c4 <__swsetup_r+0xd8>)
 8014134:	429c      	cmp	r4, r3
 8014136:	bf08      	it	eq
 8014138:	68ec      	ldreq	r4, [r5, #12]
 801413a:	e7e6      	b.n	801410a <__swsetup_r+0x1e>
 801413c:	0758      	lsls	r0, r3, #29
 801413e:	d512      	bpl.n	8014166 <__swsetup_r+0x7a>
 8014140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014142:	b141      	cbz	r1, 8014156 <__swsetup_r+0x6a>
 8014144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014148:	4299      	cmp	r1, r3
 801414a:	d002      	beq.n	8014152 <__swsetup_r+0x66>
 801414c:	4630      	mov	r0, r6
 801414e:	f7ff fc2f 	bl	80139b0 <_free_r>
 8014152:	2300      	movs	r3, #0
 8014154:	6363      	str	r3, [r4, #52]	; 0x34
 8014156:	89a3      	ldrh	r3, [r4, #12]
 8014158:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801415c:	81a3      	strh	r3, [r4, #12]
 801415e:	2300      	movs	r3, #0
 8014160:	6063      	str	r3, [r4, #4]
 8014162:	6923      	ldr	r3, [r4, #16]
 8014164:	6023      	str	r3, [r4, #0]
 8014166:	89a3      	ldrh	r3, [r4, #12]
 8014168:	f043 0308 	orr.w	r3, r3, #8
 801416c:	81a3      	strh	r3, [r4, #12]
 801416e:	6923      	ldr	r3, [r4, #16]
 8014170:	b94b      	cbnz	r3, 8014186 <__swsetup_r+0x9a>
 8014172:	89a3      	ldrh	r3, [r4, #12]
 8014174:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801417c:	d003      	beq.n	8014186 <__swsetup_r+0x9a>
 801417e:	4621      	mov	r1, r4
 8014180:	4630      	mov	r0, r6
 8014182:	f000 f84d 	bl	8014220 <__smakebuf_r>
 8014186:	89a0      	ldrh	r0, [r4, #12]
 8014188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801418c:	f010 0301 	ands.w	r3, r0, #1
 8014190:	d00a      	beq.n	80141a8 <__swsetup_r+0xbc>
 8014192:	2300      	movs	r3, #0
 8014194:	60a3      	str	r3, [r4, #8]
 8014196:	6963      	ldr	r3, [r4, #20]
 8014198:	425b      	negs	r3, r3
 801419a:	61a3      	str	r3, [r4, #24]
 801419c:	6923      	ldr	r3, [r4, #16]
 801419e:	b943      	cbnz	r3, 80141b2 <__swsetup_r+0xc6>
 80141a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80141a4:	d1ba      	bne.n	801411c <__swsetup_r+0x30>
 80141a6:	bd70      	pop	{r4, r5, r6, pc}
 80141a8:	0781      	lsls	r1, r0, #30
 80141aa:	bf58      	it	pl
 80141ac:	6963      	ldrpl	r3, [r4, #20]
 80141ae:	60a3      	str	r3, [r4, #8]
 80141b0:	e7f4      	b.n	801419c <__swsetup_r+0xb0>
 80141b2:	2000      	movs	r0, #0
 80141b4:	e7f7      	b.n	80141a6 <__swsetup_r+0xba>
 80141b6:	bf00      	nop
 80141b8:	24000034 	.word	0x24000034
 80141bc:	08017018 	.word	0x08017018
 80141c0:	08017038 	.word	0x08017038
 80141c4:	08016ff8 	.word	0x08016ff8

080141c8 <abort>:
 80141c8:	b508      	push	{r3, lr}
 80141ca:	2006      	movs	r0, #6
 80141cc:	f000 f890 	bl	80142f0 <raise>
 80141d0:	2001      	movs	r0, #1
 80141d2:	f7ec fd65 	bl	8000ca0 <_exit>

080141d6 <__swhatbuf_r>:
 80141d6:	b570      	push	{r4, r5, r6, lr}
 80141d8:	460e      	mov	r6, r1
 80141da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141de:	2900      	cmp	r1, #0
 80141e0:	b096      	sub	sp, #88	; 0x58
 80141e2:	4614      	mov	r4, r2
 80141e4:	461d      	mov	r5, r3
 80141e6:	da08      	bge.n	80141fa <__swhatbuf_r+0x24>
 80141e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80141ec:	2200      	movs	r2, #0
 80141ee:	602a      	str	r2, [r5, #0]
 80141f0:	061a      	lsls	r2, r3, #24
 80141f2:	d410      	bmi.n	8014216 <__swhatbuf_r+0x40>
 80141f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80141f8:	e00e      	b.n	8014218 <__swhatbuf_r+0x42>
 80141fa:	466a      	mov	r2, sp
 80141fc:	f000 f894 	bl	8014328 <_fstat_r>
 8014200:	2800      	cmp	r0, #0
 8014202:	dbf1      	blt.n	80141e8 <__swhatbuf_r+0x12>
 8014204:	9a01      	ldr	r2, [sp, #4]
 8014206:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801420a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801420e:	425a      	negs	r2, r3
 8014210:	415a      	adcs	r2, r3
 8014212:	602a      	str	r2, [r5, #0]
 8014214:	e7ee      	b.n	80141f4 <__swhatbuf_r+0x1e>
 8014216:	2340      	movs	r3, #64	; 0x40
 8014218:	2000      	movs	r0, #0
 801421a:	6023      	str	r3, [r4, #0]
 801421c:	b016      	add	sp, #88	; 0x58
 801421e:	bd70      	pop	{r4, r5, r6, pc}

08014220 <__smakebuf_r>:
 8014220:	898b      	ldrh	r3, [r1, #12]
 8014222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014224:	079d      	lsls	r5, r3, #30
 8014226:	4606      	mov	r6, r0
 8014228:	460c      	mov	r4, r1
 801422a:	d507      	bpl.n	801423c <__smakebuf_r+0x1c>
 801422c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014230:	6023      	str	r3, [r4, #0]
 8014232:	6123      	str	r3, [r4, #16]
 8014234:	2301      	movs	r3, #1
 8014236:	6163      	str	r3, [r4, #20]
 8014238:	b002      	add	sp, #8
 801423a:	bd70      	pop	{r4, r5, r6, pc}
 801423c:	ab01      	add	r3, sp, #4
 801423e:	466a      	mov	r2, sp
 8014240:	f7ff ffc9 	bl	80141d6 <__swhatbuf_r>
 8014244:	9900      	ldr	r1, [sp, #0]
 8014246:	4605      	mov	r5, r0
 8014248:	4630      	mov	r0, r6
 801424a:	f7ff f8ef 	bl	801342c <_malloc_r>
 801424e:	b948      	cbnz	r0, 8014264 <__smakebuf_r+0x44>
 8014250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014254:	059a      	lsls	r2, r3, #22
 8014256:	d4ef      	bmi.n	8014238 <__smakebuf_r+0x18>
 8014258:	f023 0303 	bic.w	r3, r3, #3
 801425c:	f043 0302 	orr.w	r3, r3, #2
 8014260:	81a3      	strh	r3, [r4, #12]
 8014262:	e7e3      	b.n	801422c <__smakebuf_r+0xc>
 8014264:	4b0d      	ldr	r3, [pc, #52]	; (801429c <__smakebuf_r+0x7c>)
 8014266:	62b3      	str	r3, [r6, #40]	; 0x28
 8014268:	89a3      	ldrh	r3, [r4, #12]
 801426a:	6020      	str	r0, [r4, #0]
 801426c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014270:	81a3      	strh	r3, [r4, #12]
 8014272:	9b00      	ldr	r3, [sp, #0]
 8014274:	6163      	str	r3, [r4, #20]
 8014276:	9b01      	ldr	r3, [sp, #4]
 8014278:	6120      	str	r0, [r4, #16]
 801427a:	b15b      	cbz	r3, 8014294 <__smakebuf_r+0x74>
 801427c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014280:	4630      	mov	r0, r6
 8014282:	f000 f863 	bl	801434c <_isatty_r>
 8014286:	b128      	cbz	r0, 8014294 <__smakebuf_r+0x74>
 8014288:	89a3      	ldrh	r3, [r4, #12]
 801428a:	f023 0303 	bic.w	r3, r3, #3
 801428e:	f043 0301 	orr.w	r3, r3, #1
 8014292:	81a3      	strh	r3, [r4, #12]
 8014294:	89a0      	ldrh	r0, [r4, #12]
 8014296:	4305      	orrs	r5, r0
 8014298:	81a5      	strh	r5, [r4, #12]
 801429a:	e7cd      	b.n	8014238 <__smakebuf_r+0x18>
 801429c:	080131ad 	.word	0x080131ad

080142a0 <_raise_r>:
 80142a0:	291f      	cmp	r1, #31
 80142a2:	b538      	push	{r3, r4, r5, lr}
 80142a4:	4604      	mov	r4, r0
 80142a6:	460d      	mov	r5, r1
 80142a8:	d904      	bls.n	80142b4 <_raise_r+0x14>
 80142aa:	2316      	movs	r3, #22
 80142ac:	6003      	str	r3, [r0, #0]
 80142ae:	f04f 30ff 	mov.w	r0, #4294967295
 80142b2:	bd38      	pop	{r3, r4, r5, pc}
 80142b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80142b6:	b112      	cbz	r2, 80142be <_raise_r+0x1e>
 80142b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80142bc:	b94b      	cbnz	r3, 80142d2 <_raise_r+0x32>
 80142be:	4620      	mov	r0, r4
 80142c0:	f000 f830 	bl	8014324 <_getpid_r>
 80142c4:	462a      	mov	r2, r5
 80142c6:	4601      	mov	r1, r0
 80142c8:	4620      	mov	r0, r4
 80142ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142ce:	f000 b817 	b.w	8014300 <_kill_r>
 80142d2:	2b01      	cmp	r3, #1
 80142d4:	d00a      	beq.n	80142ec <_raise_r+0x4c>
 80142d6:	1c59      	adds	r1, r3, #1
 80142d8:	d103      	bne.n	80142e2 <_raise_r+0x42>
 80142da:	2316      	movs	r3, #22
 80142dc:	6003      	str	r3, [r0, #0]
 80142de:	2001      	movs	r0, #1
 80142e0:	e7e7      	b.n	80142b2 <_raise_r+0x12>
 80142e2:	2400      	movs	r4, #0
 80142e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80142e8:	4628      	mov	r0, r5
 80142ea:	4798      	blx	r3
 80142ec:	2000      	movs	r0, #0
 80142ee:	e7e0      	b.n	80142b2 <_raise_r+0x12>

080142f0 <raise>:
 80142f0:	4b02      	ldr	r3, [pc, #8]	; (80142fc <raise+0xc>)
 80142f2:	4601      	mov	r1, r0
 80142f4:	6818      	ldr	r0, [r3, #0]
 80142f6:	f7ff bfd3 	b.w	80142a0 <_raise_r>
 80142fa:	bf00      	nop
 80142fc:	24000034 	.word	0x24000034

08014300 <_kill_r>:
 8014300:	b538      	push	{r3, r4, r5, lr}
 8014302:	4d07      	ldr	r5, [pc, #28]	; (8014320 <_kill_r+0x20>)
 8014304:	2300      	movs	r3, #0
 8014306:	4604      	mov	r4, r0
 8014308:	4608      	mov	r0, r1
 801430a:	4611      	mov	r1, r2
 801430c:	602b      	str	r3, [r5, #0]
 801430e:	f7ec fcb5 	bl	8000c7c <_kill>
 8014312:	1c43      	adds	r3, r0, #1
 8014314:	d102      	bne.n	801431c <_kill_r+0x1c>
 8014316:	682b      	ldr	r3, [r5, #0]
 8014318:	b103      	cbz	r3, 801431c <_kill_r+0x1c>
 801431a:	6023      	str	r3, [r4, #0]
 801431c:	bd38      	pop	{r3, r4, r5, pc}
 801431e:	bf00      	nop
 8014320:	24005e34 	.word	0x24005e34

08014324 <_getpid_r>:
 8014324:	f7ec bca2 	b.w	8000c6c <_getpid>

08014328 <_fstat_r>:
 8014328:	b538      	push	{r3, r4, r5, lr}
 801432a:	4d07      	ldr	r5, [pc, #28]	; (8014348 <_fstat_r+0x20>)
 801432c:	2300      	movs	r3, #0
 801432e:	4604      	mov	r4, r0
 8014330:	4608      	mov	r0, r1
 8014332:	4611      	mov	r1, r2
 8014334:	602b      	str	r3, [r5, #0]
 8014336:	f7ec fd02 	bl	8000d3e <_fstat>
 801433a:	1c43      	adds	r3, r0, #1
 801433c:	d102      	bne.n	8014344 <_fstat_r+0x1c>
 801433e:	682b      	ldr	r3, [r5, #0]
 8014340:	b103      	cbz	r3, 8014344 <_fstat_r+0x1c>
 8014342:	6023      	str	r3, [r4, #0]
 8014344:	bd38      	pop	{r3, r4, r5, pc}
 8014346:	bf00      	nop
 8014348:	24005e34 	.word	0x24005e34

0801434c <_isatty_r>:
 801434c:	b538      	push	{r3, r4, r5, lr}
 801434e:	4d06      	ldr	r5, [pc, #24]	; (8014368 <_isatty_r+0x1c>)
 8014350:	2300      	movs	r3, #0
 8014352:	4604      	mov	r4, r0
 8014354:	4608      	mov	r0, r1
 8014356:	602b      	str	r3, [r5, #0]
 8014358:	f7ec fd01 	bl	8000d5e <_isatty>
 801435c:	1c43      	adds	r3, r0, #1
 801435e:	d102      	bne.n	8014366 <_isatty_r+0x1a>
 8014360:	682b      	ldr	r3, [r5, #0]
 8014362:	b103      	cbz	r3, 8014366 <_isatty_r+0x1a>
 8014364:	6023      	str	r3, [r4, #0]
 8014366:	bd38      	pop	{r3, r4, r5, pc}
 8014368:	24005e34 	.word	0x24005e34

0801436c <_init>:
 801436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801436e:	bf00      	nop
 8014370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014372:	bc08      	pop	{r3}
 8014374:	469e      	mov	lr, r3
 8014376:	4770      	bx	lr

08014378 <_fini>:
 8014378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801437a:	bf00      	nop
 801437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801437e:	bc08      	pop	{r3}
 8014380:	469e      	mov	lr, r3
 8014382:	4770      	bx	lr
