
Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001058c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d3c  0801085c  0801085c  0002085c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08012598  08012598  00022598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801259c  0801259c  0002259c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  24000000  080125a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000d6a8  24000088  08012628  00030088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2400d730  08012628  0003d730  2**0
                  ALLOC
  8 .lwip_sec     00000160  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300b6  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002e026  00000000  00000000  000300f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000070b5  00000000  00000000  0005e11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000021e8  00000000  00000000  000651d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000019ee  00000000  00000000  000673c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000425eb  00000000  00000000  00068dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000341fb  00000000  00000000  000ab399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016b2d2  00000000  00000000  000df594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000095c8  00000000  00000000  0024a868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000043  00000000  00000000  00253e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000088 	.word	0x24000088
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010844 	.word	0x08010844

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400008c 	.word	0x2400008c
 800030c:	08010844 	.word	0x08010844

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <DP83826E_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83826E_STATUS_OK  if OK
  *         DP83826E_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83826E_RegisterBusIO(dp83826e_Object_t *pObj, dp83826e_IOCtx_t *ioctx)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d00b      	beq.n	80003d8 <DP83826E_RegisterBusIO+0x28>
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d007      	beq.n	80003d8 <DP83826E_RegisterBusIO+0x28>
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d003      	beq.n	80003d8 <DP83826E_RegisterBusIO+0x28>
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d102      	bne.n	80003de <DP83826E_RegisterBusIO+0x2e>
  {
    return DP83826E_STATUS_ERROR;
 80003d8:	f04f 33ff 	mov.w	r3, #4294967295
 80003dc:	e014      	b.n	8000408 <DP83826E_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	685a      	ldr	r2, [r3, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	68da      	ldr	r2, [r3, #12]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	689a      	ldr	r2, [r3, #8]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	691a      	ldr	r2, [r3, #16]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	619a      	str	r2, [r3, #24]

  return DP83826E_STATUS_OK;
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <DP83826E_FindFirstPHY>:



int32_t DP83826E_FindFirstPHY(dp83826e_Object_t *pObj)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	uint32_t regvalue = 0, addr = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
	int32_t status = DP83826E_STATUS_OK;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]
	/* for later check */
	     pObj->DevAddr = DP83826E_MAX_DEV_ADDR + 1;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2220      	movs	r2, #32
 800042c:	601a      	str	r2, [r3, #0]

	     /* Get the device address from special mode register */
	     for(addr = 0; addr <= DP83826E_MAX_DEV_ADDR; addr ++)
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
 8000432:	e01c      	b.n	800046e <DP83826E_FindFirstPHY+0x5a>
	     {
	       if(pObj->IO.ReadReg(addr, DP83826E_PHYCR, &regvalue) < 0)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f107 020c 	add.w	r2, r7, #12
 800043c:	2119      	movs	r1, #25
 800043e:	6978      	ldr	r0, [r7, #20]
 8000440:	4798      	blx	r3
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	da03      	bge.n	8000450 <DP83826E_FindFirstPHY+0x3c>
	       {
	         status = DP83826E_STATUS_READ_ERROR;
 8000448:	f06f 0304 	mvn.w	r3, #4
 800044c:	613b      	str	r3, [r7, #16]
	         /* Can't read from this device address
	            continue with next address */
	         continue;
 800044e:	e00b      	b.n	8000468 <DP83826E_FindFirstPHY+0x54>
	       }

	       if((regvalue & DP83826E_PHYCR_PHY_ADDR) == addr)
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f003 031f 	and.w	r3, r3, #31
 8000456:	697a      	ldr	r2, [r7, #20]
 8000458:	429a      	cmp	r2, r3
 800045a:	d105      	bne.n	8000468 <DP83826E_FindFirstPHY+0x54>
	       {
	         pObj->DevAddr = addr;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	697a      	ldr	r2, [r7, #20]
 8000460:	601a      	str	r2, [r3, #0]
	         status = DP83826E_STATUS_OK;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
	         break;
 8000466:	e005      	b.n	8000474 <DP83826E_FindFirstPHY+0x60>
	     for(addr = 0; addr <= DP83826E_MAX_DEV_ADDR; addr ++)
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	3301      	adds	r3, #1
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	2b1f      	cmp	r3, #31
 8000472:	d9df      	bls.n	8000434 <DP83826E_FindFirstPHY+0x20>
	       }
	     }

	     if(pObj->DevAddr > DP83826E_MAX_DEV_ADDR)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b1f      	cmp	r3, #31
 800047a:	d902      	bls.n	8000482 <DP83826E_FindFirstPHY+0x6e>
	     {
	       status = DP83826E_STATUS_ADDRESS_ERROR;
 800047c:	f06f 0302 	mvn.w	r3, #2
 8000480:	613b      	str	r3, [r7, #16]
	     }

    return status;
 8000482:	693b      	ldr	r3, [r7, #16]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <DP83826E_SoftwareReset>:

int32_t DP83826E_SoftwareReset(dp83826e_Object_t *pObj)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0, regvalue = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
	int32_t status = DP83826E_STATUS_OK;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
	/* set a software reset  */
		if(pObj->IO.WriteReg(pObj->DevAddr, DP83826E_BCR, DP83826E_BCR_SOFT_RESET) >= 0)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	691b      	ldr	r3, [r3, #16]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	6810      	ldr	r0, [r2, #0]
 80004a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004ac:	2100      	movs	r1, #0
 80004ae:	4798      	blx	r3
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	db37      	blt.n	8000526 <DP83826E_SoftwareReset+0x9a>
		{
			/* get software reset status */
			if(pObj->IO.ReadReg(pObj->DevAddr, DP83826E_BCR, &regvalue) >= 0)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	6810      	ldr	r0, [r2, #0]
 80004be:	f107 020c 	add.w	r2, r7, #12
 80004c2:	2100      	movs	r1, #0
 80004c4:	4798      	blx	r3
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	db28      	blt.n	800051e <DP83826E_SoftwareReset+0x92>
			{
				tickstart = pObj->IO.GetTick();
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4798      	blx	r3
 80004d2:	4603      	mov	r3, r0
 80004d4:	613b      	str	r3, [r7, #16]
				while ((regvalue & DP83826E_BCR_SOFT_RESET) == DP83826E_BCR_SOFT_RESET)
 80004d6:	e01c      	b.n	8000512 <DP83826E_SoftwareReset+0x86>
				{
					if(pObj->IO.ReadReg(pObj->DevAddr, DP83826E_BCR, &regvalue) < 0)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	6810      	ldr	r0, [r2, #0]
 80004e0:	f107 020c 	add.w	r2, r7, #12
 80004e4:	2100      	movs	r1, #0
 80004e6:	4798      	blx	r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	da03      	bge.n	80004f6 <DP83826E_SoftwareReset+0x6a>
					{
						status = DP83826E_STATUS_READ_ERROR;
 80004ee:	f06f 0304 	mvn.w	r3, #4
 80004f2:	617b      	str	r3, [r7, #20]
						break;
 80004f4:	e01a      	b.n	800052c <DP83826E_SoftwareReset+0xa0>
					}
					else if ((pObj->IO.GetTick() - tickstart) >= DP83826E_SW_RESET_TO)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4798      	blx	r3
 80004fc:	4603      	mov	r3, r0
 80004fe:	461a      	mov	r2, r3
 8000500:	693b      	ldr	r3, [r7, #16]
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000508:	d303      	bcc.n	8000512 <DP83826E_SoftwareReset+0x86>
					{
						status = DP83826E_STATUS_RESET_TIMEOUT;
 800050a:	f06f 0301 	mvn.w	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
						break;
 8000510:	e00c      	b.n	800052c <DP83826E_SoftwareReset+0xa0>
				while ((regvalue & DP83826E_BCR_SOFT_RESET) == DP83826E_BCR_SOFT_RESET)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1dd      	bne.n	80004d8 <DP83826E_SoftwareReset+0x4c>
 800051c:	e006      	b.n	800052c <DP83826E_SoftwareReset+0xa0>
					}
				}
			}
			else
			{
				status = DP83826E_STATUS_WRITE_ERROR;
 800051e:	f06f 0303 	mvn.w	r3, #3
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e002      	b.n	800052c <DP83826E_SoftwareReset+0xa0>
			}
		}
		else
		{
			status = DP83826E_STATUS_READ_ERROR;
 8000526:	f06f 0304 	mvn.w	r3, #4
 800052a:	617b      	str	r3, [r7, #20]
		}

    return status;
 800052c:	697b      	ldr	r3, [r7, #20]

}
 800052e:	4618      	mov	r0, r3
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <DP83826E_Configure>:

int32_t DP83826E_Configure(dp83826e_Object_t *pObj)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b084      	sub	sp, #16
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
	int32_t status = DP83826E_STATUS_OK;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]

	// LED0 (orange) polarität einstellen
	pObj->IO.WriteReg(pObj->DevAddr, DP83826E_LEDCR, DP83826E_LEDCR_CONF);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	691b      	ldr	r3, [r3, #16]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	6810      	ldr	r0, [r2, #0]
 800054a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800054e:	2118      	movs	r1, #24
 8000550:	4798      	blx	r3
	// LED1 (grün) polarität einstellen
	pObj->IO.WriteReg(pObj->DevAddr, DP83826E_REGCR, DP83826E_REGCR_FUN_ADR);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	691b      	ldr	r3, [r3, #16]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	6810      	ldr	r0, [r2, #0]
 800055a:	221f      	movs	r2, #31
 800055c:	210d      	movs	r1, #13
 800055e:	4798      	blx	r3
	pObj->IO.WriteReg(pObj->DevAddr, DP83826E_ADDAR, DP83826E_LEDCFG2);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	6810      	ldr	r0, [r2, #0]
 8000568:	f240 4269 	movw	r2, #1129	; 0x469
 800056c:	210e      	movs	r1, #14
 800056e:	4798      	blx	r3
	pObj->IO.WriteReg(pObj->DevAddr, DP83826E_REGCR, DP83826E_REGCR_FUN_DATA);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	6810      	ldr	r0, [r2, #0]
 8000578:	f244 021f 	movw	r2, #16415	; 0x401f
 800057c:	210d      	movs	r1, #13
 800057e:	4798      	blx	r3
	pObj->IO.WriteReg(pObj->DevAddr, DP83826E_ADDAR, DP83826E_LEDCFG2_CONF);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	691b      	ldr	r3, [r3, #16]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	6810      	ldr	r0, [r2, #0]
 8000588:	f240 4244 	movw	r2, #1092	; 0x444
 800058c:	210e      	movs	r1, #14
 800058e:	4798      	blx	r3
	//pObj->IO.WriteReg(pObj->DevAddr, DP83826E_REGCR, DP83826E_REGCR_FUN_ADR);
	//pObj->IO.WriteReg(pObj->DevAddr, DP83826E_ADDAR, ((uint16_t)0x0468U));
	//pObj->IO.WriteReg(pObj->DevAddr, DP83826E_REGCR, DP83826E_REGCR_FUN_DATA);
	//pObj->IO.ReadReg(pObj->DevAddr, DP83826E_ADDAR, &regvalue);

    return status;
 8000590:	68fb      	ldr	r3, [r7, #12]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <DP83826E_Init>:
  *         DP83826E_STATUS_READ_ERROR if connot read register
  *         DP83826E_STATUS_WRITE_ERROR if connot write to register
  *         DP83826E_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83826E_Init(dp83826e_Object_t *pObj)
 {
 800059a:	b580      	push	{r7, lr}
 800059c:	b084      	sub	sp, #16
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
	 uint32_t tickstart = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	 int32_t status = DP83826E_STATUS_OK;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]

	if(pObj->Is_Initialized == 0)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d12e      	bne.n	8000610 <DP83826E_Init+0x76>
	{
		if(pObj->IO.Init != 0)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <DP83826E_Init+0x26>
		{
			/* GPIO and Clocks initialization */
			pObj->IO.Init();
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	4798      	blx	r3
		}

		/* Suche den PHY mit der niedrigsten Adresse */
		status = DP83826E_FindFirstPHY(pObj);
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff ff27 	bl	8000414 <DP83826E_FindFirstPHY>
 80005c6:	60f8      	str	r0, [r7, #12]
		if (status == DP83826E_STATUS_OK)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d120      	bne.n	8000610 <DP83826E_Init+0x76>
		{
			// Einmal resetten
			status = DP83826E_SoftwareReset(pObj);
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff ff5c 	bl	800048c <DP83826E_SoftwareReset>
 80005d4:	60f8      	str	r0, [r7, #12]
			if (status == DP83826E_STATUS_OK)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d119      	bne.n	8000610 <DP83826E_Init+0x76>
			{
				// und einstellen :)
				status = DP83826E_Configure(pObj);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff ffaa 	bl	8000536 <DP83826E_Configure>
 80005e2:	60f8      	str	r0, [r7, #12]
				if (status == DP83826E_STATUS_OK)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d112      	bne.n	8000610 <DP83826E_Init+0x76>
				{
					tickstart = pObj->IO.GetTick();
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4798      	blx	r3
 80005f0:	4603      	mov	r3, r0
 80005f2:	60bb      	str	r3, [r7, #8]
					while ((pObj->IO.GetTick() - tickstart) <= 2000)
 80005f4:	bf00      	nop
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4798      	blx	r3
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000608:	d9f5      	bls.n	80005f6 <DP83826E_Init+0x5c>
					{
					}
				     pObj->Is_Initialized = 1;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	605a      	str	r2, [r3, #4]
				}
			}
		}
	}
   return status;
 8000610:	68fb      	ldr	r3, [r7, #12]
 }
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <DP83826E_GetLinkState>:
  *         DP83826E_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83826E_STATUS_READ_ERROR if connot read register
  *         DP83826E_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83826E_GetLinkState(dp83826e_Object_t *pObj)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83826E_BSR, &readval) < 0)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	6810      	ldr	r0, [r2, #0]
 800062e:	f107 020c 	add.w	r2, r7, #12
 8000632:	2101      	movs	r1, #1
 8000634:	4798      	blx	r3
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	da02      	bge.n	8000642 <DP83826E_GetLinkState+0x28>
  {
    return DP83826E_STATUS_READ_ERROR;
 800063c:	f06f 0304 	mvn.w	r3, #4
 8000640:	e07c      	b.n	800073c <DP83826E_GetLinkState+0x122>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83826E_BSR, &readval) < 0)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	6810      	ldr	r0, [r2, #0]
 800064a:	f107 020c 	add.w	r2, r7, #12
 800064e:	2101      	movs	r1, #1
 8000650:	4798      	blx	r3
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	da02      	bge.n	800065e <DP83826E_GetLinkState+0x44>
  {
    return DP83826E_STATUS_READ_ERROR;
 8000658:	f06f 0304 	mvn.w	r3, #4
 800065c:	e06e      	b.n	800073c <DP83826E_GetLinkState+0x122>
  }

  if((readval & DP83826E_BSR_LINK_STATUS) == 0)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	2b00      	cmp	r3, #0
 8000666:	d101      	bne.n	800066c <DP83826E_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83826E_STATUS_LINK_DOWN;
 8000668:	2301      	movs	r3, #1
 800066a:	e067      	b.n	800073c <DP83826E_GetLinkState+0x122>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83826E_BCR, &readval) < 0)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	6810      	ldr	r0, [r2, #0]
 8000674:	f107 020c 	add.w	r2, r7, #12
 8000678:	2100      	movs	r1, #0
 800067a:	4798      	blx	r3
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	da02      	bge.n	8000688 <DP83826E_GetLinkState+0x6e>
  {
    return DP83826E_STATUS_READ_ERROR;
 8000682:	f06f 0304 	mvn.w	r3, #4
 8000686:	e059      	b.n	800073c <DP83826E_GetLinkState+0x122>
  }

  if((readval & DP83826E_BCR_AUTONEGO_EN) != DP83826E_BCR_AUTONEGO_EN)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068e:	2b00      	cmp	r3, #0
 8000690:	d11b      	bne.n	80006ca <DP83826E_GetLinkState+0xb0>
  {
    if(((readval & DP83826E_BCR_SPEED_SELECT) == DP83826E_BCR_SPEED_SELECT) && ((readval & DP83826E_BCR_DUPLEX_MODE) == DP83826E_BCR_DUPLEX_MODE))
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000698:	2b00      	cmp	r3, #0
 800069a:	d006      	beq.n	80006aa <DP83826E_GetLinkState+0x90>
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <DP83826E_GetLinkState+0x90>
    {
      return DP83826E_STATUS_100MBITS_FULLDUPLEX;
 80006a6:	2302      	movs	r3, #2
 80006a8:	e048      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    else if ((readval & DP83826E_BCR_SPEED_SELECT) == DP83826E_BCR_SPEED_SELECT)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <DP83826E_GetLinkState+0x9e>
    {
      return DP83826E_STATUS_100MBITS_HALFDUPLEX;
 80006b4:	2303      	movs	r3, #3
 80006b6:	e041      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    else if ((readval & DP83826E_BCR_DUPLEX_MODE) == DP83826E_BCR_DUPLEX_MODE)
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <DP83826E_GetLinkState+0xac>
    {
      return DP83826E_STATUS_10MBITS_FULLDUPLEX;
 80006c2:	2304      	movs	r3, #4
 80006c4:	e03a      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    else
    {
      return DP83826E_STATUS_10MBITS_HALFDUPLEX;
 80006c6:	2305      	movs	r3, #5
 80006c8:	e038      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83826E_BSR, &readval) < 0)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	6810      	ldr	r0, [r2, #0]
 80006d2:	f107 020c 	add.w	r2, r7, #12
 80006d6:	2101      	movs	r1, #1
 80006d8:	4798      	blx	r3
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	da02      	bge.n	80006e6 <DP83826E_GetLinkState+0xcc>
    {
      return DP83826E_STATUS_READ_ERROR;
 80006e0:	f06f 0304 	mvn.w	r3, #4
 80006e4:	e02a      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }

    /* Check if auto nego not done */
    if((readval & DP83826E_BSR_AUTONEGO_CPLT) == 0)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f003 0320 	and.w	r3, r3, #32
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <DP83826E_GetLinkState+0xda>
    {
      return DP83826E_STATUS_AUTONEGO_NOTDONE;
 80006f0:	2306      	movs	r3, #6
 80006f2:	e023      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    if(pObj->IO.ReadReg(pObj->DevAddr, ((uint16_t)0x0010U), &readval) < 0)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	6810      	ldr	r0, [r2, #0]
 80006fc:	f107 020c 	add.w	r2, r7, #12
 8000700:	2110      	movs	r1, #16
 8000702:	4798      	blx	r3
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	da02      	bge.n	8000710 <DP83826E_GetLinkState+0xf6>
    {
      return DP83826E_STATUS_READ_ERROR;
 800070a:	f06f 0304 	mvn.w	r3, #4
 800070e:	e015      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }


    if((readval & DP83826E_PHYSCSR_HCDSPEEDMASK) == DP83826E_PHYSCSR_100BTX_FD)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f003 031c 	and.w	r3, r3, #28
 8000716:	2b18      	cmp	r3, #24
 8000718:	d101      	bne.n	800071e <DP83826E_GetLinkState+0x104>
    {
      return DP83826E_STATUS_100MBITS_FULLDUPLEX;
 800071a:	2302      	movs	r3, #2
 800071c:	e00e      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    else if ((readval & DP83826E_PHYSCSR_HCDSPEEDMASK) == DP83826E_PHYSCSR_100BTX_HD)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f003 031c 	and.w	r3, r3, #28
 8000724:	2b08      	cmp	r3, #8
 8000726:	d101      	bne.n	800072c <DP83826E_GetLinkState+0x112>
    {
      return DP83826E_STATUS_100MBITS_HALFDUPLEX;
 8000728:	2303      	movs	r3, #3
 800072a:	e007      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    else if ((readval & DP83826E_PHYSCSR_HCDSPEEDMASK) == DP83826E_PHYSCSR_10BT_FD)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 031c 	and.w	r3, r3, #28
 8000732:	2b14      	cmp	r3, #20
 8000734:	d101      	bne.n	800073a <DP83826E_GetLinkState+0x120>
    {
      return DP83826E_STATUS_10MBITS_FULLDUPLEX;
 8000736:	2304      	movs	r3, #4
 8000738:	e000      	b.n	800073c <DP83826E_GetLinkState+0x122>
    }
    else
    {
      return DP83826E_STATUS_100MBITS_FULLDUPLEX;
 800073a:	2302      	movs	r3, #2
    }
  }
}
 800073c:	4618      	mov	r0, r3
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <udp_thread>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void udp_thread(void *arg)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
		// netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port);

	    conn = netconn_new(NETCONN_UDP);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	2020      	movs	r0, #32
 8000752:	f008 fd61 	bl	8009218 <netconn_new_with_proto_and_callback>
 8000756:	4603      	mov	r3, r0
 8000758:	4a40      	ldr	r2, [pc, #256]	; (800085c <udp_thread+0x118>)
 800075a:	6013      	str	r3, [r2, #0]


		if(conn !=NULL)
 800075c:	4b3f      	ldr	r3, [pc, #252]	; (800085c <udp_thread+0x118>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d077      	beq.n	8000854 <udp_thread+0x110>
		{
			err = netconn_bind(conn,IP_ADDR_ANY,80);  // any IP Address
 8000764:	4b3d      	ldr	r3, [pc, #244]	; (800085c <udp_thread+0x118>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2250      	movs	r2, #80	; 0x50
 800076a:	493d      	ldr	r1, [pc, #244]	; (8000860 <udp_thread+0x11c>)
 800076c:	4618      	mov	r0, r3
 800076e:	f008 fdfb 	bl	8009368 <netconn_bind>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <udp_thread+0x120>)
 8000778:	701a      	strb	r2, [r3, #0]
			/*ip_addr_t myIPADDR;
			IP_ADDR4(&myIPADDR, 192,168,1,1);
			err = netconn_bind(conn,IP_ADDR4(&myIPADDR, 192,168,1,1),80);*/


			if(err == ERR_OK)
 800077a:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <udp_thread+0x120>)
 800077c:	f993 3000 	ldrsb.w	r3, [r3]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d162      	bne.n	800084a <udp_thread+0x106>
			{
				while(1)
				{
					recv_err = netconn_recv(conn, &buf);
 8000784:	4b35      	ldr	r3, [pc, #212]	; (800085c <udp_thread+0x118>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4937      	ldr	r1, [pc, #220]	; (8000868 <udp_thread+0x124>)
 800078a:	4618      	mov	r0, r3
 800078c:	f008 ff06 	bl	800959c <netconn_recv>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	4b35      	ldr	r3, [pc, #212]	; (800086c <udp_thread+0x128>)
 8000796:	701a      	strb	r2, [r3, #0]

					if(recv_err == ERR_OK)
 8000798:	4b34      	ldr	r3, [pc, #208]	; (800086c <udp_thread+0x128>)
 800079a:	f993 3000 	ldrsb.w	r3, [r3]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1f0      	bne.n	8000784 <udp_thread+0x40>
					{
						addr = netbuf_fromaddr(buf);
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <udp_thread+0x124>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3308      	adds	r3, #8
 80007a8:	4a31      	ldr	r2, [pc, #196]	; (8000870 <udp_thread+0x12c>)
 80007aa:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);
 80007ac:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <udp_thread+0x124>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	899a      	ldrh	r2, [r3, #12]
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <udp_thread+0x130>)
 80007b4:	801a      	strh	r2, [r3, #0]
						strcpy (msg, buf->p->payload);
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <udp_thread+0x124>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	4619      	mov	r1, r3
 80007c0:	482d      	ldr	r0, [pc, #180]	; (8000878 <udp_thread+0x134>)
 80007c2:	f00f f872 	bl	800f8aa <strcpy>
						int len =  sprintf(smsg, "MK send: %s   \n ", (char *) buf->p->payload);
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <udp_thread+0x124>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	461a      	mov	r2, r3
 80007d0:	492a      	ldr	r1, [pc, #168]	; (800087c <udp_thread+0x138>)
 80007d2:	482b      	ldr	r0, [pc, #172]	; (8000880 <udp_thread+0x13c>)
 80007d4:	f00e ff10 	bl	800f5f8 <siprintf>
 80007d8:	60f8      	str	r0, [r7, #12]

						txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80007e2:	4619      	mov	r1, r3
 80007e4:	2036      	movs	r0, #54	; 0x36
 80007e6:	f00a fd3d 	bl	800b264 <pbuf_alloc>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a25      	ldr	r2, [pc, #148]	; (8000884 <udp_thread+0x140>)
 80007ee:	6013      	str	r3, [r2, #0]

						// pbuf_take will be used to copy the modified message into the pbuf
						pbuf_take(txBuf, smsg, len);
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <udp_thread+0x140>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	b292      	uxth	r2, r2
 80007f8:	4921      	ldr	r1, [pc, #132]	; (8000880 <udp_thread+0x13c>)
 80007fa:	4618      	mov	r0, r3
 80007fc:	f00b fa1a 	bl	800bc34 <pbuf_take>

						// refer the nebuf->pbuf to our pbuf
						buf->p = txBuf;
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <udp_thread+0x124>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <udp_thread+0x140>)
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	601a      	str	r2, [r3, #0]

						netconn_connect(conn, addr, port);
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <udp_thread+0x118>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <udp_thread+0x12c>)
 8000810:	6811      	ldr	r1, [r2, #0]
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <udp_thread+0x130>)
 8000814:	8812      	ldrh	r2, [r2, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f008 fdde 	bl	80093d8 <netconn_connect>
						netconn_send(conn,buf);
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <udp_thread+0x118>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a11      	ldr	r2, [pc, #68]	; (8000868 <udp_thread+0x124>)
 8000822:	6812      	ldr	r2, [r2, #0]
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f008 feec 	bl	8009604 <netconn_send>

						buf->addr.addr=0;
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <udp_thread+0x124>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
						pbuf_free(txBuf);
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <udp_thread+0x140>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f00a fff5 	bl	800b828 <pbuf_free>
						netbuf_delete(buf);
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <udp_thread+0x124>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f009 fa1b 	bl	8009c7e <netbuf_delete>
					recv_err = netconn_recv(conn, &buf);
 8000848:	e79c      	b.n	8000784 <udp_thread+0x40>
				}

			}
			else
			{
				netconn_delete(conn);
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <udp_thread+0x118>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f008 fd6e 	bl	8009330 <netconn_delete>

			}
		}
}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	24005f00 	.word	0x24005f00
 8000860:	080124a8 	.word	0x080124a8
 8000864:	24006038 	.word	0x24006038
 8000868:	2400603c 	.word	0x2400603c
 800086c:	24006044 	.word	0x24006044
 8000870:	240000a4 	.word	0x240000a4
 8000874:	240000a8 	.word	0x240000a8
 8000878:	24005fd0 	.word	0x24005fd0
 800087c:	08010868 	.word	0x08010868
 8000880:	24005f08 	.word	0x24005f08
 8000884:	24006034 	.word	0x24006034

08000888 <udpserver_init>:

void udpserver_init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af02      	add	r7, sp, #8
  sys_thread_new("udp_thread", udp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 800088e:	2318      	movs	r3, #24
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000896:	2200      	movs	r2, #0
 8000898:	4903      	ldr	r1, [pc, #12]	; (80008a8 <udpserver_init+0x20>)
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <udpserver_init+0x24>)
 800089c:	f00e fd5c 	bl	800f358 <sys_thread_new>
  //sys_thread_new("udp_thread", udp_thread, NULL, 1024,osPriorityNormal);
  // udp_thread(defaultTaskHandle);

}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	08000745 	.word	0x08000745
 80008ac:	0801087c 	.word	0x0801087c

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008b6:	f000 f973 	bl	8000ba0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ba:	4b3b      	ldr	r3, [pc, #236]	; (80009a8 <main+0xf8>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d11b      	bne.n	80008fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
}
 80008ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008cc:	f3bf 8f6f 	isb	sy
}
 80008d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008d2:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <main+0xf8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008da:	f3bf 8f4f 	dsb	sy
}
 80008de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008e0:	f3bf 8f6f 	isb	sy
}
 80008e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008e6:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <main+0xf8>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a2f      	ldr	r2, [pc, #188]	; (80009a8 <main+0xf8>)
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008f2:	f3bf 8f4f 	dsb	sy
}
 80008f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008f8:	f3bf 8f6f 	isb	sy
}
 80008fc:	e000      	b.n	8000900 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <main+0xf8>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000908:	2b00      	cmp	r3, #0
 800090a:	d138      	bne.n	800097e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <main+0xf8>)
 800090e:	2200      	movs	r2, #0
 8000910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000914:	f3bf 8f4f 	dsb	sy
}
 8000918:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <main+0xf8>)
 800091c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000920:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	0b5b      	lsrs	r3, r3, #13
 8000926:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800092a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000934:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	015a      	lsls	r2, r3, #5
 800093a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800093e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000944:	4918      	ldr	r1, [pc, #96]	; (80009a8 <main+0xf8>)
 8000946:	4313      	orrs	r3, r2
 8000948:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	1e5a      	subs	r2, r3, #1
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1ef      	bne.n	8000936 <main+0x86>
    } while(sets-- != 0U);
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1e5a      	subs	r2, r3, #1
 800095a:	60ba      	str	r2, [r7, #8]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1e5      	bne.n	800092c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000960:	f3bf 8f4f 	dsb	sy
}
 8000964:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <main+0xf8>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <main+0xf8>)
 800096c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000970:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000972:	f3bf 8f4f 	dsb	sy
}
 8000976:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000978:	f3bf 8f6f 	isb	sy
}
 800097c:	e000      	b.n	8000980 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800097e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f000 fba8 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f818 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f000 f884 	bl	8000a94 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800098c:	f004 fd98 	bl	80054c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <main+0xfc>)
 8000992:	2100      	movs	r1, #0
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <main+0x100>)
 8000996:	f004 fdf2 	bl	800557e <osThreadNew>
 800099a:	4603      	mov	r3, r0
 800099c:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <main+0x104>)
 800099e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009a0:	f004 fdb2 	bl	8005508 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <main+0xf4>
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00
 80009ac:	080123b8 	.word	0x080123b8
 80009b0:	08000b79 	.word	0x08000b79
 80009b4:	24005f04 	.word	0x24005f04

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b09c      	sub	sp, #112	; 0x70
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	224c      	movs	r2, #76	; 0x4c
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00e fea3 	bl	800f712 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2220      	movs	r2, #32
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00e fe9d 	bl	800f712 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009d8:	2004      	movs	r0, #4
 80009da:	f002 fc5d 	bl	8003298 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <SystemClock_Config+0xd8>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a2a      	ldr	r2, [pc, #168]	; (8000a90 <SystemClock_Config+0xd8>)
 80009e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ec:	6193      	str	r3, [r2, #24]
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <SystemClock_Config+0xd8>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009fa:	bf00      	nop
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <SystemClock_Config+0xd8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a08:	d1f8      	bne.n	80009fc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000a12:	2340      	movs	r3, #64	; 0x40
 8000a14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a16:	2302      	movs	r3, #2
 8000a18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000a22:	2320      	movs	r3, #32
 8000a24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a32:	230c      	movs	r3, #12
 8000a34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fc82 	bl	800334c <HAL_RCC_OscConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a4e:	f000 f90b 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	233f      	movs	r3, #63	; 0x3f
 8000a54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2303      	movs	r3, #3
 8000a58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV8;
 8000a5e:	230a      	movs	r3, #10
 8000a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 f842 	bl	8003b00 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a82:	f000 f8f1 	bl	8000c68 <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3770      	adds	r7, #112	; 0x70
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	58024800 	.word	0x58024800

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	4a20      	ldr	r2, [pc, #128]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af6:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_GPIO_Init+0xdc>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2140      	movs	r1, #64	; 0x40
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <MX_GPIO_Init+0xe0>)
 8000b46:	f002 fb73 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000b4a:	2340      	movs	r3, #64	; 0x40
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b56:	2301      	movs	r3, #1
 8000b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_GPIO_Init+0xe0>)
 8000b62:	f002 f9bd 	bl	8002ee0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	58024400 	.word	0x58024400
 8000b74:	58021c00 	.word	0x58021c00

08000b78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b80:	f003 fe6a 	bl	8004858 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  udpserver_init();
 8000b84:	f7ff fe80 	bl	8000888 <udpserver_init>

  /* Infinite loop */
  for(;;)
  {

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b88:	2140      	movs	r1, #64	; 0x40
 8000b8a:	4804      	ldr	r0, [pc, #16]	; (8000b9c <StartDefaultTask+0x24>)
 8000b8c:	f002 fb69 	bl	8003262 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b94:	f004 fd86 	bl	80056a4 <osDelay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b98:	e7f6      	b.n	8000b88 <StartDefaultTask+0x10>
 8000b9a:	bf00      	nop
 8000b9c:	58021c00 	.word	0x58021c00

08000ba0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bb2:	f000 fbdf 	bl	8001374 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bc2:	231f      	movs	r3, #31
 8000bc4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bc6:	2387      	movs	r3, #135	; 0x87
 8000bc8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000be2:	463b      	mov	r3, r7
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 fbfd 	bl	80013e4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30001000;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MPU_Config+0xa0>)
 8000bf0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000bf2:	230e      	movs	r3, #14
 8000bf4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c06:	463b      	mov	r3, r7
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fbeb 	bl	80013e4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000c12:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000c16:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 8000c18:	230b      	movs	r3, #11
 8000c1a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c20:	2301      	movs	r3, #1
 8000c22:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fbda 	bl	80013e4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c30:	2004      	movs	r0, #4
 8000c32:	f000 fbb7 	bl	80013a4 <HAL_MPU_Enable>

}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	30001000 	.word	0x30001000

08000c44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d101      	bne.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c56:	f000 fa79 	bl	800114c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40001000 	.word	0x40001000

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_MspInit+0x38>)
 8000c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_MspInit+0x38>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_MspInit+0x38>)
 8000c8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f06f 0001 	mvn.w	r0, #1
 8000ca0:	f000 fb40 	bl	8001324 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	58024400 	.word	0x58024400

08000cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b090      	sub	sp, #64	; 0x40
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b0f      	cmp	r3, #15
 8000cbc:	d827      	bhi.n	8000d0e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	2036      	movs	r0, #54	; 0x36
 8000cc4:	f000 fb2e 	bl	8001324 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc8:	2036      	movs	r0, #54	; 0x36
 8000cca:	f000 fb45 	bl	8001358 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000cce:	4a29      	ldr	r2, [pc, #164]	; (8000d74 <HAL_InitTick+0xc4>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <HAL_InitTick+0xc8>)
 8000cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cda:	4a27      	ldr	r2, [pc, #156]	; (8000d78 <HAL_InitTick+0xc8>)
 8000cdc:	f043 0310 	orr.w	r3, r3, #16
 8000ce0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <HAL_InitTick+0xc8>)
 8000ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cf2:	f107 0210 	add.w	r2, r7, #16
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 fa75 	bl	80041ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d106      	bne.n	8000d1a <HAL_InitTick+0x6a>
 8000d0c:	e001      	b.n	8000d12 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e02b      	b.n	8000d6a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d12:	f003 fa55 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 8000d16:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000d18:	e004      	b.n	8000d24 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d1a:	f003 fa51 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d26:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <HAL_InitTick+0xcc>)
 8000d28:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2c:	0c9b      	lsrs	r3, r3, #18
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_InitTick+0xd0>)
 8000d34:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <HAL_InitTick+0xd4>)
 8000d36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_InitTick+0xd0>)
 8000d3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d40:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <HAL_InitTick+0xd0>)
 8000d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_InitTick+0xd0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_InitTick+0xd0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d52:	480b      	ldr	r0, [pc, #44]	; (8000d80 <HAL_InitTick+0xd0>)
 8000d54:	f003 fa8c 	bl	8004270 <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d104      	bne.n	8000d68 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <HAL_InitTick+0xd0>)
 8000d60:	f003 fae8 	bl	8004334 <HAL_TIM_Base_Start_IT>
 8000d64:	4603      	mov	r3, r0
 8000d66:	e000      	b.n	8000d6a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3740      	adds	r7, #64	; 0x40
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	24000008 	.word	0x24000008
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	431bde83 	.word	0x431bde83
 8000d80:	24006048 	.word	0x24006048
 8000d84:	40001000 	.word	0x40001000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <TIM6_DAC_IRQHandler+0x10>)
 8000dba:	f003 fb41 	bl	8004440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	24006048 	.word	0x24006048

08000dc8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <ETH_IRQHandler+0x10>)
 8000dce:	f000 fee9 	bl	8001ba4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2400aacc 	.word	0x2400aacc

08000ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return 1;
 8000de0:	2301      	movs	r3, #1
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_kill>:

int _kill(int pid, int sig)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <_kill+0x20>)
 8000df8:	2216      	movs	r2, #22
 8000dfa:	601a      	str	r2, [r3, #0]
	return -1;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	24005ef0 	.word	0x24005ef0

08000e10 <_exit>:

void _exit (int status)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ffe5 	bl	8000dec <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e22:	e7fe      	b.n	8000e22 <_exit+0x12>

08000e24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e00a      	b.n	8000e4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e36:	f3af 8000 	nop.w
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf0      	blt.n	8000e36 <_read+0x12>
	}

return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	e009      	b.n	8000e84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf1      	blt.n	8000e70 <_write+0x12>
	}
	return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
	return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
	return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d205      	bcs.n	8000f3c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <_sbrk+0x6c>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	24050000 	.word	0x24050000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	240000ac 	.word	0x240000ac
 8000f68:	2400d730 	.word	0x2400d730
 8000f6c:	24005ef0 	.word	0x24005ef0

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <SystemInit+0xf0>)
 8000f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7c:	4a38      	ldr	r2, [pc, #224]	; (8001060 <SystemInit+0xf0>)
 8000f7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f86:	4b37      	ldr	r3, [pc, #220]	; (8001064 <SystemInit+0xf4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d807      	bhi.n	8000fa2 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f92:	4b34      	ldr	r3, [pc, #208]	; (8001064 <SystemInit+0xf4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 030f 	bic.w	r3, r3, #15
 8000f9a:	4a32      	ldr	r2, [pc, #200]	; (8001064 <SystemInit+0xf4>)
 8000f9c:	f043 0307 	orr.w	r3, r3, #7
 8000fa0:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <SystemInit+0xf8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a30      	ldr	r2, [pc, #192]	; (8001068 <SystemInit+0xf8>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <SystemInit+0xf8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <SystemInit+0xf8>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	492b      	ldr	r1, [pc, #172]	; (8001068 <SystemInit+0xf8>)
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <SystemInit+0xfc>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <SystemInit+0xf4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d007      	beq.n	8000fdc <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <SystemInit+0xf4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f023 030f 	bic.w	r3, r3, #15
 8000fd4:	4a23      	ldr	r2, [pc, #140]	; (8001064 <SystemInit+0xf4>)
 8000fd6:	f043 0307 	orr.w	r3, r3, #7
 8000fda:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <SystemInit+0xf8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <SystemInit+0xf8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <SystemInit+0xf8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <SystemInit+0xf8>)
 8000ff0:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <SystemInit+0x100>)
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <SystemInit+0xf8>)
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <SystemInit+0x104>)
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <SystemInit+0xf8>)
 8000ffc:	4a1e      	ldr	r2, [pc, #120]	; (8001078 <SystemInit+0x108>)
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <SystemInit+0xf8>)
 8001002:	2200      	movs	r2, #0
 8001004:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <SystemInit+0xf8>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <SystemInit+0x108>)
 800100a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <SystemInit+0xf8>)
 800100e:	2200      	movs	r2, #0
 8001010:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <SystemInit+0xf8>)
 8001014:	4a18      	ldr	r2, [pc, #96]	; (8001078 <SystemInit+0x108>)
 8001016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <SystemInit+0xf8>)
 800101a:	2200      	movs	r2, #0
 800101c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <SystemInit+0xf8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a11      	ldr	r2, [pc, #68]	; (8001068 <SystemInit+0xf8>)
 8001024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001028:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <SystemInit+0xf8>)
 800102c:	2200      	movs	r2, #0
 800102e:	661a      	str	r2, [r3, #96]	; 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <SystemInit+0xf8>)
 8001032:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001036:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <SystemInit+0xf8>)
 8001038:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800103c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <SystemInit+0xf8>)
 8001042:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001046:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001048:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <SystemInit+0x10c>)
 800104c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001050:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	52002000 	.word	0x52002000
 8001068:	58024400 	.word	0x58024400
 800106c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001070:	02020200 	.word	0x02020200
 8001074:	01ff0000 	.word	0x01ff0000
 8001078:	01010280 	.word	0x01010280
 800107c:	52004000 	.word	0x52004000

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001084:	f7ff ff74 	bl	8000f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	; (80010c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	; (80010cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f00e fbd5 	bl	800f85c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fbfd 	bl	80008b0 <main>
  bx  lr
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80010bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010c0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80010c4:	080125a0 	.word	0x080125a0
  ldr r2, =_sbss
 80010c8:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80010cc:	2400d730 	.word	0x2400d730

080010d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC3_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010da:	2003      	movs	r0, #3
 80010dc:	f000 f917 	bl	800130e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010e0:	f002 fec4 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 80010e4:	4602      	mov	r2, r0
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_Init+0x68>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	f003 030f 	and.w	r3, r3, #15
 80010f0:	4913      	ldr	r1, [pc, #76]	; (8001140 <HAL_Init+0x6c>)
 80010f2:	5ccb      	ldrb	r3, [r1, r3]
 80010f4:	f003 031f 	and.w	r3, r3, #31
 80010f8:	fa22 f303 	lsr.w	r3, r2, r3
 80010fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_Init+0x68>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_Init+0x6c>)
 8001108:	5cd3      	ldrb	r3, [r2, r3]
 800110a:	f003 031f 	and.w	r3, r3, #31
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	fa22 f303 	lsr.w	r3, r2, r3
 8001114:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <HAL_Init+0x70>)
 8001116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_Init+0x74>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800111e:	200f      	movs	r0, #15
 8001120:	f7ff fdc6 	bl	8000cb0 <HAL_InitTick>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e002      	b.n	8001134 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800112e:	f7ff fda1 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	58024400 	.word	0x58024400
 8001140:	080123dc 	.word	0x080123dc
 8001144:	24000004 	.word	0x24000004
 8001148:	24000000 	.word	0x24000000

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	2400000c 	.word	0x2400000c
 8001170:	24006094 	.word	0x24006094

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	24006094 	.word	0x24006094

0800118c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800119c:	4904      	ldr	r1, [pc, #16]	; (80011b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	58000400 	.word	0x58000400

080011b4 <__NVIC_SetPriorityGrouping>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <__NVIC_SetPriorityGrouping+0x40>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x40>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00
 80011f8:	05fa0000 	.word	0x05fa0000

080011fc <__NVIC_GetPriorityGrouping>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4907      	ldr	r1, [pc, #28]	; (8001250 <__NVIC_EnableIRQ+0x38>)
 8001232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	; (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ff4c 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001332:	f7ff ff63 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001336:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	68b9      	ldr	r1, [r7, #8]
 800133c:	6978      	ldr	r0, [r7, #20]
 800133e:	f7ff ffb3 	bl	80012a8 <NVIC_EncodePriority>
 8001342:	4602      	mov	r2, r0
 8001344:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff82 	bl	8001254 <__NVIC_SetPriority>
}
 8001350:	bf00      	nop
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff56 	bl	8001218 <__NVIC_EnableIRQ>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001378:	f3bf 8f5f 	dmb	sy
}
 800137c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_MPU_Disable+0x28>)
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_MPU_Disable+0x28>)
 8001384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001388:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_MPU_Disable+0x2c>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00
 80013a0:	e000ed90 	.word	0xe000ed90

080013a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013ac:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_MPU_Enable+0x38>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_MPU_Enable+0x3c>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_MPU_Enable+0x3c>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013c2:	f3bf 8f4f 	dsb	sy
}
 80013c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c8:	f3bf 8f6f 	isb	sy
}
 80013cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed90 	.word	0xe000ed90
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	785a      	ldrb	r2, [r3, #1]
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_MPU_ConfigRegion+0x84>)
 80013f2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d029      	beq.n	8001450 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80013fc:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <HAL_MPU_ConfigRegion+0x84>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7b1b      	ldrb	r3, [r3, #12]
 8001408:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	7adb      	ldrb	r3, [r3, #11]
 800140e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001410:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7a9b      	ldrb	r3, [r3, #10]
 8001416:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001418:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7b5b      	ldrb	r3, [r3, #13]
 800141e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001420:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7b9b      	ldrb	r3, [r3, #14]
 8001426:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001428:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7bdb      	ldrb	r3, [r3, #15]
 800142e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001430:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7a5b      	ldrb	r3, [r3, #9]
 8001436:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001438:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7a1b      	ldrb	r3, [r3, #8]
 800143e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001440:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800144a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800144c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800144e:	e005      	b.n	800145c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_MPU_ConfigRegion+0x84>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <HAL_MPU_ConfigRegion+0x84>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed90 	.word	0xe000ed90

0800146c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0cf      	b.n	800161e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001484:	2b00      	cmp	r3, #0
 8001486:	d106      	bne.n	8001496 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2223      	movs	r2, #35	; 0x23
 800148c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f003 fd6d 	bl	8004f70 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	4b64      	ldr	r3, [pc, #400]	; (8001628 <HAL_ETH_Init+0x1bc>)
 8001498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800149c:	4a62      	ldr	r2, [pc, #392]	; (8001628 <HAL_ETH_Init+0x1bc>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014a6:	4b60      	ldr	r3, [pc, #384]	; (8001628 <HAL_ETH_Init+0x1bc>)
 80014a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7a1b      	ldrb	r3, [r3, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d103      	bne.n	80014c4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fe65 	bl	800118c <HAL_SYSCFG_ETHInterfaceSelect>
 80014c2:	e003      	b.n	80014cc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80014c4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014c8:	f7ff fe60 	bl	800118c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80014cc:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_ETH_Init+0x1c0>)
 80014ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e8:	f7ff fe44 	bl	8001174 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014ee:	e011      	b.n	8001514 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014f0:	f7ff fe40 	bl	8001174 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014fe:	d909      	bls.n	8001514 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2204      	movs	r2, #4
 8001504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	22e0      	movs	r2, #224	; 0xe0
 800150c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e084      	b.n	800161e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1e4      	bne.n	80014f0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 ff00 	bl	800232c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800152c:	f002 fe18 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 8001530:	4603      	mov	r3, r0
 8001532:	4a3f      	ldr	r2, [pc, #252]	; (8001630 <HAL_ETH_Init+0x1c4>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9a      	lsrs	r2, r3, #18
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3a01      	subs	r2, #1
 8001540:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f001 f8f9 	bl	800273c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001552:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001556:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001566:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	22e0      	movs	r2, #224	; 0xe0
 8001582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e049      	b.n	800161e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001592:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001596:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_ETH_Init+0x1c8>)
 8001598:	4013      	ands	r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6952      	ldr	r2, [r2, #20]
 800159e:	0051      	lsls	r1, r2, #1
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	430b      	orrs	r3, r1
 80015a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015aa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f001 f961 	bl	8002876 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f001 f9a7 	bl	8002908 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	3305      	adds	r3, #5
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	021a      	lsls	r2, r3, #8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	3304      	adds	r3, #4
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	3303      	adds	r3, #3
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	061a      	lsls	r2, r3, #24
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	3302      	adds	r3, #2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	041b      	lsls	r3, r3, #16
 80015ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	3301      	adds	r3, #1
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015f8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001606:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001608:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2210      	movs	r2, #16
 8001618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	58024400 	.word	0x58024400
 800162c:	58000400 	.word	0x58000400
 8001630:	431bde83 	.word	0x431bde83
 8001634:	ffff8001 	.word	0xffff8001

08001638 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001646:	2b10      	cmp	r3, #16
 8001648:	d179      	bne.n	800173e <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2223      	movs	r2, #35	; 0x23
 800164e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b38      	ldr	r3, [pc, #224]	; (8001748 <HAL_ETH_Start_IT+0x110>)
 8001666:	430b      	orrs	r3, r1
 8001668:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <HAL_ETH_Start_IT+0x114>)
 800167a:	430b      	orrs	r3, r1
 800167c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2204      	movs	r2, #4
 8001684:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f9c3 	bl	8001a12 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0202 	orr.w	r2, r2, #2
 800169a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016d8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016f4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001700:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800170c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001710:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171c:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8001728:	430b      	orrs	r3, r1
 800172a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800172e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2223      	movs	r2, #35	; 0x23
 8001736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
  }
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	0c020060 	.word	0x0c020060
 800174c:	0c20c000 	.word	0x0c20c000

08001750 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800175e:	2b23      	cmp	r3, #35	; 0x23
 8001760:	d13f      	bne.n	80017e2 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2223      	movs	r2, #35	; 0x23
 8001766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001772:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001782:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800179e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0202 	bic.w	r2, r2, #2
 80017d4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2210      	movs	r2, #16
 80017da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
  }
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e03a      	b.n	800188a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800181a:	2b23      	cmp	r3, #35	; 0x23
 800181c:	d134      	bne.n	8001888 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001826:	2201      	movs	r2, #1
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f001 f8ca 	bl	80029c4 <ETH_Prepare_Tx_Descriptors>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183c:	f043 0202 	orr.w	r2, r3, #2
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e01f      	b.n	800188a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 800184a:	f3bf 8f4f 	dsb	sy
}
 800184e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	2b03      	cmp	r3, #3
 8001860:	d904      	bls.n	800186c <HAL_ETH_Transmit_IT+0x7c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	1f1a      	subs	r2, r3, #4
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3106      	adds	r1, #6
 8001878:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800187c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001880:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	e000      	b.n	800188a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
  }
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b088      	sub	sp, #32
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b0:	f043 0201 	orr.w	r2, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0a5      	b.n	8001a0a <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018c4:	2b23      	cmp	r3, #35	; 0x23
 80018c6:	d001      	beq.n	80018cc <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e09e      	b.n	8001a0a <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	3212      	adds	r2, #18
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018e2:	f1c3 0304 	rsb	r3, r3, #4
 80018e6:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018e8:	e067      	b.n	80019ba <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d103      	bne.n	800191a <HAL_ETH_ReadData+0x88>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001916:	2b00      	cmp	r3, #0
 8001918:	d03d      	beq.n	8001996 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00d      	beq.n	8001960 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001970:	461a      	mov	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	b29b      	uxth	r3, r3
 8001976:	f003 fc67 	bl	8005248 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	441a      	add	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3301      	adds	r3, #1
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d902      	bls.n	80019a8 <HAL_ETH_ReadData+0x116>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b04      	subs	r3, #4
 80019a6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	3212      	adds	r2, #18
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db06      	blt.n	80019d0 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d202      	bcs.n	80019d0 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d08c      	beq.n	80018ea <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	441a      	add	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f814 	bl	8001a12 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e000      	b.n	8001a0a <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b088      	sub	sp, #32
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a26:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	3212      	adds	r2, #18
 8001a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a32:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a38:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a3a:	e03b      	b.n	8001ab4 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d112      	bne.n	8001a6a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fbcd 	bl	80051e8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	74fb      	strb	r3, [r7, #19]
 8001a58:	e007      	b.n	8001a6a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	461a      	mov	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001a6a:	7cfb      	ldrb	r3, [r7, #19]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d021      	beq.n	8001ab4 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001a70:	f3bf 8f5f 	dmb	sy
}
 8001a74:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	e003      	b.n	8001a90 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001a8e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	3301      	adds	r3, #1
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d902      	bls.n	8001aa2 <ETH_UpdateDescriptor+0x90>
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	3212      	adds	r2, #18
 8001aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aac:	617b      	str	r3, [r7, #20]
      desccount--;
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <ETH_UpdateDescriptor+0xae>
 8001aba:	7cfb      	ldrb	r3, [r7, #19]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1bd      	bne.n	8001a3c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d00d      	beq.n	8001ae6 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3318      	adds	r3, #24
 8001afa:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b0c:	e03f      	b.n	8001b8e <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d106      	bne.n	8001b36 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001b36:	7bbb      	ldrb	r3, [r7, #14]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d028      	beq.n	8001b8e <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68d9      	ldr	r1, [r3, #12]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db1b      	blt.n	8001b8a <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	3304      	adds	r3, #4
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fbda 	bl	8005318 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	3301      	adds	r3, #1
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b88:	e001      	b.n	8001b8e <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_ETH_ReleaseTxPacket+0xac>
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1b9      	bne.n	8001b0e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d115      	bne.n	8001bec <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd0:	2b40      	cmp	r3, #64	; 0x40
 8001bd2:	d10b      	bne.n	8001bec <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f248 0340 	movw	r3, #32832	; 0x8040
 8001be2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f002 ff82 	bl	8004af0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d115      	bne.n	8001c2c <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c08:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d10b      	bne.n	8001c2c <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f248 0301 	movw	r3, #32769	; 0x8001
 8001c22:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f002 ff72 	bl	8004b10 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c34:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c40:	d153      	bne.n	8001cea <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c56:	d148      	bne.n	8001cea <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5e:	f043 0208 	orr.w	r2, r3, #8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c70:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7c:	d11e      	bne.n	8001cbc <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c86:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001c8a:	f241 1302 	movw	r3, #4354	; 0x1102
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001caa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cae:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	22e0      	movs	r2, #224	; 0xe0
 8001cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001cba:	e013      	b.n	8001ce4 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001cc8:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001ce0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f002 ff23 	bl	8004b30 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001cf2:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d104      	bne.n	8001d08 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d019      	beq.n	8001d3c <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	f043 0210 	orr.w	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	22e0      	movs	r2, #224	; 0xe0
 8001d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f002 fefe 	bl	8004b30 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b10      	cmp	r3, #16
 8001d4a:	d10f      	bne.n	8001d6c <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d54:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f830 	bl	8001dc4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d10f      	bne.n	8001d9c <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d84:	f003 020f 	and.w	r2, r3, #15
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f822 	bl	8001dd8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_ETH_IRQHandler+0x21c>)
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d006      	beq.n	8001db6 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_ETH_IRQHandler+0x21c>)
 8001daa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f81b 	bl	8001dec <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	58000080 	.word	0x58000080

08001dc4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e03e      	b.n	8001ea0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e2a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	055b      	lsls	r3, r3, #21
 8001e36:	4313      	orrs	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f043 030c 	orr.w	r3, r3, #12
 8001e4e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001e62:	f7ff f987 	bl	8001174 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e68:	e009      	b.n	8001e7e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001e6a:	f7ff f983 	bl	8001174 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e78:	d901      	bls.n	8001e7e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e010      	b.n	8001ea0 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1ed      	bne.n	8001e6a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e03c      	b.n	8001f44 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ed2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	055b      	lsls	r3, r3, #21
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f023 030c 	bic.w	r3, r3, #12
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_ETH_WritePHYRegister+0xa4>)
 8001f0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <HAL_ETH_WritePHYRegister+0xa4>)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f16:	f7ff f92d 	bl	8001174 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f1c:	e009      	b.n	8001f32 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f1e:	f7ff f929 	bl	8001174 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f2c:	d901      	bls.n	8001f32 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e008      	b.n	8001f44 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1ed      	bne.n	8001f1e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40028000 	.word	0x40028000

08001f50 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e1c3      	b.n	80022ec <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf14      	ite	ne
 8001fc6:	2301      	movne	r3, #1
 8001fc8:	2300      	moveq	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf14      	ite	ne
 8001ffa:	2301      	movne	r3, #1
 8001ffc:	2300      	moveq	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf14      	ite	ne
 8002014:	2301      	movne	r3, #1
 8002016:	2300      	moveq	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf14      	ite	ne
 800204a:	2301      	movne	r3, #1
 800204c:	2300      	moveq	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf0c      	ite	eq
 800207e:	2301      	moveq	r3, #1
 8002080:	2300      	movne	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	bf14      	ite	ne
 80020b2:	2301      	movne	r3, #1
 80020b4:	2300      	moveq	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80020de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0e5b      	lsrs	r3, r3, #25
 80021ae:	f003 021f 	and.w	r2, r3, #31
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 020f 	and.w	r2, r3, #15
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	b29a      	uxth	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800225e:	2b00      	cmp	r3, #0
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002278:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002288:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf14      	ite	ne
 80022be:	2301      	movne	r3, #1
 80022c0:	2300      	moveq	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e00b      	b.n	8002324 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002312:	2b10      	cmp	r3, #16
 8002314:	d105      	bne.n	8002322 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f86d 	bl	80023f8 <ETH_SetMACConfig>

    return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
  }
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800233c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002344:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002346:	f001 ff0b 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 800234a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d908      	bls.n	8002366 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d804      	bhi.n	8002366 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e027      	b.n	80023b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4a18      	ldr	r2, [pc, #96]	; (80023cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d908      	bls.n	8002380 <HAL_ETH_SetMDIOClockRange+0x54>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	4a17      	ldr	r2, [pc, #92]	; (80023d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d204      	bcs.n	8002380 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e01a      	b.n	80023b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d303      	bcc.n	8002390 <HAL_ETH_SetMDIOClockRange+0x64>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d911      	bls.n	80023b4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d908      	bls.n	80023aa <HAL_ETH_SetMDIOClockRange+0x7e>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4a0f      	ldr	r2, [pc, #60]	; (80023d8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d804      	bhi.n	80023aa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e005      	b.n	80023b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e000      	b.n	80023b6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80023b4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	01312cff 	.word	0x01312cff
 80023cc:	02160ebf 	.word	0x02160ebf
 80023d0:	03938700 	.word	0x03938700
 80023d4:	05f5e0ff 	.word	0x05f5e0ff
 80023d8:	08f0d17f 	.word	0x08f0d17f

080023dc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800240a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	791b      	ldrb	r3, [r3, #4]
 8002410:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002412:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	7b1b      	ldrb	r3, [r3, #12]
 8002418:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800241a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	7b5b      	ldrb	r3, [r3, #13]
 8002420:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002422:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	7b9b      	ldrb	r3, [r3, #14]
 8002428:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800242a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	7bdb      	ldrb	r3, [r3, #15]
 8002430:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002432:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	7c12      	ldrb	r2, [r2, #16]
 8002438:	2a00      	cmp	r2, #0
 800243a:	d102      	bne.n	8002442 <ETH_SetMACConfig+0x4a>
 800243c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002440:	e000      	b.n	8002444 <ETH_SetMACConfig+0x4c>
 8002442:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002444:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	7c52      	ldrb	r2, [r2, #17]
 800244a:	2a00      	cmp	r2, #0
 800244c:	d102      	bne.n	8002454 <ETH_SetMACConfig+0x5c>
 800244e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002452:	e000      	b.n	8002456 <ETH_SetMACConfig+0x5e>
 8002454:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002456:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	7c9b      	ldrb	r3, [r3, #18]
 800245c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800245e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002464:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800246a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	7f1b      	ldrb	r3, [r3, #28]
 8002470:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002472:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	7f5b      	ldrb	r3, [r3, #29]
 8002478:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800247a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	7f92      	ldrb	r2, [r2, #30]
 8002480:	2a00      	cmp	r2, #0
 8002482:	d102      	bne.n	800248a <ETH_SetMACConfig+0x92>
 8002484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002488:	e000      	b.n	800248c <ETH_SetMACConfig+0x94>
 800248a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800248c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	7fdb      	ldrb	r3, [r3, #31]
 8002492:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002494:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	f892 2020 	ldrb.w	r2, [r2, #32]
 800249c:	2a00      	cmp	r2, #0
 800249e:	d102      	bne.n	80024a6 <ETH_SetMACConfig+0xae>
 80024a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a4:	e000      	b.n	80024a8 <ETH_SetMACConfig+0xb0>
 80024a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024a8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024b6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80024b8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b56      	ldr	r3, [pc, #344]	; (8002624 <ETH_SetMACConfig+0x22c>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	430b      	orrs	r3, r1
 80024d4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024e2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ec:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80024ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80024f6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80024f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002500:	2a00      	cmp	r2, #0
 8002502:	d102      	bne.n	800250a <ETH_SetMACConfig+0x112>
 8002504:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002508:	e000      	b.n	800250c <ETH_SetMACConfig+0x114>
 800250a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800250c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <ETH_SetMACConfig+0x230>)
 800251e:	4013      	ands	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	68f9      	ldr	r1, [r7, #12]
 8002526:	430b      	orrs	r3, r1
 8002528:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002530:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	4b3a      	ldr	r3, [pc, #232]	; (800262c <ETH_SetMACConfig+0x234>)
 8002542:	4013      	ands	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	68f9      	ldr	r1, [r7, #12]
 800254a:	430b      	orrs	r3, r1
 800254c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002554:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800255a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002562:	2a00      	cmp	r2, #0
 8002564:	d101      	bne.n	800256a <ETH_SetMACConfig+0x172>
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	e000      	b.n	800256c <ETH_SetMACConfig+0x174>
 800256a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800256c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002572:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800257e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002582:	4013      	ands	r3, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	68f9      	ldr	r1, [r7, #12]
 800258a:	430b      	orrs	r3, r1
 800258c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002594:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800259c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025aa:	f023 0103 	bic.w	r1, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80025c2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80025de:	2a00      	cmp	r2, #0
 80025e0:	d101      	bne.n	80025e6 <ETH_SetMACConfig+0x1ee>
 80025e2:	2240      	movs	r2, #64	; 0x40
 80025e4:	e000      	b.n	80025e8 <ETH_SetMACConfig+0x1f0>
 80025e6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80025e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80025f0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80025f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80025fa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002608:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	430a      	orrs	r2, r1
 8002614:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	00048083 	.word	0x00048083
 8002628:	c0f88000 	.word	0xc0f88000
 800262c:	fffffef0 	.word	0xfffffef0

08002630 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b38      	ldr	r3, [pc, #224]	; (8002728 <ETH_SetDMAConfig+0xf8>)
 8002646:	4013      	ands	r3, r2
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	6811      	ldr	r1, [r2, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	430b      	orrs	r3, r1
 8002652:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002656:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	791b      	ldrb	r3, [r3, #4]
 800265c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002662:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	7b1b      	ldrb	r3, [r3, #12]
 8002668:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4b2c      	ldr	r3, [pc, #176]	; (800272c <ETH_SetDMAConfig+0xfc>)
 800267a:	4013      	ands	r3, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	68f9      	ldr	r1, [r7, #12]
 8002682:	430b      	orrs	r3, r1
 8002684:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002688:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	7b5b      	ldrb	r3, [r3, #13]
 800268e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <ETH_SetDMAConfig+0x100>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	68f9      	ldr	r1, [r7, #12]
 80026ae:	430b      	orrs	r3, r1
 80026b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026b4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	7d1b      	ldrb	r3, [r3, #20]
 80026c0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80026c2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	7f5b      	ldrb	r3, [r3, #29]
 80026c8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80026da:	4b16      	ldr	r3, [pc, #88]	; (8002734 <ETH_SetDMAConfig+0x104>)
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	68f9      	ldr	r1, [r7, #12]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	7f1b      	ldrb	r3, [r3, #28]
 80026f2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002704:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <ETH_SetDMAConfig+0x108>)
 800270a:	4013      	ands	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	68f9      	ldr	r1, [r7, #12]
 8002712:	430b      	orrs	r3, r1
 8002714:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002718:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	ffff87fd 	.word	0xffff87fd
 800272c:	ffff2ffe 	.word	0xffff2ffe
 8002730:	fffec000 	.word	0xfffec000
 8002734:	ffc0efef 	.word	0xffc0efef
 8002738:	7fc0ffff 	.word	0x7fc0ffff

0800273c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b0a4      	sub	sp, #144	; 0x90
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800274a:	2300      	movs	r3, #0
 800274c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002760:	2301      	movs	r3, #1
 8002762:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002766:	2301      	movs	r3, #1
 8002768:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002784:	2300      	movs	r3, #0
 8002786:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002794:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002798:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80027a0:	2300      	movs	r3, #0
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80027b6:	2300      	movs	r3, #0
 80027b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80027be:	2300      	movs	r3, #0
 80027c0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80027d4:	2320      	movs	r3, #32
 80027d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80027e6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80027f8:	2302      	movs	r3, #2
 80027fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002810:	2301      	movs	r3, #1
 8002812:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002816:	2300      	movs	r3, #0
 8002818:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff fde6 	bl	80023f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800282c:	2301      	movs	r3, #1
 800282e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002830:	2301      	movs	r3, #1
 8002832:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002846:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800284a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002850:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002854:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800285c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002862:	f107 0308 	add.w	r3, r7, #8
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff fee1 	bl	8002630 <ETH_SetDMAConfig>
}
 800286e:	bf00      	nop
 8002870:	3790      	adds	r7, #144	; 0x90
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002876:	b480      	push	{r7}
 8002878:	b085      	sub	sp, #20
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e01d      	b.n	80028c0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68d9      	ldr	r1, [r3, #12]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2200      	movs	r2, #0
 80028a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	3206      	adds	r2, #6
 80028b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3301      	adds	r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d9de      	bls.n	8002884 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d4:	461a      	mov	r2, r3
 80028d6:	2303      	movs	r3, #3
 80028d8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e023      	b.n	800295e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6919      	ldr	r1, [r3, #16]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2200      	movs	r2, #0
 8002932:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2200      	movs	r2, #0
 800293e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	3212      	adds	r2, #18
 8002954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3301      	adds	r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d9d8      	bls.n	8002916 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800298a:	461a      	mov	r2, r3
 800298c:	2303      	movs	r3, #3
 800298e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800299e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b08d      	sub	sp, #52	; 0x34
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3318      	adds	r3, #24
 80029d4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ee:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a06:	d007      	beq.n	8002a18 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e259      	b.n	8002ed0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d044      	beq.n	8002ab2 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	4b75      	ldr	r3, [pc, #468]	; (8002c04 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a34:	431a      	orrs	r2, r3
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a54:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d027      	beq.n	8002ab2 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	041b      	lsls	r3, r3, #16
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002aa0:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ab0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00e      	beq.n	8002adc <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	6992      	ldr	r2, [r2, #24]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d036      	beq.n	8002b62 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b00:	f3bf 8f5f 	dmb	sy
}
 8002b04:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	3301      	adds	r3, #1
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d902      	bls.n	8002b24 <ETH_Prepare_Tx_Descriptors+0x160>
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	3b04      	subs	r3, #4
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2c:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	3301      	adds	r3, #1
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b40:	d10f      	bne.n	8002b62 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b4c:	f3bf 8f5f 	dmb	sy
}
 8002b50:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e1b6      	b.n	8002ed0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	3301      	adds	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	6852      	ldr	r2, [r2, #4]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d012      	beq.n	8002bb2 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	6852      	ldr	r2, [r2, #4]
 8002ba8:	0412      	lsls	r2, r2, #16
 8002baa:	431a      	orrs	r2, r3
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	e008      	b.n	8002bc4 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	6a3a      	ldr	r2, [r7, #32]
 8002bc2:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d021      	beq.n	8002c14 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	04db      	lsls	r3, r3, #19
 8002bde:	431a      	orrs	r2, r3
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	69d2      	ldr	r2, [r2, #28]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	e02e      	b.n	8002c62 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002c04:	ffff0000 	.word	0xffff0000
 8002c08:	ffffc000 	.word	0xffffc000
 8002c0c:	c000ffff 	.word	0xc000ffff
 8002c10:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4b7b      	ldr	r3, [pc, #492]	; (8002e08 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	6852      	ldr	r2, [r2, #4]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d008      	beq.n	8002c80 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c98:	f3bf 8f5f 	dmb	sy
}
 8002c9c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80da 	beq.w	8002e6c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002cca:	e0cf      	b.n	8002e6c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	3301      	adds	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d902      	bls.n	8002cea <ETH_Prepare_Tx_Descriptors+0x326>
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf2:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d0c:	d007      	beq.n	8002d1e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	3304      	adds	r3, #4
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d029      	beq.n	8002d72 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2a:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d30:	e019      	b.n	8002d66 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d32:	f3bf 8f5f 	dmb	sy
}
 8002d36:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	3301      	adds	r3, #1
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d902      	bls.n	8002d56 <ETH_Prepare_Tx_Descriptors+0x392>
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d52:	3b04      	subs	r3, #4
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5e:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d62:	3301      	adds	r3, #1
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d3e1      	bcc.n	8002d32 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e0ae      	b.n	8002ed0 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	3301      	adds	r3, #1
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <ETH_Prepare_Tx_Descriptors+0x448>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	6852      	ldr	r2, [r2, #4]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d012      	beq.n	8002dc8 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	6852      	ldr	r2, [r2, #4]
 8002dbe:	0412      	lsls	r2, r2, #16
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	e008      	b.n	8002dda <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	6a3a      	ldr	r2, [r7, #32]
 8002dd8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d018      	beq.n	8002e18 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	69d2      	ldr	r2, [r2, #28]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	60da      	str	r2, [r3, #12]
 8002e04:	e020      	b.n	8002e48 <ETH_Prepare_Tx_Descriptors+0x484>
 8002e06:	bf00      	nop
 8002e08:	ffff8000 	.word	0xffff8000
 8002e0c:	ffffc000 	.word	0xffffc000
 8002e10:	c000ffff 	.word	0xc000ffff
 8002e14:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <ETH_Prepare_Tx_Descriptors+0x518>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	6852      	ldr	r2, [r2, #4]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e4e:	f3bf 8f5f 	dmb	sy
}
 8002e52:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f47f af2b 	bne.w	8002ccc <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	e005      	b.n	8002e96 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea6:	6979      	ldr	r1, [r7, #20]
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	3304      	adds	r3, #4
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb8:	b672      	cpsid	i
}
 8002eba:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002eca:	b662      	cpsie	i
}
 8002ecc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3734      	adds	r7, #52	; 0x34
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	ffff8000 	.word	0xffff8000

08002ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002eee:	4b86      	ldr	r3, [pc, #536]	; (8003108 <HAL_GPIO_Init+0x228>)
 8002ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ef2:	e18c      	b.n	800320e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 817e 	beq.w	8003208 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d005      	beq.n	8002f24 <HAL_GPIO_Init+0x44>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d130      	bne.n	8002f86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 0201 	and.w	r2, r3, #1
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d017      	beq.n	8002fc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d123      	bne.n	8003016 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	08da      	lsrs	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3208      	adds	r2, #8
 8002fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	08da      	lsrs	r2, r3, #3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3208      	adds	r2, #8
 8003010:	69b9      	ldr	r1, [r7, #24]
 8003012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	2203      	movs	r2, #3
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0203 	and.w	r2, r3, #3
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80d8 	beq.w	8003208 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003058:	4b2c      	ldr	r3, [pc, #176]	; (800310c <HAL_GPIO_Init+0x22c>)
 800305a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800305e:	4a2b      	ldr	r2, [pc, #172]	; (800310c <HAL_GPIO_Init+0x22c>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003068:	4b28      	ldr	r3, [pc, #160]	; (800310c <HAL_GPIO_Init+0x22c>)
 800306a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003076:	4a26      	ldr	r2, [pc, #152]	; (8003110 <HAL_GPIO_Init+0x230>)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	220f      	movs	r2, #15
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <HAL_GPIO_Init+0x234>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d04a      	beq.n	8003138 <HAL_GPIO_Init+0x258>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <HAL_GPIO_Init+0x238>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d02b      	beq.n	8003102 <HAL_GPIO_Init+0x222>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a1b      	ldr	r2, [pc, #108]	; (800311c <HAL_GPIO_Init+0x23c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d025      	beq.n	80030fe <HAL_GPIO_Init+0x21e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <HAL_GPIO_Init+0x240>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01f      	beq.n	80030fa <HAL_GPIO_Init+0x21a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a19      	ldr	r2, [pc, #100]	; (8003124 <HAL_GPIO_Init+0x244>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d019      	beq.n	80030f6 <HAL_GPIO_Init+0x216>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a18      	ldr	r2, [pc, #96]	; (8003128 <HAL_GPIO_Init+0x248>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_GPIO_Init+0x212>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a17      	ldr	r2, [pc, #92]	; (800312c <HAL_GPIO_Init+0x24c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00d      	beq.n	80030ee <HAL_GPIO_Init+0x20e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a16      	ldr	r2, [pc, #88]	; (8003130 <HAL_GPIO_Init+0x250>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d007      	beq.n	80030ea <HAL_GPIO_Init+0x20a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a15      	ldr	r2, [pc, #84]	; (8003134 <HAL_GPIO_Init+0x254>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d101      	bne.n	80030e6 <HAL_GPIO_Init+0x206>
 80030e2:	2309      	movs	r3, #9
 80030e4:	e029      	b.n	800313a <HAL_GPIO_Init+0x25a>
 80030e6:	230a      	movs	r3, #10
 80030e8:	e027      	b.n	800313a <HAL_GPIO_Init+0x25a>
 80030ea:	2307      	movs	r3, #7
 80030ec:	e025      	b.n	800313a <HAL_GPIO_Init+0x25a>
 80030ee:	2306      	movs	r3, #6
 80030f0:	e023      	b.n	800313a <HAL_GPIO_Init+0x25a>
 80030f2:	2305      	movs	r3, #5
 80030f4:	e021      	b.n	800313a <HAL_GPIO_Init+0x25a>
 80030f6:	2304      	movs	r3, #4
 80030f8:	e01f      	b.n	800313a <HAL_GPIO_Init+0x25a>
 80030fa:	2303      	movs	r3, #3
 80030fc:	e01d      	b.n	800313a <HAL_GPIO_Init+0x25a>
 80030fe:	2302      	movs	r3, #2
 8003100:	e01b      	b.n	800313a <HAL_GPIO_Init+0x25a>
 8003102:	2301      	movs	r3, #1
 8003104:	e019      	b.n	800313a <HAL_GPIO_Init+0x25a>
 8003106:	bf00      	nop
 8003108:	58000080 	.word	0x58000080
 800310c:	58024400 	.word	0x58024400
 8003110:	58000400 	.word	0x58000400
 8003114:	58020000 	.word	0x58020000
 8003118:	58020400 	.word	0x58020400
 800311c:	58020800 	.word	0x58020800
 8003120:	58020c00 	.word	0x58020c00
 8003124:	58021000 	.word	0x58021000
 8003128:	58021400 	.word	0x58021400
 800312c:	58021800 	.word	0x58021800
 8003130:	58021c00 	.word	0x58021c00
 8003134:	58022400 	.word	0x58022400
 8003138:	2300      	movs	r3, #0
 800313a:	69fa      	ldr	r2, [r7, #28]
 800313c:	f002 0203 	and.w	r2, r2, #3
 8003140:	0092      	lsls	r2, r2, #2
 8003142:	4093      	lsls	r3, r2
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800314a:	4938      	ldr	r1, [pc, #224]	; (800322c <HAL_GPIO_Init+0x34c>)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	3302      	adds	r3, #2
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800317e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	3301      	adds	r3, #1
 800320c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	f47f ae6b 	bne.w	8002ef4 <HAL_GPIO_Init+0x14>
  }
}
 800321e:	bf00      	nop
 8003220:	bf00      	nop
 8003222:	3724      	adds	r7, #36	; 0x24
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	58000400 	.word	0x58000400

08003230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
 800323c:	4613      	mov	r3, r2
 800323e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003240:	787b      	ldrb	r3, [r7, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800324c:	e003      	b.n	8003256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	041a      	lsls	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	619a      	str	r2, [r3, #24]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003274:	887a      	ldrh	r2, [r7, #2]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	041a      	lsls	r2, r3, #16
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	43d9      	mvns	r1, r3
 8003280:	887b      	ldrh	r3, [r7, #2]
 8003282:	400b      	ands	r3, r1
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	619a      	str	r2, [r3, #24]
}
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80032a0:	4b29      	ldr	r3, [pc, #164]	; (8003348 <HAL_PWREx_ConfigSupply+0xb0>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	2b06      	cmp	r3, #6
 80032aa:	d00a      	beq.n	80032c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032ac:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_PWREx_ConfigSupply+0xb0>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d001      	beq.n	80032be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e03f      	b.n	800333e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e03d      	b.n	800333e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032c2:	4b21      	ldr	r3, [pc, #132]	; (8003348 <HAL_PWREx_ConfigSupply+0xb0>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80032ca:	491f      	ldr	r1, [pc, #124]	; (8003348 <HAL_PWREx_ConfigSupply+0xb0>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032d2:	f7fd ff4f 	bl	8001174 <HAL_GetTick>
 80032d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032d8:	e009      	b.n	80032ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032da:	f7fd ff4b 	bl	8001174 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032e8:	d901      	bls.n	80032ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e027      	b.n	800333e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_PWREx_ConfigSupply+0xb0>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fa:	d1ee      	bne.n	80032da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b1e      	cmp	r3, #30
 8003300:	d008      	beq.n	8003314 <HAL_PWREx_ConfigSupply+0x7c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b2e      	cmp	r3, #46	; 0x2e
 8003306:	d005      	beq.n	8003314 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b1d      	cmp	r3, #29
 800330c:	d002      	beq.n	8003314 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b2d      	cmp	r3, #45	; 0x2d
 8003312:	d113      	bne.n	800333c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003314:	f7fd ff2e 	bl	8001174 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800331a:	e009      	b.n	8003330 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800331c:	f7fd ff2a 	bl	8001174 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800332a:	d901      	bls.n	8003330 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e006      	b.n	800333e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <HAL_PWREx_ConfigSupply+0xb0>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0311 	and.w	r3, r3, #17
 8003338:	2b11      	cmp	r3, #17
 800333a:	d1ef      	bne.n	800331c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	58024800 	.word	0x58024800

0800334c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08c      	sub	sp, #48	; 0x30
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e3c8      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8087 	beq.w	800347a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336c:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003376:	4b86      	ldr	r3, [pc, #536]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	2b10      	cmp	r3, #16
 8003380:	d007      	beq.n	8003392 <HAL_RCC_OscConfig+0x46>
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	2b18      	cmp	r3, #24
 8003386:	d110      	bne.n	80033aa <HAL_RCC_OscConfig+0x5e>
 8003388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d10b      	bne.n	80033aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003392:	4b7f      	ldr	r3, [pc, #508]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d06c      	beq.n	8003478 <HAL_RCC_OscConfig+0x12c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d168      	bne.n	8003478 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e3a2      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x76>
 80033b4:	4b76      	ldr	r3, [pc, #472]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a75      	ldr	r2, [pc, #468]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80033ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	e02e      	b.n	8003420 <HAL_RCC_OscConfig+0xd4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x98>
 80033ca:	4b71      	ldr	r3, [pc, #452]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a70      	ldr	r2, [pc, #448]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80033d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b6e      	ldr	r3, [pc, #440]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6d      	ldr	r2, [pc, #436]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80033dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e01d      	b.n	8003420 <HAL_RCC_OscConfig+0xd4>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0xbc>
 80033ee:	4b68      	ldr	r3, [pc, #416]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a67      	ldr	r2, [pc, #412]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b65      	ldr	r3, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a64      	ldr	r2, [pc, #400]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0xd4>
 8003408:	4b61      	ldr	r3, [pc, #388]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a60      	ldr	r2, [pc, #384]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a5d      	ldr	r2, [pc, #372]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fd fea4 	bl	8001174 <HAL_GetTick>
 800342c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003430:	f7fd fea0 	bl	8001174 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e356      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003442:	4b53      	ldr	r3, [pc, #332]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0xe4>
 800344e:	e014      	b.n	800347a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd fe90 	bl	8001174 <HAL_GetTick>
 8003454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003458:	f7fd fe8c 	bl	8001174 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e342      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800346a:	4b49      	ldr	r3, [pc, #292]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x10c>
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 808c 	beq.w	80035a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003488:	4b41      	ldr	r3, [pc, #260]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003490:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003492:	4b3f      	ldr	r3, [pc, #252]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_RCC_OscConfig+0x162>
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	2b18      	cmp	r3, #24
 80034a2:	d137      	bne.n	8003514 <HAL_RCC_OscConfig+0x1c8>
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d132      	bne.n	8003514 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ae:	4b38      	ldr	r3, [pc, #224]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x17a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e314      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034c6:	4b32      	ldr	r3, [pc, #200]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 0219 	bic.w	r2, r3, #25
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	492f      	ldr	r1, [pc, #188]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd fe4c 	bl	8001174 <HAL_GetTick>
 80034dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e0:	f7fd fe48 	bl	8001174 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e2fe      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034f2:	4b27      	ldr	r3, [pc, #156]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	061b      	lsls	r3, r3, #24
 800350c:	4920      	ldr	r1, [pc, #128]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003512:	e045      	b.n	80035a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d026      	beq.n	800356a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800351c:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 0219 	bic.w	r2, r3, #25
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4919      	ldr	r1, [pc, #100]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fd fe21 	bl	8001174 <HAL_GetTick>
 8003532:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003536:	f7fd fe1d 	bl	8001174 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e2d3      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	490b      	ldr	r1, [pc, #44]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
 8003568:	e01a      	b.n	80035a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a08      	ldr	r2, [pc, #32]	; (8003590 <HAL_RCC_OscConfig+0x244>)
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fd fdfd 	bl	8001174 <HAL_GetTick>
 800357a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800357c:	e00a      	b.n	8003594 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357e:	f7fd fdf9 	bl	8001174 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d903      	bls.n	8003594 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e2af      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
 8003590:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003594:	4b96      	ldr	r3, [pc, #600]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1ee      	bne.n	800357e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d06a      	beq.n	8003682 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ac:	4b90      	ldr	r3, [pc, #576]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035b6:	4b8e      	ldr	r3, [pc, #568]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d007      	beq.n	80035d2 <HAL_RCC_OscConfig+0x286>
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b18      	cmp	r3, #24
 80035c6:	d11b      	bne.n	8003600 <HAL_RCC_OscConfig+0x2b4>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d116      	bne.n	8003600 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035d2:	4b87      	ldr	r3, [pc, #540]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x29e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	2b80      	cmp	r3, #128	; 0x80
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e282      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035ea:	4b81      	ldr	r3, [pc, #516]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	061b      	lsls	r3, r3, #24
 80035f8:	497d      	ldr	r1, [pc, #500]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035fe:	e040      	b.n	8003682 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d023      	beq.n	8003650 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003608:	4b79      	ldr	r3, [pc, #484]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a78      	ldr	r2, [pc, #480]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 800360e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fd fdae 	bl	8001174 <HAL_GetTick>
 8003618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800361c:	f7fd fdaa 	bl	8001174 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e260      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800362e:	4b70      	ldr	r3, [pc, #448]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800363a:	4b6d      	ldr	r3, [pc, #436]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	061b      	lsls	r3, r3, #24
 8003648:	4969      	ldr	r1, [pc, #420]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 800364a:	4313      	orrs	r3, r2
 800364c:	60cb      	str	r3, [r1, #12]
 800364e:	e018      	b.n	8003682 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003650:	4b67      	ldr	r3, [pc, #412]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a66      	ldr	r2, [pc, #408]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 8003656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fd fd8a 	bl	8001174 <HAL_GetTick>
 8003660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003664:	f7fd fd86 	bl	8001174 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e23c      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003676:	4b5e      	ldr	r3, [pc, #376]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d036      	beq.n	80036fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d019      	beq.n	80036ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003696:	4b56      	ldr	r3, [pc, #344]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 8003698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369a:	4a55      	ldr	r2, [pc, #340]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a2:	f7fd fd67 	bl	8001174 <HAL_GetTick>
 80036a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036aa:	f7fd fd63 	bl	8001174 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e219      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036bc:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80036be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x35e>
 80036c8:	e018      	b.n	80036fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ca:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80036cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ce:	4a48      	ldr	r2, [pc, #288]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d6:	f7fd fd4d 	bl	8001174 <HAL_GetTick>
 80036da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036de:	f7fd fd49 	bl	8001174 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e1ff      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036f0:	4b3f      	ldr	r3, [pc, #252]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d036      	beq.n	8003776 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d019      	beq.n	8003744 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003710:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a36      	ldr	r2, [pc, #216]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 8003716:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800371a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800371c:	f7fd fd2a 	bl	8001174 <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003724:	f7fd fd26 	bl	8001174 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e1dc      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003736:	4b2e      	ldr	r3, [pc, #184]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x3d8>
 8003742:	e018      	b.n	8003776 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003744:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a29      	ldr	r2, [pc, #164]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 800374a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800374e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003750:	f7fd fd10 	bl	8001174 <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003758:	f7fd fd0c 	bl	8001174 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e1c2      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800376a:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8086 	beq.w	8003890 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x4a8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1a      	ldr	r2, [pc, #104]	; (80037f4 <HAL_RCC_OscConfig+0x4a8>)
 800378a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003790:	f7fd fcf0 	bl	8001174 <HAL_GetTick>
 8003794:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003798:	f7fd fcec 	bl	8001174 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e1a2      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_RCC_OscConfig+0x4a8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d106      	bne.n	80037cc <HAL_RCC_OscConfig+0x480>
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ca:	e032      	b.n	8003832 <HAL_RCC_OscConfig+0x4e6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d111      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4ac>
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	6713      	str	r3, [r2, #112]	; 0x70
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4a02      	ldr	r2, [pc, #8]	; (80037f0 <HAL_RCC_OscConfig+0x4a4>)
 80037e6:	f023 0304 	bic.w	r3, r3, #4
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
 80037ec:	e021      	b.n	8003832 <HAL_RCC_OscConfig+0x4e6>
 80037ee:	bf00      	nop
 80037f0:	58024400 	.word	0x58024400
 80037f4:	58024800 	.word	0x58024800
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d10c      	bne.n	800381a <HAL_RCC_OscConfig+0x4ce>
 8003800:	4b83      	ldr	r3, [pc, #524]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a82      	ldr	r2, [pc, #520]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	4b80      	ldr	r3, [pc, #512]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a7f      	ldr	r2, [pc, #508]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
 8003818:	e00b      	b.n	8003832 <HAL_RCC_OscConfig+0x4e6>
 800381a:	4b7d      	ldr	r3, [pc, #500]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a7c      	ldr	r2, [pc, #496]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	4b7a      	ldr	r3, [pc, #488]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a79      	ldr	r2, [pc, #484]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 800382c:	f023 0304 	bic.w	r3, r3, #4
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d015      	beq.n	8003866 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fd fc9b 	bl	8001174 <HAL_GetTick>
 800383e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fd fc97 	bl	8001174 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e14b      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003858:	4b6d      	ldr	r3, [pc, #436]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ee      	beq.n	8003842 <HAL_RCC_OscConfig+0x4f6>
 8003864:	e014      	b.n	8003890 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fd fc85 	bl	8001174 <HAL_GetTick>
 800386a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fd fc81 	bl	8001174 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e135      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003884:	4b62      	ldr	r3, [pc, #392]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1ee      	bne.n	800386e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 812a 	beq.w	8003aee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800389a:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038a2:	2b18      	cmp	r3, #24
 80038a4:	f000 80ba 	beq.w	8003a1c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	f040 8095 	bne.w	80039dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b2:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a56      	ldr	r2, [pc, #344]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 80038b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fd fc59 	bl	8001174 <HAL_GetTick>
 80038c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c6:	f7fd fc55 	bl	8001174 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e10b      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038d8:	4b4d      	ldr	r3, [pc, #308]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038e4:	4b4a      	ldr	r3, [pc, #296]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 80038e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038e8:	4b4a      	ldr	r3, [pc, #296]	; (8003a14 <HAL_RCC_OscConfig+0x6c8>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	430a      	orrs	r2, r1
 80038f8:	4945      	ldr	r1, [pc, #276]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	628b      	str	r3, [r1, #40]	; 0x28
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	3b01      	subs	r3, #1
 8003904:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	3b01      	subs	r3, #1
 800390e:	025b      	lsls	r3, r3, #9
 8003910:	b29b      	uxth	r3, r3
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	3b01      	subs	r3, #1
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	3b01      	subs	r3, #1
 8003928:	061b      	lsls	r3, r3, #24
 800392a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800392e:	4938      	ldr	r1, [pc, #224]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003930:	4313      	orrs	r3, r2
 8003932:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003934:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	4a35      	ldr	r2, [pc, #212]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003940:	4b33      	ldr	r3, [pc, #204]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003944:	4b34      	ldr	r3, [pc, #208]	; (8003a18 <HAL_RCC_OscConfig+0x6cc>)
 8003946:	4013      	ands	r3, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800394c:	00d2      	lsls	r2, r2, #3
 800394e:	4930      	ldr	r1, [pc, #192]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003950:	4313      	orrs	r3, r2
 8003952:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003954:	4b2e      	ldr	r3, [pc, #184]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	f023 020c 	bic.w	r2, r3, #12
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	492b      	ldr	r1, [pc, #172]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003962:	4313      	orrs	r3, r2
 8003964:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003966:	4b2a      	ldr	r3, [pc, #168]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	f023 0202 	bic.w	r2, r3, #2
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	4927      	ldr	r1, [pc, #156]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003974:	4313      	orrs	r3, r2
 8003976:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003978:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 800397e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003982:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003984:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	4a21      	ldr	r2, [pc, #132]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 800398a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003990:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800399a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800399c:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 80039ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fbde 	bl	8001174 <HAL_GetTick>
 80039b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd fbda 	bl	8001174 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e090      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x670>
 80039da:	e088      	b.n	8003aee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039dc:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0b      	ldr	r2, [pc, #44]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 80039e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fbc4 	bl	8001174 <HAL_GetTick>
 80039ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd fbc0 	bl	8001174 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e076      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a02:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <HAL_RCC_OscConfig+0x6c4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x6a4>
 8003a0e:	e06e      	b.n	8003aee <HAL_RCC_OscConfig+0x7a2>
 8003a10:	58024400 	.word	0x58024400
 8003a14:	fffffc0c 	.word	0xfffffc0c
 8003a18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a1c:	4b36      	ldr	r3, [pc, #216]	; (8003af8 <HAL_RCC_OscConfig+0x7ac>)
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a22:	4b35      	ldr	r3, [pc, #212]	; (8003af8 <HAL_RCC_OscConfig+0x7ac>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d031      	beq.n	8003a94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f003 0203 	and.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d12a      	bne.n	8003a94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d122      	bne.n	8003a94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d11a      	bne.n	8003a94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	0a5b      	lsrs	r3, r3, #9
 8003a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d111      	bne.n	8003a94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d108      	bne.n	8003a94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	0e1b      	lsrs	r3, r3, #24
 8003a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e02b      	b.n	8003af0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003a98:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <HAL_RCC_OscConfig+0x7ac>)
 8003a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003aa2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d01f      	beq.n	8003aee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003aae:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCC_OscConfig+0x7ac>)
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	4a11      	ldr	r2, [pc, #68]	; (8003af8 <HAL_RCC_OscConfig+0x7ac>)
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003aba:	f7fd fb5b 	bl	8001174 <HAL_GetTick>
 8003abe:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ac0:	bf00      	nop
 8003ac2:	f7fd fb57 	bl	8001174 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d0f9      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <HAL_RCC_OscConfig+0x7ac>)
 8003ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <HAL_RCC_OscConfig+0x7b0>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ada:	00d2      	lsls	r2, r2, #3
 8003adc:	4906      	ldr	r1, [pc, #24]	; (8003af8 <HAL_RCC_OscConfig+0x7ac>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_OscConfig+0x7ac>)
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <HAL_RCC_OscConfig+0x7ac>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3730      	adds	r7, #48	; 0x30
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	58024400 	.word	0x58024400
 8003afc:	ffff0007 	.word	0xffff0007

08003b00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e19c      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b14:	4b8a      	ldr	r3, [pc, #552]	; (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d910      	bls.n	8003b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b87      	ldr	r3, [pc, #540]	; (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 020f 	bic.w	r2, r3, #15
 8003b2a:	4985      	ldr	r1, [pc, #532]	; (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b83      	ldr	r3, [pc, #524]	; (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e184      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d010      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	4b7b      	ldr	r3, [pc, #492]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d908      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b60:	4b78      	ldr	r3, [pc, #480]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	4975      	ldr	r1, [pc, #468]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d010      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	4b70      	ldr	r3, [pc, #448]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d908      	bls.n	8003ba0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b8e:	4b6d      	ldr	r3, [pc, #436]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	496a      	ldr	r1, [pc, #424]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d010      	beq.n	8003bce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	4b64      	ldr	r3, [pc, #400]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d908      	bls.n	8003bce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bbc:	4b61      	ldr	r3, [pc, #388]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	495e      	ldr	r1, [pc, #376]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d010      	beq.n	8003bfc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d908      	bls.n	8003bfc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bea:	4b56      	ldr	r3, [pc, #344]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	4953      	ldr	r1, [pc, #332]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	4b4d      	ldr	r3, [pc, #308]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d908      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c18:	4b4a      	ldr	r3, [pc, #296]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f023 020f 	bic.w	r2, r3, #15
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4947      	ldr	r1, [pc, #284]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d055      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c36:	4b43      	ldr	r3, [pc, #268]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	4940      	ldr	r1, [pc, #256]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d107      	bne.n	8003c60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c50:	4b3c      	ldr	r3, [pc, #240]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d121      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0f6      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d107      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c68:	4b36      	ldr	r3, [pc, #216]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d115      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0ea      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c80:	4b30      	ldr	r3, [pc, #192]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0de      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c90:	4b2c      	ldr	r3, [pc, #176]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0d6      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ca0:	4b28      	ldr	r3, [pc, #160]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f023 0207 	bic.w	r2, r3, #7
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4925      	ldr	r1, [pc, #148]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb2:	f7fd fa5f 	bl	8001174 <HAL_GetTick>
 8003cb6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb8:	e00a      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cba:	f7fd fa5b 	bl	8001174 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e0be      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd0:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d1eb      	bne.n	8003cba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d010      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d208      	bcs.n	8003d10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cfe:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f023 020f 	bic.w	r2, r3, #15
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	490e      	ldr	r1, [pc, #56]	; (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d214      	bcs.n	8003d48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 020f 	bic.w	r2, r3, #15
 8003d26:	4906      	ldr	r1, [pc, #24]	; (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e086      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
 8003d40:	52002000 	.word	0x52002000
 8003d44:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d010      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d208      	bcs.n	8003d76 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d64:	4b3c      	ldr	r3, [pc, #240]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	4939      	ldr	r1, [pc, #228]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d010      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d208      	bcs.n	8003da4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d92:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	492e      	ldr	r1, [pc, #184]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d010      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699a      	ldr	r2, [r3, #24]
 8003db4:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d208      	bcs.n	8003dd2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003dc0:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	4922      	ldr	r1, [pc, #136]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d010      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69da      	ldr	r2, [r3, #28]
 8003de2:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d208      	bcs.n	8003e00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003dee:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	4917      	ldr	r1, [pc, #92]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e00:	f000 f834 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	4912      	ldr	r1, [pc, #72]	; (8003e5c <HAL_RCC_ClockConfig+0x35c>)
 8003e12:	5ccb      	ldrb	r3, [r1, r3]
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	4a0d      	ldr	r2, [pc, #52]	; (8003e5c <HAL_RCC_ClockConfig+0x35c>)
 8003e28:	5cd3      	ldrb	r3, [r2, r3]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <HAL_RCC_ClockConfig+0x360>)
 8003e36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e38:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <HAL_RCC_ClockConfig+0x364>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <HAL_RCC_ClockConfig+0x368>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc ff34 	bl	8000cb0 <HAL_InitTick>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	58024400 	.word	0x58024400
 8003e5c:	080123dc 	.word	0x080123dc
 8003e60:	24000004 	.word	0x24000004
 8003e64:	24000000 	.word	0x24000000
 8003e68:	24000008 	.word	0x24000008

08003e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b089      	sub	sp, #36	; 0x24
 8003e70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e72:	4bb3      	ldr	r3, [pc, #716]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e7a:	2b18      	cmp	r3, #24
 8003e7c:	f200 8155 	bhi.w	800412a <HAL_RCC_GetSysClockFreq+0x2be>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003eed 	.word	0x08003eed
 8003e8c:	0800412b 	.word	0x0800412b
 8003e90:	0800412b 	.word	0x0800412b
 8003e94:	0800412b 	.word	0x0800412b
 8003e98:	0800412b 	.word	0x0800412b
 8003e9c:	0800412b 	.word	0x0800412b
 8003ea0:	0800412b 	.word	0x0800412b
 8003ea4:	0800412b 	.word	0x0800412b
 8003ea8:	08003f13 	.word	0x08003f13
 8003eac:	0800412b 	.word	0x0800412b
 8003eb0:	0800412b 	.word	0x0800412b
 8003eb4:	0800412b 	.word	0x0800412b
 8003eb8:	0800412b 	.word	0x0800412b
 8003ebc:	0800412b 	.word	0x0800412b
 8003ec0:	0800412b 	.word	0x0800412b
 8003ec4:	0800412b 	.word	0x0800412b
 8003ec8:	08003f19 	.word	0x08003f19
 8003ecc:	0800412b 	.word	0x0800412b
 8003ed0:	0800412b 	.word	0x0800412b
 8003ed4:	0800412b 	.word	0x0800412b
 8003ed8:	0800412b 	.word	0x0800412b
 8003edc:	0800412b 	.word	0x0800412b
 8003ee0:	0800412b 	.word	0x0800412b
 8003ee4:	0800412b 	.word	0x0800412b
 8003ee8:	08003f1f 	.word	0x08003f1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003eec:	4b94      	ldr	r3, [pc, #592]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ef8:	4b91      	ldr	r3, [pc, #580]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	4a90      	ldr	r2, [pc, #576]	; (8004144 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
 8003f08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003f0a:	e111      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f0c:	4b8d      	ldr	r3, [pc, #564]	; (8004144 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f0e:	61bb      	str	r3, [r7, #24]
      break;
 8003f10:	e10e      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003f12:	4b8d      	ldr	r3, [pc, #564]	; (8004148 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f14:	61bb      	str	r3, [r7, #24]
      break;
 8003f16:	e10b      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003f18:	4b8c      	ldr	r3, [pc, #560]	; (800414c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f1a:	61bb      	str	r3, [r7, #24]
      break;
 8003f1c:	e108      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f1e:	4b88      	ldr	r3, [pc, #544]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003f28:	4b85      	ldr	r3, [pc, #532]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f34:	4b82      	ldr	r3, [pc, #520]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003f3e:	4b80      	ldr	r3, [pc, #512]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f42:	08db      	lsrs	r3, r3, #3
 8003f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80e1 	beq.w	8004124 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	f000 8083 	beq.w	8004070 <HAL_RCC_GetSysClockFreq+0x204>
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	f200 80a1 	bhi.w	80040b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x114>
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d056      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f7e:	e099      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f80:	4b6f      	ldr	r3, [pc, #444]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d02d      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f8c:	4b6c      	ldr	r3, [pc, #432]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	08db      	lsrs	r3, r3, #3
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	4a6b      	ldr	r2, [pc, #428]	; (8004144 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb6:	4b62      	ldr	r3, [pc, #392]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004150 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003fe6:	e087      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004154 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffa:	4b51      	ldr	r3, [pc, #324]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400a:	ed97 6a02 	vldr	s12, [r7, #8]
 800400e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004150 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800401e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004026:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800402a:	e065      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004036:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004158 <HAL_RCC_GetSysClockFreq+0x2ec>
 800403a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403e:	4b40      	ldr	r3, [pc, #256]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004052:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004150 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800406e:	e043      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800415c <HAL_RCC_GetSysClockFreq+0x2f0>
 800407e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004082:	4b2f      	ldr	r3, [pc, #188]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004092:	ed97 6a02 	vldr	s12, [r7, #8]
 8004096:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004150 <HAL_RCC_GetSysClockFreq+0x2e4>
 800409a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040b2:	e021      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004158 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c6:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004150 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	0a5b      	lsrs	r3, r3, #9
 80040fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004102:	3301      	adds	r3, #1
 8004104:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	ee07 3a90 	vmov	s15, r3
 800410c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004110:	edd7 6a07 	vldr	s13, [r7, #28]
 8004114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411c:	ee17 3a90 	vmov	r3, s15
 8004120:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004122:	e005      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]
      break;
 8004128:	e002      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800412c:	61bb      	str	r3, [r7, #24]
      break;
 800412e:	bf00      	nop
  }

  return sysclockfreq;
 8004130:	69bb      	ldr	r3, [r7, #24]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3724      	adds	r7, #36	; 0x24
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	58024400 	.word	0x58024400
 8004144:	03d09000 	.word	0x03d09000
 8004148:	003d0900 	.word	0x003d0900
 800414c:	017d7840 	.word	0x017d7840
 8004150:	46000000 	.word	0x46000000
 8004154:	4c742400 	.word	0x4c742400
 8004158:	4a742400 	.word	0x4a742400
 800415c:	4bbebc20 	.word	0x4bbebc20

08004160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004166:	f7ff fe81 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 800416a:	4602      	mov	r2, r0
 800416c:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	0a1b      	lsrs	r3, r3, #8
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	490f      	ldr	r1, [pc, #60]	; (80041b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004178:	5ccb      	ldrb	r3, [r1, r3]
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	fa22 f303 	lsr.w	r3, r2, r3
 8004182:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800418e:	5cd3      	ldrb	r3, [r2, r3]
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	fa22 f303 	lsr.w	r3, r2, r3
 800419a:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800419c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800419e:	4a07      	ldr	r2, [pc, #28]	; (80041bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80041a6:	681b      	ldr	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	58024400 	.word	0x58024400
 80041b4:	080123dc 	.word	0x080123dc
 80041b8:	24000004 	.word	0x24000004
 80041bc:	24000000 	.word	0x24000000

080041c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80041c4:	f7ff ffcc 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	4904      	ldr	r1, [pc, #16]	; (80041e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	58024400 	.word	0x58024400
 80041e8:	080123dc 	.word	0x080123dc

080041ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	223f      	movs	r2, #63	; 0x3f
 80041fa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041fc:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <HAL_RCC_GetClockConfig+0x7c>)
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0207 	and.w	r2, r3, #7
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004208:	4b17      	ldr	r3, [pc, #92]	; (8004268 <HAL_RCC_GetClockConfig+0x7c>)
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004214:	4b14      	ldr	r3, [pc, #80]	; (8004268 <HAL_RCC_GetClockConfig+0x7c>)
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f003 020f 	and.w	r2, r3, #15
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004220:	4b11      	ldr	r3, [pc, #68]	; (8004268 <HAL_RCC_GetClockConfig+0x7c>)
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <HAL_RCC_GetClockConfig+0x7c>)
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_GetClockConfig+0x7c>)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004244:	4b08      	ldr	r3, [pc, #32]	; (8004268 <HAL_RCC_GetClockConfig+0x7c>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCC_GetClockConfig+0x80>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 020f 	and.w	r2, r3, #15
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	601a      	str	r2, [r3, #0]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	58024400 	.word	0x58024400
 800426c:	52002000 	.word	0x52002000

08004270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e049      	b.n	8004316 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f841 	bl	800431e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f000 fa0e 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d001      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e05e      	b.n	800440a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2b      	ldr	r2, [pc, #172]	; (8004418 <HAL_TIM_Base_Start_IT+0xe4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02c      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x94>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004376:	d027      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x94>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a27      	ldr	r2, [pc, #156]	; (800441c <HAL_TIM_Base_Start_IT+0xe8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d022      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x94>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a26      	ldr	r2, [pc, #152]	; (8004420 <HAL_TIM_Base_Start_IT+0xec>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01d      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x94>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a24      	ldr	r2, [pc, #144]	; (8004424 <HAL_TIM_Base_Start_IT+0xf0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x94>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a23      	ldr	r2, [pc, #140]	; (8004428 <HAL_TIM_Base_Start_IT+0xf4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x94>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a21      	ldr	r2, [pc, #132]	; (800442c <HAL_TIM_Base_Start_IT+0xf8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x94>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a20      	ldr	r2, [pc, #128]	; (8004430 <HAL_TIM_Base_Start_IT+0xfc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x94>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <HAL_TIM_Base_Start_IT+0x100>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x94>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1d      	ldr	r2, [pc, #116]	; (8004438 <HAL_TIM_Base_Start_IT+0x104>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d115      	bne.n	80043f4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	4b1b      	ldr	r3, [pc, #108]	; (800443c <HAL_TIM_Base_Start_IT+0x108>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b06      	cmp	r3, #6
 80043d8:	d015      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0xd2>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e0:	d011      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f2:	e008      	b.n	8004406 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e000      	b.n	8004408 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004406:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40010000 	.word	0x40010000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40010400 	.word	0x40010400
 800442c:	40001800 	.word	0x40001800
 8004430:	40014000 	.word	0x40014000
 8004434:	4000e000 	.word	0x4000e000
 8004438:	4000e400 	.word	0x4000e400
 800443c:	00010007 	.word	0x00010007

08004440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b02      	cmp	r3, #2
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0202 	mvn.w	r2, #2
 800446c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f905 	bl	8004692 <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f8f7 	bl	800467e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f908 	bl	80046a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0204 	mvn.w	r2, #4
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f8db 	bl	8004692 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f8cd 	bl	800467e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f8de 	bl	80046a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b08      	cmp	r3, #8
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0208 	mvn.w	r2, #8
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2204      	movs	r2, #4
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8b1 	bl	8004692 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f8a3 	bl	800467e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f8b4 	bl	80046a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b10      	cmp	r3, #16
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0210 	mvn.w	r2, #16
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2208      	movs	r2, #8
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f887 	bl	8004692 <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f879 	bl	800467e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f88a 	bl	80046a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d10e      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d107      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0201 	mvn.w	r2, #1
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc fb40 	bl	8000c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b80      	cmp	r3, #128	; 0x80
 80045d0:	d10e      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b80      	cmp	r3, #128	; 0x80
 80045de:	d107      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f920 	bl	8004830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fe:	d10e      	bne.n	800461e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	2b80      	cmp	r3, #128	; 0x80
 800460c:	d107      	bne.n	800461e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f913 	bl	8004844 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004628:	2b40      	cmp	r3, #64	; 0x40
 800462a:	d10e      	bne.n	800464a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b40      	cmp	r3, #64	; 0x40
 8004638:	d107      	bne.n	800464a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f838 	bl	80046ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b20      	cmp	r3, #32
 8004656:	d10e      	bne.n	8004676 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b20      	cmp	r3, #32
 8004664:	d107      	bne.n	8004676 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f06f 0220 	mvn.w	r2, #32
 800466e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f8d3 	bl	800481c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a44      	ldr	r2, [pc, #272]	; (80047f4 <TIM_Base_SetConfig+0x124>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d013      	beq.n	8004710 <TIM_Base_SetConfig+0x40>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ee:	d00f      	beq.n	8004710 <TIM_Base_SetConfig+0x40>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a41      	ldr	r2, [pc, #260]	; (80047f8 <TIM_Base_SetConfig+0x128>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00b      	beq.n	8004710 <TIM_Base_SetConfig+0x40>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a40      	ldr	r2, [pc, #256]	; (80047fc <TIM_Base_SetConfig+0x12c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d007      	beq.n	8004710 <TIM_Base_SetConfig+0x40>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a3f      	ldr	r2, [pc, #252]	; (8004800 <TIM_Base_SetConfig+0x130>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0x40>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a3e      	ldr	r2, [pc, #248]	; (8004804 <TIM_Base_SetConfig+0x134>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d108      	bne.n	8004722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a33      	ldr	r2, [pc, #204]	; (80047f4 <TIM_Base_SetConfig+0x124>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d027      	beq.n	800477a <TIM_Base_SetConfig+0xaa>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004730:	d023      	beq.n	800477a <TIM_Base_SetConfig+0xaa>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a30      	ldr	r2, [pc, #192]	; (80047f8 <TIM_Base_SetConfig+0x128>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01f      	beq.n	800477a <TIM_Base_SetConfig+0xaa>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a2f      	ldr	r2, [pc, #188]	; (80047fc <TIM_Base_SetConfig+0x12c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d01b      	beq.n	800477a <TIM_Base_SetConfig+0xaa>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a2e      	ldr	r2, [pc, #184]	; (8004800 <TIM_Base_SetConfig+0x130>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d017      	beq.n	800477a <TIM_Base_SetConfig+0xaa>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <TIM_Base_SetConfig+0x134>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <TIM_Base_SetConfig+0xaa>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a2c      	ldr	r2, [pc, #176]	; (8004808 <TIM_Base_SetConfig+0x138>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00f      	beq.n	800477a <TIM_Base_SetConfig+0xaa>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a2b      	ldr	r2, [pc, #172]	; (800480c <TIM_Base_SetConfig+0x13c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <TIM_Base_SetConfig+0xaa>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2a      	ldr	r2, [pc, #168]	; (8004810 <TIM_Base_SetConfig+0x140>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <TIM_Base_SetConfig+0xaa>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a29      	ldr	r2, [pc, #164]	; (8004814 <TIM_Base_SetConfig+0x144>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_Base_SetConfig+0xaa>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a28      	ldr	r2, [pc, #160]	; (8004818 <TIM_Base_SetConfig+0x148>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d108      	bne.n	800478c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a10      	ldr	r2, [pc, #64]	; (80047f4 <TIM_Base_SetConfig+0x124>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00f      	beq.n	80047d8 <TIM_Base_SetConfig+0x108>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a12      	ldr	r2, [pc, #72]	; (8004804 <TIM_Base_SetConfig+0x134>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00b      	beq.n	80047d8 <TIM_Base_SetConfig+0x108>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a11      	ldr	r2, [pc, #68]	; (8004808 <TIM_Base_SetConfig+0x138>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d007      	beq.n	80047d8 <TIM_Base_SetConfig+0x108>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a10      	ldr	r2, [pc, #64]	; (800480c <TIM_Base_SetConfig+0x13c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d003      	beq.n	80047d8 <TIM_Base_SetConfig+0x108>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <TIM_Base_SetConfig+0x140>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d103      	bne.n	80047e0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	615a      	str	r2, [r3, #20]
}
 80047e6:	bf00      	nop
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40010000 	.word	0x40010000
 80047f8:	40000400 	.word	0x40000400
 80047fc:	40000800 	.word	0x40000800
 8004800:	40000c00 	.word	0x40000c00
 8004804:	40010400 	.word	0x40010400
 8004808:	40014000 	.word	0x40014000
 800480c:	40014400 	.word	0x40014400
 8004810:	40014800 	.word	0x40014800
 8004814:	4000e000 	.word	0x4000e000
 8004818:	4000e400 	.word	0x4000e400

0800481c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800485e:	4b92      	ldr	r3, [pc, #584]	; (8004aa8 <MX_LWIP_Init+0x250>)
 8004860:	22c0      	movs	r2, #192	; 0xc0
 8004862:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004864:	4b90      	ldr	r3, [pc, #576]	; (8004aa8 <MX_LWIP_Init+0x250>)
 8004866:	22a8      	movs	r2, #168	; 0xa8
 8004868:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800486a:	4b8f      	ldr	r3, [pc, #572]	; (8004aa8 <MX_LWIP_Init+0x250>)
 800486c:	2201      	movs	r2, #1
 800486e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8004870:	4b8d      	ldr	r3, [pc, #564]	; (8004aa8 <MX_LWIP_Init+0x250>)
 8004872:	2201      	movs	r2, #1
 8004874:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004876:	4b8d      	ldr	r3, [pc, #564]	; (8004aac <MX_LWIP_Init+0x254>)
 8004878:	22ff      	movs	r2, #255	; 0xff
 800487a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800487c:	4b8b      	ldr	r3, [pc, #556]	; (8004aac <MX_LWIP_Init+0x254>)
 800487e:	22ff      	movs	r2, #255	; 0xff
 8004880:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004882:	4b8a      	ldr	r3, [pc, #552]	; (8004aac <MX_LWIP_Init+0x254>)
 8004884:	22ff      	movs	r2, #255	; 0xff
 8004886:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004888:	4b88      	ldr	r3, [pc, #544]	; (8004aac <MX_LWIP_Init+0x254>)
 800488a:	2200      	movs	r2, #0
 800488c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800488e:	4b88      	ldr	r3, [pc, #544]	; (8004ab0 <MX_LWIP_Init+0x258>)
 8004890:	2200      	movs	r2, #0
 8004892:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004894:	4b86      	ldr	r3, [pc, #536]	; (8004ab0 <MX_LWIP_Init+0x258>)
 8004896:	2200      	movs	r2, #0
 8004898:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800489a:	4b85      	ldr	r3, [pc, #532]	; (8004ab0 <MX_LWIP_Init+0x258>)
 800489c:	2200      	movs	r2, #0
 800489e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80048a0:	4b83      	ldr	r3, [pc, #524]	; (8004ab0 <MX_LWIP_Init+0x258>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80048a6:	2100      	movs	r1, #0
 80048a8:	2000      	movs	r0, #0
 80048aa:	f005 fb35 	bl	8009f18 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80048ae:	4b7e      	ldr	r3, [pc, #504]	; (8004aa8 <MX_LWIP_Init+0x250>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	061a      	lsls	r2, r3, #24
 80048b4:	4b7c      	ldr	r3, [pc, #496]	; (8004aa8 <MX_LWIP_Init+0x250>)
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	4b7a      	ldr	r3, [pc, #488]	; (8004aa8 <MX_LWIP_Init+0x250>)
 80048be:	789b      	ldrb	r3, [r3, #2]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	4313      	orrs	r3, r2
 80048c4:	4a78      	ldr	r2, [pc, #480]	; (8004aa8 <MX_LWIP_Init+0x250>)
 80048c6:	78d2      	ldrb	r2, [r2, #3]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	061a      	lsls	r2, r3, #24
 80048cc:	4b76      	ldr	r3, [pc, #472]	; (8004aa8 <MX_LWIP_Init+0x250>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	0619      	lsls	r1, r3, #24
 80048d2:	4b75      	ldr	r3, [pc, #468]	; (8004aa8 <MX_LWIP_Init+0x250>)
 80048d4:	785b      	ldrb	r3, [r3, #1]
 80048d6:	041b      	lsls	r3, r3, #16
 80048d8:	4319      	orrs	r1, r3
 80048da:	4b73      	ldr	r3, [pc, #460]	; (8004aa8 <MX_LWIP_Init+0x250>)
 80048dc:	789b      	ldrb	r3, [r3, #2]
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	430b      	orrs	r3, r1
 80048e2:	4971      	ldr	r1, [pc, #452]	; (8004aa8 <MX_LWIP_Init+0x250>)
 80048e4:	78c9      	ldrb	r1, [r1, #3]
 80048e6:	430b      	orrs	r3, r1
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048ee:	431a      	orrs	r2, r3
 80048f0:	4b6d      	ldr	r3, [pc, #436]	; (8004aa8 <MX_LWIP_Init+0x250>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	0619      	lsls	r1, r3, #24
 80048f6:	4b6c      	ldr	r3, [pc, #432]	; (8004aa8 <MX_LWIP_Init+0x250>)
 80048f8:	785b      	ldrb	r3, [r3, #1]
 80048fa:	041b      	lsls	r3, r3, #16
 80048fc:	4319      	orrs	r1, r3
 80048fe:	4b6a      	ldr	r3, [pc, #424]	; (8004aa8 <MX_LWIP_Init+0x250>)
 8004900:	789b      	ldrb	r3, [r3, #2]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	430b      	orrs	r3, r1
 8004906:	4968      	ldr	r1, [pc, #416]	; (8004aa8 <MX_LWIP_Init+0x250>)
 8004908:	78c9      	ldrb	r1, [r1, #3]
 800490a:	430b      	orrs	r3, r1
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004912:	431a      	orrs	r2, r3
 8004914:	4b64      	ldr	r3, [pc, #400]	; (8004aa8 <MX_LWIP_Init+0x250>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	0619      	lsls	r1, r3, #24
 800491a:	4b63      	ldr	r3, [pc, #396]	; (8004aa8 <MX_LWIP_Init+0x250>)
 800491c:	785b      	ldrb	r3, [r3, #1]
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	4319      	orrs	r1, r3
 8004922:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <MX_LWIP_Init+0x250>)
 8004924:	789b      	ldrb	r3, [r3, #2]
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	430b      	orrs	r3, r1
 800492a:	495f      	ldr	r1, [pc, #380]	; (8004aa8 <MX_LWIP_Init+0x250>)
 800492c:	78c9      	ldrb	r1, [r1, #3]
 800492e:	430b      	orrs	r3, r1
 8004930:	0e1b      	lsrs	r3, r3, #24
 8004932:	4313      	orrs	r3, r2
 8004934:	4a5f      	ldr	r2, [pc, #380]	; (8004ab4 <MX_LWIP_Init+0x25c>)
 8004936:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004938:	4b5c      	ldr	r3, [pc, #368]	; (8004aac <MX_LWIP_Init+0x254>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	061a      	lsls	r2, r3, #24
 800493e:	4b5b      	ldr	r3, [pc, #364]	; (8004aac <MX_LWIP_Init+0x254>)
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	431a      	orrs	r2, r3
 8004946:	4b59      	ldr	r3, [pc, #356]	; (8004aac <MX_LWIP_Init+0x254>)
 8004948:	789b      	ldrb	r3, [r3, #2]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	4313      	orrs	r3, r2
 800494e:	4a57      	ldr	r2, [pc, #348]	; (8004aac <MX_LWIP_Init+0x254>)
 8004950:	78d2      	ldrb	r2, [r2, #3]
 8004952:	4313      	orrs	r3, r2
 8004954:	061a      	lsls	r2, r3, #24
 8004956:	4b55      	ldr	r3, [pc, #340]	; (8004aac <MX_LWIP_Init+0x254>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	0619      	lsls	r1, r3, #24
 800495c:	4b53      	ldr	r3, [pc, #332]	; (8004aac <MX_LWIP_Init+0x254>)
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	041b      	lsls	r3, r3, #16
 8004962:	4319      	orrs	r1, r3
 8004964:	4b51      	ldr	r3, [pc, #324]	; (8004aac <MX_LWIP_Init+0x254>)
 8004966:	789b      	ldrb	r3, [r3, #2]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	430b      	orrs	r3, r1
 800496c:	494f      	ldr	r1, [pc, #316]	; (8004aac <MX_LWIP_Init+0x254>)
 800496e:	78c9      	ldrb	r1, [r1, #3]
 8004970:	430b      	orrs	r3, r1
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004978:	431a      	orrs	r2, r3
 800497a:	4b4c      	ldr	r3, [pc, #304]	; (8004aac <MX_LWIP_Init+0x254>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	0619      	lsls	r1, r3, #24
 8004980:	4b4a      	ldr	r3, [pc, #296]	; (8004aac <MX_LWIP_Init+0x254>)
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	4319      	orrs	r1, r3
 8004988:	4b48      	ldr	r3, [pc, #288]	; (8004aac <MX_LWIP_Init+0x254>)
 800498a:	789b      	ldrb	r3, [r3, #2]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	430b      	orrs	r3, r1
 8004990:	4946      	ldr	r1, [pc, #280]	; (8004aac <MX_LWIP_Init+0x254>)
 8004992:	78c9      	ldrb	r1, [r1, #3]
 8004994:	430b      	orrs	r3, r1
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800499c:	431a      	orrs	r2, r3
 800499e:	4b43      	ldr	r3, [pc, #268]	; (8004aac <MX_LWIP_Init+0x254>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	0619      	lsls	r1, r3, #24
 80049a4:	4b41      	ldr	r3, [pc, #260]	; (8004aac <MX_LWIP_Init+0x254>)
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	4319      	orrs	r1, r3
 80049ac:	4b3f      	ldr	r3, [pc, #252]	; (8004aac <MX_LWIP_Init+0x254>)
 80049ae:	789b      	ldrb	r3, [r3, #2]
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	430b      	orrs	r3, r1
 80049b4:	493d      	ldr	r1, [pc, #244]	; (8004aac <MX_LWIP_Init+0x254>)
 80049b6:	78c9      	ldrb	r1, [r1, #3]
 80049b8:	430b      	orrs	r3, r1
 80049ba:	0e1b      	lsrs	r3, r3, #24
 80049bc:	4313      	orrs	r3, r2
 80049be:	4a3e      	ldr	r2, [pc, #248]	; (8004ab8 <MX_LWIP_Init+0x260>)
 80049c0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80049c2:	4b3b      	ldr	r3, [pc, #236]	; (8004ab0 <MX_LWIP_Init+0x258>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	061a      	lsls	r2, r3, #24
 80049c8:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <MX_LWIP_Init+0x258>)
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	431a      	orrs	r2, r3
 80049d0:	4b37      	ldr	r3, [pc, #220]	; (8004ab0 <MX_LWIP_Init+0x258>)
 80049d2:	789b      	ldrb	r3, [r3, #2]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	4313      	orrs	r3, r2
 80049d8:	4a35      	ldr	r2, [pc, #212]	; (8004ab0 <MX_LWIP_Init+0x258>)
 80049da:	78d2      	ldrb	r2, [r2, #3]
 80049dc:	4313      	orrs	r3, r2
 80049de:	061a      	lsls	r2, r3, #24
 80049e0:	4b33      	ldr	r3, [pc, #204]	; (8004ab0 <MX_LWIP_Init+0x258>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	0619      	lsls	r1, r3, #24
 80049e6:	4b32      	ldr	r3, [pc, #200]	; (8004ab0 <MX_LWIP_Init+0x258>)
 80049e8:	785b      	ldrb	r3, [r3, #1]
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	4319      	orrs	r1, r3
 80049ee:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <MX_LWIP_Init+0x258>)
 80049f0:	789b      	ldrb	r3, [r3, #2]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	430b      	orrs	r3, r1
 80049f6:	492e      	ldr	r1, [pc, #184]	; (8004ab0 <MX_LWIP_Init+0x258>)
 80049f8:	78c9      	ldrb	r1, [r1, #3]
 80049fa:	430b      	orrs	r3, r1
 80049fc:	021b      	lsls	r3, r3, #8
 80049fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a02:	431a      	orrs	r2, r3
 8004a04:	4b2a      	ldr	r3, [pc, #168]	; (8004ab0 <MX_LWIP_Init+0x258>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	0619      	lsls	r1, r3, #24
 8004a0a:	4b29      	ldr	r3, [pc, #164]	; (8004ab0 <MX_LWIP_Init+0x258>)
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	041b      	lsls	r3, r3, #16
 8004a10:	4319      	orrs	r1, r3
 8004a12:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <MX_LWIP_Init+0x258>)
 8004a14:	789b      	ldrb	r3, [r3, #2]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	4925      	ldr	r1, [pc, #148]	; (8004ab0 <MX_LWIP_Init+0x258>)
 8004a1c:	78c9      	ldrb	r1, [r1, #3]
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	0a1b      	lsrs	r3, r3, #8
 8004a22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a26:	431a      	orrs	r2, r3
 8004a28:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <MX_LWIP_Init+0x258>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	0619      	lsls	r1, r3, #24
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <MX_LWIP_Init+0x258>)
 8004a30:	785b      	ldrb	r3, [r3, #1]
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	4319      	orrs	r1, r3
 8004a36:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <MX_LWIP_Init+0x258>)
 8004a38:	789b      	ldrb	r3, [r3, #2]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	491c      	ldr	r1, [pc, #112]	; (8004ab0 <MX_LWIP_Init+0x258>)
 8004a40:	78c9      	ldrb	r1, [r1, #3]
 8004a42:	430b      	orrs	r3, r1
 8004a44:	0e1b      	lsrs	r3, r3, #24
 8004a46:	4313      	orrs	r3, r2
 8004a48:	4a1c      	ldr	r2, [pc, #112]	; (8004abc <MX_LWIP_Init+0x264>)
 8004a4a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004a4c:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <MX_LWIP_Init+0x268>)
 8004a4e:	9302      	str	r3, [sp, #8]
 8004a50:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <MX_LWIP_Init+0x26c>)
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	2300      	movs	r3, #0
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	4b18      	ldr	r3, [pc, #96]	; (8004abc <MX_LWIP_Init+0x264>)
 8004a5a:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <MX_LWIP_Init+0x260>)
 8004a5c:	4915      	ldr	r1, [pc, #84]	; (8004ab4 <MX_LWIP_Init+0x25c>)
 8004a5e:	481a      	ldr	r0, [pc, #104]	; (8004ac8 <MX_LWIP_Init+0x270>)
 8004a60:	f006 f8d0 	bl	800ac04 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004a64:	4818      	ldr	r0, [pc, #96]	; (8004ac8 <MX_LWIP_Init+0x270>)
 8004a66:	f006 fa7b 	bl	800af60 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004a6a:	4817      	ldr	r0, [pc, #92]	; (8004ac8 <MX_LWIP_Init+0x270>)
 8004a6c:	f006 fa88 	bl	800af80 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004a70:	4916      	ldr	r1, [pc, #88]	; (8004acc <MX_LWIP_Init+0x274>)
 8004a72:	4815      	ldr	r0, [pc, #84]	; (8004ac8 <MX_LWIP_Init+0x270>)
 8004a74:	f006 fb86 	bl	800b184 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004a78:	2224      	movs	r2, #36	; 0x24
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4814      	ldr	r0, [pc, #80]	; (8004ad0 <MX_LWIP_Init+0x278>)
 8004a7e:	f00a fe48 	bl	800f712 <memset>
  attributes.name = "EthLink";
 8004a82:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <MX_LWIP_Init+0x278>)
 8004a84:	4a13      	ldr	r2, [pc, #76]	; (8004ad4 <MX_LWIP_Init+0x27c>)
 8004a86:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <MX_LWIP_Init+0x278>)
 8004a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a8e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <MX_LWIP_Init+0x278>)
 8004a92:	2210      	movs	r2, #16
 8004a94:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004a96:	4a0e      	ldr	r2, [pc, #56]	; (8004ad0 <MX_LWIP_Init+0x278>)
 8004a98:	490b      	ldr	r1, [pc, #44]	; (8004ac8 <MX_LWIP_Init+0x270>)
 8004a9a:	480f      	ldr	r0, [pc, #60]	; (8004ad8 <MX_LWIP_Init+0x280>)
 8004a9c:	f000 fd6f 	bl	800557e <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	240060fc 	.word	0x240060fc
 8004aac:	240060f8 	.word	0x240060f8
 8004ab0:	24006098 	.word	0x24006098
 8004ab4:	240060f4 	.word	0x240060f4
 8004ab8:	24006100 	.word	0x24006100
 8004abc:	24006104 	.word	0x24006104
 8004ac0:	08009ea9 	.word	0x08009ea9
 8004ac4:	08004ec5 	.word	0x08004ec5
 8004ac8:	240060c0 	.word	0x240060c0
 8004acc:	08004add 	.word	0x08004add
 8004ad0:	2400609c 	.word	0x2400609c
 8004ad4:	080108b4 	.word	0x080108b4
 8004ad8:	080051b7 	.word	0x080051b7

08004adc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <HAL_ETH_RxCpltCallback+0x1c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 ffd5 	bl	8005aac <osSemaphoreRelease>
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	240000b8 	.word	0x240000b8

08004b10 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <HAL_ETH_TxCpltCallback+0x1c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 ffc5 	bl	8005aac <osSemaphoreRelease>
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	240000bc 	.word	0x240000bc

08004b30 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7fd fc4f 	bl	80023dc <HAL_ETH_GetDMAError>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d104      	bne.n	8004b52 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <HAL_ETH_ErrorCallback+0x2c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 ffad 	bl	8005aac <osSemaphoreRelease>
  }
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	240000b8 	.word	0x240000b8

08004b60 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b0aa      	sub	sp, #168	; 0xa8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  ETH_MACConfigTypeDef MACConf = {0};
 8004b7a:	f107 0314 	add.w	r3, r7, #20
 8004b7e:	2264      	movs	r2, #100	; 0x64
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f00a fdc5 	bl	800f712 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004b88:	4b53      	ldr	r3, [pc, #332]	; (8004cd8 <low_level_init+0x178>)
 8004b8a:	4a54      	ldr	r2, [pc, #336]	; (8004cdc <low_level_init+0x17c>)
 8004b8c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8004b96:	23e1      	movs	r3, #225	; 0xe1
 8004b98:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8004ba6:	4a4c      	ldr	r2, [pc, #304]	; (8004cd8 <low_level_init+0x178>)
 8004ba8:	f107 030c 	add.w	r3, r7, #12
 8004bac:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004bae:	4b4a      	ldr	r3, [pc, #296]	; (8004cd8 <low_level_init+0x178>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004bb4:	4b48      	ldr	r3, [pc, #288]	; (8004cd8 <low_level_init+0x178>)
 8004bb6:	4a4a      	ldr	r2, [pc, #296]	; (8004ce0 <low_level_init+0x180>)
 8004bb8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004bba:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <low_level_init+0x178>)
 8004bbc:	4a49      	ldr	r2, [pc, #292]	; (8004ce4 <low_level_init+0x184>)
 8004bbe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004bc0:	4b45      	ldr	r3, [pc, #276]	; (8004cd8 <low_level_init+0x178>)
 8004bc2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004bc6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004bc8:	4843      	ldr	r0, [pc, #268]	; (8004cd8 <low_level_init+0x178>)
 8004bca:	f7fc fc4f 	bl	800146c <HAL_ETH_Init>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004bd4:	2238      	movs	r2, #56	; 0x38
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4843      	ldr	r0, [pc, #268]	; (8004ce8 <low_level_init+0x188>)
 8004bda:	f00a fd9a 	bl	800f712 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004bde:	4b42      	ldr	r3, [pc, #264]	; (8004ce8 <low_level_init+0x188>)
 8004be0:	2221      	movs	r2, #33	; 0x21
 8004be2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004be4:	4b40      	ldr	r3, [pc, #256]	; (8004ce8 <low_level_init+0x188>)
 8004be6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004bea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004bec:	4b3e      	ldr	r3, [pc, #248]	; (8004ce8 <low_level_init+0x188>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004bf2:	483e      	ldr	r0, [pc, #248]	; (8004cec <low_level_init+0x18c>)
 8004bf4:	f005 fec0 	bl	800a978 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2206      	movs	r2, #6
 8004bfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004c00:	4b35      	ldr	r3, [pc, #212]	; (8004cd8 <low_level_init+0x178>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	781a      	ldrb	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004c0c:	4b32      	ldr	r3, [pc, #200]	; (8004cd8 <low_level_init+0x178>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	785a      	ldrb	r2, [r3, #1]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004c18:	4b2f      	ldr	r3, [pc, #188]	; (8004cd8 <low_level_init+0x178>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	789a      	ldrb	r2, [r3, #2]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004c24:	4b2c      	ldr	r3, [pc, #176]	; (8004cd8 <low_level_init+0x178>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	78da      	ldrb	r2, [r3, #3]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004c30:	4b29      	ldr	r3, [pc, #164]	; (8004cd8 <low_level_init+0x178>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	791a      	ldrb	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004c3c:	4b26      	ldr	r3, [pc, #152]	; (8004cd8 <low_level_init+0x178>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	795a      	ldrb	r2, [r3, #5]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004c4e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c56:	f043 030a 	orr.w	r3, r3, #10
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004c62:	2200      	movs	r2, #0
 8004c64:	2100      	movs	r1, #0
 8004c66:	2001      	movs	r0, #1
 8004c68:	f000 fe45 	bl	80058f6 <osSemaphoreNew>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4a20      	ldr	r2, [pc, #128]	; (8004cf0 <low_level_init+0x190>)
 8004c70:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004c72:	2200      	movs	r2, #0
 8004c74:	2100      	movs	r1, #0
 8004c76:	2001      	movs	r0, #1
 8004c78:	f000 fe3d 	bl	80058f6 <osSemaphoreNew>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <low_level_init+0x194>)
 8004c80:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004c82:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004c86:	2224      	movs	r2, #36	; 0x24
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f00a fd41 	bl	800f712 <memset>
  attributes.name = "EthIf";
 8004c90:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <low_level_init+0x198>)
 8004c92:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 8004c9c:	2330      	movs	r3, #48	; 0x30
 8004c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 8004ca2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4814      	ldr	r0, [pc, #80]	; (8004cfc <low_level_init+0x19c>)
 8004cac:	f000 fc67 	bl	800557e <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83826E_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8004cb0:	4913      	ldr	r1, [pc, #76]	; (8004d00 <low_level_init+0x1a0>)
 8004cb2:	4814      	ldr	r0, [pc, #80]	; (8004d04 <low_level_init+0x1a4>)
 8004cb4:	f7fb fb7c 	bl	80003b0 <DP83826E_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  DP83826E_Init(&DP83848);
 8004cb8:	4812      	ldr	r0, [pc, #72]	; (8004d04 <low_level_init+0x1a4>)
 8004cba:	f7fb fc6e 	bl	800059a <DP83826E_Init>

  if (hal_eth_init_status == HAL_OK)
 8004cbe:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d103      	bne.n	8004cce <low_level_init+0x16e>
  {
	  ethernet_link_chk_state(netif);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fb32 	bl	8005330 <ethernet_link_chk_state>
 8004ccc:	e001      	b.n	8004cd2 <low_level_init+0x172>
  }
  else
  {
    Error_Handler();
 8004cce:	f7fb ffcb 	bl	8000c68 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004cd2:	37a8      	adds	r7, #168	; 0xa8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	2400aacc 	.word	0x2400aacc
 8004cdc:	40028000 	.word	0x40028000
 8004ce0:	30000100 	.word	0x30000100
 8004ce4:	30000000 	.word	0x30000000
 8004ce8:	2400ab7c 	.word	0x2400ab7c
 8004cec:	080123ec 	.word	0x080123ec
 8004cf0:	240000b8 	.word	0x240000b8
 8004cf4:	240000bc 	.word	0x240000bc
 8004cf8:	080108bc 	.word	0x080108bc
 8004cfc:	08004e71 	.word	0x08004e71
 8004d00:	24000010 	.word	0x24000010
 8004d04:	2400aa8c 	.word	0x2400aa8c

08004d08 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b092      	sub	sp, #72	; 0x48
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004d20:	f107 030c 	add.w	r3, r7, #12
 8004d24:	2230      	movs	r2, #48	; 0x30
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f00a fcf2 	bl	800f712 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004d2e:	f107 030c 	add.w	r3, r7, #12
 8004d32:	2230      	movs	r2, #48	; 0x30
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f00a fceb 	bl	800f712 <memset>

  for(q = p; q != NULL; q = q->next)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d40:	e045      	b.n	8004dce <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d902      	bls.n	8004d4e <low_level_output+0x46>
      return ERR_IF;
 8004d48:	f06f 030b 	mvn.w	r3, #11
 8004d4c:	e06c      	b.n	8004e28 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d54:	4613      	mov	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	3348      	adds	r3, #72	; 0x48
 8004d5e:	443b      	add	r3, r7
 8004d60:	3b3c      	subs	r3, #60	; 0x3c
 8004d62:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d66:	895b      	ldrh	r3, [r3, #10]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	3348      	adds	r3, #72	; 0x48
 8004d76:	443b      	add	r3, r7
 8004d78:	3b38      	subs	r3, #56	; 0x38
 8004d7a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d011      	beq.n	8004da6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d84:	1e5a      	subs	r2, r3, #1
 8004d86:	f107 000c 	add.w	r0, r7, #12
 8004d8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	440b      	add	r3, r1
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	18c1      	adds	r1, r0, r3
 8004d96:	4613      	mov	r3, r2
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	3348      	adds	r3, #72	; 0x48
 8004da0:	443b      	add	r3, r7
 8004da2:	3b34      	subs	r3, #52	; 0x34
 8004da4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004dae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004db0:	4613      	mov	r3, r2
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	3348      	adds	r3, #72	; 0x48
 8004dba:	443b      	add	r3, r7
 8004dbc:	3b34      	subs	r3, #52	; 0x34
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8004dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1b6      	bne.n	8004d42 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	891b      	ldrh	r3, [r3, #8]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <low_level_output+0x128>)
 8004ddc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004dde:	4a14      	ldr	r2, [pc, #80]	; (8004e30 <low_level_output+0x128>)
 8004de0:	f107 030c 	add.w	r3, r7, #12
 8004de4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004de6:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <low_level_output+0x128>)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004dec:	6838      	ldr	r0, [r7, #0]
 8004dee:	f006 fdc1 	bl	800b974 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8004df2:	490f      	ldr	r1, [pc, #60]	; (8004e30 <low_level_output+0x128>)
 8004df4:	480f      	ldr	r0, [pc, #60]	; (8004e34 <low_level_output+0x12c>)
 8004df6:	f7fc fcfb 	bl	80017f0 <HAL_ETH_Transmit_IT>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10e      	bne.n	8004e1e <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004e00:	bf00      	nop
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <low_level_output+0x130>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f04f 31ff 	mov.w	r1, #4294967295
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fdfc 	bl	8005a08 <osSemaphoreAcquire>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f5      	bne.n	8004e02 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8004e16:	4807      	ldr	r0, [pc, #28]	; (8004e34 <low_level_output+0x12c>)
 8004e18:	f7fc fe69 	bl	8001aee <HAL_ETH_ReleaseTxPacket>
 8004e1c:	e002      	b.n	8004e24 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8004e1e:	6838      	ldr	r0, [r7, #0]
 8004e20:	f006 fd02 	bl	800b828 <pbuf_free>
  }

  return errval;
 8004e24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3748      	adds	r7, #72	; 0x48
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	2400ab7c 	.word	0x2400ab7c
 8004e34:	2400aacc 	.word	0x2400aacc
 8004e38:	240000bc 	.word	0x240000bc

08004e3c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004e48:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <low_level_input+0x2c>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d105      	bne.n	8004e5c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004e50:	f107 030c 	add.w	r3, r7, #12
 8004e54:	4619      	mov	r1, r3
 8004e56:	4805      	ldr	r0, [pc, #20]	; (8004e6c <low_level_input+0x30>)
 8004e58:	f7fc fd1b 	bl	8001892 <HAL_ETH_ReadData>
  }

  return p;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	240000b4 	.word	0x240000b4
 8004e6c:	2400aacc 	.word	0x2400aacc

08004e70 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e80:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <ethernetif_input+0x50>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f04f 31ff 	mov.w	r1, #4294967295
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fdbd 	bl	8005a08 <osSemaphoreAcquire>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f5      	bne.n	8004e80 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004e94:	68b8      	ldr	r0, [r7, #8]
 8004e96:	f7ff ffd1 	bl	8004e3c <low_level_input>
 8004e9a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	4798      	blx	r3
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f006 fcb8 	bl	800b828 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1ea      	bne.n	8004e94 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004ebe:	e7df      	b.n	8004e80 <ethernetif_input+0x10>
 8004ec0:	240000b8 	.word	0x240000b8

08004ec4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <ethernetif_init+0x1c>
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <ethernetif_init+0x48>)
 8004ed4:	f240 220b 	movw	r2, #523	; 0x20b
 8004ed8:	490d      	ldr	r1, [pc, #52]	; (8004f10 <ethernetif_init+0x4c>)
 8004eda:	480e      	ldr	r0, [pc, #56]	; (8004f14 <ethernetif_init+0x50>)
 8004edc:	f00a fb7a 	bl	800f5d4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2273      	movs	r2, #115	; 0x73
 8004ee4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2274      	movs	r2, #116	; 0x74
 8004eec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a09      	ldr	r2, [pc, #36]	; (8004f18 <ethernetif_init+0x54>)
 8004ef4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <ethernetif_init+0x58>)
 8004efa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fe2f 	bl	8004b60 <low_level_init>

  return ERR_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	080108c4 	.word	0x080108c4
 8004f10:	080108e0 	.word	0x080108e0
 8004f14:	080108f0 	.word	0x080108f0
 8004f18:	0800d3b9 	.word	0x0800d3b9
 8004f1c:	08004d09 	.word	0x08004d09

08004f20 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004f2c:	68f9      	ldr	r1, [r7, #12]
 8004f2e:	4809      	ldr	r0, [pc, #36]	; (8004f54 <pbuf_free_custom+0x34>)
 8004f30:	f005 fe12 	bl	800ab58 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004f34:	4b08      	ldr	r3, [pc, #32]	; (8004f58 <pbuf_free_custom+0x38>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d107      	bne.n	8004f4c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004f3c:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <pbuf_free_custom+0x38>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <pbuf_free_custom+0x3c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fdb0 	bl	8005aac <osSemaphoreRelease>
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	080123ec 	.word	0x080123ec
 8004f58:	240000b4 	.word	0x240000b4
 8004f5c:	240000b8 	.word	0x240000b8

08004f60 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f64:	f7fc f906 	bl	8001174 <HAL_GetTick>
 8004f68:	4603      	mov	r3, r0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08e      	sub	sp, #56	; 0x38
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	605a      	str	r2, [r3, #4]
 8004f82:	609a      	str	r2, [r3, #8]
 8004f84:	60da      	str	r2, [r3, #12]
 8004f86:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a5d      	ldr	r2, [pc, #372]	; (8005104 <HAL_ETH_MspInit+0x194>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	f040 80b3 	bne.w	80050fa <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004f94:	4b5c      	ldr	r3, [pc, #368]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8004f96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f9a:	4a5b      	ldr	r2, [pc, #364]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8004f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004fa4:	4b58      	ldr	r3, [pc, #352]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8004fa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fae:	623b      	str	r3, [r7, #32]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004fb2:	4b55      	ldr	r3, [pc, #340]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8004fb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004fb8:	4a53      	ldr	r2, [pc, #332]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8004fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004fc2:	4b51      	ldr	r3, [pc, #324]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8004fc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fcc:	61fb      	str	r3, [r7, #28]
 8004fce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004fd0:	4b4d      	ldr	r3, [pc, #308]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8004fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004fd6:	4a4c      	ldr	r2, [pc, #304]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8004fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fdc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004fe0:	4b49      	ldr	r3, [pc, #292]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8004fe2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004fee:	4b46      	ldr	r3, [pc, #280]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8004ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ff4:	4a44      	ldr	r2, [pc, #272]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8004ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ffe:	4b42      	ldr	r3, [pc, #264]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8005000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800500c:	4b3e      	ldr	r3, [pc, #248]	; (8005108 <HAL_ETH_MspInit+0x198>)
 800500e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005012:	4a3d      	ldr	r2, [pc, #244]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800501c:	4b3a      	ldr	r3, [pc, #232]	; (8005108 <HAL_ETH_MspInit+0x198>)
 800501e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800502a:	4b37      	ldr	r3, [pc, #220]	; (8005108 <HAL_ETH_MspInit+0x198>)
 800502c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005030:	4a35      	ldr	r2, [pc, #212]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8005032:	f043 0302 	orr.w	r3, r3, #2
 8005036:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800503a:	4b33      	ldr	r3, [pc, #204]	; (8005108 <HAL_ETH_MspInit+0x198>)
 800503c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005048:	4b2f      	ldr	r3, [pc, #188]	; (8005108 <HAL_ETH_MspInit+0x198>)
 800504a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800504e:	4a2e      	ldr	r2, [pc, #184]	; (8005108 <HAL_ETH_MspInit+0x198>)
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005058:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <HAL_ETH_MspInit+0x198>)
 800505a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005066:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506c:	2302      	movs	r3, #2
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005070:	2300      	movs	r3, #0
 8005072:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005074:	2303      	movs	r3, #3
 8005076:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005078:	230b      	movs	r3, #11
 800507a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800507c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005080:	4619      	mov	r1, r3
 8005082:	4822      	ldr	r0, [pc, #136]	; (800510c <HAL_ETH_MspInit+0x19c>)
 8005084:	f7fd ff2c 	bl	8002ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8005088:	2332      	movs	r3, #50	; 0x32
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508c:	2302      	movs	r3, #2
 800508e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005090:	2300      	movs	r3, #0
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005094:	2303      	movs	r3, #3
 8005096:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005098:	230b      	movs	r3, #11
 800509a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800509c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050a0:	4619      	mov	r1, r3
 80050a2:	481b      	ldr	r0, [pc, #108]	; (8005110 <HAL_ETH_MspInit+0x1a0>)
 80050a4:	f7fd ff1c 	bl	8002ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80050a8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ae:	2302      	movs	r3, #2
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b6:	2303      	movs	r3, #3
 80050b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050ba:	230b      	movs	r3, #11
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c2:	4619      	mov	r1, r3
 80050c4:	4813      	ldr	r0, [pc, #76]	; (8005114 <HAL_ETH_MspInit+0x1a4>)
 80050c6:	f7fd ff0b 	bl	8002ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 80050ca:	2386      	movs	r3, #134	; 0x86
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ce:	2302      	movs	r3, #2
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d6:	2303      	movs	r3, #3
 80050d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050da:	230b      	movs	r3, #11
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050e2:	4619      	mov	r1, r3
 80050e4:	480c      	ldr	r0, [pc, #48]	; (8005118 <HAL_ETH_MspInit+0x1a8>)
 80050e6:	f7fd fefb 	bl	8002ee0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80050ea:	2200      	movs	r2, #0
 80050ec:	2105      	movs	r1, #5
 80050ee:	203d      	movs	r0, #61	; 0x3d
 80050f0:	f7fc f918 	bl	8001324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80050f4:	203d      	movs	r0, #61	; 0x3d
 80050f6:	f7fc f92f 	bl	8001358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80050fa:	bf00      	nop
 80050fc:	3738      	adds	r7, #56	; 0x38
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40028000 	.word	0x40028000
 8005108:	58024400 	.word	0x58024400
 800510c:	58021800 	.word	0x58021800
 8005110:	58020800 	.word	0x58020800
 8005114:	58020400 	.word	0x58020400
 8005118:	58020000 	.word	0x58020000

0800511c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005120:	4802      	ldr	r0, [pc, #8]	; (800512c <ETH_PHY_IO_Init+0x10>)
 8005122:	f7fd f903 	bl	800232c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	2400aacc 	.word	0x2400aacc

08005130 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return 0;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	4807      	ldr	r0, [pc, #28]	; (8005170 <ETH_PHY_IO_ReadReg+0x30>)
 8005154:	f7fc fe54 	bl	8001e00 <HAL_ETH_ReadPHYRegister>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800515e:	f04f 33ff 	mov.w	r3, #4294967295
 8005162:	e000      	b.n	8005166 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	2400aacc 	.word	0x2400aacc

08005174 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	68f9      	ldr	r1, [r7, #12]
 8005186:	4807      	ldr	r0, [pc, #28]	; (80051a4 <ETH_PHY_IO_WriteReg+0x30>)
 8005188:	f7fc fe8e 	bl	8001ea8 <HAL_ETH_WritePHYRegister>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005192:	f04f 33ff 	mov.w	r3, #4294967295
 8005196:	e000      	b.n	800519a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	2400aacc 	.word	0x2400aacc

080051a8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80051ac:	f7fb ffe2 	bl	8001174 <HAL_GetTick>
 80051b0:	4603      	mov	r3, r0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b0a0      	sub	sp, #128	; 0x80
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80051be:	f107 0308 	add.w	r3, r7, #8
 80051c2:	2264      	movs	r2, #100	; 0x64
 80051c4:	2100      	movs	r1, #0
 80051c6:	4618      	mov	r0, r3
 80051c8:	f00a faa3 	bl	800f712 <memset>
  int32_t PHYLinkState = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80051d4:	2300      	movs	r3, #0
 80051d6:	677b      	str	r3, [r7, #116]	; 0x74
 80051d8:	2300      	movs	r3, #0
 80051da:	673b      	str	r3, [r7, #112]	; 0x70

  struct netif *netif = (struct netif *) argument;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	66fb      	str	r3, [r7, #108]	; 0x6c
/* USER CODE BEGIN ETH link init */
  for(;;)
  {
	  ethernet_link_chk_state(netif);
 80051e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80051e2:	f000 f8a5 	bl	8005330 <ethernet_link_chk_state>
 80051e6:	e7fb      	b.n	80051e0 <ethernet_link_thread+0x2a>

080051e8 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80051f0:	4812      	ldr	r0, [pc, #72]	; (800523c <HAL_ETH_RxAllocateCallback+0x54>)
 80051f2:	f005 fc3d 	bl	800aa70 <memp_malloc_pool>
 80051f6:	60f8      	str	r0, [r7, #12]
  if (p)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d014      	beq.n	8005228 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f103 0220 	add.w	r2, r3, #32
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4a0d      	ldr	r2, [pc, #52]	; (8005240 <HAL_ETH_RxAllocateCallback+0x58>)
 800520c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005216:	9201      	str	r2, [sp, #4]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2241      	movs	r2, #65	; 0x41
 800521e:	2100      	movs	r1, #0
 8005220:	2000      	movs	r0, #0
 8005222:	f006 f947 	bl	800b4b4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005226:	e005      	b.n	8005234 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005228:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_ETH_RxAllocateCallback+0x5c>)
 800522a:	2201      	movs	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
}
 8005234:	bf00      	nop
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	080123ec 	.word	0x080123ec
 8005240:	08004f21 	.word	0x08004f21
 8005244:	240000b4 	.word	0x240000b4

08005248 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005248:	b480      	push	{r7}
 800524a:	b08d      	sub	sp, #52	; 0x34
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3b20      	subs	r3, #32
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005270:	2200      	movs	r2, #0
 8005272:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	887a      	ldrh	r2, [r7, #2]
 8005278:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d103      	bne.n	800528a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	e003      	b.n	8005292 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005290:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005296:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800529e:	e009      	b.n	80052b4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	891a      	ldrh	r2, [r3, #8]
 80052a4:	887b      	ldrh	r3, [r7, #2]
 80052a6:	4413      	add	r3, r2
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f2      	bne.n	80052a0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80052ba:	887b      	ldrh	r3, [r7, #2]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	623a      	str	r2, [r7, #32]
 80052c0:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dd1d      	ble.n	8005304 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	f003 021f 	and.w	r2, r3, #31
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80052d8:	f3bf 8f4f 	dsb	sy
}
 80052dc:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80052de:	4a0d      	ldr	r2, [pc, #52]	; (8005314 <HAL_ETH_RxLinkCallback+0xcc>)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3320      	adds	r3, #32
 80052ea:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	3b20      	subs	r3, #32
 80052f0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	dcf2      	bgt.n	80052de <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 80052f8:	f3bf 8f4f 	dsb	sy
}
 80052fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052fe:	f3bf 8f6f 	isb	sy
}
 8005302:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005304:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005306:	bf00      	nop
 8005308:	3734      	adds	r7, #52	; 0x34
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	e000ed00 	.word	0xe000ed00

08005318 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f006 fa81 	bl	800b828 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <ethernet_link_chk_state>:

/* USER CODE BEGIN 8 */

void ethernet_link_chk_state(struct netif *netif)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b0a0      	sub	sp, #128	; 0x80
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8005338:	2300      	movs	r3, #0
 800533a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800533c:	2300      	movs	r3, #0
 800533e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005340:	2300      	movs	r3, #0
 8005342:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83826E_GetLinkState(&DP83848);
 8005344:	483a      	ldr	r0, [pc, #232]	; (8005430 <ethernet_link_chk_state+0x100>)
 8005346:	f7fb f968 	bl	800061a <DP83826E_GetLinkState>
 800534a:	4603      	mov	r3, r0
 800534c:	673b      	str	r3, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83826E_STATUS_LINK_DOWN))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005354:	089b      	lsrs	r3, r3, #2
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00c      	beq.n	800537a <ethernet_link_chk_state+0x4a>
 8005360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005362:	2b01      	cmp	r3, #1
 8005364:	d809      	bhi.n	800537a <ethernet_link_chk_state+0x4a>
  {
    HAL_ETH_Stop(&heth);
 8005366:	4833      	ldr	r0, [pc, #204]	; (8005434 <ethernet_link_chk_state+0x104>)
 8005368:	f7fc f9f2 	bl	8001750 <HAL_ETH_Stop>
    netif_set_down(netif);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f005 fe73 	bl	800b058 <netif_set_down>
    netif_set_link_down(netif);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f005 fed6 	bl	800b124 <netif_set_link_down>
      HAL_ETH_Start_IT(&heth);
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }
}
 8005378:	e055      	b.n	8005426 <ethernet_link_chk_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83826E_STATUS_LINK_DOWN))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d14e      	bne.n	8005426 <ethernet_link_chk_state+0xf6>
 8005388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800538a:	2b01      	cmp	r3, #1
 800538c:	d94b      	bls.n	8005426 <ethernet_link_chk_state+0xf6>
    switch (PHYLinkState)
 800538e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005390:	3b02      	subs	r3, #2
 8005392:	2b03      	cmp	r3, #3
 8005394:	d82a      	bhi.n	80053ec <ethernet_link_chk_state+0xbc>
 8005396:	a201      	add	r2, pc, #4	; (adr r2, 800539c <ethernet_link_chk_state+0x6c>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	080053ad 	.word	0x080053ad
 80053a0:	080053bf 	.word	0x080053bf
 80053a4:	080053cf 	.word	0x080053cf
 80053a8:	080053df 	.word	0x080053df
      duplex = ETH_FULLDUPLEX_MODE;
 80053ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80053b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80053b8:	2301      	movs	r3, #1
 80053ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80053bc:	e017      	b.n	80053ee <ethernet_link_chk_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 80053be:	2300      	movs	r3, #0
 80053c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80053c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80053c8:	2301      	movs	r3, #1
 80053ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80053cc:	e00f      	b.n	80053ee <ethernet_link_chk_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 80053ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053d2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80053d4:	2300      	movs	r3, #0
 80053d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80053d8:	2301      	movs	r3, #1
 80053da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80053dc:	e007      	b.n	80053ee <ethernet_link_chk_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 80053de:	2300      	movs	r3, #0
 80053e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80053e2:	2300      	movs	r3, #0
 80053e4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80053e6:	2301      	movs	r3, #1
 80053e8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80053ea:	e000      	b.n	80053ee <ethernet_link_chk_state+0xbe>
      break;
 80053ec:	bf00      	nop
    if(linkchanged)
 80053ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d018      	beq.n	8005426 <ethernet_link_chk_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80053f4:	f107 030c 	add.w	r3, r7, #12
 80053f8:	4619      	mov	r1, r3
 80053fa:	480e      	ldr	r0, [pc, #56]	; (8005434 <ethernet_link_chk_state+0x104>)
 80053fc:	f7fc fda8 	bl	8001f50 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8005404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005406:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005408:	f107 030c 	add.w	r3, r7, #12
 800540c:	4619      	mov	r1, r3
 800540e:	4809      	ldr	r0, [pc, #36]	; (8005434 <ethernet_link_chk_state+0x104>)
 8005410:	f7fc ff72 	bl	80022f8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005414:	4807      	ldr	r0, [pc, #28]	; (8005434 <ethernet_link_chk_state+0x104>)
 8005416:	f7fc f90f 	bl	8001638 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f005 fdb0 	bl	800af80 <netif_set_up>
      netif_set_link_up(netif);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f005 fe4b 	bl	800b0bc <netif_set_link_up>
}
 8005426:	bf00      	nop
 8005428:	3780      	adds	r7, #128	; 0x80
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	2400aa8c 	.word	0x2400aa8c
 8005434:	2400aacc 	.word	0x2400aacc

08005438 <__NVIC_SetPriority>:
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	6039      	str	r1, [r7, #0]
 8005442:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005448:	2b00      	cmp	r3, #0
 800544a:	db0a      	blt.n	8005462 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	b2da      	uxtb	r2, r3
 8005450:	490c      	ldr	r1, [pc, #48]	; (8005484 <__NVIC_SetPriority+0x4c>)
 8005452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005456:	0112      	lsls	r2, r2, #4
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	440b      	add	r3, r1
 800545c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005460:	e00a      	b.n	8005478 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	4908      	ldr	r1, [pc, #32]	; (8005488 <__NVIC_SetPriority+0x50>)
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	3b04      	subs	r3, #4
 8005470:	0112      	lsls	r2, r2, #4
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	440b      	add	r3, r1
 8005476:	761a      	strb	r2, [r3, #24]
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	e000e100 	.word	0xe000e100
 8005488:	e000ed00 	.word	0xe000ed00

0800548c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <SysTick_Handler+0x1c>)
 8005492:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005494:	f002 fd3a 	bl	8007f0c <xTaskGetSchedulerState>
 8005498:	4603      	mov	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d001      	beq.n	80054a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800549e:	f003 fc23 	bl	8008ce8 <xPortSysTickHandler>
  }
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	e000e010 	.word	0xe000e010

080054ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80054b0:	2100      	movs	r1, #0
 80054b2:	f06f 0004 	mvn.w	r0, #4
 80054b6:	f7ff ffbf 	bl	8005438 <__NVIC_SetPriority>
#endif
}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054c6:	f3ef 8305 	mrs	r3, IPSR
 80054ca:	603b      	str	r3, [r7, #0]
  return(result);
 80054cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80054d2:	f06f 0305 	mvn.w	r3, #5
 80054d6:	607b      	str	r3, [r7, #4]
 80054d8:	e00c      	b.n	80054f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054da:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <osKernelInitialize+0x44>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d105      	bne.n	80054ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054e2:	4b08      	ldr	r3, [pc, #32]	; (8005504 <osKernelInitialize+0x44>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	607b      	str	r3, [r7, #4]
 80054ec:	e002      	b.n	80054f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054f4:	687b      	ldr	r3, [r7, #4]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	240000c0 	.word	0x240000c0

08005508 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800550e:	f3ef 8305 	mrs	r3, IPSR
 8005512:	603b      	str	r3, [r7, #0]
  return(result);
 8005514:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <osKernelStart+0x1a>
    stat = osErrorISR;
 800551a:	f06f 0305 	mvn.w	r3, #5
 800551e:	607b      	str	r3, [r7, #4]
 8005520:	e010      	b.n	8005544 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005522:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <osKernelStart+0x48>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d109      	bne.n	800553e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800552a:	f7ff ffbf 	bl	80054ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800552e:	4b08      	ldr	r3, [pc, #32]	; (8005550 <osKernelStart+0x48>)
 8005530:	2202      	movs	r2, #2
 8005532:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005534:	f002 f86c 	bl	8007610 <vTaskStartScheduler>
      stat = osOK;
 8005538:	2300      	movs	r3, #0
 800553a:	607b      	str	r3, [r7, #4]
 800553c:	e002      	b.n	8005544 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005544:	687b      	ldr	r3, [r7, #4]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	240000c0 	.word	0x240000c0

08005554 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800555a:	f3ef 8305 	mrs	r3, IPSR
 800555e:	603b      	str	r3, [r7, #0]
  return(result);
 8005560:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005566:	f002 f97f 	bl	8007868 <xTaskGetTickCountFromISR>
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	e002      	b.n	8005574 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800556e:	f002 f96b 	bl	8007848 <xTaskGetTickCount>
 8005572:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005574:	687b      	ldr	r3, [r7, #4]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800557e:	b580      	push	{r7, lr}
 8005580:	b08e      	sub	sp, #56	; 0x38
 8005582:	af04      	add	r7, sp, #16
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800558e:	f3ef 8305 	mrs	r3, IPSR
 8005592:	617b      	str	r3, [r7, #20]
  return(result);
 8005594:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005596:	2b00      	cmp	r3, #0
 8005598:	d17f      	bne.n	800569a <osThreadNew+0x11c>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d07c      	beq.n	800569a <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80055a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055a6:	2318      	movs	r3, #24
 80055a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80055ae:	f04f 33ff 	mov.w	r3, #4294967295
 80055b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d045      	beq.n	8005646 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <osThreadNew+0x4a>
        name = attr->name;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <osThreadNew+0x70>
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b38      	cmp	r3, #56	; 0x38
 80055e0:	d805      	bhi.n	80055ee <osThreadNew+0x70>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <osThreadNew+0x74>
        return (NULL);
 80055ee:	2300      	movs	r3, #0
 80055f0:	e054      	b.n	800569c <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	089b      	lsrs	r3, r3, #2
 8005600:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00e      	beq.n	8005628 <osThreadNew+0xaa>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	2ba7      	cmp	r3, #167	; 0xa7
 8005610:	d90a      	bls.n	8005628 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005616:	2b00      	cmp	r3, #0
 8005618:	d006      	beq.n	8005628 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <osThreadNew+0xaa>
        mem = 1;
 8005622:	2301      	movs	r3, #1
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	e010      	b.n	800564a <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10c      	bne.n	800564a <osThreadNew+0xcc>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d108      	bne.n	800564a <osThreadNew+0xcc>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d104      	bne.n	800564a <osThreadNew+0xcc>
          mem = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	e001      	b.n	800564a <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d110      	bne.n	8005672 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005658:	9202      	str	r2, [sp, #8]
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	6a3a      	ldr	r2, [r7, #32]
 8005664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f001 fde6 	bl	8007238 <xTaskCreateStatic>
 800566c:	4603      	mov	r3, r0
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	e013      	b.n	800569a <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d110      	bne.n	800569a <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	b29a      	uxth	r2, r3
 800567c:	f107 0310 	add.w	r3, r7, #16
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f001 fe31 	bl	80072f2 <xTaskCreate>
 8005690:	4603      	mov	r3, r0
 8005692:	2b01      	cmp	r3, #1
 8005694:	d001      	beq.n	800569a <osThreadNew+0x11c>
            hTask = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800569a:	693b      	ldr	r3, [r7, #16]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3728      	adds	r7, #40	; 0x28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ac:	f3ef 8305 	mrs	r3, IPSR
 80056b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <osDelay+0x1c>
    stat = osErrorISR;
 80056b8:	f06f 0305 	mvn.w	r3, #5
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	e007      	b.n	80056d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f001 ff6c 	bl	80075a8 <vTaskDelay>
    }
  }

  return (stat);
 80056d0:	68fb      	ldr	r3, [r7, #12]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80056da:	b580      	push	{r7, lr}
 80056dc:	b088      	sub	sp, #32
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056e6:	f3ef 8305 	mrs	r3, IPSR
 80056ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80056ec:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d174      	bne.n	80057dc <osMutexNew+0x102>
    if (attr != NULL) {
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <osMutexNew+0x26>
      type = attr->attr_bits;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	e001      	b.n	8005704 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <osMutexNew+0x3a>
      rmtx = 1U;
 800570e:	2301      	movs	r3, #1
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e001      	b.n	8005718 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d15c      	bne.n	80057dc <osMutexNew+0x102>
      mem = -1;
 8005722:	f04f 33ff 	mov.w	r3, #4294967295
 8005726:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d015      	beq.n	800575a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d006      	beq.n	8005744 <osMutexNew+0x6a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2b4f      	cmp	r3, #79	; 0x4f
 800573c:	d902      	bls.n	8005744 <osMutexNew+0x6a>
          mem = 1;
 800573e:	2301      	movs	r3, #1
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	e00c      	b.n	800575e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d108      	bne.n	800575e <osMutexNew+0x84>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d104      	bne.n	800575e <osMutexNew+0x84>
            mem = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	e001      	b.n	800575e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d112      	bne.n	800578a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	4619      	mov	r1, r3
 8005770:	2004      	movs	r0, #4
 8005772:	f000 fdd0 	bl	8006316 <xQueueCreateMutexStatic>
 8005776:	61f8      	str	r0, [r7, #28]
 8005778:	e016      	b.n	80057a8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	4619      	mov	r1, r3
 8005780:	2001      	movs	r0, #1
 8005782:	f000 fdc8 	bl	8006316 <xQueueCreateMutexStatic>
 8005786:	61f8      	str	r0, [r7, #28]
 8005788:	e00e      	b.n	80057a8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10b      	bne.n	80057a8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005796:	2004      	movs	r0, #4
 8005798:	f000 fda5 	bl	80062e6 <xQueueCreateMutex>
 800579c:	61f8      	str	r0, [r7, #28]
 800579e:	e003      	b.n	80057a8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80057a0:	2001      	movs	r0, #1
 80057a2:	f000 fda0 	bl	80062e6 <xQueueCreateMutex>
 80057a6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00c      	beq.n	80057c8 <osMutexNew+0xee>
        if (attr != NULL) {
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <osMutexNew+0xe2>
          name = attr->name;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	e001      	b.n	80057c0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80057c0:	68f9      	ldr	r1, [r7, #12]
 80057c2:	69f8      	ldr	r0, [r7, #28]
 80057c4:	f001 fcb0 	bl	8007128 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <osMutexNew+0x102>
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80057dc:	69fb      	ldr	r3, [r7, #28]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b086      	sub	sp, #24
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005804:	f3ef 8305 	mrs	r3, IPSR
 8005808:	60bb      	str	r3, [r7, #8]
  return(result);
 800580a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005810:	f06f 0305 	mvn.w	r3, #5
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	e02c      	b.n	8005872 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d103      	bne.n	8005826 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800581e:	f06f 0303 	mvn.w	r3, #3
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	e025      	b.n	8005872 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d011      	beq.n	8005850 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6938      	ldr	r0, [r7, #16]
 8005830:	f000 fdc0 	bl	80063b4 <xQueueTakeMutexRecursive>
 8005834:	4603      	mov	r3, r0
 8005836:	2b01      	cmp	r3, #1
 8005838:	d01b      	beq.n	8005872 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005840:	f06f 0301 	mvn.w	r3, #1
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	e014      	b.n	8005872 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005848:	f06f 0302 	mvn.w	r3, #2
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	e010      	b.n	8005872 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	6938      	ldr	r0, [r7, #16]
 8005854:	f001 f954 	bl	8006b00 <xQueueSemaphoreTake>
 8005858:	4603      	mov	r3, r0
 800585a:	2b01      	cmp	r3, #1
 800585c:	d009      	beq.n	8005872 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005864:	f06f 0301 	mvn.w	r3, #1
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e002      	b.n	8005872 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800586c:	f06f 0302 	mvn.w	r3, #2
 8005870:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005872:	697b      	ldr	r3, [r7, #20]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f023 0301 	bic.w	r3, r3, #1
 800588a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005898:	f3ef 8305 	mrs	r3, IPSR
 800589c:	60bb      	str	r3, [r7, #8]
  return(result);
 800589e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <osMutexRelease+0x30>
    stat = osErrorISR;
 80058a4:	f06f 0305 	mvn.w	r3, #5
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	e01f      	b.n	80058ec <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80058b2:	f06f 0303 	mvn.w	r3, #3
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e018      	b.n	80058ec <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80058c0:	6938      	ldr	r0, [r7, #16]
 80058c2:	f000 fd43 	bl	800634c <xQueueGiveMutexRecursive>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d00f      	beq.n	80058ec <osMutexRelease+0x70>
        stat = osErrorResource;
 80058cc:	f06f 0302 	mvn.w	r3, #2
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	e00b      	b.n	80058ec <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80058d4:	2300      	movs	r3, #0
 80058d6:	2200      	movs	r2, #0
 80058d8:	2100      	movs	r1, #0
 80058da:	6938      	ldr	r0, [r7, #16]
 80058dc:	f000 fe0a 	bl	80064f4 <xQueueGenericSend>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d002      	beq.n	80058ec <osMutexRelease+0x70>
        stat = osErrorResource;
 80058e6:	f06f 0302 	mvn.w	r3, #2
 80058ea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80058ec:	697b      	ldr	r3, [r7, #20]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b08a      	sub	sp, #40	; 0x28
 80058fa:	af02      	add	r7, sp, #8
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005906:	f3ef 8305 	mrs	r3, IPSR
 800590a:	613b      	str	r3, [r7, #16]
  return(result);
 800590c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800590e:	2b00      	cmp	r3, #0
 8005910:	d175      	bne.n	80059fe <osSemaphoreNew+0x108>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d072      	beq.n	80059fe <osSemaphoreNew+0x108>
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	429a      	cmp	r2, r3
 800591e:	d86e      	bhi.n	80059fe <osSemaphoreNew+0x108>
    mem = -1;
 8005920:	f04f 33ff 	mov.w	r3, #4294967295
 8005924:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d015      	beq.n	8005958 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d006      	beq.n	8005942 <osSemaphoreNew+0x4c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b4f      	cmp	r3, #79	; 0x4f
 800593a:	d902      	bls.n	8005942 <osSemaphoreNew+0x4c>
        mem = 1;
 800593c:	2301      	movs	r3, #1
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	e00c      	b.n	800595c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d108      	bne.n	800595c <osSemaphoreNew+0x66>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <osSemaphoreNew+0x66>
          mem = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	e001      	b.n	800595c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d04c      	beq.n	80059fe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d128      	bne.n	80059bc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d10a      	bne.n	8005986 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	2203      	movs	r2, #3
 8005976:	9200      	str	r2, [sp, #0]
 8005978:	2200      	movs	r2, #0
 800597a:	2100      	movs	r1, #0
 800597c:	2001      	movs	r0, #1
 800597e:	f000 fbc3 	bl	8006108 <xQueueGenericCreateStatic>
 8005982:	61f8      	str	r0, [r7, #28]
 8005984:	e005      	b.n	8005992 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005986:	2203      	movs	r2, #3
 8005988:	2100      	movs	r1, #0
 800598a:	2001      	movs	r0, #1
 800598c:	f000 fc34 	bl	80061f8 <xQueueGenericCreate>
 8005990:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d022      	beq.n	80059de <osSemaphoreNew+0xe8>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01f      	beq.n	80059de <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800599e:	2300      	movs	r3, #0
 80059a0:	2200      	movs	r2, #0
 80059a2:	2100      	movs	r1, #0
 80059a4:	69f8      	ldr	r0, [r7, #28]
 80059a6:	f000 fda5 	bl	80064f4 <xQueueGenericSend>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d016      	beq.n	80059de <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80059b0:	69f8      	ldr	r0, [r7, #28]
 80059b2:	f001 fa6d 	bl	8006e90 <vQueueDelete>
            hSemaphore = NULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61fb      	str	r3, [r7, #28]
 80059ba:	e010      	b.n	80059de <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d108      	bne.n	80059d4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	461a      	mov	r2, r3
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fd28 	bl	8006420 <xQueueCreateCountingSemaphoreStatic>
 80059d0:	61f8      	str	r0, [r7, #28]
 80059d2:	e004      	b.n	80059de <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 fd59 	bl	800648e <xQueueCreateCountingSemaphore>
 80059dc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00c      	beq.n	80059fe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	e001      	b.n	80059f6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80059f6:	6979      	ldr	r1, [r7, #20]
 80059f8:	69f8      	ldr	r0, [r7, #28]
 80059fa:	f001 fb95 	bl	8007128 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80059fe:	69fb      	ldr	r3, [r7, #28]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3720      	adds	r7, #32
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d103      	bne.n	8005a28 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005a20:	f06f 0303 	mvn.w	r3, #3
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e039      	b.n	8005a9c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a28:	f3ef 8305 	mrs	r3, IPSR
 8005a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d022      	beq.n	8005a7a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005a3a:	f06f 0303 	mvn.w	r3, #3
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	e02c      	b.n	8005a9c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005a46:	f107 0308 	add.w	r3, r7, #8
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	6938      	ldr	r0, [r7, #16]
 8005a50:	f001 f962 	bl	8006d18 <xQueueReceiveFromISR>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d003      	beq.n	8005a62 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005a5a:	f06f 0302 	mvn.w	r3, #2
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e01c      	b.n	8005a9c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d019      	beq.n	8005a9c <osSemaphoreAcquire+0x94>
 8005a68:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <osSemaphoreAcquire+0xa0>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	e010      	b.n	8005a9c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005a7a:	6839      	ldr	r1, [r7, #0]
 8005a7c:	6938      	ldr	r0, [r7, #16]
 8005a7e:	f001 f83f 	bl	8006b00 <xQueueSemaphoreTake>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d009      	beq.n	8005a9c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005a8e:	f06f 0301 	mvn.w	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	e002      	b.n	8005a9c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005a96:	f06f 0302 	mvn.w	r3, #2
 8005a9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005a9c:	697b      	ldr	r3, [r7, #20]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005ac2:	f06f 0303 	mvn.w	r3, #3
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	e02c      	b.n	8005b24 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aca:	f3ef 8305 	mrs	r3, IPSR
 8005ace:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d01a      	beq.n	8005b0c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005ada:	f107 0308 	add.w	r3, r7, #8
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6938      	ldr	r0, [r7, #16]
 8005ae2:	f000 fea0 	bl	8006826 <xQueueGiveFromISR>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d003      	beq.n	8005af4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005aec:	f06f 0302 	mvn.w	r3, #2
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	e017      	b.n	8005b24 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d014      	beq.n	8005b24 <osSemaphoreRelease+0x78>
 8005afa:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <osSemaphoreRelease+0x84>)
 8005afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	e00b      	b.n	8005b24 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2100      	movs	r1, #0
 8005b12:	6938      	ldr	r0, [r7, #16]
 8005b14:	f000 fcee 	bl	80064f4 <xQueueGenericSend>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d002      	beq.n	8005b24 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005b1e:	f06f 0302 	mvn.w	r3, #2
 8005b22:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005b24:	697b      	ldr	r3, [r7, #20]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b40:	f3ef 8305 	mrs	r3, IPSR
 8005b44:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b46:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005b4c:	f06f 0305 	mvn.w	r3, #5
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	e00e      	b.n	8005b72 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005b5a:	f06f 0303 	mvn.w	r3, #3
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e007      	b.n	8005b72 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005b62:	6938      	ldr	r0, [r7, #16]
 8005b64:	f001 fb0a 	bl	800717c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005b6c:	6938      	ldr	r0, [r7, #16]
 8005b6e:	f001 f98f 	bl	8006e90 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005b72:	697b      	ldr	r3, [r7, #20]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	; 0x28
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b8c:	f3ef 8305 	mrs	r3, IPSR
 8005b90:	613b      	str	r3, [r7, #16]
  return(result);
 8005b92:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d15f      	bne.n	8005c58 <osMessageQueueNew+0xdc>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d05c      	beq.n	8005c58 <osMessageQueueNew+0xdc>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d059      	beq.n	8005c58 <osMessageQueueNew+0xdc>
    mem = -1;
 8005ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d029      	beq.n	8005c04 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d012      	beq.n	8005bde <osMessageQueueNew+0x62>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	2b4f      	cmp	r3, #79	; 0x4f
 8005bbe:	d90e      	bls.n	8005bde <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695a      	ldr	r2, [r3, #20]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	fb01 f303 	mul.w	r3, r1, r3
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d302      	bcc.n	8005bde <osMessageQueueNew+0x62>
        mem = 1;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	e014      	b.n	8005c08 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d110      	bne.n	8005c08 <osMessageQueueNew+0x8c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10c      	bne.n	8005c08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d108      	bne.n	8005c08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <osMessageQueueNew+0x8c>
          mem = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e001      	b.n	8005c08 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d10b      	bne.n	8005c26 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2100      	movs	r1, #0
 8005c18:	9100      	str	r1, [sp, #0]
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 fa73 	bl	8006108 <xQueueGenericCreateStatic>
 8005c22:	61f8      	str	r0, [r7, #28]
 8005c24:	e008      	b.n	8005c38 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 fae1 	bl	80061f8 <xQueueGenericCreate>
 8005c36:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <osMessageQueueNew+0xd0>
        name = attr->name;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	e001      	b.n	8005c50 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005c50:	6979      	ldr	r1, [r7, #20]
 8005c52:	69f8      	ldr	r0, [r7, #28]
 8005c54:	f001 fa68 	bl	8007128 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005c58:	69fb      	ldr	r3, [r7, #28]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3720      	adds	r7, #32
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	603b      	str	r3, [r7, #0]
 8005c70:	4613      	mov	r3, r2
 8005c72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c7c:	f3ef 8305 	mrs	r3, IPSR
 8005c80:	617b      	str	r3, [r7, #20]
  return(result);
 8005c82:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d028      	beq.n	8005cda <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <osMessageQueuePut+0x36>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <osMessageQueuePut+0x36>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005c9a:	f06f 0303 	mvn.w	r3, #3
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	e038      	b.n	8005d14 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005ca6:	f107 0210 	add.w	r2, r7, #16
 8005caa:	2300      	movs	r3, #0
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	69b8      	ldr	r0, [r7, #24]
 8005cb0:	f000 fd1e 	bl	80066f0 <xQueueGenericSendFromISR>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d003      	beq.n	8005cc2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005cba:	f06f 0302 	mvn.w	r3, #2
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	e028      	b.n	8005d14 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d025      	beq.n	8005d14 <osMessageQueuePut+0xb0>
 8005cc8:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <osMessageQueuePut+0xbc>)
 8005cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	e01c      	b.n	8005d14 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <osMessageQueuePut+0x82>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005ce6:	f06f 0303 	mvn.w	r3, #3
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	e012      	b.n	8005d14 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005cee:	2300      	movs	r3, #0
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	69b8      	ldr	r0, [r7, #24]
 8005cf6:	f000 fbfd 	bl	80064f4 <xQueueGenericSend>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d009      	beq.n	8005d14 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005d06:	f06f 0301 	mvn.w	r3, #1
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e002      	b.n	8005d14 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005d0e:	f06f 0302 	mvn.w	r3, #2
 8005d12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d14:	69fb      	ldr	r3, [r7, #28]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	e000ed04 	.word	0xe000ed04

08005d24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d3a:	f3ef 8305 	mrs	r3, IPSR
 8005d3e:	617b      	str	r3, [r7, #20]
  return(result);
 8005d40:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d028      	beq.n	8005d98 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <osMessageQueueGet+0x34>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <osMessageQueueGet+0x34>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005d58:	f06f 0303 	mvn.w	r3, #3
 8005d5c:	61fb      	str	r3, [r7, #28]
 8005d5e:	e037      	b.n	8005dd0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005d64:	f107 0310 	add.w	r3, r7, #16
 8005d68:	461a      	mov	r2, r3
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	69b8      	ldr	r0, [r7, #24]
 8005d6e:	f000 ffd3 	bl	8006d18 <xQueueReceiveFromISR>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d003      	beq.n	8005d80 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005d78:	f06f 0302 	mvn.w	r3, #2
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	e027      	b.n	8005dd0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d024      	beq.n	8005dd0 <osMessageQueueGet+0xac>
 8005d86:	4b15      	ldr	r3, [pc, #84]	; (8005ddc <osMessageQueueGet+0xb8>)
 8005d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	e01b      	b.n	8005dd0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <osMessageQueueGet+0x80>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d103      	bne.n	8005dac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005da4:	f06f 0303 	mvn.w	r3, #3
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	e011      	b.n	8005dd0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	69b8      	ldr	r0, [r7, #24]
 8005db2:	f000 fdc5 	bl	8006940 <xQueueReceive>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d009      	beq.n	8005dd0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005dc2:	f06f 0301 	mvn.w	r3, #1
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e002      	b.n	8005dd0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005dca:	f06f 0302 	mvn.w	r3, #2
 8005dce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005dd0:	69fb      	ldr	r3, [r7, #28]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	e000ed04 	.word	0xe000ed04

08005de0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d102      	bne.n	8005df8 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	e00e      	b.n	8005e16 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005df8:	f3ef 8305 	mrs	r3, IPSR
 8005dfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005e04:	6938      	ldr	r0, [r7, #16]
 8005e06:	f001 f825 	bl	8006e54 <uxQueueMessagesWaitingFromISR>
 8005e0a:	6178      	str	r0, [r7, #20]
 8005e0c:	e003      	b.n	8005e16 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005e0e:	6938      	ldr	r0, [r7, #16]
 8005e10:	f001 f802 	bl	8006e18 <uxQueueMessagesWaiting>
 8005e14:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005e16:	697b      	ldr	r3, [r7, #20]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e2c:	f3ef 8305 	mrs	r3, IPSR
 8005e30:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e32:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8005e38:	f06f 0305 	mvn.w	r3, #5
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	e00e      	b.n	8005e5e <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8005e46:	f06f 0303 	mvn.w	r3, #3
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	e007      	b.n	8005e5e <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005e4e:	6938      	ldr	r0, [r7, #16]
 8005e50:	f001 f994 	bl	800717c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8005e58:	6938      	ldr	r0, [r7, #16]
 8005e5a:	f001 f819 	bl	8006e90 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005e5e:	697b      	ldr	r3, [r7, #20]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4a07      	ldr	r2, [pc, #28]	; (8005e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	4a06      	ldr	r2, [pc, #24]	; (8005e98 <vApplicationGetIdleTaskMemory+0x30>)
 8005e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e86:	601a      	str	r2, [r3, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	240000c4 	.word	0x240000c4
 8005e98:	2400016c 	.word	0x2400016c

08005e9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4a07      	ldr	r2, [pc, #28]	; (8005ec8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005eac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	4a06      	ldr	r2, [pc, #24]	; (8005ecc <vApplicationGetTimerTaskMemory+0x30>)
 8005eb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005eba:	601a      	str	r2, [r3, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	2400096c 	.word	0x2400096c
 8005ecc:	24000a14 	.word	0x24000a14

08005ed0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f103 0208 	add.w	r2, r3, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f103 0208 	add.w	r2, r3, #8
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f103 0208 	add.w	r2, r3, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b085      	sub	sp, #20
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
}
 8005f66:	bf00      	nop
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f72:	b480      	push	{r7}
 8005f74:	b085      	sub	sp, #20
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d103      	bne.n	8005f92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	e00c      	b.n	8005fac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3308      	adds	r3, #8
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	e002      	b.n	8005fa0 <vListInsert+0x2e>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d2f6      	bcs.n	8005f9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6892      	ldr	r2, [r2, #8]
 8005ffa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6852      	ldr	r2, [r2, #4]
 8006004:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	429a      	cmp	r2, r3
 800600e:	d103      	bne.n	8006018 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	1e5a      	subs	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006062:	f002 fdaf 	bl	8008bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	441a      	add	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	3b01      	subs	r3, #1
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006098:	fb01 f303 	mul.w	r3, r1, r3
 800609c:	441a      	add	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	22ff      	movs	r2, #255	; 0xff
 80060a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	22ff      	movs	r2, #255	; 0xff
 80060ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d114      	bne.n	80060e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01a      	beq.n	80060f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3310      	adds	r3, #16
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 fd4f 	bl	8007b68 <xTaskRemoveFromEventList>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d012      	beq.n	80060f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <xQueueGenericReset+0xcc>)
 80060d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	e009      	b.n	80060f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3310      	adds	r3, #16
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff fef2 	bl	8005ed0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3324      	adds	r3, #36	; 0x24
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff feed 	bl	8005ed0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060f6:	f002 fd95 	bl	8008c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060fa:	2301      	movs	r3, #1
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	e000ed04 	.word	0xe000ed04

08006108 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08e      	sub	sp, #56	; 0x38
 800610c:	af02      	add	r7, sp, #8
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
}
 800614a:	bf00      	nop
 800614c:	e7fe      	b.n	800614c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <xQueueGenericCreateStatic+0x52>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <xQueueGenericCreateStatic+0x56>
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <xQueueGenericCreateStatic+0x58>
 800615e:	2300      	movs	r3, #0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	623b      	str	r3, [r7, #32]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <xQueueGenericCreateStatic+0x7e>
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <xQueueGenericCreateStatic+0x82>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <xQueueGenericCreateStatic+0x84>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	61fb      	str	r3, [r7, #28]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061a6:	2350      	movs	r3, #80	; 0x50
 80061a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b50      	cmp	r3, #80	; 0x50
 80061ae:	d00a      	beq.n	80061c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	61bb      	str	r3, [r7, #24]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00d      	beq.n	80061ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	4613      	mov	r3, r2
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f83f 	bl	800626c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3730      	adds	r7, #48	; 0x30
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	; 0x28
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	4613      	mov	r3, r2
 8006204:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <xQueueGenericCreate+0x2a>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	613b      	str	r3, [r7, #16]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	fb02 f303 	mul.w	r3, r2, r3
 800622a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3350      	adds	r3, #80	; 0x50
 8006230:	4618      	mov	r0, r3
 8006232:	f002 fde9 	bl	8008e08 <pvPortMalloc>
 8006236:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d011      	beq.n	8006262 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	3350      	adds	r3, #80	; 0x50
 8006246:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006250:	79fa      	ldrb	r2, [r7, #7]
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	4613      	mov	r3, r2
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f805 	bl	800626c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006262:	69bb      	ldr	r3, [r7, #24]
	}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d103      	bne.n	8006288 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	e002      	b.n	800628e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800629a:	2101      	movs	r1, #1
 800629c:	69b8      	ldr	r0, [r7, #24]
 800629e:	f7ff fecb 	bl	8006038 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	78fa      	ldrb	r2, [r7, #3]
 80062a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062aa:	bf00      	nop
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00e      	beq.n	80062de <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80062d2:	2300      	movs	r3, #0
 80062d4:	2200      	movs	r2, #0
 80062d6:	2100      	movs	r1, #0
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f90b 	bl	80064f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80062de:	bf00      	nop
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b086      	sub	sp, #24
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	4603      	mov	r3, r0
 80062ee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062f0:	2301      	movs	r3, #1
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	2300      	movs	r3, #0
 80062f6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	461a      	mov	r2, r3
 80062fc:	6939      	ldr	r1, [r7, #16]
 80062fe:	6978      	ldr	r0, [r7, #20]
 8006300:	f7ff ff7a 	bl	80061f8 <xQueueGenericCreate>
 8006304:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7ff ffd3 	bl	80062b2 <prvInitialiseMutex>

		return xNewQueue;
 800630c:	68fb      	ldr	r3, [r7, #12]
	}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006316:	b580      	push	{r7, lr}
 8006318:	b088      	sub	sp, #32
 800631a:	af02      	add	r7, sp, #8
 800631c:	4603      	mov	r3, r0
 800631e:	6039      	str	r1, [r7, #0]
 8006320:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006322:	2301      	movs	r3, #1
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	2300      	movs	r3, #0
 8006328:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2200      	movs	r2, #0
 8006332:	6939      	ldr	r1, [r7, #16]
 8006334:	6978      	ldr	r0, [r7, #20]
 8006336:	f7ff fee7 	bl	8006108 <xQueueGenericCreateStatic>
 800633a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7ff ffb8 	bl	80062b2 <prvInitialiseMutex>

		return xNewQueue;
 8006342:	68fb      	ldr	r3, [r7, #12]
	}
 8006344:	4618      	mov	r0, r3
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800634c:	b590      	push	{r4, r7, lr}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	60fb      	str	r3, [r7, #12]
}
 8006370:	bf00      	nop
 8006372:	e7fe      	b.n	8006372 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	689c      	ldr	r4, [r3, #8]
 8006378:	f001 fdb8 	bl	8007eec <xTaskGetCurrentTaskHandle>
 800637c:	4603      	mov	r3, r0
 800637e:	429c      	cmp	r4, r3
 8006380:	d111      	bne.n	80063a6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	1e5a      	subs	r2, r3, #1
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d105      	bne.n	80063a0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006394:	2300      	movs	r3, #0
 8006396:	2200      	movs	r2, #0
 8006398:	2100      	movs	r1, #0
 800639a:	6938      	ldr	r0, [r7, #16]
 800639c:	f000 f8aa 	bl	80064f4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80063a0:	2301      	movs	r3, #1
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e001      	b.n	80063aa <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80063aa:	697b      	ldr	r3, [r7, #20]
	}
 80063ac:	4618      	mov	r0, r3
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd90      	pop	{r4, r7, pc}

080063b4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80063b4:	b590      	push	{r4, r7, lr}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	60fb      	str	r3, [r7, #12]
}
 80063da:	bf00      	nop
 80063dc:	e7fe      	b.n	80063dc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	689c      	ldr	r4, [r3, #8]
 80063e2:	f001 fd83 	bl	8007eec <xTaskGetCurrentTaskHandle>
 80063e6:	4603      	mov	r3, r0
 80063e8:	429c      	cmp	r4, r3
 80063ea:	d107      	bne.n	80063fc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80063f6:	2301      	movs	r3, #1
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	e00c      	b.n	8006416 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6938      	ldr	r0, [r7, #16]
 8006400:	f000 fb7e 	bl	8006b00 <xQueueSemaphoreTake>
 8006404:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006416:	697b      	ldr	r3, [r7, #20]
	}
 8006418:	4618      	mov	r0, r3
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	bd90      	pop	{r4, r7, pc}

08006420 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	; 0x28
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	61bb      	str	r3, [r7, #24]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	429a      	cmp	r2, r3
 800644e:	d90a      	bls.n	8006466 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	617b      	str	r3, [r7, #20]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006466:	2302      	movs	r3, #2
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	2100      	movs	r1, #0
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f7ff fe49 	bl	8006108 <xQueueGenericCreateStatic>
 8006476:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006484:	69fb      	ldr	r3, [r7, #28]
	}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800648e:	b580      	push	{r7, lr}
 8006490:	b086      	sub	sp, #24
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	613b      	str	r3, [r7, #16]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d90a      	bls.n	80064d2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60fb      	str	r3, [r7, #12]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80064d2:	2202      	movs	r2, #2
 80064d4:	2100      	movs	r1, #0
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff fe8e 	bl	80061f8 <xQueueGenericCreate>
 80064dc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80064ea:	697b      	ldr	r3, [r7, #20]
	}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08e      	sub	sp, #56	; 0x38
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006502:	2300      	movs	r3, #0
 8006504:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10a      	bne.n	8006526 <xQueueGenericSend+0x32>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d103      	bne.n	8006534 <xQueueGenericSend+0x40>
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <xQueueGenericSend+0x44>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <xQueueGenericSend+0x46>
 8006538:	2300      	movs	r3, #0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <xQueueGenericSend+0x60>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b02      	cmp	r3, #2
 8006558:	d103      	bne.n	8006562 <xQueueGenericSend+0x6e>
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <xQueueGenericSend+0x72>
 8006562:	2301      	movs	r3, #1
 8006564:	e000      	b.n	8006568 <xQueueGenericSend+0x74>
 8006566:	2300      	movs	r3, #0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <xQueueGenericSend+0x8e>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	623b      	str	r3, [r7, #32]
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006582:	f001 fcc3 	bl	8007f0c <xTaskGetSchedulerState>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <xQueueGenericSend+0x9e>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <xQueueGenericSend+0xa2>
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <xQueueGenericSend+0xa4>
 8006596:	2300      	movs	r3, #0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	61fb      	str	r3, [r7, #28]
}
 80065ae:	bf00      	nop
 80065b0:	e7fe      	b.n	80065b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065b2:	f002 fb07 	bl	8008bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	429a      	cmp	r2, r3
 80065c0:	d302      	bcc.n	80065c8 <xQueueGenericSend+0xd4>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d129      	bne.n	800661c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	68b9      	ldr	r1, [r7, #8]
 80065cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ce:	f000 fc9a 	bl	8006f06 <prvCopyDataToQueue>
 80065d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d010      	beq.n	80065fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	3324      	adds	r3, #36	; 0x24
 80065e0:	4618      	mov	r0, r3
 80065e2:	f001 fac1 	bl	8007b68 <xTaskRemoveFromEventList>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d013      	beq.n	8006614 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065ec:	4b3f      	ldr	r3, [pc, #252]	; (80066ec <xQueueGenericSend+0x1f8>)
 80065ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	e00a      	b.n	8006614 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006604:	4b39      	ldr	r3, [pc, #228]	; (80066ec <xQueueGenericSend+0x1f8>)
 8006606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006614:	f002 fb06 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 8006618:	2301      	movs	r3, #1
 800661a:	e063      	b.n	80066e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d103      	bne.n	800662a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006622:	f002 faff 	bl	8008c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006626:	2300      	movs	r3, #0
 8006628:	e05c      	b.n	80066e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662c:	2b00      	cmp	r3, #0
 800662e:	d106      	bne.n	800663e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006630:	f107 0314 	add.w	r3, r7, #20
 8006634:	4618      	mov	r0, r3
 8006636:	f001 fafb 	bl	8007c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800663a:	2301      	movs	r3, #1
 800663c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800663e:	f002 faf1 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006642:	f001 f855 	bl	80076f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006646:	f002 fabd 	bl	8008bc4 <vPortEnterCritical>
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006650:	b25b      	sxtb	r3, r3
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006656:	d103      	bne.n	8006660 <xQueueGenericSend+0x16c>
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006666:	b25b      	sxtb	r3, r3
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d103      	bne.n	8006676 <xQueueGenericSend+0x182>
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006676:	f002 fad5 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800667a:	1d3a      	adds	r2, r7, #4
 800667c:	f107 0314 	add.w	r3, r7, #20
 8006680:	4611      	mov	r1, r2
 8006682:	4618      	mov	r0, r3
 8006684:	f001 faea 	bl	8007c5c <xTaskCheckForTimeOut>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d124      	bne.n	80066d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800668e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006690:	f000 fd31 	bl	80070f6 <prvIsQueueFull>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d018      	beq.n	80066cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	3310      	adds	r3, #16
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	4611      	mov	r1, r2
 80066a2:	4618      	mov	r0, r3
 80066a4:	f001 fa10 	bl	8007ac8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066aa:	f000 fcbc 	bl	8007026 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066ae:	f001 f82d 	bl	800770c <xTaskResumeAll>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f47f af7c 	bne.w	80065b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80066ba:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <xQueueGenericSend+0x1f8>)
 80066bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	e772      	b.n	80065b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ce:	f000 fcaa 	bl	8007026 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066d2:	f001 f81b 	bl	800770c <xTaskResumeAll>
 80066d6:	e76c      	b.n	80065b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066da:	f000 fca4 	bl	8007026 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066de:	f001 f815 	bl	800770c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3738      	adds	r7, #56	; 0x38
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	e000ed04 	.word	0xe000ed04

080066f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b090      	sub	sp, #64	; 0x40
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <xQueueGenericSendFromISR+0x3c>
 8006724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <xQueueGenericSendFromISR+0x40>
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <xQueueGenericSendFromISR+0x42>
 8006730:	2300      	movs	r3, #0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006748:	bf00      	nop
 800674a:	e7fe      	b.n	800674a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d103      	bne.n	800675a <xQueueGenericSendFromISR+0x6a>
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <xQueueGenericSendFromISR+0x6e>
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <xQueueGenericSendFromISR+0x70>
 800675e:	2300      	movs	r3, #0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	623b      	str	r3, [r7, #32]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800677a:	f002 fb05 	bl	8008d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800677e:	f3ef 8211 	mrs	r2, BASEPRI
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	61fa      	str	r2, [r7, #28]
 8006794:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006796:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006798:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d302      	bcc.n	80067ac <xQueueGenericSendFromISR+0xbc>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d12f      	bne.n	800680c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067c2:	f000 fba0 	bl	8006f06 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ce:	d112      	bne.n	80067f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d016      	beq.n	8006806 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	3324      	adds	r3, #36	; 0x24
 80067dc:	4618      	mov	r0, r3
 80067de:	f001 f9c3 	bl	8007b68 <xTaskRemoveFromEventList>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00e      	beq.n	8006806 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00b      	beq.n	8006806 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e007      	b.n	8006806 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067fa:	3301      	adds	r3, #1
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	b25a      	sxtb	r2, r3
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006806:	2301      	movs	r3, #1
 8006808:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800680a:	e001      	b.n	8006810 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800680c:	2300      	movs	r3, #0
 800680e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006812:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800681a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800681c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800681e:	4618      	mov	r0, r3
 8006820:	3740      	adds	r7, #64	; 0x40
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b08e      	sub	sp, #56	; 0x38
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10a      	bne.n	8006850 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	623b      	str	r3, [r7, #32]
}
 800684c:	bf00      	nop
 800684e:	e7fe      	b.n	800684e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	61fb      	str	r3, [r7, #28]
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <xQueueGiveFromISR+0x58>
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <xQueueGiveFromISR+0x5c>
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <xQueueGiveFromISR+0x5e>
 8006882:	2300      	movs	r3, #0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10a      	bne.n	800689e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	61bb      	str	r3, [r7, #24]
}
 800689a:	bf00      	nop
 800689c:	e7fe      	b.n	800689c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800689e:	f002 fa73 	bl	8008d88 <vPortValidateInterruptPriority>
	__asm volatile
 80068a2:	f3ef 8211 	mrs	r2, BASEPRI
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	617a      	str	r2, [r7, #20]
 80068b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d22b      	bcs.n	8006926 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e8:	d112      	bne.n	8006910 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d016      	beq.n	8006920 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	3324      	adds	r3, #36	; 0x24
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 f936 	bl	8007b68 <xTaskRemoveFromEventList>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00e      	beq.n	8006920 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e007      	b.n	8006920 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006914:	3301      	adds	r3, #1
 8006916:	b2db      	uxtb	r3, r3
 8006918:	b25a      	sxtb	r2, r3
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006920:	2301      	movs	r3, #1
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
 8006924:	e001      	b.n	800692a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006926:	2300      	movs	r3, #0
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f383 8811 	msr	BASEPRI, r3
}
 8006934:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006938:	4618      	mov	r0, r3
 800693a:	3738      	adds	r7, #56	; 0x38
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08c      	sub	sp, #48	; 0x30
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800694c:	2300      	movs	r3, #0
 800694e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10a      	bne.n	8006970 <xQueueReceive+0x30>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	623b      	str	r3, [r7, #32]
}
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d103      	bne.n	800697e <xQueueReceive+0x3e>
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <xQueueReceive+0x42>
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <xQueueReceive+0x44>
 8006982:	2300      	movs	r3, #0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <xQueueReceive+0x5e>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	61fb      	str	r3, [r7, #28]
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800699e:	f001 fab5 	bl	8007f0c <xTaskGetSchedulerState>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d102      	bne.n	80069ae <xQueueReceive+0x6e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <xQueueReceive+0x72>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <xQueueReceive+0x74>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueReceive+0x8e>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	61bb      	str	r3, [r7, #24]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069ce:	f002 f8f9 	bl	8008bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01f      	beq.n	8006a1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e2:	f000 fafa 	bl	8006fda <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	1e5a      	subs	r2, r3, #1
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00f      	beq.n	8006a16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	3310      	adds	r3, #16
 80069fa:	4618      	mov	r0, r3
 80069fc:	f001 f8b4 	bl	8007b68 <xTaskRemoveFromEventList>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d007      	beq.n	8006a16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a06:	4b3d      	ldr	r3, [pc, #244]	; (8006afc <xQueueReceive+0x1bc>)
 8006a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a16:	f002 f905 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e069      	b.n	8006af2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d103      	bne.n	8006a2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a24:	f002 f8fe 	bl	8008c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e062      	b.n	8006af2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a32:	f107 0310 	add.w	r3, r7, #16
 8006a36:	4618      	mov	r0, r3
 8006a38:	f001 f8fa 	bl	8007c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a40:	f002 f8f0 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a44:	f000 fe54 	bl	80076f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a48:	f002 f8bc 	bl	8008bc4 <vPortEnterCritical>
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a52:	b25b      	sxtb	r3, r3
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a58:	d103      	bne.n	8006a62 <xQueueReceive+0x122>
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a68:	b25b      	sxtb	r3, r3
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d103      	bne.n	8006a78 <xQueueReceive+0x138>
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a78:	f002 f8d4 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a7c:	1d3a      	adds	r2, r7, #4
 8006a7e:	f107 0310 	add.w	r3, r7, #16
 8006a82:	4611      	mov	r1, r2
 8006a84:	4618      	mov	r0, r3
 8006a86:	f001 f8e9 	bl	8007c5c <xTaskCheckForTimeOut>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d123      	bne.n	8006ad8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a92:	f000 fb1a 	bl	80070ca <prvIsQueueEmpty>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d017      	beq.n	8006acc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	3324      	adds	r3, #36	; 0x24
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 f80f 	bl	8007ac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aac:	f000 fabb 	bl	8007026 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ab0:	f000 fe2c 	bl	800770c <xTaskResumeAll>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d189      	bne.n	80069ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006aba:	4b10      	ldr	r3, [pc, #64]	; (8006afc <xQueueReceive+0x1bc>)
 8006abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	e780      	b.n	80069ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ace:	f000 faaa 	bl	8007026 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ad2:	f000 fe1b 	bl	800770c <xTaskResumeAll>
 8006ad6:	e77a      	b.n	80069ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ada:	f000 faa4 	bl	8007026 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ade:	f000 fe15 	bl	800770c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae4:	f000 faf1 	bl	80070ca <prvIsQueueEmpty>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f43f af6f 	beq.w	80069ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006af0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3730      	adds	r7, #48	; 0x30
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	e000ed04 	.word	0xe000ed04

08006b00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08e      	sub	sp, #56	; 0x38
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b12:	2300      	movs	r3, #0
 8006b14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	623b      	str	r3, [r7, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	e7fe      	b.n	8006b30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	61fb      	str	r3, [r7, #28]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b50:	f001 f9dc 	bl	8007f0c <xTaskGetSchedulerState>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d102      	bne.n	8006b60 <xQueueSemaphoreTake+0x60>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <xQueueSemaphoreTake+0x64>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <xQueueSemaphoreTake+0x66>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	61bb      	str	r3, [r7, #24]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b80:	f002 f820 	bl	8008bc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d024      	beq.n	8006bda <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	1e5a      	subs	r2, r3, #1
 8006b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006ba0:	f001 fb2a 	bl	80081f8 <pvTaskIncrementMutexHeldCount>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00f      	beq.n	8006bd2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	3310      	adds	r3, #16
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 ffd6 	bl	8007b68 <xTaskRemoveFromEventList>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bc2:	4b54      	ldr	r3, [pc, #336]	; (8006d14 <xQueueSemaphoreTake+0x214>)
 8006bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bd2:	f002 f827 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e097      	b.n	8006d0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d111      	bne.n	8006c04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	617b      	str	r3, [r7, #20]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006bfc:	f002 f812 	bl	8008c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e082      	b.n	8006d0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c0a:	f107 030c 	add.w	r3, r7, #12
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 f80e 	bl	8007c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c14:	2301      	movs	r3, #1
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c18:	f002 f804 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c1c:	f000 fd68 	bl	80076f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c20:	f001 ffd0 	bl	8008bc4 <vPortEnterCritical>
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c2a:	b25b      	sxtb	r3, r3
 8006c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c30:	d103      	bne.n	8006c3a <xQueueSemaphoreTake+0x13a>
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c40:	b25b      	sxtb	r3, r3
 8006c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c46:	d103      	bne.n	8006c50 <xQueueSemaphoreTake+0x150>
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c50:	f001 ffe8 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c54:	463a      	mov	r2, r7
 8006c56:	f107 030c 	add.w	r3, r7, #12
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fffd 	bl	8007c5c <xTaskCheckForTimeOut>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d132      	bne.n	8006cce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c6a:	f000 fa2e 	bl	80070ca <prvIsQueueEmpty>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d026      	beq.n	8006cc2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006c7c:	f001 ffa2 	bl	8008bc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f001 f95f 	bl	8007f48 <xTaskPriorityInherit>
 8006c8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006c8c:	f001 ffca 	bl	8008c24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	3324      	adds	r3, #36	; 0x24
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	4611      	mov	r1, r2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 ff15 	bl	8007ac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ca0:	f000 f9c1 	bl	8007026 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ca4:	f000 fd32 	bl	800770c <xTaskResumeAll>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f47f af68 	bne.w	8006b80 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006cb0:	4b18      	ldr	r3, [pc, #96]	; (8006d14 <xQueueSemaphoreTake+0x214>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	e75e      	b.n	8006b80 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006cc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cc4:	f000 f9af 	bl	8007026 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cc8:	f000 fd20 	bl	800770c <xTaskResumeAll>
 8006ccc:	e758      	b.n	8006b80 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006cce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cd0:	f000 f9a9 	bl	8007026 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cd4:	f000 fd1a 	bl	800770c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cda:	f000 f9f6 	bl	80070ca <prvIsQueueEmpty>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f43f af4d 	beq.w	8006b80 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00d      	beq.n	8006d08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006cec:	f001 ff6a 	bl	8008bc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cf2:	f000 f8f0 	bl	8006ed6 <prvGetDisinheritPriorityAfterTimeout>
 8006cf6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 f9f8 	bl	80080f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d04:	f001 ff8e 	bl	8008c24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3738      	adds	r7, #56	; 0x38
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	e000ed04 	.word	0xe000ed04

08006d18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08e      	sub	sp, #56	; 0x38
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10a      	bne.n	8006d44 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	623b      	str	r3, [r7, #32]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d103      	bne.n	8006d52 <xQueueReceiveFromISR+0x3a>
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <xQueueReceiveFromISR+0x3e>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <xQueueReceiveFromISR+0x40>
 8006d56:	2300      	movs	r3, #0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	61fb      	str	r3, [r7, #28]
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d72:	f002 f809 	bl	8008d88 <vPortValidateInterruptPriority>
	__asm volatile
 8006d76:	f3ef 8211 	mrs	r2, BASEPRI
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	61ba      	str	r2, [r7, #24]
 8006d8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006d8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d02f      	beq.n	8006dfe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006da8:	68b9      	ldr	r1, [r7, #8]
 8006daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dac:	f000 f915 	bl	8006fda <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	1e5a      	subs	r2, r3, #1
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006db8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d112      	bne.n	8006de8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d016      	beq.n	8006df8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	3310      	adds	r3, #16
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 feca 	bl	8007b68 <xTaskRemoveFromEventList>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00e      	beq.n	8006df8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	e007      	b.n	8006df8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dec:	3301      	adds	r3, #1
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	b25a      	sxtb	r2, r3
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8006dfc:	e001      	b.n	8006e02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	637b      	str	r3, [r7, #52]	; 0x34
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f383 8811 	msr	BASEPRI, r3
}
 8006e0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3738      	adds	r7, #56	; 0x38
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	60bb      	str	r3, [r7, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	e7fe      	b.n	8006e3a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006e3c:	f001 fec2 	bl	8008bc4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006e46:	f001 feed 	bl	8008c24 <vPortExitCritical>

	return uxReturn;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60fb      	str	r3, [r7, #12]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006e82:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006e84:	4618      	mov	r0, r3
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10a      	bne.n	8006eb8 <vQueueDelete+0x28>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	60bb      	str	r3, [r7, #8]
}
 8006eb4:	bf00      	nop
 8006eb6:	e7fe      	b.n	8006eb6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f95f 	bl	800717c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d102      	bne.n	8006ece <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f002 f869 	bl	8008fa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d006      	beq.n	8006ef4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	e001      	b.n	8006ef8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
	}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b086      	sub	sp, #24
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10d      	bne.n	8006f40 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d14d      	bne.n	8006fc8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 f871 	bl	8008018 <xTaskPriorityDisinherit>
 8006f36:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	609a      	str	r2, [r3, #8]
 8006f3e:	e043      	b.n	8006fc8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d119      	bne.n	8006f7a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6858      	ldr	r0, [r3, #4]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68b9      	ldr	r1, [r7, #8]
 8006f52:	f008 fcb2 	bl	800f8ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	441a      	add	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d32b      	bcc.n	8006fc8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	605a      	str	r2, [r3, #4]
 8006f78:	e026      	b.n	8006fc8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	68d8      	ldr	r0, [r3, #12]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	461a      	mov	r2, r3
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	f008 fc98 	bl	800f8ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	425b      	negs	r3, r3
 8006f94:	441a      	add	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d207      	bcs.n	8006fb6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	425b      	negs	r3, r3
 8006fb0:	441a      	add	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d105      	bne.n	8006fc8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fd0:	697b      	ldr	r3, [r7, #20]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d018      	beq.n	800701e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	441a      	add	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	429a      	cmp	r2, r3
 8007004:	d303      	bcc.n	800700e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68d9      	ldr	r1, [r3, #12]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	461a      	mov	r2, r3
 8007018:	6838      	ldr	r0, [r7, #0]
 800701a:	f008 fc4e 	bl	800f8ba <memcpy>
	}
}
 800701e:	bf00      	nop
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800702e:	f001 fdc9 	bl	8008bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007038:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800703a:	e011      	b.n	8007060 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	2b00      	cmp	r3, #0
 8007042:	d012      	beq.n	800706a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3324      	adds	r3, #36	; 0x24
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fd8d 	bl	8007b68 <xTaskRemoveFromEventList>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007054:	f000 fe64 	bl	8007d20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	3b01      	subs	r3, #1
 800705c:	b2db      	uxtb	r3, r3
 800705e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007064:	2b00      	cmp	r3, #0
 8007066:	dce9      	bgt.n	800703c <prvUnlockQueue+0x16>
 8007068:	e000      	b.n	800706c <prvUnlockQueue+0x46>
					break;
 800706a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	22ff      	movs	r2, #255	; 0xff
 8007070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007074:	f001 fdd6 	bl	8008c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007078:	f001 fda4 	bl	8008bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007082:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007084:	e011      	b.n	80070aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d012      	beq.n	80070b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3310      	adds	r3, #16
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fd68 	bl	8007b68 <xTaskRemoveFromEventList>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800709e:	f000 fe3f 	bl	8007d20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	dce9      	bgt.n	8007086 <prvUnlockQueue+0x60>
 80070b2:	e000      	b.n	80070b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	22ff      	movs	r2, #255	; 0xff
 80070ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80070be:	f001 fdb1 	bl	8008c24 <vPortExitCritical>
}
 80070c2:	bf00      	nop
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070d2:	f001 fd77 	bl	8008bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d102      	bne.n	80070e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070de:	2301      	movs	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e001      	b.n	80070e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070e8:	f001 fd9c 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 80070ec:	68fb      	ldr	r3, [r7, #12]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070fe:	f001 fd61 	bl	8008bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710a:	429a      	cmp	r2, r3
 800710c:	d102      	bne.n	8007114 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800710e:	2301      	movs	r3, #1
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	e001      	b.n	8007118 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007118:	f001 fd84 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 800711c:	68fb      	ldr	r3, [r7, #12]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	e014      	b.n	8007162 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007138:	4a0f      	ldr	r2, [pc, #60]	; (8007178 <vQueueAddToRegistry+0x50>)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10b      	bne.n	800715c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007144:	490c      	ldr	r1, [pc, #48]	; (8007178 <vQueueAddToRegistry+0x50>)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800714e:	4a0a      	ldr	r2, [pc, #40]	; (8007178 <vQueueAddToRegistry+0x50>)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	4413      	add	r3, r2
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800715a:	e006      	b.n	800716a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3301      	adds	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b07      	cmp	r3, #7
 8007166:	d9e7      	bls.n	8007138 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007168:	bf00      	nop
 800716a:	bf00      	nop
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	2400abb4 	.word	0x2400abb4

0800717c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	e016      	b.n	80071b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800718a:	4a10      	ldr	r2, [pc, #64]	; (80071cc <vQueueUnregisterQueue+0x50>)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	4413      	add	r3, r2
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	429a      	cmp	r2, r3
 8007198:	d10b      	bne.n	80071b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800719a:	4a0c      	ldr	r2, [pc, #48]	; (80071cc <vQueueUnregisterQueue+0x50>)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2100      	movs	r1, #0
 80071a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80071a4:	4a09      	ldr	r2, [pc, #36]	; (80071cc <vQueueUnregisterQueue+0x50>)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	4413      	add	r3, r2
 80071ac:	2200      	movs	r2, #0
 80071ae:	605a      	str	r2, [r3, #4]
				break;
 80071b0:	e006      	b.n	80071c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3301      	adds	r3, #1
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b07      	cmp	r3, #7
 80071bc:	d9e5      	bls.n	800718a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80071be:	bf00      	nop
 80071c0:	bf00      	nop
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	2400abb4 	.word	0x2400abb4

080071d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071e0:	f001 fcf0 	bl	8008bc4 <vPortEnterCritical>
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071ea:	b25b      	sxtb	r3, r3
 80071ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f0:	d103      	bne.n	80071fa <vQueueWaitForMessageRestricted+0x2a>
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007200:	b25b      	sxtb	r3, r3
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	d103      	bne.n	8007210 <vQueueWaitForMessageRestricted+0x40>
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007210:	f001 fd08 	bl	8008c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	2b00      	cmp	r3, #0
 800721a:	d106      	bne.n	800722a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	3324      	adds	r3, #36	; 0x24
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fc73 	bl	8007b10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800722a:	6978      	ldr	r0, [r7, #20]
 800722c:	f7ff fefb 	bl	8007026 <prvUnlockQueue>
	}
 8007230:	bf00      	nop
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08e      	sub	sp, #56	; 0x38
 800723c:	af04      	add	r7, sp, #16
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <xTaskCreateStatic+0x2a>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	623b      	str	r3, [r7, #32]
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10a      	bne.n	800727e <xTaskCreateStatic+0x46>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	61fb      	str	r3, [r7, #28]
}
 800727a:	bf00      	nop
 800727c:	e7fe      	b.n	800727c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800727e:	23a8      	movs	r3, #168	; 0xa8
 8007280:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2ba8      	cmp	r3, #168	; 0xa8
 8007286:	d00a      	beq.n	800729e <xTaskCreateStatic+0x66>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	61bb      	str	r3, [r7, #24]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800729e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01e      	beq.n	80072e4 <xTaskCreateStatic+0xac>
 80072a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01b      	beq.n	80072e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	2202      	movs	r2, #2
 80072ba:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072be:	2300      	movs	r3, #0
 80072c0:	9303      	str	r3, [sp, #12]
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	9302      	str	r3, [sp, #8]
 80072c6:	f107 0314 	add.w	r3, r7, #20
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f850 	bl	800737c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072de:	f000 f8f3 	bl	80074c8 <prvAddNewTaskToReadyList>
 80072e2:	e001      	b.n	80072e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072e8:	697b      	ldr	r3, [r7, #20]
	}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3728      	adds	r7, #40	; 0x28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b08c      	sub	sp, #48	; 0x30
 80072f6:	af04      	add	r7, sp, #16
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	603b      	str	r3, [r7, #0]
 80072fe:	4613      	mov	r3, r2
 8007300:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4618      	mov	r0, r3
 8007308:	f001 fd7e 	bl	8008e08 <pvPortMalloc>
 800730c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00e      	beq.n	8007332 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007314:	20a8      	movs	r0, #168	; 0xa8
 8007316:	f001 fd77 	bl	8008e08 <pvPortMalloc>
 800731a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	631a      	str	r2, [r3, #48]	; 0x30
 8007328:	e005      	b.n	8007336 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800732a:	6978      	ldr	r0, [r7, #20]
 800732c:	f001 fe38 	bl	8008fa0 <vPortFree>
 8007330:	e001      	b.n	8007336 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d017      	beq.n	800736c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007344:	88fa      	ldrh	r2, [r7, #6]
 8007346:	2300      	movs	r3, #0
 8007348:	9303      	str	r3, [sp, #12]
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	9302      	str	r3, [sp, #8]
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f80e 	bl	800737c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007360:	69f8      	ldr	r0, [r7, #28]
 8007362:	f000 f8b1 	bl	80074c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007366:	2301      	movs	r3, #1
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	e002      	b.n	8007372 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800736c:	f04f 33ff 	mov.w	r3, #4294967295
 8007370:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007372:	69bb      	ldr	r3, [r7, #24]
	}
 8007374:	4618      	mov	r0, r3
 8007376:	3720      	adds	r7, #32
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	461a      	mov	r2, r3
 8007394:	21a5      	movs	r1, #165	; 0xa5
 8007396:	f008 f9bc 	bl	800f712 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80073a4:	440b      	add	r3, r1
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	f023 0307 	bic.w	r3, r3, #7
 80073b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	617b      	str	r3, [r7, #20]
}
 80073d0:	bf00      	nop
 80073d2:	e7fe      	b.n	80073d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d01f      	beq.n	800741a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073da:	2300      	movs	r3, #0
 80073dc:	61fb      	str	r3, [r7, #28]
 80073de:	e012      	b.n	8007406 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	4413      	add	r3, r2
 80073e6:	7819      	ldrb	r1, [r3, #0]
 80073e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	3334      	adds	r3, #52	; 0x34
 80073f0:	460a      	mov	r2, r1
 80073f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	4413      	add	r3, r2
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d006      	beq.n	800740e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	3301      	adds	r3, #1
 8007404:	61fb      	str	r3, [r7, #28]
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2b0f      	cmp	r3, #15
 800740a:	d9e9      	bls.n	80073e0 <prvInitialiseNewTask+0x64>
 800740c:	e000      	b.n	8007410 <prvInitialiseNewTask+0x94>
			{
				break;
 800740e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007418:	e003      	b.n	8007422 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	2b37      	cmp	r3, #55	; 0x37
 8007426:	d901      	bls.n	800742c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007428:	2337      	movs	r3, #55	; 0x37
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007430:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007436:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	2200      	movs	r2, #0
 800743c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	3304      	adds	r3, #4
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe fd64 	bl	8005f10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	3318      	adds	r3, #24
 800744c:	4618      	mov	r0, r3
 800744e:	f7fe fd5f 	bl	8005f10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007456:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007466:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	2200      	movs	r2, #0
 8007474:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747a:	3354      	adds	r3, #84	; 0x54
 800747c:	224c      	movs	r2, #76	; 0x4c
 800747e:	2100      	movs	r1, #0
 8007480:	4618      	mov	r0, r3
 8007482:	f008 f946 	bl	800f712 <memset>
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	4a0c      	ldr	r2, [pc, #48]	; (80074bc <prvInitialiseNewTask+0x140>)
 800748a:	659a      	str	r2, [r3, #88]	; 0x58
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	4a0c      	ldr	r2, [pc, #48]	; (80074c0 <prvInitialiseNewTask+0x144>)
 8007490:	65da      	str	r2, [r3, #92]	; 0x5c
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	4a0b      	ldr	r2, [pc, #44]	; (80074c4 <prvInitialiseNewTask+0x148>)
 8007496:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	68f9      	ldr	r1, [r7, #12]
 800749c:	69b8      	ldr	r0, [r7, #24]
 800749e:	f001 fa61 	bl	8008964 <pxPortInitialiseStack>
 80074a2:	4602      	mov	r2, r0
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074b4:	bf00      	nop
 80074b6:	3720      	adds	r7, #32
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	24005db4 	.word	0x24005db4
 80074c0:	24005e1c 	.word	0x24005e1c
 80074c4:	24005e84 	.word	0x24005e84

080074c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074d0:	f001 fb78 	bl	8008bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074d4:	4b2d      	ldr	r3, [pc, #180]	; (800758c <prvAddNewTaskToReadyList+0xc4>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3301      	adds	r3, #1
 80074da:	4a2c      	ldr	r2, [pc, #176]	; (800758c <prvAddNewTaskToReadyList+0xc4>)
 80074dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074de:	4b2c      	ldr	r3, [pc, #176]	; (8007590 <prvAddNewTaskToReadyList+0xc8>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d109      	bne.n	80074fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074e6:	4a2a      	ldr	r2, [pc, #168]	; (8007590 <prvAddNewTaskToReadyList+0xc8>)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074ec:	4b27      	ldr	r3, [pc, #156]	; (800758c <prvAddNewTaskToReadyList+0xc4>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d110      	bne.n	8007516 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074f4:	f000 fc38 	bl	8007d68 <prvInitialiseTaskLists>
 80074f8:	e00d      	b.n	8007516 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074fa:	4b26      	ldr	r3, [pc, #152]	; (8007594 <prvAddNewTaskToReadyList+0xcc>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d109      	bne.n	8007516 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007502:	4b23      	ldr	r3, [pc, #140]	; (8007590 <prvAddNewTaskToReadyList+0xc8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	429a      	cmp	r2, r3
 800750e:	d802      	bhi.n	8007516 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007510:	4a1f      	ldr	r2, [pc, #124]	; (8007590 <prvAddNewTaskToReadyList+0xc8>)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007516:	4b20      	ldr	r3, [pc, #128]	; (8007598 <prvAddNewTaskToReadyList+0xd0>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3301      	adds	r3, #1
 800751c:	4a1e      	ldr	r2, [pc, #120]	; (8007598 <prvAddNewTaskToReadyList+0xd0>)
 800751e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007520:	4b1d      	ldr	r3, [pc, #116]	; (8007598 <prvAddNewTaskToReadyList+0xd0>)
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752c:	4b1b      	ldr	r3, [pc, #108]	; (800759c <prvAddNewTaskToReadyList+0xd4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d903      	bls.n	800753c <prvAddNewTaskToReadyList+0x74>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	4a18      	ldr	r2, [pc, #96]	; (800759c <prvAddNewTaskToReadyList+0xd4>)
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4a15      	ldr	r2, [pc, #84]	; (80075a0 <prvAddNewTaskToReadyList+0xd8>)
 800754a:	441a      	add	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3304      	adds	r3, #4
 8007550:	4619      	mov	r1, r3
 8007552:	4610      	mov	r0, r2
 8007554:	f7fe fce9 	bl	8005f2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007558:	f001 fb64 	bl	8008c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800755c:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <prvAddNewTaskToReadyList+0xcc>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00e      	beq.n	8007582 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007564:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <prvAddNewTaskToReadyList+0xc8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	429a      	cmp	r2, r3
 8007570:	d207      	bcs.n	8007582 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007572:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <prvAddNewTaskToReadyList+0xdc>)
 8007574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	24001ee8 	.word	0x24001ee8
 8007590:	24001a14 	.word	0x24001a14
 8007594:	24001ef4 	.word	0x24001ef4
 8007598:	24001f04 	.word	0x24001f04
 800759c:	24001ef0 	.word	0x24001ef0
 80075a0:	24001a18 	.word	0x24001a18
 80075a4:	e000ed04 	.word	0xe000ed04

080075a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d017      	beq.n	80075ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075ba:	4b13      	ldr	r3, [pc, #76]	; (8007608 <vTaskDelay+0x60>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <vTaskDelay+0x30>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	60bb      	str	r3, [r7, #8]
}
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075d8:	f000 f88a 	bl	80076f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075dc:	2100      	movs	r1, #0
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fe1e 	bl	8008220 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075e4:	f000 f892 	bl	800770c <xTaskResumeAll>
 80075e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d107      	bne.n	8007600 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80075f0:	4b06      	ldr	r3, [pc, #24]	; (800760c <vTaskDelay+0x64>)
 80075f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007600:	bf00      	nop
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	24001f10 	.word	0x24001f10
 800760c:	e000ed04 	.word	0xe000ed04

08007610 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b08a      	sub	sp, #40	; 0x28
 8007614:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800761a:	2300      	movs	r3, #0
 800761c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800761e:	463a      	mov	r2, r7
 8007620:	1d39      	adds	r1, r7, #4
 8007622:	f107 0308 	add.w	r3, r7, #8
 8007626:	4618      	mov	r0, r3
 8007628:	f7fe fc1e 	bl	8005e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	9202      	str	r2, [sp, #8]
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	2300      	movs	r3, #0
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	2300      	movs	r3, #0
 800763c:	460a      	mov	r2, r1
 800763e:	4924      	ldr	r1, [pc, #144]	; (80076d0 <vTaskStartScheduler+0xc0>)
 8007640:	4824      	ldr	r0, [pc, #144]	; (80076d4 <vTaskStartScheduler+0xc4>)
 8007642:	f7ff fdf9 	bl	8007238 <xTaskCreateStatic>
 8007646:	4603      	mov	r3, r0
 8007648:	4a23      	ldr	r2, [pc, #140]	; (80076d8 <vTaskStartScheduler+0xc8>)
 800764a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800764c:	4b22      	ldr	r3, [pc, #136]	; (80076d8 <vTaskStartScheduler+0xc8>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007654:	2301      	movs	r3, #1
 8007656:	617b      	str	r3, [r7, #20]
 8007658:	e001      	b.n	800765e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d102      	bne.n	800766a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007664:	f000 fe30 	bl	80082c8 <xTimerCreateTimerTask>
 8007668:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d11b      	bne.n	80076a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	613b      	str	r3, [r7, #16]
}
 8007682:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007684:	4b15      	ldr	r3, [pc, #84]	; (80076dc <vTaskStartScheduler+0xcc>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3354      	adds	r3, #84	; 0x54
 800768a:	4a15      	ldr	r2, [pc, #84]	; (80076e0 <vTaskStartScheduler+0xd0>)
 800768c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800768e:	4b15      	ldr	r3, [pc, #84]	; (80076e4 <vTaskStartScheduler+0xd4>)
 8007690:	f04f 32ff 	mov.w	r2, #4294967295
 8007694:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007696:	4b14      	ldr	r3, [pc, #80]	; (80076e8 <vTaskStartScheduler+0xd8>)
 8007698:	2201      	movs	r2, #1
 800769a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800769c:	4b13      	ldr	r3, [pc, #76]	; (80076ec <vTaskStartScheduler+0xdc>)
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076a2:	f001 f9ed 	bl	8008a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076a6:	e00e      	b.n	80076c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ae:	d10a      	bne.n	80076c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	60fb      	str	r3, [r7, #12]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <vTaskStartScheduler+0xb4>
}
 80076c6:	bf00      	nop
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	08010918 	.word	0x08010918
 80076d4:	08007d39 	.word	0x08007d39
 80076d8:	24001f0c 	.word	0x24001f0c
 80076dc:	24001a14 	.word	0x24001a14
 80076e0:	24000084 	.word	0x24000084
 80076e4:	24001f08 	.word	0x24001f08
 80076e8:	24001ef4 	.word	0x24001ef4
 80076ec:	24001eec 	.word	0x24001eec

080076f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80076f4:	4b04      	ldr	r3, [pc, #16]	; (8007708 <vTaskSuspendAll+0x18>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3301      	adds	r3, #1
 80076fa:	4a03      	ldr	r2, [pc, #12]	; (8007708 <vTaskSuspendAll+0x18>)
 80076fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80076fe:	bf00      	nop
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	24001f10 	.word	0x24001f10

0800770c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007716:	2300      	movs	r3, #0
 8007718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800771a:	4b42      	ldr	r3, [pc, #264]	; (8007824 <xTaskResumeAll+0x118>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10a      	bne.n	8007738 <xTaskResumeAll+0x2c>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	603b      	str	r3, [r7, #0]
}
 8007734:	bf00      	nop
 8007736:	e7fe      	b.n	8007736 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007738:	f001 fa44 	bl	8008bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800773c:	4b39      	ldr	r3, [pc, #228]	; (8007824 <xTaskResumeAll+0x118>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3b01      	subs	r3, #1
 8007742:	4a38      	ldr	r2, [pc, #224]	; (8007824 <xTaskResumeAll+0x118>)
 8007744:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007746:	4b37      	ldr	r3, [pc, #220]	; (8007824 <xTaskResumeAll+0x118>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d162      	bne.n	8007814 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800774e:	4b36      	ldr	r3, [pc, #216]	; (8007828 <xTaskResumeAll+0x11c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d05e      	beq.n	8007814 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007756:	e02f      	b.n	80077b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007758:	4b34      	ldr	r3, [pc, #208]	; (800782c <xTaskResumeAll+0x120>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3318      	adds	r3, #24
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe fc3d 	bl	8005fe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3304      	adds	r3, #4
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fc38 	bl	8005fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007778:	4b2d      	ldr	r3, [pc, #180]	; (8007830 <xTaskResumeAll+0x124>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d903      	bls.n	8007788 <xTaskResumeAll+0x7c>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	4a2a      	ldr	r2, [pc, #168]	; (8007830 <xTaskResumeAll+0x124>)
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778c:	4613      	mov	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4a27      	ldr	r2, [pc, #156]	; (8007834 <xTaskResumeAll+0x128>)
 8007796:	441a      	add	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3304      	adds	r3, #4
 800779c:	4619      	mov	r1, r3
 800779e:	4610      	mov	r0, r2
 80077a0:	f7fe fbc3 	bl	8005f2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a8:	4b23      	ldr	r3, [pc, #140]	; (8007838 <xTaskResumeAll+0x12c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d302      	bcc.n	80077b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80077b2:	4b22      	ldr	r3, [pc, #136]	; (800783c <xTaskResumeAll+0x130>)
 80077b4:	2201      	movs	r2, #1
 80077b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077b8:	4b1c      	ldr	r3, [pc, #112]	; (800782c <xTaskResumeAll+0x120>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1cb      	bne.n	8007758 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077c6:	f000 fb71 	bl	8007eac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80077ca:	4b1d      	ldr	r3, [pc, #116]	; (8007840 <xTaskResumeAll+0x134>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d010      	beq.n	80077f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077d6:	f000 f859 	bl	800788c <xTaskIncrementTick>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80077e0:	4b16      	ldr	r3, [pc, #88]	; (800783c <xTaskResumeAll+0x130>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1f1      	bne.n	80077d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80077f2:	4b13      	ldr	r3, [pc, #76]	; (8007840 <xTaskResumeAll+0x134>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077f8:	4b10      	ldr	r3, [pc, #64]	; (800783c <xTaskResumeAll+0x130>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007800:	2301      	movs	r3, #1
 8007802:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007804:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <xTaskResumeAll+0x138>)
 8007806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007814:	f001 fa06 	bl	8008c24 <vPortExitCritical>

	return xAlreadyYielded;
 8007818:	68bb      	ldr	r3, [r7, #8]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	24001f10 	.word	0x24001f10
 8007828:	24001ee8 	.word	0x24001ee8
 800782c:	24001ea8 	.word	0x24001ea8
 8007830:	24001ef0 	.word	0x24001ef0
 8007834:	24001a18 	.word	0x24001a18
 8007838:	24001a14 	.word	0x24001a14
 800783c:	24001efc 	.word	0x24001efc
 8007840:	24001ef8 	.word	0x24001ef8
 8007844:	e000ed04 	.word	0xe000ed04

08007848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <xTaskGetTickCount+0x1c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007854:	687b      	ldr	r3, [r7, #4]
}
 8007856:	4618      	mov	r0, r3
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	24001eec 	.word	0x24001eec

08007868 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800786e:	f001 fa8b 	bl	8008d88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007872:	2300      	movs	r3, #0
 8007874:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007876:	4b04      	ldr	r3, [pc, #16]	; (8007888 <xTaskGetTickCountFromISR+0x20>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800787c:	683b      	ldr	r3, [r7, #0]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	24001eec 	.word	0x24001eec

0800788c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007896:	4b4f      	ldr	r3, [pc, #316]	; (80079d4 <xTaskIncrementTick+0x148>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f040 808f 	bne.w	80079be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078a0:	4b4d      	ldr	r3, [pc, #308]	; (80079d8 <xTaskIncrementTick+0x14c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3301      	adds	r3, #1
 80078a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078a8:	4a4b      	ldr	r2, [pc, #300]	; (80079d8 <xTaskIncrementTick+0x14c>)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d120      	bne.n	80078f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80078b4:	4b49      	ldr	r3, [pc, #292]	; (80079dc <xTaskIncrementTick+0x150>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	603b      	str	r3, [r7, #0]
}
 80078d0:	bf00      	nop
 80078d2:	e7fe      	b.n	80078d2 <xTaskIncrementTick+0x46>
 80078d4:	4b41      	ldr	r3, [pc, #260]	; (80079dc <xTaskIncrementTick+0x150>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	4b41      	ldr	r3, [pc, #260]	; (80079e0 <xTaskIncrementTick+0x154>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a3f      	ldr	r2, [pc, #252]	; (80079dc <xTaskIncrementTick+0x150>)
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	4a3f      	ldr	r2, [pc, #252]	; (80079e0 <xTaskIncrementTick+0x154>)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	4b3e      	ldr	r3, [pc, #248]	; (80079e4 <xTaskIncrementTick+0x158>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3301      	adds	r3, #1
 80078ee:	4a3d      	ldr	r2, [pc, #244]	; (80079e4 <xTaskIncrementTick+0x158>)
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	f000 fadb 	bl	8007eac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078f6:	4b3c      	ldr	r3, [pc, #240]	; (80079e8 <xTaskIncrementTick+0x15c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d349      	bcc.n	8007994 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007900:	4b36      	ldr	r3, [pc, #216]	; (80079dc <xTaskIncrementTick+0x150>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d104      	bne.n	8007914 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800790a:	4b37      	ldr	r3, [pc, #220]	; (80079e8 <xTaskIncrementTick+0x15c>)
 800790c:	f04f 32ff 	mov.w	r2, #4294967295
 8007910:	601a      	str	r2, [r3, #0]
					break;
 8007912:	e03f      	b.n	8007994 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007914:	4b31      	ldr	r3, [pc, #196]	; (80079dc <xTaskIncrementTick+0x150>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	429a      	cmp	r2, r3
 800792a:	d203      	bcs.n	8007934 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800792c:	4a2e      	ldr	r2, [pc, #184]	; (80079e8 <xTaskIncrementTick+0x15c>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007932:	e02f      	b.n	8007994 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3304      	adds	r3, #4
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe fb53 	bl	8005fe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	2b00      	cmp	r3, #0
 8007944:	d004      	beq.n	8007950 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	3318      	adds	r3, #24
 800794a:	4618      	mov	r0, r3
 800794c:	f7fe fb4a 	bl	8005fe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007954:	4b25      	ldr	r3, [pc, #148]	; (80079ec <xTaskIncrementTick+0x160>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	429a      	cmp	r2, r3
 800795a:	d903      	bls.n	8007964 <xTaskIncrementTick+0xd8>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007960:	4a22      	ldr	r2, [pc, #136]	; (80079ec <xTaskIncrementTick+0x160>)
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007968:	4613      	mov	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4a1f      	ldr	r2, [pc, #124]	; (80079f0 <xTaskIncrementTick+0x164>)
 8007972:	441a      	add	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	3304      	adds	r3, #4
 8007978:	4619      	mov	r1, r3
 800797a:	4610      	mov	r0, r2
 800797c:	f7fe fad5 	bl	8005f2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007984:	4b1b      	ldr	r3, [pc, #108]	; (80079f4 <xTaskIncrementTick+0x168>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	429a      	cmp	r2, r3
 800798c:	d3b8      	bcc.n	8007900 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800798e:	2301      	movs	r3, #1
 8007990:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007992:	e7b5      	b.n	8007900 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007994:	4b17      	ldr	r3, [pc, #92]	; (80079f4 <xTaskIncrementTick+0x168>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799a:	4915      	ldr	r1, [pc, #84]	; (80079f0 <xTaskIncrementTick+0x164>)
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	440b      	add	r3, r1
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d901      	bls.n	80079b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80079ac:	2301      	movs	r3, #1
 80079ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079b0:	4b11      	ldr	r3, [pc, #68]	; (80079f8 <xTaskIncrementTick+0x16c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d007      	beq.n	80079c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	e004      	b.n	80079c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079be:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <xTaskIncrementTick+0x170>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	4a0d      	ldr	r2, [pc, #52]	; (80079fc <xTaskIncrementTick+0x170>)
 80079c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079c8:	697b      	ldr	r3, [r7, #20]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	24001f10 	.word	0x24001f10
 80079d8:	24001eec 	.word	0x24001eec
 80079dc:	24001ea0 	.word	0x24001ea0
 80079e0:	24001ea4 	.word	0x24001ea4
 80079e4:	24001f00 	.word	0x24001f00
 80079e8:	24001f08 	.word	0x24001f08
 80079ec:	24001ef0 	.word	0x24001ef0
 80079f0:	24001a18 	.word	0x24001a18
 80079f4:	24001a14 	.word	0x24001a14
 80079f8:	24001efc 	.word	0x24001efc
 80079fc:	24001ef8 	.word	0x24001ef8

08007a00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a06:	4b2a      	ldr	r3, [pc, #168]	; (8007ab0 <vTaskSwitchContext+0xb0>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a0e:	4b29      	ldr	r3, [pc, #164]	; (8007ab4 <vTaskSwitchContext+0xb4>)
 8007a10:	2201      	movs	r2, #1
 8007a12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a14:	e046      	b.n	8007aa4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007a16:	4b27      	ldr	r3, [pc, #156]	; (8007ab4 <vTaskSwitchContext+0xb4>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a1c:	4b26      	ldr	r3, [pc, #152]	; (8007ab8 <vTaskSwitchContext+0xb8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	e010      	b.n	8007a46 <vTaskSwitchContext+0x46>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <vTaskSwitchContext+0x40>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	607b      	str	r3, [r7, #4]
}
 8007a3c:	bf00      	nop
 8007a3e:	e7fe      	b.n	8007a3e <vTaskSwitchContext+0x3e>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	491d      	ldr	r1, [pc, #116]	; (8007abc <vTaskSwitchContext+0xbc>)
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	440b      	add	r3, r1
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0e4      	beq.n	8007a24 <vTaskSwitchContext+0x24>
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4a15      	ldr	r2, [pc, #84]	; (8007abc <vTaskSwitchContext+0xbc>)
 8007a66:	4413      	add	r3, r2
 8007a68:	60bb      	str	r3, [r7, #8]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	605a      	str	r2, [r3, #4]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d104      	bne.n	8007a8a <vTaskSwitchContext+0x8a>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	605a      	str	r2, [r3, #4]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	4a0b      	ldr	r2, [pc, #44]	; (8007ac0 <vTaskSwitchContext+0xc0>)
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	4a08      	ldr	r2, [pc, #32]	; (8007ab8 <vTaskSwitchContext+0xb8>)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a9a:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <vTaskSwitchContext+0xc0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3354      	adds	r3, #84	; 0x54
 8007aa0:	4a08      	ldr	r2, [pc, #32]	; (8007ac4 <vTaskSwitchContext+0xc4>)
 8007aa2:	6013      	str	r3, [r2, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	24001f10 	.word	0x24001f10
 8007ab4:	24001efc 	.word	0x24001efc
 8007ab8:	24001ef0 	.word	0x24001ef0
 8007abc:	24001a18 	.word	0x24001a18
 8007ac0:	24001a14 	.word	0x24001a14
 8007ac4:	24000084 	.word	0x24000084

08007ac8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10a      	bne.n	8007aee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	60fb      	str	r3, [r7, #12]
}
 8007aea:	bf00      	nop
 8007aec:	e7fe      	b.n	8007aec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aee:	4b07      	ldr	r3, [pc, #28]	; (8007b0c <vTaskPlaceOnEventList+0x44>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3318      	adds	r3, #24
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7fe fa3b 	bl	8005f72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007afc:	2101      	movs	r1, #1
 8007afe:	6838      	ldr	r0, [r7, #0]
 8007b00:	f000 fb8e 	bl	8008220 <prvAddCurrentTaskToDelayedList>
}
 8007b04:	bf00      	nop
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	24001a14 	.word	0x24001a14

08007b10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10a      	bne.n	8007b38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	617b      	str	r3, [r7, #20]
}
 8007b34:	bf00      	nop
 8007b36:	e7fe      	b.n	8007b36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b38:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3318      	adds	r3, #24
 8007b3e:	4619      	mov	r1, r3
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7fe f9f2 	bl	8005f2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	68b8      	ldr	r0, [r7, #8]
 8007b56:	f000 fb63 	bl	8008220 <prvAddCurrentTaskToDelayedList>
	}
 8007b5a:	bf00      	nop
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	24001a14 	.word	0x24001a14

08007b68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	60fb      	str	r3, [r7, #12]
}
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	3318      	adds	r3, #24
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fe fa23 	bl	8005fe4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b9e:	4b1e      	ldr	r3, [pc, #120]	; (8007c18 <xTaskRemoveFromEventList+0xb0>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d11d      	bne.n	8007be2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fa1a 	bl	8005fe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb4:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <xTaskRemoveFromEventList+0xb4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d903      	bls.n	8007bc4 <xTaskRemoveFromEventList+0x5c>
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	4a16      	ldr	r2, [pc, #88]	; (8007c1c <xTaskRemoveFromEventList+0xb4>)
 8007bc2:	6013      	str	r3, [r2, #0]
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc8:	4613      	mov	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4a13      	ldr	r2, [pc, #76]	; (8007c20 <xTaskRemoveFromEventList+0xb8>)
 8007bd2:	441a      	add	r2, r3
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4610      	mov	r0, r2
 8007bdc:	f7fe f9a5 	bl	8005f2a <vListInsertEnd>
 8007be0:	e005      	b.n	8007bee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	3318      	adds	r3, #24
 8007be6:	4619      	mov	r1, r3
 8007be8:	480e      	ldr	r0, [pc, #56]	; (8007c24 <xTaskRemoveFromEventList+0xbc>)
 8007bea:	f7fe f99e 	bl	8005f2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf2:	4b0d      	ldr	r3, [pc, #52]	; (8007c28 <xTaskRemoveFromEventList+0xc0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d905      	bls.n	8007c08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c00:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <xTaskRemoveFromEventList+0xc4>)
 8007c02:	2201      	movs	r2, #1
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	e001      	b.n	8007c0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c0c:	697b      	ldr	r3, [r7, #20]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	24001f10 	.word	0x24001f10
 8007c1c:	24001ef0 	.word	0x24001ef0
 8007c20:	24001a18 	.word	0x24001a18
 8007c24:	24001ea8 	.word	0x24001ea8
 8007c28:	24001a14 	.word	0x24001a14
 8007c2c:	24001efc 	.word	0x24001efc

08007c30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c38:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <vTaskInternalSetTimeOutState+0x24>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c40:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <vTaskInternalSetTimeOutState+0x28>)
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	605a      	str	r2, [r3, #4]
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	24001f00 	.word	0x24001f00
 8007c58:	24001eec 	.word	0x24001eec

08007c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10a      	bne.n	8007c82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	613b      	str	r3, [r7, #16]
}
 8007c7e:	bf00      	nop
 8007c80:	e7fe      	b.n	8007c80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	60fb      	str	r3, [r7, #12]
}
 8007c9a:	bf00      	nop
 8007c9c:	e7fe      	b.n	8007c9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c9e:	f000 ff91 	bl	8008bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ca2:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <xTaskCheckForTimeOut+0xbc>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cba:	d102      	bne.n	8007cc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61fb      	str	r3, [r7, #28]
 8007cc0:	e023      	b.n	8007d0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	4b15      	ldr	r3, [pc, #84]	; (8007d1c <xTaskCheckForTimeOut+0xc0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d007      	beq.n	8007cde <xTaskCheckForTimeOut+0x82>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d302      	bcc.n	8007cde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	61fb      	str	r3, [r7, #28]
 8007cdc:	e015      	b.n	8007d0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d20b      	bcs.n	8007d00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff ff9b 	bl	8007c30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	e004      	b.n	8007d0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d0a:	f000 ff8b 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3720      	adds	r7, #32
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	24001eec 	.word	0x24001eec
 8007d1c:	24001f00 	.word	0x24001f00

08007d20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d24:	4b03      	ldr	r3, [pc, #12]	; (8007d34 <vTaskMissedYield+0x14>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	601a      	str	r2, [r3, #0]
}
 8007d2a:	bf00      	nop
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	24001efc 	.word	0x24001efc

08007d38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d40:	f000 f852 	bl	8007de8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d44:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <prvIdleTask+0x28>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d9f9      	bls.n	8007d40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <prvIdleTask+0x2c>)
 8007d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d5c:	e7f0      	b.n	8007d40 <prvIdleTask+0x8>
 8007d5e:	bf00      	nop
 8007d60:	24001a18 	.word	0x24001a18
 8007d64:	e000ed04 	.word	0xe000ed04

08007d68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d6e:	2300      	movs	r3, #0
 8007d70:	607b      	str	r3, [r7, #4]
 8007d72:	e00c      	b.n	8007d8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4a12      	ldr	r2, [pc, #72]	; (8007dc8 <prvInitialiseTaskLists+0x60>)
 8007d80:	4413      	add	r3, r2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe f8a4 	bl	8005ed0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	607b      	str	r3, [r7, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b37      	cmp	r3, #55	; 0x37
 8007d92:	d9ef      	bls.n	8007d74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d94:	480d      	ldr	r0, [pc, #52]	; (8007dcc <prvInitialiseTaskLists+0x64>)
 8007d96:	f7fe f89b 	bl	8005ed0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d9a:	480d      	ldr	r0, [pc, #52]	; (8007dd0 <prvInitialiseTaskLists+0x68>)
 8007d9c:	f7fe f898 	bl	8005ed0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007da0:	480c      	ldr	r0, [pc, #48]	; (8007dd4 <prvInitialiseTaskLists+0x6c>)
 8007da2:	f7fe f895 	bl	8005ed0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007da6:	480c      	ldr	r0, [pc, #48]	; (8007dd8 <prvInitialiseTaskLists+0x70>)
 8007da8:	f7fe f892 	bl	8005ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dac:	480b      	ldr	r0, [pc, #44]	; (8007ddc <prvInitialiseTaskLists+0x74>)
 8007dae:	f7fe f88f 	bl	8005ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007db2:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <prvInitialiseTaskLists+0x78>)
 8007db4:	4a05      	ldr	r2, [pc, #20]	; (8007dcc <prvInitialiseTaskLists+0x64>)
 8007db6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007db8:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <prvInitialiseTaskLists+0x7c>)
 8007dba:	4a05      	ldr	r2, [pc, #20]	; (8007dd0 <prvInitialiseTaskLists+0x68>)
 8007dbc:	601a      	str	r2, [r3, #0]
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	24001a18 	.word	0x24001a18
 8007dcc:	24001e78 	.word	0x24001e78
 8007dd0:	24001e8c 	.word	0x24001e8c
 8007dd4:	24001ea8 	.word	0x24001ea8
 8007dd8:	24001ebc 	.word	0x24001ebc
 8007ddc:	24001ed4 	.word	0x24001ed4
 8007de0:	24001ea0 	.word	0x24001ea0
 8007de4:	24001ea4 	.word	0x24001ea4

08007de8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dee:	e019      	b.n	8007e24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007df0:	f000 fee8 	bl	8008bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df4:	4b10      	ldr	r3, [pc, #64]	; (8007e38 <prvCheckTasksWaitingTermination+0x50>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe f8ef 	bl	8005fe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e06:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <prvCheckTasksWaitingTermination+0x54>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	4a0b      	ldr	r2, [pc, #44]	; (8007e3c <prvCheckTasksWaitingTermination+0x54>)
 8007e0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e10:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <prvCheckTasksWaitingTermination+0x58>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	4a0a      	ldr	r2, [pc, #40]	; (8007e40 <prvCheckTasksWaitingTermination+0x58>)
 8007e18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e1a:	f000 ff03 	bl	8008c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f810 	bl	8007e44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e24:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <prvCheckTasksWaitingTermination+0x58>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e1      	bne.n	8007df0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e2c:	bf00      	nop
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	24001ebc 	.word	0x24001ebc
 8007e3c:	24001ee8 	.word	0x24001ee8
 8007e40:	24001ed0 	.word	0x24001ed0

08007e44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3354      	adds	r3, #84	; 0x54
 8007e50:	4618      	mov	r0, r3
 8007e52:	f007 fc77 	bl	800f744 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d108      	bne.n	8007e72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 f89b 	bl	8008fa0 <vPortFree>
				vPortFree( pxTCB );
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f001 f898 	bl	8008fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e70:	e018      	b.n	8007ea4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d103      	bne.n	8007e84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 f88f 	bl	8008fa0 <vPortFree>
	}
 8007e82:	e00f      	b.n	8007ea4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d00a      	beq.n	8007ea4 <prvDeleteTCB+0x60>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	60fb      	str	r3, [r7, #12]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <prvDeleteTCB+0x5e>
	}
 8007ea4:	bf00      	nop
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <prvResetNextTaskUnblockTime+0x38>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8007ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ec4:	e008      	b.n	8007ed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec6:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <prvResetNextTaskUnblockTime+0x38>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	4a04      	ldr	r2, [pc, #16]	; (8007ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8007ed6:	6013      	str	r3, [r2, #0]
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	24001ea0 	.word	0x24001ea0
 8007ee8:	24001f08 	.word	0x24001f08

08007eec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <xTaskGetCurrentTaskHandle+0x1c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007ef8:	687b      	ldr	r3, [r7, #4]
	}
 8007efa:	4618      	mov	r0, r3
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	24001a14 	.word	0x24001a14

08007f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f12:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <xTaskGetSchedulerState+0x34>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d102      	bne.n	8007f20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	e008      	b.n	8007f32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f20:	4b08      	ldr	r3, [pc, #32]	; (8007f44 <xTaskGetSchedulerState+0x38>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d102      	bne.n	8007f2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f28:	2302      	movs	r3, #2
 8007f2a:	607b      	str	r3, [r7, #4]
 8007f2c:	e001      	b.n	8007f32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f32:	687b      	ldr	r3, [r7, #4]
	}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	24001ef4 	.word	0x24001ef4
 8007f44:	24001f10 	.word	0x24001f10

08007f48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d051      	beq.n	8008002 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f62:	4b2a      	ldr	r3, [pc, #168]	; (800800c <xTaskPriorityInherit+0xc4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d241      	bcs.n	8007ff0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	db06      	blt.n	8007f82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f74:	4b25      	ldr	r3, [pc, #148]	; (800800c <xTaskPriorityInherit+0xc4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6959      	ldr	r1, [r3, #20]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4a1f      	ldr	r2, [pc, #124]	; (8008010 <xTaskPriorityInherit+0xc8>)
 8007f94:	4413      	add	r3, r2
 8007f96:	4299      	cmp	r1, r3
 8007f98:	d122      	bne.n	8007fe0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe f820 	bl	8005fe4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fa4:	4b19      	ldr	r3, [pc, #100]	; (800800c <xTaskPriorityInherit+0xc4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb2:	4b18      	ldr	r3, [pc, #96]	; (8008014 <xTaskPriorityInherit+0xcc>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d903      	bls.n	8007fc2 <xTaskPriorityInherit+0x7a>
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbe:	4a15      	ldr	r2, [pc, #84]	; (8008014 <xTaskPriorityInherit+0xcc>)
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4a10      	ldr	r2, [pc, #64]	; (8008010 <xTaskPriorityInherit+0xc8>)
 8007fd0:	441a      	add	r2, r3
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f7fd ffa6 	bl	8005f2a <vListInsertEnd>
 8007fde:	e004      	b.n	8007fea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <xTaskPriorityInherit+0xc4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007fea:	2301      	movs	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e008      	b.n	8008002 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <xTaskPriorityInherit+0xc4>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d201      	bcs.n	8008002 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ffe:	2301      	movs	r3, #1
 8008000:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008002:	68fb      	ldr	r3, [r7, #12]
	}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	24001a14 	.word	0x24001a14
 8008010:	24001a18 	.word	0x24001a18
 8008014:	24001ef0 	.word	0x24001ef0

08008018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008024:	2300      	movs	r3, #0
 8008026:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d056      	beq.n	80080dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800802e:	4b2e      	ldr	r3, [pc, #184]	; (80080e8 <xTaskPriorityDisinherit+0xd0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	429a      	cmp	r2, r3
 8008036:	d00a      	beq.n	800804e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	60fb      	str	r3, [r7, #12]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60bb      	str	r3, [r7, #8]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008070:	1e5a      	subs	r2, r3, #1
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800807e:	429a      	cmp	r2, r3
 8008080:	d02c      	beq.n	80080dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008086:	2b00      	cmp	r3, #0
 8008088:	d128      	bne.n	80080dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	3304      	adds	r3, #4
 800808e:	4618      	mov	r0, r3
 8008090:	f7fd ffa8 	bl	8005fe4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ac:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <xTaskPriorityDisinherit+0xd4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d903      	bls.n	80080bc <xTaskPriorityDisinherit+0xa4>
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	4a0c      	ldr	r2, [pc, #48]	; (80080ec <xTaskPriorityDisinherit+0xd4>)
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4a09      	ldr	r2, [pc, #36]	; (80080f0 <xTaskPriorityDisinherit+0xd8>)
 80080ca:	441a      	add	r2, r3
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	3304      	adds	r3, #4
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f7fd ff29 	bl	8005f2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080d8:	2301      	movs	r3, #1
 80080da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080dc:	697b      	ldr	r3, [r7, #20]
	}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	24001a14 	.word	0x24001a14
 80080ec:	24001ef0 	.word	0x24001ef0
 80080f0:	24001a18 	.word	0x24001a18

080080f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008102:	2301      	movs	r3, #1
 8008104:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d06a      	beq.n	80081e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	60fb      	str	r3, [r7, #12]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d902      	bls.n	800813a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	61fb      	str	r3, [r7, #28]
 8008138:	e002      	b.n	8008140 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	429a      	cmp	r2, r3
 8008148:	d04b      	beq.n	80081e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	429a      	cmp	r2, r3
 8008152:	d146      	bne.n	80081e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008154:	4b25      	ldr	r3, [pc, #148]	; (80081ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	429a      	cmp	r2, r3
 800815c:	d10a      	bne.n	8008174 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	60bb      	str	r3, [r7, #8]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	db04      	blt.n	8008192 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	6959      	ldr	r1, [r3, #20]
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4a13      	ldr	r2, [pc, #76]	; (80081f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80081a2:	4413      	add	r3, r2
 80081a4:	4299      	cmp	r1, r3
 80081a6:	d11c      	bne.n	80081e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	3304      	adds	r3, #4
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fd ff19 	bl	8005fe4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b6:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d903      	bls.n	80081c6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	4a0c      	ldr	r2, [pc, #48]	; (80081f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4a07      	ldr	r2, [pc, #28]	; (80081f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80081d4:	441a      	add	r2, r3
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	3304      	adds	r3, #4
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f7fd fea4 	bl	8005f2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081e2:	bf00      	nop
 80081e4:	3720      	adds	r7, #32
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	24001a14 	.word	0x24001a14
 80081f0:	24001a18 	.word	0x24001a18
 80081f4:	24001ef0 	.word	0x24001ef0

080081f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80081fc:	4b07      	ldr	r3, [pc, #28]	; (800821c <pvTaskIncrementMutexHeldCount+0x24>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008204:	4b05      	ldr	r3, [pc, #20]	; (800821c <pvTaskIncrementMutexHeldCount+0x24>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800820a:	3201      	adds	r2, #1
 800820c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800820e:	4b03      	ldr	r3, [pc, #12]	; (800821c <pvTaskIncrementMutexHeldCount+0x24>)
 8008210:	681b      	ldr	r3, [r3, #0]
	}
 8008212:	4618      	mov	r0, r3
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	24001a14 	.word	0x24001a14

08008220 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800822a:	4b21      	ldr	r3, [pc, #132]	; (80082b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008230:	4b20      	ldr	r3, [pc, #128]	; (80082b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3304      	adds	r3, #4
 8008236:	4618      	mov	r0, r3
 8008238:	f7fd fed4 	bl	8005fe4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008242:	d10a      	bne.n	800825a <prvAddCurrentTaskToDelayedList+0x3a>
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800824a:	4b1a      	ldr	r3, [pc, #104]	; (80082b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3304      	adds	r3, #4
 8008250:	4619      	mov	r1, r3
 8008252:	4819      	ldr	r0, [pc, #100]	; (80082b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008254:	f7fd fe69 	bl	8005f2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008258:	e026      	b.n	80082a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4413      	add	r3, r2
 8008260:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008262:	4b14      	ldr	r3, [pc, #80]	; (80082b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	429a      	cmp	r2, r3
 8008270:	d209      	bcs.n	8008286 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008272:	4b12      	ldr	r3, [pc, #72]	; (80082bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3304      	adds	r3, #4
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f7fd fe77 	bl	8005f72 <vListInsert>
}
 8008284:	e010      	b.n	80082a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008286:	4b0e      	ldr	r3, [pc, #56]	; (80082c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f7fd fe6d 	bl	8005f72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008298:	4b0a      	ldr	r3, [pc, #40]	; (80082c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d202      	bcs.n	80082a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082a2:	4a08      	ldr	r2, [pc, #32]	; (80082c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	6013      	str	r3, [r2, #0]
}
 80082a8:	bf00      	nop
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	24001eec 	.word	0x24001eec
 80082b4:	24001a14 	.word	0x24001a14
 80082b8:	24001ed4 	.word	0x24001ed4
 80082bc:	24001ea4 	.word	0x24001ea4
 80082c0:	24001ea0 	.word	0x24001ea0
 80082c4:	24001f08 	.word	0x24001f08

080082c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	; 0x28
 80082cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082d2:	f000 fb07 	bl	80088e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082d6:	4b1c      	ldr	r3, [pc, #112]	; (8008348 <xTimerCreateTimerTask+0x80>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d021      	beq.n	8008322 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082e6:	1d3a      	adds	r2, r7, #4
 80082e8:	f107 0108 	add.w	r1, r7, #8
 80082ec:	f107 030c 	add.w	r3, r7, #12
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fd fdd3 	bl	8005e9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	9202      	str	r2, [sp, #8]
 80082fe:	9301      	str	r3, [sp, #4]
 8008300:	2302      	movs	r3, #2
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	2300      	movs	r3, #0
 8008306:	460a      	mov	r2, r1
 8008308:	4910      	ldr	r1, [pc, #64]	; (800834c <xTimerCreateTimerTask+0x84>)
 800830a:	4811      	ldr	r0, [pc, #68]	; (8008350 <xTimerCreateTimerTask+0x88>)
 800830c:	f7fe ff94 	bl	8007238 <xTaskCreateStatic>
 8008310:	4603      	mov	r3, r0
 8008312:	4a10      	ldr	r2, [pc, #64]	; (8008354 <xTimerCreateTimerTask+0x8c>)
 8008314:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008316:	4b0f      	ldr	r3, [pc, #60]	; (8008354 <xTimerCreateTimerTask+0x8c>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800831e:	2301      	movs	r3, #1
 8008320:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	613b      	str	r3, [r7, #16]
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800833e:	697b      	ldr	r3, [r7, #20]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	24001f44 	.word	0x24001f44
 800834c:	08010920 	.word	0x08010920
 8008350:	0800848d 	.word	0x0800848d
 8008354:	24001f48 	.word	0x24001f48

08008358 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	; 0x28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008366:	2300      	movs	r3, #0
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	623b      	str	r3, [r7, #32]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008386:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <xTimerGenericCommand+0x98>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d02a      	beq.n	80083e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b05      	cmp	r3, #5
 800839e:	dc18      	bgt.n	80083d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083a0:	f7ff fdb4 	bl	8007f0c <xTaskGetSchedulerState>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d109      	bne.n	80083be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083aa:	4b11      	ldr	r3, [pc, #68]	; (80083f0 <xTimerGenericCommand+0x98>)
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	f107 0110 	add.w	r1, r7, #16
 80083b2:	2300      	movs	r3, #0
 80083b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083b6:	f7fe f89d 	bl	80064f4 <xQueueGenericSend>
 80083ba:	6278      	str	r0, [r7, #36]	; 0x24
 80083bc:	e012      	b.n	80083e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083be:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <xTimerGenericCommand+0x98>)
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	f107 0110 	add.w	r1, r7, #16
 80083c6:	2300      	movs	r3, #0
 80083c8:	2200      	movs	r2, #0
 80083ca:	f7fe f893 	bl	80064f4 <xQueueGenericSend>
 80083ce:	6278      	str	r0, [r7, #36]	; 0x24
 80083d0:	e008      	b.n	80083e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083d2:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <xTimerGenericCommand+0x98>)
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f107 0110 	add.w	r1, r7, #16
 80083da:	2300      	movs	r3, #0
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	f7fe f987 	bl	80066f0 <xQueueGenericSendFromISR>
 80083e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3728      	adds	r7, #40	; 0x28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	24001f44 	.word	0x24001f44

080083f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083fe:	4b22      	ldr	r3, [pc, #136]	; (8008488 <prvProcessExpiredTimer+0x94>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	3304      	adds	r3, #4
 800840c:	4618      	mov	r0, r3
 800840e:	f7fd fde9 	bl	8005fe4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008418:	f003 0304 	and.w	r3, r3, #4
 800841c:	2b00      	cmp	r3, #0
 800841e:	d022      	beq.n	8008466 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	699a      	ldr	r2, [r3, #24]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	18d1      	adds	r1, r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	6978      	ldr	r0, [r7, #20]
 800842e:	f000 f8d1 	bl	80085d4 <prvInsertTimerInActiveList>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01f      	beq.n	8008478 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008438:	2300      	movs	r3, #0
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	2300      	movs	r3, #0
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	2100      	movs	r1, #0
 8008442:	6978      	ldr	r0, [r7, #20]
 8008444:	f7ff ff88 	bl	8008358 <xTimerGenericCommand>
 8008448:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d113      	bne.n	8008478 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	60fb      	str	r3, [r7, #12]
}
 8008462:	bf00      	nop
 8008464:	e7fe      	b.n	8008464 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800846c:	f023 0301 	bic.w	r3, r3, #1
 8008470:	b2da      	uxtb	r2, r3
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	6978      	ldr	r0, [r7, #20]
 800847e:	4798      	blx	r3
}
 8008480:	bf00      	nop
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	24001f3c 	.word	0x24001f3c

0800848c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008494:	f107 0308 	add.w	r3, r7, #8
 8008498:	4618      	mov	r0, r3
 800849a:	f000 f857 	bl	800854c <prvGetNextExpireTime>
 800849e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	4619      	mov	r1, r3
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 f803 	bl	80084b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084aa:	f000 f8d5 	bl	8008658 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084ae:	e7f1      	b.n	8008494 <prvTimerTask+0x8>

080084b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084ba:	f7ff f919 	bl	80076f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084be:	f107 0308 	add.w	r3, r7, #8
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f866 	bl	8008594 <prvSampleTimeNow>
 80084c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d130      	bne.n	8008532 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10a      	bne.n	80084ec <prvProcessTimerOrBlockTask+0x3c>
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d806      	bhi.n	80084ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084de:	f7ff f915 	bl	800770c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084e2:	68f9      	ldr	r1, [r7, #12]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7ff ff85 	bl	80083f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084ea:	e024      	b.n	8008536 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d008      	beq.n	8008504 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084f2:	4b13      	ldr	r3, [pc, #76]	; (8008540 <prvProcessTimerOrBlockTask+0x90>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <prvProcessTimerOrBlockTask+0x50>
 80084fc:	2301      	movs	r3, #1
 80084fe:	e000      	b.n	8008502 <prvProcessTimerOrBlockTask+0x52>
 8008500:	2300      	movs	r3, #0
 8008502:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008504:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <prvProcessTimerOrBlockTask+0x94>)
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	4619      	mov	r1, r3
 8008512:	f7fe fe5d 	bl	80071d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008516:	f7ff f8f9 	bl	800770c <xTaskResumeAll>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008520:	4b09      	ldr	r3, [pc, #36]	; (8008548 <prvProcessTimerOrBlockTask+0x98>)
 8008522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	f3bf 8f6f 	isb	sy
}
 8008530:	e001      	b.n	8008536 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008532:	f7ff f8eb 	bl	800770c <xTaskResumeAll>
}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	24001f40 	.word	0x24001f40
 8008544:	24001f44 	.word	0x24001f44
 8008548:	e000ed04 	.word	0xe000ed04

0800854c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008554:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <prvGetNextExpireTime+0x44>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <prvGetNextExpireTime+0x16>
 800855e:	2201      	movs	r2, #1
 8008560:	e000      	b.n	8008564 <prvGetNextExpireTime+0x18>
 8008562:	2200      	movs	r2, #0
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d105      	bne.n	800857c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <prvGetNextExpireTime+0x44>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	e001      	b.n	8008580 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008580:	68fb      	ldr	r3, [r7, #12]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	24001f3c 	.word	0x24001f3c

08008594 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800859c:	f7ff f954 	bl	8007848 <xTaskGetTickCount>
 80085a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085a2:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <prvSampleTimeNow+0x3c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d205      	bcs.n	80085b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085ac:	f000 f936 	bl	800881c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	e002      	b.n	80085be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085be:	4a04      	ldr	r2, [pc, #16]	; (80085d0 <prvSampleTimeNow+0x3c>)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085c4:	68fb      	ldr	r3, [r7, #12]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	24001f4c 	.word	0x24001f4c

080085d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085e2:	2300      	movs	r3, #0
 80085e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d812      	bhi.n	8008620 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	1ad2      	subs	r2, r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	429a      	cmp	r2, r3
 8008606:	d302      	bcc.n	800860e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008608:	2301      	movs	r3, #1
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	e01b      	b.n	8008646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800860e:	4b10      	ldr	r3, [pc, #64]	; (8008650 <prvInsertTimerInActiveList+0x7c>)
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3304      	adds	r3, #4
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f7fd fcaa 	bl	8005f72 <vListInsert>
 800861e:	e012      	b.n	8008646 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	429a      	cmp	r2, r3
 8008626:	d206      	bcs.n	8008636 <prvInsertTimerInActiveList+0x62>
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d302      	bcc.n	8008636 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008630:	2301      	movs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e007      	b.n	8008646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008636:	4b07      	ldr	r3, [pc, #28]	; (8008654 <prvInsertTimerInActiveList+0x80>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fd fc96 	bl	8005f72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008646:	697b      	ldr	r3, [r7, #20]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	24001f40 	.word	0x24001f40
 8008654:	24001f3c 	.word	0x24001f3c

08008658 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b08e      	sub	sp, #56	; 0x38
 800865c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800865e:	e0ca      	b.n	80087f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	da18      	bge.n	8008698 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008666:	1d3b      	adds	r3, r7, #4
 8008668:	3304      	adds	r3, #4
 800866a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10a      	bne.n	8008688 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	61fb      	str	r3, [r7, #28]
}
 8008684:	bf00      	nop
 8008686:	e7fe      	b.n	8008686 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800868e:	6850      	ldr	r0, [r2, #4]
 8008690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008692:	6892      	ldr	r2, [r2, #8]
 8008694:	4611      	mov	r1, r2
 8008696:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f2c0 80ab 	blt.w	80087f6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d004      	beq.n	80086b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	3304      	adds	r3, #4
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fd fc97 	bl	8005fe4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086b6:	463b      	mov	r3, r7
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7ff ff6b 	bl	8008594 <prvSampleTimeNow>
 80086be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b09      	cmp	r3, #9
 80086c4:	f200 8096 	bhi.w	80087f4 <prvProcessReceivedCommands+0x19c>
 80086c8:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <prvProcessReceivedCommands+0x78>)
 80086ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ce:	bf00      	nop
 80086d0:	080086f9 	.word	0x080086f9
 80086d4:	080086f9 	.word	0x080086f9
 80086d8:	080086f9 	.word	0x080086f9
 80086dc:	0800876d 	.word	0x0800876d
 80086e0:	08008781 	.word	0x08008781
 80086e4:	080087cb 	.word	0x080087cb
 80086e8:	080086f9 	.word	0x080086f9
 80086ec:	080086f9 	.word	0x080086f9
 80086f0:	0800876d 	.word	0x0800876d
 80086f4:	08008781 	.word	0x08008781
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086fe:	f043 0301 	orr.w	r3, r3, #1
 8008702:	b2da      	uxtb	r2, r3
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	18d1      	adds	r1, r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008718:	f7ff ff5c 	bl	80085d4 <prvInsertTimerInActiveList>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d069      	beq.n	80087f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008728:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d05e      	beq.n	80087f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	441a      	add	r2, r3
 8008740:	2300      	movs	r3, #0
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	2300      	movs	r3, #0
 8008746:	2100      	movs	r1, #0
 8008748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800874a:	f7ff fe05 	bl	8008358 <xTimerGenericCommand>
 800874e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d14f      	bne.n	80087f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	61bb      	str	r3, [r7, #24]
}
 8008768:	bf00      	nop
 800876a:	e7fe      	b.n	800876a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008772:	f023 0301 	bic.w	r3, r3, #1
 8008776:	b2da      	uxtb	r2, r3
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800877e:	e03a      	b.n	80087f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	b2da      	uxtb	r2, r3
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	617b      	str	r3, [r7, #20]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	18d1      	adds	r1, r2, r3
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c4:	f7ff ff06 	bl	80085d4 <prvInsertTimerInActiveList>
					break;
 80087c8:	e015      	b.n	80087f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d103      	bne.n	80087e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80087d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087da:	f000 fbe1 	bl	8008fa0 <vPortFree>
 80087de:	e00a      	b.n	80087f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087e6:	f023 0301 	bic.w	r3, r3, #1
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087f2:	e000      	b.n	80087f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80087f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087f6:	4b08      	ldr	r3, [pc, #32]	; (8008818 <prvProcessReceivedCommands+0x1c0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	1d39      	adds	r1, r7, #4
 80087fc:	2200      	movs	r2, #0
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe f89e 	bl	8006940 <xQueueReceive>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	f47f af2a 	bne.w	8008660 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800880c:	bf00      	nop
 800880e:	bf00      	nop
 8008810:	3730      	adds	r7, #48	; 0x30
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	24001f44 	.word	0x24001f44

0800881c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008822:	e048      	b.n	80088b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008824:	4b2d      	ldr	r3, [pc, #180]	; (80088dc <prvSwitchTimerLists+0xc0>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882e:	4b2b      	ldr	r3, [pc, #172]	; (80088dc <prvSwitchTimerLists+0xc0>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3304      	adds	r3, #4
 800883c:	4618      	mov	r0, r3
 800883e:	f7fd fbd1 	bl	8005fe4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b00      	cmp	r3, #0
 8008856:	d02e      	beq.n	80088b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	4413      	add	r3, r2
 8008860:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	429a      	cmp	r2, r3
 8008868:	d90e      	bls.n	8008888 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008876:	4b19      	ldr	r3, [pc, #100]	; (80088dc <prvSwitchTimerLists+0xc0>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3304      	adds	r3, #4
 800887e:	4619      	mov	r1, r3
 8008880:	4610      	mov	r0, r2
 8008882:	f7fd fb76 	bl	8005f72 <vListInsert>
 8008886:	e016      	b.n	80088b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008888:	2300      	movs	r3, #0
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	2300      	movs	r3, #0
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	2100      	movs	r1, #0
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7ff fd60 	bl	8008358 <xTimerGenericCommand>
 8008898:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10a      	bne.n	80088b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	603b      	str	r3, [r7, #0]
}
 80088b2:	bf00      	nop
 80088b4:	e7fe      	b.n	80088b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088b6:	4b09      	ldr	r3, [pc, #36]	; (80088dc <prvSwitchTimerLists+0xc0>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1b1      	bne.n	8008824 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088c0:	4b06      	ldr	r3, [pc, #24]	; (80088dc <prvSwitchTimerLists+0xc0>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088c6:	4b06      	ldr	r3, [pc, #24]	; (80088e0 <prvSwitchTimerLists+0xc4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a04      	ldr	r2, [pc, #16]	; (80088dc <prvSwitchTimerLists+0xc0>)
 80088cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088ce:	4a04      	ldr	r2, [pc, #16]	; (80088e0 <prvSwitchTimerLists+0xc4>)
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	6013      	str	r3, [r2, #0]
}
 80088d4:	bf00      	nop
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	24001f3c 	.word	0x24001f3c
 80088e0:	24001f40 	.word	0x24001f40

080088e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088ea:	f000 f96b 	bl	8008bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088ee:	4b15      	ldr	r3, [pc, #84]	; (8008944 <prvCheckForValidListAndQueue+0x60>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d120      	bne.n	8008938 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088f6:	4814      	ldr	r0, [pc, #80]	; (8008948 <prvCheckForValidListAndQueue+0x64>)
 80088f8:	f7fd faea 	bl	8005ed0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088fc:	4813      	ldr	r0, [pc, #76]	; (800894c <prvCheckForValidListAndQueue+0x68>)
 80088fe:	f7fd fae7 	bl	8005ed0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008902:	4b13      	ldr	r3, [pc, #76]	; (8008950 <prvCheckForValidListAndQueue+0x6c>)
 8008904:	4a10      	ldr	r2, [pc, #64]	; (8008948 <prvCheckForValidListAndQueue+0x64>)
 8008906:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008908:	4b12      	ldr	r3, [pc, #72]	; (8008954 <prvCheckForValidListAndQueue+0x70>)
 800890a:	4a10      	ldr	r2, [pc, #64]	; (800894c <prvCheckForValidListAndQueue+0x68>)
 800890c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800890e:	2300      	movs	r3, #0
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	4b11      	ldr	r3, [pc, #68]	; (8008958 <prvCheckForValidListAndQueue+0x74>)
 8008914:	4a11      	ldr	r2, [pc, #68]	; (800895c <prvCheckForValidListAndQueue+0x78>)
 8008916:	2110      	movs	r1, #16
 8008918:	200a      	movs	r0, #10
 800891a:	f7fd fbf5 	bl	8006108 <xQueueGenericCreateStatic>
 800891e:	4603      	mov	r3, r0
 8008920:	4a08      	ldr	r2, [pc, #32]	; (8008944 <prvCheckForValidListAndQueue+0x60>)
 8008922:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008924:	4b07      	ldr	r3, [pc, #28]	; (8008944 <prvCheckForValidListAndQueue+0x60>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d005      	beq.n	8008938 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800892c:	4b05      	ldr	r3, [pc, #20]	; (8008944 <prvCheckForValidListAndQueue+0x60>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	490b      	ldr	r1, [pc, #44]	; (8008960 <prvCheckForValidListAndQueue+0x7c>)
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fbf8 	bl	8007128 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008938:	f000 f974 	bl	8008c24 <vPortExitCritical>
}
 800893c:	bf00      	nop
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	24001f44 	.word	0x24001f44
 8008948:	24001f14 	.word	0x24001f14
 800894c:	24001f28 	.word	0x24001f28
 8008950:	24001f3c 	.word	0x24001f3c
 8008954:	24001f40 	.word	0x24001f40
 8008958:	24001ff0 	.word	0x24001ff0
 800895c:	24001f50 	.word	0x24001f50
 8008960:	08010928 	.word	0x08010928

08008964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3b04      	subs	r3, #4
 8008974:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800897c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3b04      	subs	r3, #4
 8008982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f023 0201 	bic.w	r2, r3, #1
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3b04      	subs	r3, #4
 8008992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008994:	4a0c      	ldr	r2, [pc, #48]	; (80089c8 <pxPortInitialiseStack+0x64>)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3b14      	subs	r3, #20
 800899e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3b04      	subs	r3, #4
 80089aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f06f 0202 	mvn.w	r2, #2
 80089b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3b20      	subs	r3, #32
 80089b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089ba:	68fb      	ldr	r3, [r7, #12]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	080089cd 	.word	0x080089cd

080089cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089d6:	4b12      	ldr	r3, [pc, #72]	; (8008a20 <prvTaskExitError+0x54>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089de:	d00a      	beq.n	80089f6 <prvTaskExitError+0x2a>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	60fb      	str	r3, [r7, #12]
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <prvTaskExitError+0x28>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	60bb      	str	r3, [r7, #8]
}
 8008a08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a0a:	bf00      	nop
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0fc      	beq.n	8008a0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a12:	bf00      	nop
 8008a14:	bf00      	nop
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	24000024 	.word	0x24000024
	...

08008a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a30:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <pxCurrentTCBConst2>)
 8008a32:	6819      	ldr	r1, [r3, #0]
 8008a34:	6808      	ldr	r0, [r1, #0]
 8008a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3a:	f380 8809 	msr	PSP, r0
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8811 	msr	BASEPRI, r0
 8008a4a:	4770      	bx	lr
 8008a4c:	f3af 8000 	nop.w

08008a50 <pxCurrentTCBConst2>:
 8008a50:	24001a14 	.word	0x24001a14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop

08008a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a58:	4808      	ldr	r0, [pc, #32]	; (8008a7c <prvPortStartFirstTask+0x24>)
 8008a5a:	6800      	ldr	r0, [r0, #0]
 8008a5c:	6800      	ldr	r0, [r0, #0]
 8008a5e:	f380 8808 	msr	MSP, r0
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8814 	msr	CONTROL, r0
 8008a6a:	b662      	cpsie	i
 8008a6c:	b661      	cpsie	f
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	df00      	svc	0
 8008a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a7a:	bf00      	nop
 8008a7c:	e000ed08 	.word	0xe000ed08

08008a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a86:	4b46      	ldr	r3, [pc, #280]	; (8008ba0 <xPortStartScheduler+0x120>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a46      	ldr	r2, [pc, #280]	; (8008ba4 <xPortStartScheduler+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10a      	bne.n	8008aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	613b      	str	r3, [r7, #16]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008aa6:	4b3e      	ldr	r3, [pc, #248]	; (8008ba0 <xPortStartScheduler+0x120>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a3f      	ldr	r2, [pc, #252]	; (8008ba8 <xPortStartScheduler+0x128>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10a      	bne.n	8008ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ac6:	4b39      	ldr	r3, [pc, #228]	; (8008bac <xPortStartScheduler+0x12c>)
 8008ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	22ff      	movs	r2, #255	; 0xff
 8008ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	4b31      	ldr	r3, [pc, #196]	; (8008bb0 <xPortStartScheduler+0x130>)
 8008aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008aee:	4b31      	ldr	r3, [pc, #196]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008af0:	2207      	movs	r2, #7
 8008af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008af4:	e009      	b.n	8008b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008af6:	4b2f      	ldr	r3, [pc, #188]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	4a2d      	ldr	r2, [pc, #180]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b12:	2b80      	cmp	r3, #128	; 0x80
 8008b14:	d0ef      	beq.n	8008af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b16:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f1c3 0307 	rsb	r3, r3, #7
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d00a      	beq.n	8008b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	60bb      	str	r3, [r7, #8]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b38:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	021b      	lsls	r3, r3, #8
 8008b3e:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b42:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b4a:	4a1a      	ldr	r2, [pc, #104]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b56:	4b18      	ldr	r3, [pc, #96]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a17      	ldr	r2, [pc, #92]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b62:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a14      	ldr	r2, [pc, #80]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b6e:	f000 f8dd 	bl	8008d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b72:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <xPortStartScheduler+0x13c>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b78:	f000 f8fc 	bl	8008d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b7c:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <xPortStartScheduler+0x140>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0f      	ldr	r2, [pc, #60]	; (8008bc0 <xPortStartScheduler+0x140>)
 8008b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b88:	f7ff ff66 	bl	8008a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b8c:	f7fe ff38 	bl	8007a00 <vTaskSwitchContext>
	prvTaskExitError();
 8008b90:	f7ff ff1c 	bl	80089cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	e000ed00 	.word	0xe000ed00
 8008ba4:	410fc271 	.word	0x410fc271
 8008ba8:	410fc270 	.word	0x410fc270
 8008bac:	e000e400 	.word	0xe000e400
 8008bb0:	24002040 	.word	0x24002040
 8008bb4:	24002044 	.word	0x24002044
 8008bb8:	e000ed20 	.word	0xe000ed20
 8008bbc:	24000024 	.word	0x24000024
 8008bc0:	e000ef34 	.word	0xe000ef34

08008bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	607b      	str	r3, [r7, #4]
}
 8008bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bde:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <vPortEnterCritical+0x58>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	4a0d      	ldr	r2, [pc, #52]	; (8008c1c <vPortEnterCritical+0x58>)
 8008be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008be8:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <vPortEnterCritical+0x58>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d10f      	bne.n	8008c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bf0:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <vPortEnterCritical+0x5c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	603b      	str	r3, [r7, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <vPortEnterCritical+0x4a>
	}
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	24000024 	.word	0x24000024
 8008c20:	e000ed04 	.word	0xe000ed04

08008c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c2a:	4b12      	ldr	r3, [pc, #72]	; (8008c74 <vPortExitCritical+0x50>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10a      	bne.n	8008c48 <vPortExitCritical+0x24>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	607b      	str	r3, [r7, #4]
}
 8008c44:	bf00      	nop
 8008c46:	e7fe      	b.n	8008c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c48:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <vPortExitCritical+0x50>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	4a09      	ldr	r2, [pc, #36]	; (8008c74 <vPortExitCritical+0x50>)
 8008c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c52:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <vPortExitCritical+0x50>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <vPortExitCritical+0x42>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	f383 8811 	msr	BASEPRI, r3
}
 8008c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	24000024 	.word	0x24000024
	...

08008c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c80:	f3ef 8009 	mrs	r0, PSP
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <pxCurrentTCBConst>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	f01e 0f10 	tst.w	lr, #16
 8008c90:	bf08      	it	eq
 8008c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	6010      	str	r0, [r2, #0]
 8008c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ca4:	f380 8811 	msr	BASEPRI, r0
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f7fe fea6 	bl	8007a00 <vTaskSwitchContext>
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f380 8811 	msr	BASEPRI, r0
 8008cbc:	bc09      	pop	{r0, r3}
 8008cbe:	6819      	ldr	r1, [r3, #0]
 8008cc0:	6808      	ldr	r0, [r1, #0]
 8008cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc6:	f01e 0f10 	tst.w	lr, #16
 8008cca:	bf08      	it	eq
 8008ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cd0:	f380 8809 	msr	PSP, r0
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst>:
 8008ce0:	24001a14 	.word	0x24001a14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	607b      	str	r3, [r7, #4]
}
 8008d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d02:	f7fe fdc3 	bl	800788c <xTaskIncrementTick>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <xPortSysTickHandler+0x40>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f383 8811 	msr	BASEPRI, r3
}
 8008d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d30:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d36:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <vPortSetupTimerInterrupt+0x38>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	; (8008d68 <vPortSetupTimerInterrupt+0x3c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0a      	ldr	r2, [pc, #40]	; (8008d6c <vPortSetupTimerInterrupt+0x40>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	099b      	lsrs	r3, r3, #6
 8008d48:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <vPortSetupTimerInterrupt+0x44>)
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d4e:	4b04      	ldr	r3, [pc, #16]	; (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d50:	2207      	movs	r2, #7
 8008d52:	601a      	str	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	e000e010 	.word	0xe000e010
 8008d64:	e000e018 	.word	0xe000e018
 8008d68:	24000000 	.word	0x24000000
 8008d6c:	10624dd3 	.word	0x10624dd3
 8008d70:	e000e014 	.word	0xe000e014

08008d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d84 <vPortEnableVFP+0x10>
 8008d78:	6801      	ldr	r1, [r0, #0]
 8008d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d7e:	6001      	str	r1, [r0, #0]
 8008d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d82:	bf00      	nop
 8008d84:	e000ed88 	.word	0xe000ed88

08008d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d8e:	f3ef 8305 	mrs	r3, IPSR
 8008d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b0f      	cmp	r3, #15
 8008d98:	d914      	bls.n	8008dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d9a:	4a17      	ldr	r2, [pc, #92]	; (8008df8 <vPortValidateInterruptPriority+0x70>)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4413      	add	r3, r2
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008da4:	4b15      	ldr	r3, [pc, #84]	; (8008dfc <vPortValidateInterruptPriority+0x74>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	7afa      	ldrb	r2, [r7, #11]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d20a      	bcs.n	8008dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	607b      	str	r3, [r7, #4]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008dc4:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <vPortValidateInterruptPriority+0x78>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <vPortValidateInterruptPriority+0x7c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d90a      	bls.n	8008dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	603b      	str	r3, [r7, #0]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <vPortValidateInterruptPriority+0x60>
	}
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	e000e3f0 	.word	0xe000e3f0
 8008dfc:	24002040 	.word	0x24002040
 8008e00:	e000ed0c 	.word	0xe000ed0c
 8008e04:	24002044 	.word	0x24002044

08008e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e14:	f7fe fc6c 	bl	80076f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e18:	4b5b      	ldr	r3, [pc, #364]	; (8008f88 <pvPortMalloc+0x180>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e20:	f000 f920 	bl	8009064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e24:	4b59      	ldr	r3, [pc, #356]	; (8008f8c <pvPortMalloc+0x184>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f040 8093 	bne.w	8008f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01d      	beq.n	8008e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e38:	2208      	movs	r2, #8
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d014      	beq.n	8008e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f023 0307 	bic.w	r3, r3, #7
 8008e50:	3308      	adds	r3, #8
 8008e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f003 0307 	and.w	r3, r3, #7
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <pvPortMalloc+0x6c>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	617b      	str	r3, [r7, #20]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d06e      	beq.n	8008f58 <pvPortMalloc+0x150>
 8008e7a:	4b45      	ldr	r3, [pc, #276]	; (8008f90 <pvPortMalloc+0x188>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d869      	bhi.n	8008f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e84:	4b43      	ldr	r3, [pc, #268]	; (8008f94 <pvPortMalloc+0x18c>)
 8008e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e88:	4b42      	ldr	r3, [pc, #264]	; (8008f94 <pvPortMalloc+0x18c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e8e:	e004      	b.n	8008e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d903      	bls.n	8008eac <pvPortMalloc+0xa4>
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f1      	bne.n	8008e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008eac:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <pvPortMalloc+0x180>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d050      	beq.n	8008f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2208      	movs	r2, #8
 8008ebc:	4413      	add	r3, r2
 8008ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d91f      	bls.n	8008f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4413      	add	r3, r2
 8008ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	f003 0307 	and.w	r3, r3, #7
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <pvPortMalloc+0xf8>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	613b      	str	r3, [r7, #16]
}
 8008efc:	bf00      	nop
 8008efe:	e7fe      	b.n	8008efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	1ad2      	subs	r2, r2, r3
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f12:	69b8      	ldr	r0, [r7, #24]
 8008f14:	f000 f908 	bl	8009128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f18:	4b1d      	ldr	r3, [pc, #116]	; (8008f90 <pvPortMalloc+0x188>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	4a1b      	ldr	r2, [pc, #108]	; (8008f90 <pvPortMalloc+0x188>)
 8008f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f26:	4b1a      	ldr	r3, [pc, #104]	; (8008f90 <pvPortMalloc+0x188>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b1b      	ldr	r3, [pc, #108]	; (8008f98 <pvPortMalloc+0x190>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d203      	bcs.n	8008f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f32:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <pvPortMalloc+0x188>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a18      	ldr	r2, [pc, #96]	; (8008f98 <pvPortMalloc+0x190>)
 8008f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <pvPortMalloc+0x184>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f4e:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <pvPortMalloc+0x194>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3301      	adds	r3, #1
 8008f54:	4a11      	ldr	r2, [pc, #68]	; (8008f9c <pvPortMalloc+0x194>)
 8008f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f58:	f7fe fbd8 	bl	800770c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <pvPortMalloc+0x174>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <pvPortMalloc+0x172>
	return pvReturn;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3728      	adds	r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	24005c50 	.word	0x24005c50
 8008f8c:	24005c64 	.word	0x24005c64
 8008f90:	24005c54 	.word	0x24005c54
 8008f94:	24005c48 	.word	0x24005c48
 8008f98:	24005c58 	.word	0x24005c58
 8008f9c:	24005c5c 	.word	0x24005c5c

08008fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d04d      	beq.n	800904e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fb2:	2308      	movs	r3, #8
 8008fb4:	425b      	negs	r3, r3
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	4413      	add	r3, r2
 8008fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	4b24      	ldr	r3, [pc, #144]	; (8009058 <vPortFree+0xb8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <vPortFree+0x44>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	60fb      	str	r3, [r7, #12]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <vPortFree+0x62>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	60bb      	str	r3, [r7, #8]
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	4b14      	ldr	r3, [pc, #80]	; (8009058 <vPortFree+0xb8>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d01e      	beq.n	800904e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d11a      	bne.n	800904e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b0e      	ldr	r3, [pc, #56]	; (8009058 <vPortFree+0xb8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	43db      	mvns	r3, r3
 8009022:	401a      	ands	r2, r3
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009028:	f7fe fb62 	bl	80076f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	4b0a      	ldr	r3, [pc, #40]	; (800905c <vPortFree+0xbc>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4413      	add	r3, r2
 8009036:	4a09      	ldr	r2, [pc, #36]	; (800905c <vPortFree+0xbc>)
 8009038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800903a:	6938      	ldr	r0, [r7, #16]
 800903c:	f000 f874 	bl	8009128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <vPortFree+0xc0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	4a06      	ldr	r2, [pc, #24]	; (8009060 <vPortFree+0xc0>)
 8009048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800904a:	f7fe fb5f 	bl	800770c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800904e:	bf00      	nop
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	24005c64 	.word	0x24005c64
 800905c:	24005c54 	.word	0x24005c54
 8009060:	24005c60 	.word	0x24005c60

08009064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800906a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800906e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009070:	4b27      	ldr	r3, [pc, #156]	; (8009110 <prvHeapInit+0xac>)
 8009072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00c      	beq.n	8009098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3307      	adds	r3, #7
 8009082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	4a1f      	ldr	r2, [pc, #124]	; (8009110 <prvHeapInit+0xac>)
 8009094:	4413      	add	r3, r2
 8009096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800909c:	4a1d      	ldr	r2, [pc, #116]	; (8009114 <prvHeapInit+0xb0>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090a2:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <prvHeapInit+0xb0>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	4413      	add	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090b0:	2208      	movs	r2, #8
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0307 	bic.w	r3, r3, #7
 80090be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4a15      	ldr	r2, [pc, #84]	; (8009118 <prvHeapInit+0xb4>)
 80090c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090c6:	4b14      	ldr	r3, [pc, #80]	; (8009118 <prvHeapInit+0xb4>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2200      	movs	r2, #0
 80090cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <prvHeapInit+0xb4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090e4:	4b0c      	ldr	r3, [pc, #48]	; (8009118 <prvHeapInit+0xb4>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4a0a      	ldr	r2, [pc, #40]	; (800911c <prvHeapInit+0xb8>)
 80090f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	4a09      	ldr	r2, [pc, #36]	; (8009120 <prvHeapInit+0xbc>)
 80090fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090fc:	4b09      	ldr	r3, [pc, #36]	; (8009124 <prvHeapInit+0xc0>)
 80090fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009102:	601a      	str	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	24002048 	.word	0x24002048
 8009114:	24005c48 	.word	0x24005c48
 8009118:	24005c50 	.word	0x24005c50
 800911c:	24005c58 	.word	0x24005c58
 8009120:	24005c54 	.word	0x24005c54
 8009124:	24005c64 	.word	0x24005c64

08009128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009130:	4b28      	ldr	r3, [pc, #160]	; (80091d4 <prvInsertBlockIntoFreeList+0xac>)
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	e002      	b.n	800913c <prvInsertBlockIntoFreeList+0x14>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	429a      	cmp	r2, r3
 8009144:	d8f7      	bhi.n	8009136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	4413      	add	r3, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	429a      	cmp	r2, r3
 8009156:	d108      	bne.n	800916a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	441a      	add	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d118      	bne.n	80091b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	4b15      	ldr	r3, [pc, #84]	; (80091d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d00d      	beq.n	80091a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	441a      	add	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	e008      	b.n	80091b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e003      	b.n	80091b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d002      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091c6:	bf00      	nop
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	24005c48 	.word	0x24005c48
 80091d8:	24005c50 	.word	0x24005c50

080091dc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	330c      	adds	r3, #12
 80091ec:	461a      	mov	r2, r3
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fe7b 	bl	8009eec <tcpip_send_msg_wait_sem>
 80091f6:	4603      	mov	r3, r0
 80091f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80091fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d103      	bne.n	800920a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009208:	e001      	b.n	800920e <netconn_apimsg+0x32>
  }
  return err;
 800920a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
	...

08009218 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08c      	sub	sp, #48	; 0x30
 800921c:	af00      	add	r7, sp, #0
 800921e:	4603      	mov	r3, r0
 8009220:	603a      	str	r2, [r7, #0]
 8009222:	71fb      	strb	r3, [r7, #7]
 8009224:	460b      	mov	r3, r1
 8009226:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fb19 	bl	8009864 <netconn_alloc>
 8009232:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009236:	2b00      	cmp	r3, #0
 8009238:	d046      	beq.n	80092c8 <netconn_new_with_proto_and_callback+0xb0>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800923a:	79bb      	ldrb	r3, [r7, #6]
 800923c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009240:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009242:	f107 0308 	add.w	r3, r7, #8
 8009246:	4619      	mov	r1, r3
 8009248:	4822      	ldr	r0, [pc, #136]	; (80092d4 <netconn_new_with_proto_and_callback+0xbc>)
 800924a:	f7ff ffc7 	bl	80091dc <netconn_apimsg>
 800924e:	4603      	mov	r3, r0
 8009250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009254:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009258:	2b00      	cmp	r3, #0
 800925a:	d035      	beq.n	80092c8 <netconn_new_with_proto_and_callback+0xb0>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800925c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d005      	beq.n	8009270 <netconn_new_with_proto_and_callback+0x58>
 8009264:	4b1c      	ldr	r3, [pc, #112]	; (80092d8 <netconn_new_with_proto_and_callback+0xc0>)
 8009266:	22a3      	movs	r2, #163	; 0xa3
 8009268:	491c      	ldr	r1, [pc, #112]	; (80092dc <netconn_new_with_proto_and_callback+0xc4>)
 800926a:	481d      	ldr	r0, [pc, #116]	; (80092e0 <netconn_new_with_proto_and_callback+0xc8>)
 800926c:	f006 f9b2 	bl	800f5d4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009272:	3310      	adds	r3, #16
 8009274:	4618      	mov	r0, r3
 8009276:	f005 ffc3 	bl	800f200 <sys_mbox_valid>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d105      	bne.n	800928c <netconn_new_with_proto_and_callback+0x74>
 8009280:	4b15      	ldr	r3, [pc, #84]	; (80092d8 <netconn_new_with_proto_and_callback+0xc0>)
 8009282:	22a4      	movs	r2, #164	; 0xa4
 8009284:	4917      	ldr	r1, [pc, #92]	; (80092e4 <netconn_new_with_proto_and_callback+0xcc>)
 8009286:	4816      	ldr	r0, [pc, #88]	; (80092e0 <netconn_new_with_proto_and_callback+0xc8>)
 8009288:	f006 f9a4 	bl	800f5d4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	330c      	adds	r3, #12
 8009290:	4618      	mov	r0, r3
 8009292:	f006 f805 	bl	800f2a0 <sys_sem_valid>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d105      	bne.n	80092a8 <netconn_new_with_proto_and_callback+0x90>
 800929c:	4b0e      	ldr	r3, [pc, #56]	; (80092d8 <netconn_new_with_proto_and_callback+0xc0>)
 800929e:	22a9      	movs	r2, #169	; 0xa9
 80092a0:	4911      	ldr	r1, [pc, #68]	; (80092e8 <netconn_new_with_proto_and_callback+0xd0>)
 80092a2:	480f      	ldr	r0, [pc, #60]	; (80092e0 <netconn_new_with_proto_and_callback+0xc8>)
 80092a4:	f006 f996 	bl	800f5d4 <iprintf>
      sys_sem_free(&conn->op_completed);
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	330c      	adds	r3, #12
 80092ac:	4618      	mov	r0, r3
 80092ae:	f005 ffea 	bl	800f286 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80092b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b4:	3310      	adds	r3, #16
 80092b6:	4618      	mov	r0, r3
 80092b8:	f005 ff2e 	bl	800f118 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80092bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092be:	2004      	movs	r0, #4
 80092c0:	f001 fc6e 	bl	800aba0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80092c4:	2300      	movs	r3, #0
 80092c6:	e000      	b.n	80092ca <netconn_new_with_proto_and_callback+0xb2>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3730      	adds	r7, #48	; 0x30
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	08009839 	.word	0x08009839
 80092d8:	08010930 	.word	0x08010930
 80092dc:	08010964 	.word	0x08010964
 80092e0:	08010988 	.word	0x08010988
 80092e4:	080109b0 	.word	0x080109b0
 80092e8:	080109c8 	.word	0x080109c8

080092ec <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08c      	sub	sp, #48	; 0x30
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <netconn_prepare_delete+0x12>
    return ERR_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	e012      	b.n	8009324 <netconn_prepare_delete+0x38>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009302:	f107 030c 	add.w	r3, r7, #12
 8009306:	4619      	mov	r1, r3
 8009308:	4808      	ldr	r0, [pc, #32]	; (800932c <netconn_prepare_delete+0x40>)
 800930a:	f7ff ff67 	bl	80091dc <netconn_apimsg>
 800930e:	4603      	mov	r3, r0
 8009310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009314:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <netconn_prepare_delete+0x36>
    return err;
 800931c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009320:	e000      	b.n	8009324 <netconn_prepare_delete+0x38>
  }
  return ERR_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3730      	adds	r7, #48	; 0x30
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	080099f1 	.word	0x080099f1

08009330 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <netconn_delete+0x12>
    return ERR_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	e00d      	b.n	800935e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff ffd2 	bl	80092ec <netconn_prepare_delete>
 8009348:	4603      	mov	r3, r0
 800934a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800934c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <netconn_delete+0x2a>
    netconn_free(conn);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fae7 	bl	8009928 <netconn_free>
  }
  return err;
 800935a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b08e      	sub	sp, #56	; 0x38
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d109      	bne.n	8009390 <netconn_bind+0x28>
 800937c:	4b11      	ldr	r3, [pc, #68]	; (80093c4 <netconn_bind+0x5c>)
 800937e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009382:	4911      	ldr	r1, [pc, #68]	; (80093c8 <netconn_bind+0x60>)
 8009384:	4811      	ldr	r0, [pc, #68]	; (80093cc <netconn_bind+0x64>)
 8009386:	f006 f925 	bl	800f5d4 <iprintf>
 800938a:	f06f 030f 	mvn.w	r3, #15
 800938e:	e015      	b.n	80093bc <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8009396:	4b0e      	ldr	r3, [pc, #56]	; (80093d0 <netconn_bind+0x68>)
 8009398:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80093a2:	88fb      	ldrh	r3, [r7, #6]
 80093a4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80093a6:	f107 0314 	add.w	r3, r7, #20
 80093aa:	4619      	mov	r1, r3
 80093ac:	4809      	ldr	r0, [pc, #36]	; (80093d4 <netconn_bind+0x6c>)
 80093ae:	f7ff ff15 	bl	80091dc <netconn_apimsg>
 80093b2:	4603      	mov	r3, r0
 80093b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80093b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3738      	adds	r7, #56	; 0x38
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	08010930 	.word	0x08010930
 80093c8:	08010a44 	.word	0x08010a44
 80093cc:	08010988 	.word	0x08010988
 80093d0:	080124a8 	.word	0x080124a8
 80093d4:	08009b19 	.word	0x08009b19

080093d8 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08e      	sub	sp, #56	; 0x38
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	4613      	mov	r3, r2
 80093e4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d109      	bne.n	8009400 <netconn_connect+0x28>
 80093ec:	4b11      	ldr	r3, [pc, #68]	; (8009434 <netconn_connect+0x5c>)
 80093ee:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80093f2:	4911      	ldr	r1, [pc, #68]	; (8009438 <netconn_connect+0x60>)
 80093f4:	4811      	ldr	r0, [pc, #68]	; (800943c <netconn_connect+0x64>)
 80093f6:	f006 f8ed 	bl	800f5d4 <iprintf>
 80093fa:	f06f 030f 	mvn.w	r3, #15
 80093fe:	e015      	b.n	800942c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8009406:	4b0e      	ldr	r3, [pc, #56]	; (8009440 <netconn_connect+0x68>)
 8009408:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009412:	88fb      	ldrh	r3, [r7, #6]
 8009414:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8009416:	f107 0314 	add.w	r3, r7, #20
 800941a:	4619      	mov	r1, r3
 800941c:	4809      	ldr	r0, [pc, #36]	; (8009444 <netconn_connect+0x6c>)
 800941e:	f7ff fedd 	bl	80091dc <netconn_apimsg>
 8009422:	4603      	mov	r3, r0
 8009424:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009428:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800942c:	4618      	mov	r0, r3
 800942e:	3738      	adds	r7, #56	; 0x38
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	08010930 	.word	0x08010930
 8009438:	08010a80 	.word	0x08010a80
 800943c:	08010988 	.word	0x08010988
 8009440:	080124a8 	.word	0x080124a8
 8009444:	08009b71 	.word	0x08009b71

08009448 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009456:	2300      	movs	r3, #0
 8009458:	617b      	str	r3, [r7, #20]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d109      	bne.n	8009474 <netconn_recv_data+0x2c>
 8009460:	4b49      	ldr	r3, [pc, #292]	; (8009588 <netconn_recv_data+0x140>)
 8009462:	f44f 7212 	mov.w	r2, #584	; 0x248
 8009466:	4949      	ldr	r1, [pc, #292]	; (800958c <netconn_recv_data+0x144>)
 8009468:	4849      	ldr	r0, [pc, #292]	; (8009590 <netconn_recv_data+0x148>)
 800946a:	f006 f8b3 	bl	800f5d4 <iprintf>
 800946e:	f06f 030f 	mvn.w	r3, #15
 8009472:	e084      	b.n	800957e <netconn_recv_data+0x136>
  *new_buf = NULL;
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2200      	movs	r2, #0
 8009478:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d109      	bne.n	8009494 <netconn_recv_data+0x4c>
 8009480:	4b41      	ldr	r3, [pc, #260]	; (8009588 <netconn_recv_data+0x140>)
 8009482:	f240 224a 	movw	r2, #586	; 0x24a
 8009486:	4943      	ldr	r1, [pc, #268]	; (8009594 <netconn_recv_data+0x14c>)
 8009488:	4841      	ldr	r0, [pc, #260]	; (8009590 <netconn_recv_data+0x148>)
 800948a:	f006 f8a3 	bl	800f5d4 <iprintf>
 800948e:	f06f 030f 	mvn.w	r3, #15
 8009492:	e074      	b.n	800957e <netconn_recv_data+0x136>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	3310      	adds	r3, #16
 8009498:	4618      	mov	r0, r3
 800949a:	f005 feb1 	bl	800f200 <sys_mbox_valid>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10e      	bne.n	80094c2 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 f8db 	bl	8009660 <netconn_err>
 80094aa:	4603      	mov	r3, r0
 80094ac:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80094ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80094b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80094ba:	e060      	b.n	800957e <netconn_recv_data+0x136>
    }
    return ERR_CONN;
 80094bc:	f06f 030a 	mvn.w	r3, #10
 80094c0:	e05d      	b.n	800957e <netconn_recv_data+0x136>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	7e1b      	ldrb	r3, [r3, #24]
 80094c6:	f003 0302 	and.w	r3, r3, #2
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10f      	bne.n	80094ee <netconn_recv_data+0xa6>
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10a      	bne.n	80094ee <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	7e1b      	ldrb	r3, [r3, #24]
 80094dc:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d104      	bne.n	80094ee <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d023      	beq.n	8009536 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3310      	adds	r3, #16
 80094f2:	f107 0214 	add.w	r2, r7, #20
 80094f6:	4611      	mov	r1, r2
 80094f8:	4618      	mov	r0, r3
 80094fa:	f005 fe6a 	bl	800f1d2 <sys_arch_mbox_tryfetch>
 80094fe:	4603      	mov	r3, r0
 8009500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009504:	d11f      	bne.n	8009546 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 f8aa 	bl	8009660 <netconn_err>
 800950c:	4603      	mov	r3, r0
 800950e:	77fb      	strb	r3, [r7, #31]
      if (err != ERR_OK) {
 8009510:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009518:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800951c:	e02f      	b.n	800957e <netconn_recv_data+0x136>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	7e1b      	ldrb	r3, [r3, #24]
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800952a:	f06f 030a 	mvn.w	r3, #10
 800952e:	e026      	b.n	800957e <netconn_recv_data+0x136>
      }
      return ERR_WOULDBLOCK;
 8009530:	f06f 0306 	mvn.w	r3, #6
 8009534:	e023      	b.n	800957e <netconn_recv_data+0x136>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3310      	adds	r3, #16
 800953a:	f107 0114 	add.w	r1, r7, #20
 800953e:	2200      	movs	r2, #0
 8009540:	4618      	mov	r0, r3
 8009542:	f005 fe15 	bl	800f170 <sys_arch_mbox_fetch>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <netconn_recv_data+0x112>
 800954c:	4b0e      	ldr	r3, [pc, #56]	; (8009588 <netconn_recv_data+0x140>)
 800954e:	f240 2291 	movw	r2, #657	; 0x291
 8009552:	4911      	ldr	r1, [pc, #68]	; (8009598 <netconn_recv_data+0x150>)
 8009554:	480e      	ldr	r0, [pc, #56]	; (8009590 <netconn_recv_data+0x148>)
 8009556:	f006 f83d 	bl	800f5d4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	891b      	ldrh	r3, [r3, #8]
 8009560:	83bb      	strh	r3, [r7, #28]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d005      	beq.n	8009576 <netconn_recv_data+0x12e>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	8bba      	ldrh	r2, [r7, #28]
 8009570:	2101      	movs	r1, #1
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3720      	adds	r7, #32
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	08010930 	.word	0x08010930
 800958c:	08010ac4 	.word	0x08010ac4
 8009590:	08010988 	.word	0x08010988
 8009594:	08010ae4 	.word	0x08010ae4
 8009598:	08010b00 	.word	0x08010b00

0800959c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d109      	bne.n	80095c0 <netconn_recv+0x24>
 80095ac:	4b11      	ldr	r3, [pc, #68]	; (80095f4 <netconn_recv+0x58>)
 80095ae:	f240 3263 	movw	r2, #867	; 0x363
 80095b2:	4911      	ldr	r1, [pc, #68]	; (80095f8 <netconn_recv+0x5c>)
 80095b4:	4811      	ldr	r0, [pc, #68]	; (80095fc <netconn_recv+0x60>)
 80095b6:	f006 f80d 	bl	800f5d4 <iprintf>
 80095ba:	f06f 030f 	mvn.w	r3, #15
 80095be:	e015      	b.n	80095ec <netconn_recv+0x50>
  *new_buf = NULL;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2200      	movs	r2, #0
 80095c4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d109      	bne.n	80095e0 <netconn_recv+0x44>
 80095cc:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <netconn_recv+0x58>)
 80095ce:	f240 3265 	movw	r2, #869	; 0x365
 80095d2:	490b      	ldr	r1, [pc, #44]	; (8009600 <netconn_recv+0x64>)
 80095d4:	4809      	ldr	r0, [pc, #36]	; (80095fc <netconn_recv+0x60>)
 80095d6:	f005 fffd 	bl	800f5d4 <iprintf>
 80095da:	f06f 030f 	mvn.w	r3, #15
 80095de:	e005      	b.n	80095ec <netconn_recv+0x50>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80095e0:	2200      	movs	r2, #0
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7ff ff2f 	bl	8009448 <netconn_recv_data>
 80095ea:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	08010930 	.word	0x08010930
 80095f8:	08010ac4 	.word	0x08010ac4
 80095fc:	08010988 	.word	0x08010988
 8009600:	08010ae4 	.word	0x08010ae4

08009604 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08c      	sub	sp, #48	; 0x30
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d109      	bne.n	8009628 <netconn_send+0x24>
 8009614:	4b0e      	ldr	r3, [pc, #56]	; (8009650 <netconn_send+0x4c>)
 8009616:	f240 32b2 	movw	r2, #946	; 0x3b2
 800961a:	490e      	ldr	r1, [pc, #56]	; (8009654 <netconn_send+0x50>)
 800961c:	480e      	ldr	r0, [pc, #56]	; (8009658 <netconn_send+0x54>)
 800961e:	f005 ffd9 	bl	800f5d4 <iprintf>
 8009622:	f06f 030f 	mvn.w	r3, #15
 8009626:	e00e      	b.n	8009646 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009630:	f107 030c 	add.w	r3, r7, #12
 8009634:	4619      	mov	r1, r3
 8009636:	4809      	ldr	r0, [pc, #36]	; (800965c <netconn_send+0x58>)
 8009638:	f7ff fdd0 	bl	80091dc <netconn_apimsg>
 800963c:	4603      	mov	r3, r0
 800963e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009642:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009646:	4618      	mov	r0, r3
 8009648:	3730      	adds	r7, #48	; 0x30
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	08010930 	.word	0x08010930
 8009654:	08010b38 	.word	0x08010b38
 8009658:	08010988 	.word	0x08010988
 800965c:	08009be5 	.word	0x08009be5

08009660 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <netconn_err+0x12>
    return ERR_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	e00d      	b.n	800968e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009672:	f005 fe91 	bl	800f398 <sys_arch_protect>
 8009676:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	7a1b      	ldrb	r3, [r3, #8]
 800967c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f005 fe95 	bl	800f3b4 <sys_arch_unprotect>
  return err;
 800968a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b088      	sub	sp, #32
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d105      	bne.n	80096b8 <recv_udp+0x20>
 80096ac:	4b34      	ldr	r3, [pc, #208]	; (8009780 <recv_udp+0xe8>)
 80096ae:	22e5      	movs	r2, #229	; 0xe5
 80096b0:	4934      	ldr	r1, [pc, #208]	; (8009784 <recv_udp+0xec>)
 80096b2:	4835      	ldr	r0, [pc, #212]	; (8009788 <recv_udp+0xf0>)
 80096b4:	f005 ff8e 	bl	800f5d4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d105      	bne.n	80096ca <recv_udp+0x32>
 80096be:	4b30      	ldr	r3, [pc, #192]	; (8009780 <recv_udp+0xe8>)
 80096c0:	22e6      	movs	r2, #230	; 0xe6
 80096c2:	4932      	ldr	r1, [pc, #200]	; (800978c <recv_udp+0xf4>)
 80096c4:	4830      	ldr	r0, [pc, #192]	; (8009788 <recv_udp+0xf0>)
 80096c6:	f005 ff85 	bl	800f5d4 <iprintf>
  conn = (struct netconn *)arg;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d103      	bne.n	80096dc <recv_udp+0x44>
    pbuf_free(p);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f002 f8a7 	bl	800b828 <pbuf_free>
    return;
 80096da:	e04d      	b.n	8009778 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d005      	beq.n	80096f2 <recv_udp+0x5a>
 80096e6:	4b26      	ldr	r3, [pc, #152]	; (8009780 <recv_udp+0xe8>)
 80096e8:	22ee      	movs	r2, #238	; 0xee
 80096ea:	4929      	ldr	r1, [pc, #164]	; (8009790 <recv_udp+0xf8>)
 80096ec:	4826      	ldr	r0, [pc, #152]	; (8009788 <recv_udp+0xf0>)
 80096ee:	f005 ff71 	bl	800f5d4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	3310      	adds	r3, #16
 80096f6:	4618      	mov	r0, r3
 80096f8:	f005 fd82 	bl	800f200 <sys_mbox_valid>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d103      	bne.n	800970a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f002 f890 	bl	800b828 <pbuf_free>
    return;
 8009708:	e036      	b.n	8009778 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800970a:	2003      	movs	r0, #3
 800970c:	f001 f9d2 	bl	800aab4 <memp_malloc>
 8009710:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d103      	bne.n	8009720 <recv_udp+0x88>
    pbuf_free(p);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f002 f885 	bl	800b828 <pbuf_free>
    return;
 800971e:	e02b      	b.n	8009778 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d002      	beq.n	8009738 <recv_udp+0xa0>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	e000      	b.n	800973a <recv_udp+0xa2>
 8009738:	2300      	movs	r3, #0
 800973a:	69ba      	ldr	r2, [r7, #24]
 800973c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009742:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	891b      	ldrh	r3, [r3, #8]
 8009748:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	3310      	adds	r3, #16
 800974e:	69b9      	ldr	r1, [r7, #24]
 8009750:	4618      	mov	r0, r3
 8009752:	f005 fcf3 	bl	800f13c <sys_mbox_trypost>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <recv_udp+0xcc>
    netbuf_delete(buf);
 800975c:	69b8      	ldr	r0, [r7, #24]
 800975e:	f000 fa8e 	bl	8009c7e <netbuf_delete>
    return;
 8009762:	e009      	b.n	8009778 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d005      	beq.n	8009778 <recv_udp+0xe0>
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	69db      	ldr	r3, [r3, #28]
 8009770:	8afa      	ldrh	r2, [r7, #22]
 8009772:	2100      	movs	r1, #0
 8009774:	69f8      	ldr	r0, [r7, #28]
 8009776:	4798      	blx	r3
  }
}
 8009778:	3720      	adds	r7, #32
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	08010bd4 	.word	0x08010bd4
 8009784:	08010c08 	.word	0x08010c08
 8009788:	08010c2c 	.word	0x08010c2c
 800978c:	08010c54 	.word	0x08010c54
 8009790:	08010c74 	.word	0x08010c74

08009794 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009794:	b590      	push	{r4, r7, lr}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d006      	beq.n	80097b8 <pcb_new+0x24>
 80097aa:	4b1f      	ldr	r3, [pc, #124]	; (8009828 <pcb_new+0x94>)
 80097ac:	f240 2265 	movw	r2, #613	; 0x265
 80097b0:	491e      	ldr	r1, [pc, #120]	; (800982c <pcb_new+0x98>)
 80097b2:	481f      	ldr	r0, [pc, #124]	; (8009830 <pcb_new+0x9c>)
 80097b4:	f005 ff0e 	bl	800f5d4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097c2:	2b20      	cmp	r3, #32
 80097c4:	d120      	bne.n	8009808 <pcb_new+0x74>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681c      	ldr	r4, [r3, #0]
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f003 f96a 	bl	800caa6 <udp_new_ip_type>
 80097d2:	4603      	mov	r3, r0
 80097d4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d017      	beq.n	8009810 <pcb_new+0x7c>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	2b22      	cmp	r3, #34	; 0x22
 80097e8:	d104      	bne.n	80097f4 <pcb_new+0x60>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6858      	ldr	r0, [r3, #4]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	490c      	ldr	r1, [pc, #48]	; (8009834 <pcb_new+0xa0>)
 8009802:	f003 f8d7 	bl	800c9b4 <udp_recv>
      }
      break;
 8009806:	e003      	b.n	8009810 <pcb_new+0x7c>
      }
      break;
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	22fa      	movs	r2, #250	; 0xfa
 800980c:	711a      	strb	r2, [r3, #4]
      return;
 800980e:	e008      	b.n	8009822 <pcb_new+0x8e>
      break;
 8009810:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d102      	bne.n	8009822 <pcb_new+0x8e>
    msg->err = ERR_MEM;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	22ff      	movs	r2, #255	; 0xff
 8009820:	711a      	strb	r2, [r3, #4]
  }
}
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	bd90      	pop	{r4, r7, pc}
 8009828:	08010bd4 	.word	0x08010bd4
 800982c:	08010c94 	.word	0x08010c94
 8009830:	08010c2c 	.word	0x08010c2c
 8009834:	08009699 	.word	0x08009699

08009838 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7ff ff9d 	bl	8009794 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
	...

08009864 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	4603      	mov	r3, r0
 800986c:	6039      	str	r1, [r7, #0]
 800986e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009874:	2004      	movs	r0, #4
 8009876:	f001 f91d 	bl	800aab4 <memp_malloc>
 800987a:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <netconn_alloc+0x22>
    return NULL;
 8009882:	2300      	movs	r3, #0
 8009884:	e045      	b.n	8009912 <netconn_alloc+0xae>
  }

  conn->pending_err = ERR_OK;
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	2200      	movs	r2, #0
 800988a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	79fa      	ldrb	r2, [r7, #7]
 8009890:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	2200      	movs	r2, #0
 8009896:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800989e:	2b20      	cmp	r3, #32
 80098a0:	d10c      	bne.n	80098bc <netconn_alloc+0x58>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80098a2:	2306      	movs	r3, #6
 80098a4:	60fb      	str	r3, [r7, #12]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80098a6:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	3310      	adds	r3, #16
 80098ac:	68f9      	ldr	r1, [r7, #12]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f005 fc18 	bl	800f0e4 <sys_mbox_new>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d008      	beq.n	80098cc <netconn_alloc+0x68>
    goto free_and_return;
 80098ba:	e025      	b.n	8009908 <netconn_alloc+0xa4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80098bc:	4b17      	ldr	r3, [pc, #92]	; (800991c <netconn_alloc+0xb8>)
 80098be:	f240 22e5 	movw	r2, #741	; 0x2e5
 80098c2:	4917      	ldr	r1, [pc, #92]	; (8009920 <netconn_alloc+0xbc>)
 80098c4:	4817      	ldr	r0, [pc, #92]	; (8009924 <netconn_alloc+0xc0>)
 80098c6:	f005 fe85 	bl	800f5d4 <iprintf>
      goto free_and_return;
 80098ca:	e01d      	b.n	8009908 <netconn_alloc+0xa4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	330c      	adds	r3, #12
 80098d0:	2100      	movs	r1, #0
 80098d2:	4618      	mov	r0, r3
 80098d4:	f005 fcb2 	bl	800f23c <sys_sem_new>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d005      	beq.n	80098ea <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	3310      	adds	r3, #16
 80098e2:	4618      	mov	r0, r3
 80098e4:	f005 fc18 	bl	800f118 <sys_mbox_free>
    goto free_and_return;
 80098e8:	e00e      	b.n	8009908 <netconn_alloc+0xa4>
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
#endif
  conn->state        = NETCONN_NONE;
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2200      	movs	r2, #0
 80098ee:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f04f 32ff 	mov.w	r2, #4294967295
 80098f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	7dfa      	ldrb	r2, [r7, #23]
 8009902:	761a      	strb	r2, [r3, #24]
  return conn;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	e004      	b.n	8009912 <netconn_alloc+0xae>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009908:	6939      	ldr	r1, [r7, #16]
 800990a:	2004      	movs	r0, #4
 800990c:	f001 f948 	bl	800aba0 <memp_free>
  return NULL;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3718      	adds	r7, #24
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	08010bd4 	.word	0x08010bd4
 8009920:	08010cb4 	.word	0x08010cb4
 8009924:	08010c2c 	.word	0x08010c2c

08009928 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d006      	beq.n	8009946 <netconn_free+0x1e>
 8009938:	4b13      	ldr	r3, [pc, #76]	; (8009988 <netconn_free+0x60>)
 800993a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800993e:	4913      	ldr	r1, [pc, #76]	; (800998c <netconn_free+0x64>)
 8009940:	4813      	ldr	r0, [pc, #76]	; (8009990 <netconn_free+0x68>)
 8009942:	f005 fe47 	bl	800f5d4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3310      	adds	r3, #16
 800994a:	4618      	mov	r0, r3
 800994c:	f005 fc58 	bl	800f200 <sys_mbox_valid>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d006      	beq.n	8009964 <netconn_free+0x3c>
 8009956:	4b0c      	ldr	r3, [pc, #48]	; (8009988 <netconn_free+0x60>)
 8009958:	f240 3223 	movw	r2, #803	; 0x323
 800995c:	490d      	ldr	r1, [pc, #52]	; (8009994 <netconn_free+0x6c>)
 800995e:	480c      	ldr	r0, [pc, #48]	; (8009990 <netconn_free+0x68>)
 8009960:	f005 fe38 	bl	800f5d4 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	330c      	adds	r3, #12
 8009968:	4618      	mov	r0, r3
 800996a:	f005 fc8c 	bl	800f286 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	330c      	adds	r3, #12
 8009972:	4618      	mov	r0, r3
 8009974:	f005 fca5 	bl	800f2c2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009978:	6879      	ldr	r1, [r7, #4]
 800997a:	2004      	movs	r0, #4
 800997c:	f001 f910 	bl	800aba0 <memp_free>
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	08010bd4 	.word	0x08010bd4
 800998c:	08010cdc 	.word	0x08010cdc
 8009990:	08010c2c 	.word	0x08010c2c
 8009994:	08010d0c 	.word	0x08010d0c

08009998 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	3310      	adds	r3, #16
 80099a4:	4618      	mov	r0, r3
 80099a6:	f005 fc2b 	bl	800f200 <sys_mbox_valid>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d01a      	beq.n	80099e6 <netconn_drain+0x4e>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80099b0:	e003      	b.n	80099ba <netconn_drain+0x22>
            pbuf_free((struct pbuf *)mem);
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 f962 	bl	8009c7e <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	3310      	adds	r3, #16
 80099be:	f107 020c 	add.w	r2, r7, #12
 80099c2:	4611      	mov	r1, r2
 80099c4:	4618      	mov	r0, r3
 80099c6:	f005 fc04 	bl	800f1d2 <sys_arch_mbox_tryfetch>
 80099ca:	4603      	mov	r3, r0
 80099cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d0:	d1ef      	bne.n	80099b2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	3310      	adds	r3, #16
 80099d6:	4618      	mov	r0, r3
 80099d8:	f005 fb9e 	bl	800f118 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	3310      	adds	r3, #16
 80099e0:	4618      	mov	r0, r3
 80099e2:	f005 fc1e 	bl	800f222 <sys_mbox_set_invalid>
    }
    sys_mbox_free(&conn->acceptmbox);
    sys_mbox_set_invalid(&conn->acceptmbox);
  }
#endif /* LWIP_TCP */
}
 80099e6:	bf00      	nop
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
	...

080099f0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	785b      	ldrb	r3, [r3, #1]
 8009a02:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009a04:	7afb      	ldrb	r3, [r7, #11]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00d      	beq.n	8009a26 <lwip_netconn_do_delconn+0x36>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a14:	2b10      	cmp	r3, #16
 8009a16:	d006      	beq.n	8009a26 <lwip_netconn_do_delconn+0x36>
 8009a18:	4b3b      	ldr	r3, [pc, #236]	; (8009b08 <lwip_netconn_do_delconn+0x118>)
 8009a1a:	f240 425e 	movw	r2, #1118	; 0x45e
 8009a1e:	493b      	ldr	r1, [pc, #236]	; (8009b0c <lwip_netconn_do_delconn+0x11c>)
 8009a20:	483b      	ldr	r0, [pc, #236]	; (8009b10 <lwip_netconn_do_delconn+0x120>)
 8009a22:	f005 fdd7 	bl	800f5d4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009a26:	7afb      	ldrb	r3, [r7, #11]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d005      	beq.n	8009a38 <lwip_netconn_do_delconn+0x48>
 8009a2c:	7afb      	ldrb	r3, [r7, #11]
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d002      	beq.n	8009a38 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009a32:	7afb      	ldrb	r3, [r7, #11]
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d109      	bne.n	8009a4c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009a38:	7afb      	ldrb	r3, [r7, #11]
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d10a      	bne.n	8009a54 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	7e1b      	ldrb	r3, [r3, #24]
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d103      	bne.n	8009a54 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	22fb      	movs	r2, #251	; 0xfb
 8009a50:	711a      	strb	r2, [r3, #4]
 8009a52:	e04f      	b.n	8009af4 <lwip_netconn_do_delconn+0x104>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009a54:	7afb      	ldrb	r3, [r7, #11]
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d10d      	bne.n	8009a76 <lwip_netconn_do_delconn+0x86>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	7e1b      	ldrb	r3, [r3, #24]
 8009a60:	f003 0304 	and.w	r3, r3, #4
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d106      	bne.n	8009a76 <lwip_netconn_do_delconn+0x86>
 8009a68:	4b27      	ldr	r3, [pc, #156]	; (8009b08 <lwip_netconn_do_delconn+0x118>)
 8009a6a:	f240 427a 	movw	r2, #1146	; 0x47a
 8009a6e:	4929      	ldr	r1, [pc, #164]	; (8009b14 <lwip_netconn_do_delconn+0x124>)
 8009a70:	4827      	ldr	r0, [pc, #156]	; (8009b10 <lwip_netconn_do_delconn+0x120>)
 8009a72:	f005 fdaf 	bl	800f5d4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7ff ff89 	bl	8009998 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d017      	beq.n	8009ac0 <lwip_netconn_do_delconn+0xd0>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	d10b      	bne.n	8009ab6 <lwip_netconn_do_delconn+0xc6>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f002 ffa0 	bl	800c9f4 <udp_remove>
          break;
 8009ab4:	e000      	b.n	8009ab8 <lwip_netconn_do_delconn+0xc8>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 8009ab6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2200      	movs	r2, #0
 8009abe:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	69db      	ldr	r3, [r3, #28]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d007      	beq.n	8009ada <lwip_netconn_do_delconn+0xea>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	6810      	ldr	r0, [r2, #0]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	69db      	ldr	r3, [r3, #28]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d007      	beq.n	8009af4 <lwip_netconn_do_delconn+0x104>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	69db      	ldr	r3, [r3, #28]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	6810      	ldr	r0, [r2, #0]
 8009aee:	2200      	movs	r2, #0
 8009af0:	2102      	movs	r1, #2
 8009af2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	330c      	adds	r3, #12
 8009afa:	4618      	mov	r0, r3
 8009afc:	f005 fbd0 	bl	800f2a0 <sys_sem_valid>
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009b00:	bf00      	nop
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	08010bd4 	.word	0x08010bd4
 8009b0c:	08010d48 	.word	0x08010d48
 8009b10:	08010c2c 	.word	0x08010c2c
 8009b14:	08010d5c 	.word	0x08010d5c

08009b18 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d016      	beq.n	8009b5c <lwip_netconn_do_bind+0x44>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b38:	2b20      	cmp	r3, #32
 8009b3a:	d10c      	bne.n	8009b56 <lwip_netconn_do_bind+0x3e>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6858      	ldr	r0, [r3, #4]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	6899      	ldr	r1, [r3, #8]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	899b      	ldrh	r3, [r3, #12]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f002 fe3c 	bl	800c7c8 <udp_bind>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73fb      	strb	r3, [r7, #15]
        break;
 8009b54:	e004      	b.n	8009b60 <lwip_netconn_do_bind+0x48>
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009b56:	23fa      	movs	r3, #250	; 0xfa
 8009b58:	73fb      	strb	r3, [r7, #15]
        break;
 8009b5a:	e001      	b.n	8009b60 <lwip_netconn_do_bind+0x48>
    }
  } else {
    err = ERR_VAL;
 8009b5c:	23fa      	movs	r3, #250	; 0xfa
 8009b5e:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	7bfa      	ldrb	r2, [r7, #15]
 8009b64:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009b66:	bf00      	nop
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d102      	bne.n	8009b8c <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009b86:	23f1      	movs	r3, #241	; 0xf1
 8009b88:	73fb      	strb	r3, [r7, #15]
 8009b8a:	e01d      	b.n	8009bc8 <lwip_netconn_do_connect+0x58>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b96:	2b20      	cmp	r3, #32
 8009b98:	d10c      	bne.n	8009bb4 <lwip_netconn_do_connect+0x44>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	6858      	ldr	r0, [r3, #4]
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	6899      	ldr	r1, [r3, #8]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	899b      	ldrh	r3, [r3, #12]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f002 fe95 	bl	800c8d8 <udp_connect>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8009bb2:	e009      	b.n	8009bc8 <lwip_netconn_do_connect+0x58>
          }
        }
        break;
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009bb4:	4b08      	ldr	r3, [pc, #32]	; (8009bd8 <lwip_netconn_do_connect+0x68>)
 8009bb6:	f240 527d 	movw	r2, #1405	; 0x57d
 8009bba:	4908      	ldr	r1, [pc, #32]	; (8009bdc <lwip_netconn_do_connect+0x6c>)
 8009bbc:	4808      	ldr	r0, [pc, #32]	; (8009be0 <lwip_netconn_do_connect+0x70>)
 8009bbe:	f005 fd09 	bl	800f5d4 <iprintf>
 8009bc2:	23fa      	movs	r3, #250	; 0xfa
 8009bc4:	73fb      	strb	r3, [r7, #15]
          err = ERR_VAL;
        } while (0));
        break;
 8009bc6:	bf00      	nop
    }
  }
  msg->err = err;
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	7bfa      	ldrb	r2, [r7, #15]
 8009bcc:	711a      	strb	r2, [r3, #4]
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009bce:	bf00      	nop
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	08010bd4 	.word	0x08010bd4
 8009bdc:	08010d7c 	.word	0x08010d7c
 8009be0:	08010c2c 	.word	0x08010c2c

08009be4 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7ff fd33 	bl	8009660 <netconn_err>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d134      	bne.n	8009c70 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d02d      	beq.n	8009c6c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	d123      	bne.n	8009c66 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10c      	bne.n	8009c42 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4619      	mov	r1, r3
 8009c36:	4610      	mov	r0, r2
 8009c38:	f002 fbdc 	bl	800c3f4 <udp_send>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8009c40:	e016      	b.n	8009c70 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	6858      	ldr	r0, [r3, #4]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	6819      	ldr	r1, [r3, #0]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	f103 0208 	add.w	r2, r3, #8
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	899b      	ldrh	r3, [r3, #12]
 8009c5c:	f002 fbfe 	bl	800c45c <udp_sendto>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]
          break;
 8009c64:	e004      	b.n	8009c70 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8009c66:	23f5      	movs	r3, #245	; 0xf5
 8009c68:	73fb      	strb	r3, [r7, #15]
          break;
 8009c6a:	e001      	b.n	8009c70 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8009c6c:	23f5      	movs	r3, #245	; 0xf5
 8009c6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	7bfa      	ldrb	r2, [r7, #15]
 8009c74:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b082      	sub	sp, #8
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d013      	beq.n	8009cb4 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00b      	beq.n	8009cac <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f001 fdc5 	bl	800b828 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	605a      	str	r2, [r3, #4]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	2003      	movs	r0, #3
 8009cb0:	f000 ff76 	bl	800aba0 <memp_free>
  }
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009cc6:	f002 f99b 	bl	800c000 <sys_timeouts_sleeptime>
 8009cca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd2:	d10b      	bne.n	8009cec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009cd4:	4813      	ldr	r0, [pc, #76]	; (8009d24 <tcpip_timeouts_mbox_fetch+0x68>)
 8009cd6:	f005 fb32 	bl	800f33e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009cda:	2200      	movs	r2, #0
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f005 fa46 	bl	800f170 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009ce4:	480f      	ldr	r0, [pc, #60]	; (8009d24 <tcpip_timeouts_mbox_fetch+0x68>)
 8009ce6:	f005 fb1b 	bl	800f320 <sys_mutex_lock>
    return;
 8009cea:	e018      	b.n	8009d1e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d102      	bne.n	8009cf8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009cf2:	f002 f94b 	bl	800bf8c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009cf6:	e7e6      	b.n	8009cc6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009cf8:	480a      	ldr	r0, [pc, #40]	; (8009d24 <tcpip_timeouts_mbox_fetch+0x68>)
 8009cfa:	f005 fb20 	bl	800f33e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f005 fa34 	bl	800f170 <sys_arch_mbox_fetch>
 8009d08:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009d0a:	4806      	ldr	r0, [pc, #24]	; (8009d24 <tcpip_timeouts_mbox_fetch+0x68>)
 8009d0c:	f005 fb08 	bl	800f320 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d16:	d102      	bne.n	8009d1e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009d18:	f002 f938 	bl	800bf8c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009d1c:	e7d3      	b.n	8009cc6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	2400abf4 	.word	0x2400abf4

08009d28 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009d30:	4810      	ldr	r0, [pc, #64]	; (8009d74 <tcpip_thread+0x4c>)
 8009d32:	f005 faf5 	bl	800f320 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009d36:	4b10      	ldr	r3, [pc, #64]	; (8009d78 <tcpip_thread+0x50>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d005      	beq.n	8009d4a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009d3e:	4b0e      	ldr	r3, [pc, #56]	; (8009d78 <tcpip_thread+0x50>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a0e      	ldr	r2, [pc, #56]	; (8009d7c <tcpip_thread+0x54>)
 8009d44:	6812      	ldr	r2, [r2, #0]
 8009d46:	4610      	mov	r0, r2
 8009d48:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009d4a:	f107 030c 	add.w	r3, r7, #12
 8009d4e:	4619      	mov	r1, r3
 8009d50:	480b      	ldr	r0, [pc, #44]	; (8009d80 <tcpip_thread+0x58>)
 8009d52:	f7ff ffb3 	bl	8009cbc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d106      	bne.n	8009d6a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009d5c:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <tcpip_thread+0x5c>)
 8009d5e:	2291      	movs	r2, #145	; 0x91
 8009d60:	4909      	ldr	r1, [pc, #36]	; (8009d88 <tcpip_thread+0x60>)
 8009d62:	480a      	ldr	r0, [pc, #40]	; (8009d8c <tcpip_thread+0x64>)
 8009d64:	f005 fc36 	bl	800f5d4 <iprintf>
      continue;
 8009d68:	e003      	b.n	8009d72 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 f80f 	bl	8009d90 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009d72:	e7ea      	b.n	8009d4a <tcpip_thread+0x22>
 8009d74:	2400abf4 	.word	0x2400abf4
 8009d78:	24005c68 	.word	0x24005c68
 8009d7c:	24005c6c 	.word	0x24005c6c
 8009d80:	24005c70 	.word	0x24005c70
 8009d84:	08010dac 	.word	0x08010dac
 8009d88:	08010ddc 	.word	0x08010ddc
 8009d8c:	08010dfc 	.word	0x08010dfc

08009d90 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d026      	beq.n	8009dee <tcpip_thread_handle_msg+0x5e>
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	dc2b      	bgt.n	8009dfc <tcpip_thread_handle_msg+0x6c>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d002      	beq.n	8009dae <tcpip_thread_handle_msg+0x1e>
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d015      	beq.n	8009dd8 <tcpip_thread_handle_msg+0x48>
 8009dac:	e026      	b.n	8009dfc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	6850      	ldr	r0, [r2, #4]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	6892      	ldr	r2, [r2, #8]
 8009dba:	4611      	mov	r1, r2
 8009dbc:	4798      	blx	r3
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d004      	beq.n	8009dce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f001 fd2d 	bl	800b828 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009dce:	6879      	ldr	r1, [r7, #4]
 8009dd0:	2006      	movs	r0, #6
 8009dd2:	f000 fee5 	bl	800aba0 <memp_free>
      break;
 8009dd6:	e018      	b.n	8009e0a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	6892      	ldr	r2, [r2, #8]
 8009de0:	4610      	mov	r0, r2
 8009de2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	2005      	movs	r0, #5
 8009de8:	f000 feda 	bl	800aba0 <memp_free>
      break;
 8009dec:	e00d      	b.n	8009e0a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	6892      	ldr	r2, [r2, #8]
 8009df6:	4610      	mov	r0, r2
 8009df8:	4798      	blx	r3
      break;
 8009dfa:	e006      	b.n	8009e0a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009dfc:	4b05      	ldr	r3, [pc, #20]	; (8009e14 <tcpip_thread_handle_msg+0x84>)
 8009dfe:	22cf      	movs	r2, #207	; 0xcf
 8009e00:	4905      	ldr	r1, [pc, #20]	; (8009e18 <tcpip_thread_handle_msg+0x88>)
 8009e02:	4806      	ldr	r0, [pc, #24]	; (8009e1c <tcpip_thread_handle_msg+0x8c>)
 8009e04:	f005 fbe6 	bl	800f5d4 <iprintf>
      break;
 8009e08:	bf00      	nop
  }
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	08010dac 	.word	0x08010dac
 8009e18:	08010ddc 	.word	0x08010ddc
 8009e1c:	08010dfc 	.word	0x08010dfc

08009e20 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009e2c:	481a      	ldr	r0, [pc, #104]	; (8009e98 <tcpip_inpkt+0x78>)
 8009e2e:	f005 f9e7 	bl	800f200 <sys_mbox_valid>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d105      	bne.n	8009e44 <tcpip_inpkt+0x24>
 8009e38:	4b18      	ldr	r3, [pc, #96]	; (8009e9c <tcpip_inpkt+0x7c>)
 8009e3a:	22fc      	movs	r2, #252	; 0xfc
 8009e3c:	4918      	ldr	r1, [pc, #96]	; (8009ea0 <tcpip_inpkt+0x80>)
 8009e3e:	4819      	ldr	r0, [pc, #100]	; (8009ea4 <tcpip_inpkt+0x84>)
 8009e40:	f005 fbc8 	bl	800f5d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009e44:	2006      	movs	r0, #6
 8009e46:	f000 fe35 	bl	800aab4 <memp_malloc>
 8009e4a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d102      	bne.n	8009e58 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009e52:	f04f 33ff 	mov.w	r3, #4294967295
 8009e56:	e01a      	b.n	8009e8e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009e70:	6979      	ldr	r1, [r7, #20]
 8009e72:	4809      	ldr	r0, [pc, #36]	; (8009e98 <tcpip_inpkt+0x78>)
 8009e74:	f005 f962 	bl	800f13c <sys_mbox_trypost>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d006      	beq.n	8009e8c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009e7e:	6979      	ldr	r1, [r7, #20]
 8009e80:	2006      	movs	r0, #6
 8009e82:	f000 fe8d 	bl	800aba0 <memp_free>
    return ERR_MEM;
 8009e86:	f04f 33ff 	mov.w	r3, #4294967295
 8009e8a:	e000      	b.n	8009e8e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009e8c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	24005c70 	.word	0x24005c70
 8009e9c:	08010dac 	.word	0x08010dac
 8009ea0:	08010e24 	.word	0x08010e24
 8009ea4:	08010dfc 	.word	0x08010dfc

08009ea8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009eb8:	f003 0318 	and.w	r3, r3, #24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d006      	beq.n	8009ece <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009ec0:	4a08      	ldr	r2, [pc, #32]	; (8009ee4 <tcpip_input+0x3c>)
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff ffab 	bl	8009e20 <tcpip_inpkt>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	e005      	b.n	8009eda <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009ece:	4a06      	ldr	r2, [pc, #24]	; (8009ee8 <tcpip_input+0x40>)
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7ff ffa4 	bl	8009e20 <tcpip_inpkt>
 8009ed8:	4603      	mov	r3, r0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	0800ef39 	.word	0x0800ef39
 8009ee8:	0800de55 	.word	0x0800de55

08009eec <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009ef8:	4806      	ldr	r0, [pc, #24]	; (8009f14 <tcpip_send_msg_wait_sem+0x28>)
 8009efa:	f005 fa11 	bl	800f320 <sys_mutex_lock>
  fn(apimsg);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	68b8      	ldr	r0, [r7, #8]
 8009f02:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009f04:	4803      	ldr	r0, [pc, #12]	; (8009f14 <tcpip_send_msg_wait_sem+0x28>)
 8009f06:	f005 fa1a 	bl	800f33e <sys_mutex_unlock>
  return ERR_OK;
 8009f0a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	2400abf4 	.word	0x2400abf4

08009f18 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009f22:	f000 f914 	bl	800a14e <lwip_init>

  tcpip_init_done = initfunc;
 8009f26:	4a17      	ldr	r2, [pc, #92]	; (8009f84 <tcpip_init+0x6c>)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009f2c:	4a16      	ldr	r2, [pc, #88]	; (8009f88 <tcpip_init+0x70>)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009f32:	2106      	movs	r1, #6
 8009f34:	4815      	ldr	r0, [pc, #84]	; (8009f8c <tcpip_init+0x74>)
 8009f36:	f005 f8d5 	bl	800f0e4 <sys_mbox_new>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d006      	beq.n	8009f4e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009f40:	4b13      	ldr	r3, [pc, #76]	; (8009f90 <tcpip_init+0x78>)
 8009f42:	f240 2261 	movw	r2, #609	; 0x261
 8009f46:	4913      	ldr	r1, [pc, #76]	; (8009f94 <tcpip_init+0x7c>)
 8009f48:	4813      	ldr	r0, [pc, #76]	; (8009f98 <tcpip_init+0x80>)
 8009f4a:	f005 fb43 	bl	800f5d4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009f4e:	4813      	ldr	r0, [pc, #76]	; (8009f9c <tcpip_init+0x84>)
 8009f50:	f005 f9d0 	bl	800f2f4 <sys_mutex_new>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d006      	beq.n	8009f68 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009f5a:	4b0d      	ldr	r3, [pc, #52]	; (8009f90 <tcpip_init+0x78>)
 8009f5c:	f240 2265 	movw	r2, #613	; 0x265
 8009f60:	490f      	ldr	r1, [pc, #60]	; (8009fa0 <tcpip_init+0x88>)
 8009f62:	480d      	ldr	r0, [pc, #52]	; (8009f98 <tcpip_init+0x80>)
 8009f64:	f005 fb36 	bl	800f5d4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009f68:	2318      	movs	r3, #24
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f70:	2200      	movs	r2, #0
 8009f72:	490c      	ldr	r1, [pc, #48]	; (8009fa4 <tcpip_init+0x8c>)
 8009f74:	480c      	ldr	r0, [pc, #48]	; (8009fa8 <tcpip_init+0x90>)
 8009f76:	f005 f9ef 	bl	800f358 <sys_thread_new>
}
 8009f7a:	bf00      	nop
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	24005c68 	.word	0x24005c68
 8009f88:	24005c6c 	.word	0x24005c6c
 8009f8c:	24005c70 	.word	0x24005c70
 8009f90:	08010dac 	.word	0x08010dac
 8009f94:	08010e34 	.word	0x08010e34
 8009f98:	08010dfc 	.word	0x08010dfc
 8009f9c:	2400abf4 	.word	0x2400abf4
 8009fa0:	08010e58 	.word	0x08010e58
 8009fa4:	08009d29 	.word	0x08009d29
 8009fa8:	08010e7c 	.word	0x08010e7c

08009fac <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009fb6:	88fb      	ldrh	r3, [r7, #6]
 8009fb8:	021b      	lsls	r3, r3, #8
 8009fba:	b21a      	sxth	r2, r3
 8009fbc:	88fb      	ldrh	r3, [r7, #6]
 8009fbe:	0a1b      	lsrs	r3, r3, #8
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	b21b      	sxth	r3, r3
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	b21b      	sxth	r3, r3
 8009fc8:	b29b      	uxth	r3, r3
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b089      	sub	sp, #36	; 0x24
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00d      	beq.n	800a016 <lwip_standard_chksum+0x40>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	dd0a      	ble.n	800a016 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800a000:	69fa      	ldr	r2, [r7, #28]
 800a002:	1c53      	adds	r3, r2, #1
 800a004:	61fb      	str	r3, [r7, #28]
 800a006:	f107 030e 	add.w	r3, r7, #14
 800a00a:	3301      	adds	r3, #1
 800a00c:	7812      	ldrb	r2, [r2, #0]
 800a00e:	701a      	strb	r2, [r3, #0]
    len--;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	3b01      	subs	r3, #1
 800a014:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800a01a:	e00a      	b.n	800a032 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	1c9a      	adds	r2, r3, #2
 800a020:	61ba      	str	r2, [r7, #24]
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	4413      	add	r3, r2
 800a02a:	617b      	str	r3, [r7, #20]
    len -= 2;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	3b02      	subs	r3, #2
 800a030:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b01      	cmp	r3, #1
 800a036:	dcf1      	bgt.n	800a01c <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	dd04      	ble.n	800a048 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800a03e:	f107 030e 	add.w	r3, r7, #14
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	7812      	ldrb	r2, [r2, #0]
 800a046:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800a048:	89fb      	ldrh	r3, [r7, #14]
 800a04a:	461a      	mov	r2, r3
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	4413      	add	r3, r2
 800a050:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	0c1a      	lsrs	r2, r3, #16
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	b29b      	uxth	r3, r3
 800a05a:	4413      	add	r3, r2
 800a05c:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	0c1a      	lsrs	r2, r3, #16
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	b29b      	uxth	r3, r3
 800a066:	4413      	add	r3, r2
 800a068:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d007      	beq.n	800a080 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	021b      	lsls	r3, r3, #8
 800a074:	b29a      	uxth	r2, r3
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	0a1b      	lsrs	r3, r3, #8
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	4313      	orrs	r3, r2
 800a07e:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	b29b      	uxth	r3, r3
}
 800a084:	4618      	mov	r0, r3
 800a086:	3724      	adds	r7, #36	; 0x24
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800a09c:	887b      	ldrh	r3, [r7, #2]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff ff98 	bl	8009fd6 <lwip_standard_chksum>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	43db      	mvns	r3, r3
 800a0aa:	b29b      	uxth	r3, r3
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	613b      	str	r3, [r7, #16]
 800a0c8:	e02b      	b.n	800a122 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	895b      	ldrh	r3, [r3, #10]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	f7ff ff7e 	bl	8009fd6 <lwip_standard_chksum>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	461a      	mov	r2, r3
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	0c1a      	lsrs	r2, r3, #16
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	4413      	add	r3, r2
 800a0ee:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	895b      	ldrh	r3, [r3, #10]
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00e      	beq.n	800a11c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	bf0c      	ite	eq
 800a104:	2301      	moveq	r3, #1
 800a106:	2300      	movne	r3, #0
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	021b      	lsls	r3, r3, #8
 800a110:	b29a      	uxth	r2, r3
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	0a1b      	lsrs	r3, r3, #8
 800a116:	b2db      	uxtb	r3, r3
 800a118:	4313      	orrs	r3, r2
 800a11a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	613b      	str	r3, [r7, #16]
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1d0      	bne.n	800a0ca <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d007      	beq.n	800a13e <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	b29a      	uxth	r2, r3
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	0a1b      	lsrs	r3, r3, #8
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	4313      	orrs	r3, r2
 800a13c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	b29b      	uxth	r3, r3
 800a142:	43db      	mvns	r3, r3
 800a144:	b29b      	uxth	r3, r3
}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b082      	sub	sp, #8
 800a152:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a154:	2300      	movs	r3, #0
 800a156:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a158:	f005 f8c0 	bl	800f2dc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a15c:	f000 f8d6 	bl	800a30c <mem_init>
  memp_init();
 800a160:	f000 fc3a 	bl	800a9d8 <memp_init>
  pbuf_init();
  netif_init();
 800a164:	f000 fd46 	bl	800abf4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a168:	f001 ff82 	bl	800c070 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a16c:	f001 fec6 	bl	800befc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	4603      	mov	r3, r0
 800a180:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a182:	4b05      	ldr	r3, [pc, #20]	; (800a198 <ptr_to_mem+0x20>)
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	88fb      	ldrh	r3, [r7, #6]
 800a188:	4413      	add	r3, r2
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	24005c74 	.word	0x24005c74

0800a19c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a1a4:	4b05      	ldr	r3, [pc, #20]	; (800a1bc <mem_to_ptr+0x20>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	b29b      	uxth	r3, r3
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	24005c74 	.word	0x24005c74

0800a1c0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a1c0:	b590      	push	{r4, r7, lr}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a1c8:	4b47      	ldr	r3, [pc, #284]	; (800a2e8 <plug_holes+0x128>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d206      	bcs.n	800a1e0 <plug_holes+0x20>
 800a1d2:	4b46      	ldr	r3, [pc, #280]	; (800a2ec <plug_holes+0x12c>)
 800a1d4:	f240 12df 	movw	r2, #479	; 0x1df
 800a1d8:	4945      	ldr	r1, [pc, #276]	; (800a2f0 <plug_holes+0x130>)
 800a1da:	4846      	ldr	r0, [pc, #280]	; (800a2f4 <plug_holes+0x134>)
 800a1dc:	f005 f9fa 	bl	800f5d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a1e0:	4b45      	ldr	r3, [pc, #276]	; (800a2f8 <plug_holes+0x138>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d306      	bcc.n	800a1f8 <plug_holes+0x38>
 800a1ea:	4b40      	ldr	r3, [pc, #256]	; (800a2ec <plug_holes+0x12c>)
 800a1ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a1f0:	4942      	ldr	r1, [pc, #264]	; (800a2fc <plug_holes+0x13c>)
 800a1f2:	4840      	ldr	r0, [pc, #256]	; (800a2f4 <plug_holes+0x134>)
 800a1f4:	f005 f9ee 	bl	800f5d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	791b      	ldrb	r3, [r3, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d006      	beq.n	800a20e <plug_holes+0x4e>
 800a200:	4b3a      	ldr	r3, [pc, #232]	; (800a2ec <plug_holes+0x12c>)
 800a202:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a206:	493e      	ldr	r1, [pc, #248]	; (800a300 <plug_holes+0x140>)
 800a208:	483a      	ldr	r0, [pc, #232]	; (800a2f4 <plug_holes+0x134>)
 800a20a:	f005 f9e3 	bl	800f5d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a216:	4293      	cmp	r3, r2
 800a218:	d906      	bls.n	800a228 <plug_holes+0x68>
 800a21a:	4b34      	ldr	r3, [pc, #208]	; (800a2ec <plug_holes+0x12c>)
 800a21c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a220:	4938      	ldr	r1, [pc, #224]	; (800a304 <plug_holes+0x144>)
 800a222:	4834      	ldr	r0, [pc, #208]	; (800a2f4 <plug_holes+0x134>)
 800a224:	f005 f9d6 	bl	800f5d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	881b      	ldrh	r3, [r3, #0]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7ff ffa3 	bl	800a178 <ptr_to_mem>
 800a232:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d025      	beq.n	800a288 <plug_holes+0xc8>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	791b      	ldrb	r3, [r3, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d121      	bne.n	800a288 <plug_holes+0xc8>
 800a244:	4b2c      	ldr	r3, [pc, #176]	; (800a2f8 <plug_holes+0x138>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d01c      	beq.n	800a288 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a24e:	4b2e      	ldr	r3, [pc, #184]	; (800a308 <plug_holes+0x148>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	429a      	cmp	r2, r3
 800a256:	d102      	bne.n	800a25e <plug_holes+0x9e>
      lfree = mem;
 800a258:	4a2b      	ldr	r2, [pc, #172]	; (800a308 <plug_holes+0x148>)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	881a      	ldrh	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00a      	beq.n	800a288 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	881b      	ldrh	r3, [r3, #0]
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff ff7e 	bl	800a178 <ptr_to_mem>
 800a27c:	4604      	mov	r4, r0
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f7ff ff8c 	bl	800a19c <mem_to_ptr>
 800a284:	4603      	mov	r3, r0
 800a286:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	885b      	ldrh	r3, [r3, #2]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff ff73 	bl	800a178 <ptr_to_mem>
 800a292:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d020      	beq.n	800a2de <plug_holes+0x11e>
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	791b      	ldrb	r3, [r3, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d11c      	bne.n	800a2de <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a2a4:	4b18      	ldr	r3, [pc, #96]	; (800a308 <plug_holes+0x148>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d102      	bne.n	800a2b4 <plug_holes+0xf4>
      lfree = pmem;
 800a2ae:	4a16      	ldr	r2, [pc, #88]	; (800a308 <plug_holes+0x148>)
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	881a      	ldrh	r2, [r3, #0]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d00a      	beq.n	800a2de <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	881b      	ldrh	r3, [r3, #0]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff ff53 	bl	800a178 <ptr_to_mem>
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	68b8      	ldr	r0, [r7, #8]
 800a2d6:	f7ff ff61 	bl	800a19c <mem_to_ptr>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a2de:	bf00      	nop
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd90      	pop	{r4, r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	24005c74 	.word	0x24005c74
 800a2ec:	08010e8c 	.word	0x08010e8c
 800a2f0:	08010ebc 	.word	0x08010ebc
 800a2f4:	08010ed4 	.word	0x08010ed4
 800a2f8:	24005c78 	.word	0x24005c78
 800a2fc:	08010efc 	.word	0x08010efc
 800a300:	08010f18 	.word	0x08010f18
 800a304:	08010f34 	.word	0x08010f34
 800a308:	24005c80 	.word	0x24005c80

0800a30c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a312:	4b1d      	ldr	r3, [pc, #116]	; (800a388 <mem_init+0x7c>)
 800a314:	4a1d      	ldr	r2, [pc, #116]	; (800a38c <mem_init+0x80>)
 800a316:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a318:	4b1b      	ldr	r3, [pc, #108]	; (800a388 <mem_init+0x7c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a324:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a332:	f643 2098 	movw	r0, #15000	; 0x3a98
 800a336:	f7ff ff1f 	bl	800a178 <ptr_to_mem>
 800a33a:	4603      	mov	r3, r0
 800a33c:	4a14      	ldr	r2, [pc, #80]	; (800a390 <mem_init+0x84>)
 800a33e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a340:	4b13      	ldr	r3, [pc, #76]	; (800a390 <mem_init+0x84>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2201      	movs	r2, #1
 800a346:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a348:	4b11      	ldr	r3, [pc, #68]	; (800a390 <mem_init+0x84>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a350:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a352:	4b0f      	ldr	r3, [pc, #60]	; (800a390 <mem_init+0x84>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a35a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a35c:	4b0a      	ldr	r3, [pc, #40]	; (800a388 <mem_init+0x7c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a0c      	ldr	r2, [pc, #48]	; (800a394 <mem_init+0x88>)
 800a362:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a364:	480c      	ldr	r0, [pc, #48]	; (800a398 <mem_init+0x8c>)
 800a366:	f004 ffc5 	bl	800f2f4 <sys_mutex_new>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d006      	beq.n	800a37e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a370:	4b0a      	ldr	r3, [pc, #40]	; (800a39c <mem_init+0x90>)
 800a372:	f240 221f 	movw	r2, #543	; 0x21f
 800a376:	490a      	ldr	r1, [pc, #40]	; (800a3a0 <mem_init+0x94>)
 800a378:	480a      	ldr	r0, [pc, #40]	; (800a3a4 <mem_init+0x98>)
 800a37a:	f005 f92b 	bl	800f5d4 <iprintf>
  }
}
 800a37e:	bf00      	nop
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	24005c74 	.word	0x24005c74
 800a38c:	30001000 	.word	0x30001000
 800a390:	24005c78 	.word	0x24005c78
 800a394:	24005c80 	.word	0x24005c80
 800a398:	24005c7c 	.word	0x24005c7c
 800a39c:	08010e8c 	.word	0x08010e8c
 800a3a0:	08010f60 	.word	0x08010f60
 800a3a4:	08010ed4 	.word	0x08010ed4

0800a3a8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff fef3 	bl	800a19c <mem_to_ptr>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff feda 	bl	800a178 <ptr_to_mem>
 800a3c4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	885b      	ldrh	r3, [r3, #2]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff fed4 	bl	800a178 <ptr_to_mem>
 800a3d0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	881b      	ldrh	r3, [r3, #0]
 800a3d6:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d819      	bhi.n	800a412 <mem_link_valid+0x6a>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	885b      	ldrh	r3, [r3, #2]
 800a3e2:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d813      	bhi.n	800a412 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a3ee:	8afa      	ldrh	r2, [r7, #22]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d004      	beq.n	800a3fe <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	8afa      	ldrh	r2, [r7, #22]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d109      	bne.n	800a412 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a3fe:	4b08      	ldr	r3, [pc, #32]	; (800a420 <mem_link_valid+0x78>)
 800a400:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	429a      	cmp	r2, r3
 800a406:	d006      	beq.n	800a416 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	885b      	ldrh	r3, [r3, #2]
 800a40c:	8afa      	ldrh	r2, [r7, #22]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d001      	beq.n	800a416 <mem_link_valid+0x6e>
    return 0;
 800a412:	2300      	movs	r3, #0
 800a414:	e000      	b.n	800a418 <mem_link_valid+0x70>
  }
  return 1;
 800a416:	2301      	movs	r3, #1
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	24005c78 	.word	0x24005c78

0800a424 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b088      	sub	sp, #32
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d070      	beq.n	800a514 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f003 0303 	and.w	r3, r3, #3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00d      	beq.n	800a458 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a43c:	4b37      	ldr	r3, [pc, #220]	; (800a51c <mem_free+0xf8>)
 800a43e:	f240 2273 	movw	r2, #627	; 0x273
 800a442:	4937      	ldr	r1, [pc, #220]	; (800a520 <mem_free+0xfc>)
 800a444:	4837      	ldr	r0, [pc, #220]	; (800a524 <mem_free+0x100>)
 800a446:	f005 f8c5 	bl	800f5d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a44a:	f004 ffa5 	bl	800f398 <sys_arch_protect>
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f004 ffaf 	bl	800f3b4 <sys_arch_unprotect>
    return;
 800a456:	e05e      	b.n	800a516 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3b08      	subs	r3, #8
 800a45c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a45e:	4b32      	ldr	r3, [pc, #200]	; (800a528 <mem_free+0x104>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69fa      	ldr	r2, [r7, #28]
 800a464:	429a      	cmp	r2, r3
 800a466:	d306      	bcc.n	800a476 <mem_free+0x52>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f103 020c 	add.w	r2, r3, #12
 800a46e:	4b2f      	ldr	r3, [pc, #188]	; (800a52c <mem_free+0x108>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	429a      	cmp	r2, r3
 800a474:	d90d      	bls.n	800a492 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a476:	4b29      	ldr	r3, [pc, #164]	; (800a51c <mem_free+0xf8>)
 800a478:	f240 227f 	movw	r2, #639	; 0x27f
 800a47c:	492c      	ldr	r1, [pc, #176]	; (800a530 <mem_free+0x10c>)
 800a47e:	4829      	ldr	r0, [pc, #164]	; (800a524 <mem_free+0x100>)
 800a480:	f005 f8a8 	bl	800f5d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a484:	f004 ff88 	bl	800f398 <sys_arch_protect>
 800a488:	6138      	str	r0, [r7, #16]
 800a48a:	6938      	ldr	r0, [r7, #16]
 800a48c:	f004 ff92 	bl	800f3b4 <sys_arch_unprotect>
    return;
 800a490:	e041      	b.n	800a516 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a492:	4828      	ldr	r0, [pc, #160]	; (800a534 <mem_free+0x110>)
 800a494:	f004 ff44 	bl	800f320 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	791b      	ldrb	r3, [r3, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d110      	bne.n	800a4c2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a4a0:	4b1e      	ldr	r3, [pc, #120]	; (800a51c <mem_free+0xf8>)
 800a4a2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a4a6:	4924      	ldr	r1, [pc, #144]	; (800a538 <mem_free+0x114>)
 800a4a8:	481e      	ldr	r0, [pc, #120]	; (800a524 <mem_free+0x100>)
 800a4aa:	f005 f893 	bl	800f5d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a4ae:	4821      	ldr	r0, [pc, #132]	; (800a534 <mem_free+0x110>)
 800a4b0:	f004 ff45 	bl	800f33e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a4b4:	f004 ff70 	bl	800f398 <sys_arch_protect>
 800a4b8:	6178      	str	r0, [r7, #20]
 800a4ba:	6978      	ldr	r0, [r7, #20]
 800a4bc:	f004 ff7a 	bl	800f3b4 <sys_arch_unprotect>
    return;
 800a4c0:	e029      	b.n	800a516 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a4c2:	69f8      	ldr	r0, [r7, #28]
 800a4c4:	f7ff ff70 	bl	800a3a8 <mem_link_valid>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d110      	bne.n	800a4f0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a4ce:	4b13      	ldr	r3, [pc, #76]	; (800a51c <mem_free+0xf8>)
 800a4d0:	f240 2295 	movw	r2, #661	; 0x295
 800a4d4:	4919      	ldr	r1, [pc, #100]	; (800a53c <mem_free+0x118>)
 800a4d6:	4813      	ldr	r0, [pc, #76]	; (800a524 <mem_free+0x100>)
 800a4d8:	f005 f87c 	bl	800f5d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a4dc:	4815      	ldr	r0, [pc, #84]	; (800a534 <mem_free+0x110>)
 800a4de:	f004 ff2e 	bl	800f33e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a4e2:	f004 ff59 	bl	800f398 <sys_arch_protect>
 800a4e6:	61b8      	str	r0, [r7, #24]
 800a4e8:	69b8      	ldr	r0, [r7, #24]
 800a4ea:	f004 ff63 	bl	800f3b4 <sys_arch_unprotect>
    return;
 800a4ee:	e012      	b.n	800a516 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a4f6:	4b12      	ldr	r3, [pc, #72]	; (800a540 <mem_free+0x11c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69fa      	ldr	r2, [r7, #28]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d202      	bcs.n	800a506 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a500:	4a0f      	ldr	r2, [pc, #60]	; (800a540 <mem_free+0x11c>)
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a506:	69f8      	ldr	r0, [r7, #28]
 800a508:	f7ff fe5a 	bl	800a1c0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a50c:	4809      	ldr	r0, [pc, #36]	; (800a534 <mem_free+0x110>)
 800a50e:	f004 ff16 	bl	800f33e <sys_mutex_unlock>
 800a512:	e000      	b.n	800a516 <mem_free+0xf2>
    return;
 800a514:	bf00      	nop
}
 800a516:	3720      	adds	r7, #32
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	08010e8c 	.word	0x08010e8c
 800a520:	08010f7c 	.word	0x08010f7c
 800a524:	08010ed4 	.word	0x08010ed4
 800a528:	24005c74 	.word	0x24005c74
 800a52c:	24005c78 	.word	0x24005c78
 800a530:	08010fa0 	.word	0x08010fa0
 800a534:	24005c7c 	.word	0x24005c7c
 800a538:	08010fbc 	.word	0x08010fbc
 800a53c:	08010fe4 	.word	0x08010fe4
 800a540:	24005c80 	.word	0x24005c80

0800a544 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a550:	887b      	ldrh	r3, [r7, #2]
 800a552:	3303      	adds	r3, #3
 800a554:	b29b      	uxth	r3, r3
 800a556:	f023 0303 	bic.w	r3, r3, #3
 800a55a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a55c:	8bfb      	ldrh	r3, [r7, #30]
 800a55e:	2b0b      	cmp	r3, #11
 800a560:	d801      	bhi.n	800a566 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a562:	230c      	movs	r3, #12
 800a564:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a566:	8bfb      	ldrh	r3, [r7, #30]
 800a568:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d803      	bhi.n	800a578 <mem_trim+0x34>
 800a570:	8bfa      	ldrh	r2, [r7, #30]
 800a572:	887b      	ldrh	r3, [r7, #2]
 800a574:	429a      	cmp	r2, r3
 800a576:	d201      	bcs.n	800a57c <mem_trim+0x38>
    return NULL;
 800a578:	2300      	movs	r3, #0
 800a57a:	e0dc      	b.n	800a736 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a57c:	4b70      	ldr	r3, [pc, #448]	; (800a740 <mem_trim+0x1fc>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	429a      	cmp	r2, r3
 800a584:	d304      	bcc.n	800a590 <mem_trim+0x4c>
 800a586:	4b6f      	ldr	r3, [pc, #444]	; (800a744 <mem_trim+0x200>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d306      	bcc.n	800a59e <mem_trim+0x5a>
 800a590:	4b6d      	ldr	r3, [pc, #436]	; (800a748 <mem_trim+0x204>)
 800a592:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a596:	496d      	ldr	r1, [pc, #436]	; (800a74c <mem_trim+0x208>)
 800a598:	486d      	ldr	r0, [pc, #436]	; (800a750 <mem_trim+0x20c>)
 800a59a:	f005 f81b 	bl	800f5d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a59e:	4b68      	ldr	r3, [pc, #416]	; (800a740 <mem_trim+0x1fc>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d304      	bcc.n	800a5b2 <mem_trim+0x6e>
 800a5a8:	4b66      	ldr	r3, [pc, #408]	; (800a744 <mem_trim+0x200>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d307      	bcc.n	800a5c2 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a5b2:	f004 fef1 	bl	800f398 <sys_arch_protect>
 800a5b6:	60b8      	str	r0, [r7, #8]
 800a5b8:	68b8      	ldr	r0, [r7, #8]
 800a5ba:	f004 fefb 	bl	800f3b4 <sys_arch_unprotect>
    return rmem;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	e0b9      	b.n	800a736 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	3b08      	subs	r3, #8
 800a5c6:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a5c8:	69b8      	ldr	r0, [r7, #24]
 800a5ca:	f7ff fde7 	bl	800a19c <mem_to_ptr>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	881a      	ldrh	r2, [r3, #0]
 800a5d6:	8afb      	ldrh	r3, [r7, #22]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	3b08      	subs	r3, #8
 800a5de:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a5e0:	8bfa      	ldrh	r2, [r7, #30]
 800a5e2:	8abb      	ldrh	r3, [r7, #20]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d906      	bls.n	800a5f6 <mem_trim+0xb2>
 800a5e8:	4b57      	ldr	r3, [pc, #348]	; (800a748 <mem_trim+0x204>)
 800a5ea:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a5ee:	4959      	ldr	r1, [pc, #356]	; (800a754 <mem_trim+0x210>)
 800a5f0:	4857      	ldr	r0, [pc, #348]	; (800a750 <mem_trim+0x20c>)
 800a5f2:	f004 ffef 	bl	800f5d4 <iprintf>
  if (newsize > size) {
 800a5f6:	8bfa      	ldrh	r2, [r7, #30]
 800a5f8:	8abb      	ldrh	r3, [r7, #20]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d901      	bls.n	800a602 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	e099      	b.n	800a736 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800a602:	8bfa      	ldrh	r2, [r7, #30]
 800a604:	8abb      	ldrh	r3, [r7, #20]
 800a606:	429a      	cmp	r2, r3
 800a608:	d101      	bne.n	800a60e <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	e093      	b.n	800a736 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a60e:	4852      	ldr	r0, [pc, #328]	; (800a758 <mem_trim+0x214>)
 800a610:	f004 fe86 	bl	800f320 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	881b      	ldrh	r3, [r3, #0]
 800a618:	4618      	mov	r0, r3
 800a61a:	f7ff fdad 	bl	800a178 <ptr_to_mem>
 800a61e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	791b      	ldrb	r3, [r3, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d141      	bne.n	800a6ac <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a630:	4293      	cmp	r3, r2
 800a632:	d106      	bne.n	800a642 <mem_trim+0xfe>
 800a634:	4b44      	ldr	r3, [pc, #272]	; (800a748 <mem_trim+0x204>)
 800a636:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a63a:	4948      	ldr	r1, [pc, #288]	; (800a75c <mem_trim+0x218>)
 800a63c:	4844      	ldr	r0, [pc, #272]	; (800a750 <mem_trim+0x20c>)
 800a63e:	f004 ffc9 	bl	800f5d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a648:	8afa      	ldrh	r2, [r7, #22]
 800a64a:	8bfb      	ldrh	r3, [r7, #30]
 800a64c:	4413      	add	r3, r2
 800a64e:	b29b      	uxth	r3, r3
 800a650:	3308      	adds	r3, #8
 800a652:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a654:	4b42      	ldr	r3, [pc, #264]	; (800a760 <mem_trim+0x21c>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d106      	bne.n	800a66c <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800a65e:	89fb      	ldrh	r3, [r7, #14]
 800a660:	4618      	mov	r0, r3
 800a662:	f7ff fd89 	bl	800a178 <ptr_to_mem>
 800a666:	4603      	mov	r3, r0
 800a668:	4a3d      	ldr	r2, [pc, #244]	; (800a760 <mem_trim+0x21c>)
 800a66a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a66c:	89fb      	ldrh	r3, [r7, #14]
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff fd82 	bl	800a178 <ptr_to_mem>
 800a674:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2200      	movs	r2, #0
 800a67a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	89ba      	ldrh	r2, [r7, #12]
 800a680:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	8afa      	ldrh	r2, [r7, #22]
 800a686:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	89fa      	ldrh	r2, [r7, #14]
 800a68c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a696:	4293      	cmp	r3, r2
 800a698:	d049      	beq.n	800a72e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	881b      	ldrh	r3, [r3, #0]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7ff fd6a 	bl	800a178 <ptr_to_mem>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	89fb      	ldrh	r3, [r7, #14]
 800a6a8:	8053      	strh	r3, [r2, #2]
 800a6aa:	e040      	b.n	800a72e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a6ac:	8bfb      	ldrh	r3, [r7, #30]
 800a6ae:	f103 0214 	add.w	r2, r3, #20
 800a6b2:	8abb      	ldrh	r3, [r7, #20]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d83a      	bhi.n	800a72e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a6b8:	8afa      	ldrh	r2, [r7, #22]
 800a6ba:	8bfb      	ldrh	r3, [r7, #30]
 800a6bc:	4413      	add	r3, r2
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	881b      	ldrh	r3, [r3, #0]
 800a6c8:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d106      	bne.n	800a6de <mem_trim+0x19a>
 800a6d0:	4b1d      	ldr	r3, [pc, #116]	; (800a748 <mem_trim+0x204>)
 800a6d2:	f240 3216 	movw	r2, #790	; 0x316
 800a6d6:	4921      	ldr	r1, [pc, #132]	; (800a75c <mem_trim+0x218>)
 800a6d8:	481d      	ldr	r0, [pc, #116]	; (800a750 <mem_trim+0x20c>)
 800a6da:	f004 ff7b 	bl	800f5d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a6de:	89fb      	ldrh	r3, [r7, #14]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff fd49 	bl	800a178 <ptr_to_mem>
 800a6e6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a6e8:	4b1d      	ldr	r3, [pc, #116]	; (800a760 <mem_trim+0x21c>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d202      	bcs.n	800a6f8 <mem_trim+0x1b4>
      lfree = mem2;
 800a6f2:	4a1b      	ldr	r2, [pc, #108]	; (800a760 <mem_trim+0x21c>)
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	881a      	ldrh	r2, [r3, #0]
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	8afa      	ldrh	r2, [r7, #22]
 800a70a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	89fa      	ldrh	r2, [r7, #14]
 800a710:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	881b      	ldrh	r3, [r3, #0]
 800a716:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d007      	beq.n	800a72e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	4618      	mov	r0, r3
 800a724:	f7ff fd28 	bl	800a178 <ptr_to_mem>
 800a728:	4602      	mov	r2, r0
 800a72a:	89fb      	ldrh	r3, [r7, #14]
 800a72c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a72e:	480a      	ldr	r0, [pc, #40]	; (800a758 <mem_trim+0x214>)
 800a730:	f004 fe05 	bl	800f33e <sys_mutex_unlock>
  return rmem;
 800a734:	687b      	ldr	r3, [r7, #4]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3720      	adds	r7, #32
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	24005c74 	.word	0x24005c74
 800a744:	24005c78 	.word	0x24005c78
 800a748:	08010e8c 	.word	0x08010e8c
 800a74c:	08011018 	.word	0x08011018
 800a750:	08010ed4 	.word	0x08010ed4
 800a754:	08011030 	.word	0x08011030
 800a758:	24005c7c 	.word	0x24005c7c
 800a75c:	08011050 	.word	0x08011050
 800a760:	24005c80 	.word	0x24005c80

0800a764 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b088      	sub	sp, #32
 800a768:	af00      	add	r7, sp, #0
 800a76a:	4603      	mov	r3, r0
 800a76c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a76e:	88fb      	ldrh	r3, [r7, #6]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <mem_malloc+0x14>
    return NULL;
 800a774:	2300      	movs	r3, #0
 800a776:	e0e6      	b.n	800a946 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a778:	88fb      	ldrh	r3, [r7, #6]
 800a77a:	3303      	adds	r3, #3
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	f023 0303 	bic.w	r3, r3, #3
 800a782:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a784:	8bbb      	ldrh	r3, [r7, #28]
 800a786:	2b0b      	cmp	r3, #11
 800a788:	d801      	bhi.n	800a78e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a78a:	230c      	movs	r3, #12
 800a78c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a78e:	8bbb      	ldrh	r3, [r7, #28]
 800a790:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a794:	4293      	cmp	r3, r2
 800a796:	d803      	bhi.n	800a7a0 <mem_malloc+0x3c>
 800a798:	8bba      	ldrh	r2, [r7, #28]
 800a79a:	88fb      	ldrh	r3, [r7, #6]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d201      	bcs.n	800a7a4 <mem_malloc+0x40>
    return NULL;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	e0d0      	b.n	800a946 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a7a4:	486a      	ldr	r0, [pc, #424]	; (800a950 <mem_malloc+0x1ec>)
 800a7a6:	f004 fdbb 	bl	800f320 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a7aa:	4b6a      	ldr	r3, [pc, #424]	; (800a954 <mem_malloc+0x1f0>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7ff fcf4 	bl	800a19c <mem_to_ptr>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	83fb      	strh	r3, [r7, #30]
 800a7b8:	e0b9      	b.n	800a92e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a7ba:	8bfb      	ldrh	r3, [r7, #30]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7ff fcdb 	bl	800a178 <ptr_to_mem>
 800a7c2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	791b      	ldrb	r3, [r3, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f040 80a9 	bne.w	800a920 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	8bfb      	ldrh	r3, [r7, #30]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	f1a3 0208 	sub.w	r2, r3, #8
 800a7dc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	f0c0 809e 	bcc.w	800a920 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	881b      	ldrh	r3, [r3, #0]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	8bfb      	ldrh	r3, [r7, #30]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	f1a3 0208 	sub.w	r2, r3, #8
 800a7f2:	8bbb      	ldrh	r3, [r7, #28]
 800a7f4:	3314      	adds	r3, #20
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d335      	bcc.n	800a866 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a7fa:	8bfa      	ldrh	r2, [r7, #30]
 800a7fc:	8bbb      	ldrh	r3, [r7, #28]
 800a7fe:	4413      	add	r3, r2
 800a800:	b29b      	uxth	r3, r3
 800a802:	3308      	adds	r3, #8
 800a804:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a806:	8a7b      	ldrh	r3, [r7, #18]
 800a808:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d106      	bne.n	800a81e <mem_malloc+0xba>
 800a810:	4b51      	ldr	r3, [pc, #324]	; (800a958 <mem_malloc+0x1f4>)
 800a812:	f240 3287 	movw	r2, #903	; 0x387
 800a816:	4951      	ldr	r1, [pc, #324]	; (800a95c <mem_malloc+0x1f8>)
 800a818:	4851      	ldr	r0, [pc, #324]	; (800a960 <mem_malloc+0x1fc>)
 800a81a:	f004 fedb 	bl	800f5d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a81e:	8a7b      	ldrh	r3, [r7, #18]
 800a820:	4618      	mov	r0, r3
 800a822:	f7ff fca9 	bl	800a178 <ptr_to_mem>
 800a826:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	881a      	ldrh	r2, [r3, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	8bfa      	ldrh	r2, [r7, #30]
 800a83a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	8a7a      	ldrh	r2, [r7, #18]
 800a840:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2201      	movs	r2, #1
 800a846:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a850:	4293      	cmp	r3, r2
 800a852:	d00b      	beq.n	800a86c <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff fc8d 	bl	800a178 <ptr_to_mem>
 800a85e:	4602      	mov	r2, r0
 800a860:	8a7b      	ldrh	r3, [r7, #18]
 800a862:	8053      	strh	r3, [r2, #2]
 800a864:	e002      	b.n	800a86c <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2201      	movs	r2, #1
 800a86a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a86c:	4b39      	ldr	r3, [pc, #228]	; (800a954 <mem_malloc+0x1f0>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	429a      	cmp	r2, r3
 800a874:	d127      	bne.n	800a8c6 <mem_malloc+0x162>
          struct mem *cur = lfree;
 800a876:	4b37      	ldr	r3, [pc, #220]	; (800a954 <mem_malloc+0x1f0>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a87c:	e005      	b.n	800a88a <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	4618      	mov	r0, r3
 800a884:	f7ff fc78 	bl	800a178 <ptr_to_mem>
 800a888:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	791b      	ldrb	r3, [r3, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d004      	beq.n	800a89c <mem_malloc+0x138>
 800a892:	4b34      	ldr	r3, [pc, #208]	; (800a964 <mem_malloc+0x200>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d1f0      	bne.n	800a87e <mem_malloc+0x11a>
          }
          lfree = cur;
 800a89c:	4a2d      	ldr	r2, [pc, #180]	; (800a954 <mem_malloc+0x1f0>)
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a8a2:	4b2c      	ldr	r3, [pc, #176]	; (800a954 <mem_malloc+0x1f0>)
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	4b2f      	ldr	r3, [pc, #188]	; (800a964 <mem_malloc+0x200>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d00b      	beq.n	800a8c6 <mem_malloc+0x162>
 800a8ae:	4b29      	ldr	r3, [pc, #164]	; (800a954 <mem_malloc+0x1f0>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	791b      	ldrb	r3, [r3, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d006      	beq.n	800a8c6 <mem_malloc+0x162>
 800a8b8:	4b27      	ldr	r3, [pc, #156]	; (800a958 <mem_malloc+0x1f4>)
 800a8ba:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a8be:	492a      	ldr	r1, [pc, #168]	; (800a968 <mem_malloc+0x204>)
 800a8c0:	4827      	ldr	r0, [pc, #156]	; (800a960 <mem_malloc+0x1fc>)
 800a8c2:	f004 fe87 	bl	800f5d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a8c6:	4822      	ldr	r0, [pc, #136]	; (800a950 <mem_malloc+0x1ec>)
 800a8c8:	f004 fd39 	bl	800f33e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a8cc:	8bba      	ldrh	r2, [r7, #28]
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	4a23      	ldr	r2, [pc, #140]	; (800a964 <mem_malloc+0x200>)
 800a8d6:	6812      	ldr	r2, [r2, #0]
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d906      	bls.n	800a8ea <mem_malloc+0x186>
 800a8dc:	4b1e      	ldr	r3, [pc, #120]	; (800a958 <mem_malloc+0x1f4>)
 800a8de:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a8e2:	4922      	ldr	r1, [pc, #136]	; (800a96c <mem_malloc+0x208>)
 800a8e4:	481e      	ldr	r0, [pc, #120]	; (800a960 <mem_malloc+0x1fc>)
 800a8e6:	f004 fe75 	bl	800f5d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f003 0303 	and.w	r3, r3, #3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d006      	beq.n	800a902 <mem_malloc+0x19e>
 800a8f4:	4b18      	ldr	r3, [pc, #96]	; (800a958 <mem_malloc+0x1f4>)
 800a8f6:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a8fa:	491d      	ldr	r1, [pc, #116]	; (800a970 <mem_malloc+0x20c>)
 800a8fc:	4818      	ldr	r0, [pc, #96]	; (800a960 <mem_malloc+0x1fc>)
 800a8fe:	f004 fe69 	bl	800f5d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f003 0303 	and.w	r3, r3, #3
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d006      	beq.n	800a91a <mem_malloc+0x1b6>
 800a90c:	4b12      	ldr	r3, [pc, #72]	; (800a958 <mem_malloc+0x1f4>)
 800a90e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a912:	4918      	ldr	r1, [pc, #96]	; (800a974 <mem_malloc+0x210>)
 800a914:	4812      	ldr	r0, [pc, #72]	; (800a960 <mem_malloc+0x1fc>)
 800a916:	f004 fe5d 	bl	800f5d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	3308      	adds	r3, #8
 800a91e:	e012      	b.n	800a946 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800a920:	8bfb      	ldrh	r3, [r7, #30]
 800a922:	4618      	mov	r0, r3
 800a924:	f7ff fc28 	bl	800a178 <ptr_to_mem>
 800a928:	4603      	mov	r3, r0
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a92e:	8bfa      	ldrh	r2, [r7, #30]
 800a930:	8bb9      	ldrh	r1, [r7, #28]
 800a932:	f643 2398 	movw	r3, #15000	; 0x3a98
 800a936:	1a5b      	subs	r3, r3, r1
 800a938:	429a      	cmp	r2, r3
 800a93a:	f4ff af3e 	bcc.w	800a7ba <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a93e:	4804      	ldr	r0, [pc, #16]	; (800a950 <mem_malloc+0x1ec>)
 800a940:	f004 fcfd 	bl	800f33e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3720      	adds	r7, #32
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	24005c7c 	.word	0x24005c7c
 800a954:	24005c80 	.word	0x24005c80
 800a958:	08010e8c 	.word	0x08010e8c
 800a95c:	08011050 	.word	0x08011050
 800a960:	08010ed4 	.word	0x08010ed4
 800a964:	24005c78 	.word	0x24005c78
 800a968:	08011064 	.word	0x08011064
 800a96c:	08011080 	.word	0x08011080
 800a970:	080110b0 	.word	0x080110b0
 800a974:	080110e0 	.word	0x080110e0

0800a978 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	3303      	adds	r3, #3
 800a98e:	f023 0303 	bic.w	r3, r3, #3
 800a992:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a994:	2300      	movs	r3, #0
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	e011      	b.n	800a9be <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	60fb      	str	r3, [r7, #12]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	885b      	ldrh	r3, [r3, #2]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	dbe7      	blt.n	800a99a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a9ca:	bf00      	nop
 800a9cc:	bf00      	nop
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a9de:	2300      	movs	r3, #0
 800a9e0:	80fb      	strh	r3, [r7, #6]
 800a9e2:	e009      	b.n	800a9f8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a9e4:	88fb      	ldrh	r3, [r7, #6]
 800a9e6:	4a08      	ldr	r2, [pc, #32]	; (800aa08 <memp_init+0x30>)
 800a9e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7ff ffc3 	bl	800a978 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a9f2:	88fb      	ldrh	r3, [r7, #6]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	80fb      	strh	r3, [r7, #6]
 800a9f8:	88fb      	ldrh	r3, [r7, #6]
 800a9fa:	2b09      	cmp	r3, #9
 800a9fc:	d9f2      	bls.n	800a9e4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a9fe:	bf00      	nop
 800aa00:	bf00      	nop
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	08012470 	.word	0x08012470

0800aa0c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800aa14:	f004 fcc0 	bl	800f398 <sys_arch_protect>
 800aa18:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d015      	beq.n	800aa54 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	6812      	ldr	r2, [r2, #0]
 800aa30:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	f003 0303 	and.w	r3, r3, #3
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d006      	beq.n	800aa4a <do_memp_malloc_pool+0x3e>
 800aa3c:	4b09      	ldr	r3, [pc, #36]	; (800aa64 <do_memp_malloc_pool+0x58>)
 800aa3e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800aa42:	4909      	ldr	r1, [pc, #36]	; (800aa68 <do_memp_malloc_pool+0x5c>)
 800aa44:	4809      	ldr	r0, [pc, #36]	; (800aa6c <do_memp_malloc_pool+0x60>)
 800aa46:	f004 fdc5 	bl	800f5d4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f004 fcb2 	bl	800f3b4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	e003      	b.n	800aa5c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f004 fcad 	bl	800f3b4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	08011104 	.word	0x08011104
 800aa68:	08011134 	.word	0x08011134
 800aa6c:	08011158 	.word	0x08011158

0800aa70 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <memp_malloc_pool+0x1c>
 800aa7e:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <memp_malloc_pool+0x38>)
 800aa80:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800aa84:	4909      	ldr	r1, [pc, #36]	; (800aaac <memp_malloc_pool+0x3c>)
 800aa86:	480a      	ldr	r0, [pc, #40]	; (800aab0 <memp_malloc_pool+0x40>)
 800aa88:	f004 fda4 	bl	800f5d4 <iprintf>
  if (desc == NULL) {
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d101      	bne.n	800aa96 <memp_malloc_pool+0x26>
    return NULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	e003      	b.n	800aa9e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7ff ffb8 	bl	800aa0c <do_memp_malloc_pool>
 800aa9c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	08011104 	.word	0x08011104
 800aaac:	08011180 	.word	0x08011180
 800aab0:	08011158 	.word	0x08011158

0800aab4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	4603      	mov	r3, r0
 800aabc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800aabe:	79fb      	ldrb	r3, [r7, #7]
 800aac0:	2b09      	cmp	r3, #9
 800aac2:	d908      	bls.n	800aad6 <memp_malloc+0x22>
 800aac4:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <memp_malloc+0x3c>)
 800aac6:	f240 1257 	movw	r2, #343	; 0x157
 800aaca:	490a      	ldr	r1, [pc, #40]	; (800aaf4 <memp_malloc+0x40>)
 800aacc:	480a      	ldr	r0, [pc, #40]	; (800aaf8 <memp_malloc+0x44>)
 800aace:	f004 fd81 	bl	800f5d4 <iprintf>
 800aad2:	2300      	movs	r3, #0
 800aad4:	e008      	b.n	800aae8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	4a08      	ldr	r2, [pc, #32]	; (800aafc <memp_malloc+0x48>)
 800aada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff ff94 	bl	800aa0c <do_memp_malloc_pool>
 800aae4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800aae6:	68fb      	ldr	r3, [r7, #12]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	08011104 	.word	0x08011104
 800aaf4:	08011194 	.word	0x08011194
 800aaf8:	08011158 	.word	0x08011158
 800aafc:	08012470 	.word	0x08012470

0800ab00 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	f003 0303 	and.w	r3, r3, #3
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d006      	beq.n	800ab22 <do_memp_free_pool+0x22>
 800ab14:	4b0d      	ldr	r3, [pc, #52]	; (800ab4c <do_memp_free_pool+0x4c>)
 800ab16:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ab1a:	490d      	ldr	r1, [pc, #52]	; (800ab50 <do_memp_free_pool+0x50>)
 800ab1c:	480d      	ldr	r0, [pc, #52]	; (800ab54 <do_memp_free_pool+0x54>)
 800ab1e:	f004 fd59 	bl	800f5d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ab26:	f004 fc37 	bl	800f398 <sys_arch_protect>
 800ab2a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ab3e:	68b8      	ldr	r0, [r7, #8]
 800ab40:	f004 fc38 	bl	800f3b4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ab44:	bf00      	nop
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	08011104 	.word	0x08011104
 800ab50:	080111b4 	.word	0x080111b4
 800ab54:	08011158 	.word	0x08011158

0800ab58 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d106      	bne.n	800ab76 <memp_free_pool+0x1e>
 800ab68:	4b0a      	ldr	r3, [pc, #40]	; (800ab94 <memp_free_pool+0x3c>)
 800ab6a:	f240 1295 	movw	r2, #405	; 0x195
 800ab6e:	490a      	ldr	r1, [pc, #40]	; (800ab98 <memp_free_pool+0x40>)
 800ab70:	480a      	ldr	r0, [pc, #40]	; (800ab9c <memp_free_pool+0x44>)
 800ab72:	f004 fd2f 	bl	800f5d4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d007      	beq.n	800ab8c <memp_free_pool+0x34>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d004      	beq.n	800ab8c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff ffbb 	bl	800ab00 <do_memp_free_pool>
 800ab8a:	e000      	b.n	800ab8e <memp_free_pool+0x36>
    return;
 800ab8c:	bf00      	nop
}
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	08011104 	.word	0x08011104
 800ab98:	08011180 	.word	0x08011180
 800ab9c:	08011158 	.word	0x08011158

0800aba0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4603      	mov	r3, r0
 800aba8:	6039      	str	r1, [r7, #0]
 800abaa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800abac:	79fb      	ldrb	r3, [r7, #7]
 800abae:	2b09      	cmp	r3, #9
 800abb0:	d907      	bls.n	800abc2 <memp_free+0x22>
 800abb2:	4b0c      	ldr	r3, [pc, #48]	; (800abe4 <memp_free+0x44>)
 800abb4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800abb8:	490b      	ldr	r1, [pc, #44]	; (800abe8 <memp_free+0x48>)
 800abba:	480c      	ldr	r0, [pc, #48]	; (800abec <memp_free+0x4c>)
 800abbc:	f004 fd0a 	bl	800f5d4 <iprintf>
 800abc0:	e00c      	b.n	800abdc <memp_free+0x3c>

  if (mem == NULL) {
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d008      	beq.n	800abda <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800abc8:	79fb      	ldrb	r3, [r7, #7]
 800abca:	4a09      	ldr	r2, [pc, #36]	; (800abf0 <memp_free+0x50>)
 800abcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7ff ff94 	bl	800ab00 <do_memp_free_pool>
 800abd8:	e000      	b.n	800abdc <memp_free+0x3c>
    return;
 800abda:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	08011104 	.word	0x08011104
 800abe8:	080111d4 	.word	0x080111d4
 800abec:	08011158 	.word	0x08011158
 800abf0:	08012470 	.word	0x08012470

0800abf4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800abf4:	b480      	push	{r7}
 800abf6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800abf8:	bf00      	nop
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
	...

0800ac04 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
 800ac10:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d108      	bne.n	800ac2a <netif_add+0x26>
 800ac18:	4b57      	ldr	r3, [pc, #348]	; (800ad78 <netif_add+0x174>)
 800ac1a:	f240 1227 	movw	r2, #295	; 0x127
 800ac1e:	4957      	ldr	r1, [pc, #348]	; (800ad7c <netif_add+0x178>)
 800ac20:	4857      	ldr	r0, [pc, #348]	; (800ad80 <netif_add+0x17c>)
 800ac22:	f004 fcd7 	bl	800f5d4 <iprintf>
 800ac26:	2300      	movs	r3, #0
 800ac28:	e0a2      	b.n	800ad70 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d108      	bne.n	800ac42 <netif_add+0x3e>
 800ac30:	4b51      	ldr	r3, [pc, #324]	; (800ad78 <netif_add+0x174>)
 800ac32:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ac36:	4953      	ldr	r1, [pc, #332]	; (800ad84 <netif_add+0x180>)
 800ac38:	4851      	ldr	r0, [pc, #324]	; (800ad80 <netif_add+0x17c>)
 800ac3a:	f004 fccb 	bl	800f5d4 <iprintf>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e096      	b.n	800ad70 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d101      	bne.n	800ac4c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ac48:	4b4f      	ldr	r3, [pc, #316]	; (800ad88 <netif_add+0x184>)
 800ac4a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ac52:	4b4d      	ldr	r3, [pc, #308]	; (800ad88 <netif_add+0x184>)
 800ac54:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d101      	bne.n	800ac60 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ac5c:	4b4a      	ldr	r3, [pc, #296]	; (800ad88 <netif_add+0x184>)
 800ac5e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	4a45      	ldr	r2, [pc, #276]	; (800ad8c <netif_add+0x188>)
 800ac76:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6a3a      	ldr	r2, [r7, #32]
 800ac90:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ac92:	4b3f      	ldr	r3, [pc, #252]	; (800ad90 <netif_add+0x18c>)
 800ac94:	781a      	ldrb	r2, [r3, #0]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aca0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 f90f 	bl	800aecc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	4798      	blx	r3
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <netif_add+0xba>
    return NULL;
 800acba:	2300      	movs	r3, #0
 800acbc:	e058      	b.n	800ad70 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acc4:	2bff      	cmp	r3, #255	; 0xff
 800acc6:	d103      	bne.n	800acd0 <netif_add+0xcc>
        netif->num = 0;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800acd4:	4b2f      	ldr	r3, [pc, #188]	; (800ad94 <netif_add+0x190>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	617b      	str	r3, [r7, #20]
 800acda:	e02b      	b.n	800ad34 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800acdc:	697a      	ldr	r2, [r7, #20]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d106      	bne.n	800acf2 <netif_add+0xee>
 800ace4:	4b24      	ldr	r3, [pc, #144]	; (800ad78 <netif_add+0x174>)
 800ace6:	f240 128b 	movw	r2, #395	; 0x18b
 800acea:	492b      	ldr	r1, [pc, #172]	; (800ad98 <netif_add+0x194>)
 800acec:	4824      	ldr	r0, [pc, #144]	; (800ad80 <netif_add+0x17c>)
 800acee:	f004 fc71 	bl	800f5d4 <iprintf>
        num_netifs++;
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	3301      	adds	r3, #1
 800acf6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	2bff      	cmp	r3, #255	; 0xff
 800acfc:	dd06      	ble.n	800ad0c <netif_add+0x108>
 800acfe:	4b1e      	ldr	r3, [pc, #120]	; (800ad78 <netif_add+0x174>)
 800ad00:	f240 128d 	movw	r2, #397	; 0x18d
 800ad04:	4925      	ldr	r1, [pc, #148]	; (800ad9c <netif_add+0x198>)
 800ad06:	481e      	ldr	r0, [pc, #120]	; (800ad80 <netif_add+0x17c>)
 800ad08:	f004 fc64 	bl	800f5d4 <iprintf>
        if (netif2->num == netif->num) {
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d108      	bne.n	800ad2e <netif_add+0x12a>
          netif->num++;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad22:	3301      	adds	r3, #1
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ad2c:	e005      	b.n	800ad3a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	617b      	str	r3, [r7, #20]
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1d0      	bne.n	800acdc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1be      	bne.n	800acbe <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad46:	2bfe      	cmp	r3, #254	; 0xfe
 800ad48:	d103      	bne.n	800ad52 <netif_add+0x14e>
    netif_num = 0;
 800ad4a:	4b11      	ldr	r3, [pc, #68]	; (800ad90 <netif_add+0x18c>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	e006      	b.n	800ad60 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad58:	3301      	adds	r3, #1
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <netif_add+0x18c>)
 800ad5e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ad60:	4b0c      	ldr	r3, [pc, #48]	; (800ad94 <netif_add+0x190>)
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ad68:	4a0a      	ldr	r2, [pc, #40]	; (800ad94 <netif_add+0x190>)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3718      	adds	r7, #24
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	080111f0 	.word	0x080111f0
 800ad7c:	08011284 	.word	0x08011284
 800ad80:	08011240 	.word	0x08011240
 800ad84:	080112a0 	.word	0x080112a0
 800ad88:	080124a8 	.word	0x080124a8
 800ad8c:	0800b1a7 	.word	0x0800b1a7
 800ad90:	24005cac 	.word	0x24005cac
 800ad94:	2400d720 	.word	0x2400d720
 800ad98:	080112c4 	.word	0x080112c4
 800ad9c:	080112d8 	.word	0x080112d8

0800ada0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800adaa:	6839      	ldr	r1, [r7, #0]
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f001 fe87 	bl	800cac0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800adb2:	bf00      	nop
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
	...

0800adbc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d106      	bne.n	800addc <netif_do_set_ipaddr+0x20>
 800adce:	4b1d      	ldr	r3, [pc, #116]	; (800ae44 <netif_do_set_ipaddr+0x88>)
 800add0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800add4:	491c      	ldr	r1, [pc, #112]	; (800ae48 <netif_do_set_ipaddr+0x8c>)
 800add6:	481d      	ldr	r0, [pc, #116]	; (800ae4c <netif_do_set_ipaddr+0x90>)
 800add8:	f004 fbfc 	bl	800f5d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d106      	bne.n	800adf0 <netif_do_set_ipaddr+0x34>
 800ade2:	4b18      	ldr	r3, [pc, #96]	; (800ae44 <netif_do_set_ipaddr+0x88>)
 800ade4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ade8:	4917      	ldr	r1, [pc, #92]	; (800ae48 <netif_do_set_ipaddr+0x8c>)
 800adea:	4818      	ldr	r0, [pc, #96]	; (800ae4c <netif_do_set_ipaddr+0x90>)
 800adec:	f004 fbf2 	bl	800f5d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3304      	adds	r3, #4
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d01c      	beq.n	800ae38 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	3304      	adds	r3, #4
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ae0e:	f107 0314 	add.w	r3, r7, #20
 800ae12:	4619      	mov	r1, r3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7ff ffc3 	bl	800ada0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d002      	beq.n	800ae26 <netif_do_set_ipaddr+0x6a>
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	e000      	b.n	800ae28 <netif_do_set_ipaddr+0x6c>
 800ae26:	2300      	movs	r3, #0
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ae2c:	2101      	movs	r1, #1
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f000 f8d2 	bl	800afd8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ae34:	2301      	movs	r3, #1
 800ae36:	e000      	b.n	800ae3a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	080111f0 	.word	0x080111f0
 800ae48:	08011308 	.word	0x08011308
 800ae4c:	08011240 	.word	0x08011240

0800ae50 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	3308      	adds	r3, #8
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d00a      	beq.n	800ae80 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <netif_do_set_netmask+0x26>
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	e000      	b.n	800ae78 <netif_do_set_netmask+0x28>
 800ae76:	2300      	movs	r3, #0
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e000      	b.n	800ae82 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b085      	sub	sp, #20
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	60b9      	str	r1, [r7, #8]
 800ae98:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	330c      	adds	r3, #12
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d00a      	beq.n	800aebe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d002      	beq.n	800aeb4 <netif_do_set_gw+0x26>
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	e000      	b.n	800aeb6 <netif_do_set_gw+0x28>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800aeba:	2301      	movs	r3, #1
 800aebc:	e000      	b.n	800aec0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b088      	sub	sp, #32
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
 800aed8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800aeda:	2300      	movs	r3, #0
 800aedc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800aede:	2300      	movs	r3, #0
 800aee0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d101      	bne.n	800aeec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800aee8:	4b1c      	ldr	r3, [pc, #112]	; (800af5c <netif_set_addr+0x90>)
 800aeea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800aef2:	4b1a      	ldr	r3, [pc, #104]	; (800af5c <netif_set_addr+0x90>)
 800aef4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d101      	bne.n	800af00 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800aefc:	4b17      	ldr	r3, [pc, #92]	; (800af5c <netif_set_addr+0x90>)
 800aefe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d003      	beq.n	800af0e <netif_set_addr+0x42>
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <netif_set_addr+0x46>
 800af0e:	2301      	movs	r3, #1
 800af10:	e000      	b.n	800af14 <netif_set_addr+0x48>
 800af12:	2300      	movs	r3, #0
 800af14:	617b      	str	r3, [r7, #20]
  if (remove) {
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d006      	beq.n	800af2a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800af1c:	f107 0310 	add.w	r3, r7, #16
 800af20:	461a      	mov	r2, r3
 800af22:	68b9      	ldr	r1, [r7, #8]
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f7ff ff49 	bl	800adbc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800af2a:	69fa      	ldr	r2, [r7, #28]
 800af2c:	6879      	ldr	r1, [r7, #4]
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f7ff ff8e 	bl	800ae50 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800af34:	69ba      	ldr	r2, [r7, #24]
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f7ff ffa8 	bl	800ae8e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d106      	bne.n	800af52 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800af44:	f107 0310 	add.w	r3, r7, #16
 800af48:	461a      	mov	r2, r3
 800af4a:	68b9      	ldr	r1, [r7, #8]
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f7ff ff35 	bl	800adbc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800af52:	bf00      	nop
 800af54:	3720      	adds	r7, #32
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	080124a8 	.word	0x080124a8

0800af60 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800af68:	4a04      	ldr	r2, [pc, #16]	; (800af7c <netif_set_default+0x1c>)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800af6e:	bf00      	nop
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	2400d724 	.word	0x2400d724

0800af80 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d107      	bne.n	800af9e <netif_set_up+0x1e>
 800af8e:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <netif_set_up+0x4c>)
 800af90:	f44f 7254 	mov.w	r2, #848	; 0x350
 800af94:	490e      	ldr	r1, [pc, #56]	; (800afd0 <netif_set_up+0x50>)
 800af96:	480f      	ldr	r0, [pc, #60]	; (800afd4 <netif_set_up+0x54>)
 800af98:	f004 fb1c 	bl	800f5d4 <iprintf>
 800af9c:	e013      	b.n	800afc6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10c      	bne.n	800afc6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afb2:	f043 0301 	orr.w	r3, r3, #1
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800afbe:	2103      	movs	r1, #3
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f809 	bl	800afd8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	080111f0 	.word	0x080111f0
 800afd0:	08011378 	.word	0x08011378
 800afd4:	08011240 	.word	0x08011240

0800afd8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d106      	bne.n	800aff8 <netif_issue_reports+0x20>
 800afea:	4b18      	ldr	r3, [pc, #96]	; (800b04c <netif_issue_reports+0x74>)
 800afec:	f240 326d 	movw	r2, #877	; 0x36d
 800aff0:	4917      	ldr	r1, [pc, #92]	; (800b050 <netif_issue_reports+0x78>)
 800aff2:	4818      	ldr	r0, [pc, #96]	; (800b054 <netif_issue_reports+0x7c>)
 800aff4:	f004 faee 	bl	800f5d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800affe:	f003 0304 	and.w	r3, r3, #4
 800b002:	2b00      	cmp	r3, #0
 800b004:	d01e      	beq.n	800b044 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b00c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b010:	2b00      	cmp	r3, #0
 800b012:	d017      	beq.n	800b044 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b014:	78fb      	ldrb	r3, [r7, #3]
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d013      	beq.n	800b046 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	3304      	adds	r3, #4
 800b022:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00e      	beq.n	800b046 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b02e:	f003 0308 	and.w	r3, r3, #8
 800b032:	2b00      	cmp	r3, #0
 800b034:	d007      	beq.n	800b046 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	3304      	adds	r3, #4
 800b03a:	4619      	mov	r1, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f002 fca9 	bl	800d994 <etharp_request>
 800b042:	e000      	b.n	800b046 <netif_issue_reports+0x6e>
    return;
 800b044:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	080111f0 	.word	0x080111f0
 800b050:	08011394 	.word	0x08011394
 800b054:	08011240 	.word	0x08011240

0800b058 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d107      	bne.n	800b076 <netif_set_down+0x1e>
 800b066:	4b12      	ldr	r3, [pc, #72]	; (800b0b0 <netif_set_down+0x58>)
 800b068:	f240 329b 	movw	r2, #923	; 0x39b
 800b06c:	4911      	ldr	r1, [pc, #68]	; (800b0b4 <netif_set_down+0x5c>)
 800b06e:	4812      	ldr	r0, [pc, #72]	; (800b0b8 <netif_set_down+0x60>)
 800b070:	f004 fab0 	bl	800f5d4 <iprintf>
 800b074:	e019      	b.n	800b0aa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	2b00      	cmp	r3, #0
 800b082:	d012      	beq.n	800b0aa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b08a:	f023 0301 	bic.w	r3, r3, #1
 800b08e:	b2da      	uxtb	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b09c:	f003 0308 	and.w	r3, r3, #8
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f002 f833 	bl	800d110 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	080111f0 	.word	0x080111f0
 800b0b4:	080113b8 	.word	0x080113b8
 800b0b8:	08011240 	.word	0x08011240

0800b0bc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d107      	bne.n	800b0da <netif_set_link_up+0x1e>
 800b0ca:	4b13      	ldr	r3, [pc, #76]	; (800b118 <netif_set_link_up+0x5c>)
 800b0cc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b0d0:	4912      	ldr	r1, [pc, #72]	; (800b11c <netif_set_link_up+0x60>)
 800b0d2:	4813      	ldr	r0, [pc, #76]	; (800b120 <netif_set_link_up+0x64>)
 800b0d4:	f004 fa7e 	bl	800f5d4 <iprintf>
 800b0d8:	e01b      	b.n	800b112 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0e0:	f003 0304 	and.w	r3, r3, #4
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d114      	bne.n	800b112 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0ee:	f043 0304 	orr.w	r3, r3, #4
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b0fa:	2103      	movs	r1, #3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7ff ff6b 	bl	800afd8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <netif_set_link_up+0x56>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	69db      	ldr	r3, [r3, #28]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	080111f0 	.word	0x080111f0
 800b11c:	080113d8 	.word	0x080113d8
 800b120:	08011240 	.word	0x08011240

0800b124 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d107      	bne.n	800b142 <netif_set_link_down+0x1e>
 800b132:	4b11      	ldr	r3, [pc, #68]	; (800b178 <netif_set_link_down+0x54>)
 800b134:	f240 4206 	movw	r2, #1030	; 0x406
 800b138:	4910      	ldr	r1, [pc, #64]	; (800b17c <netif_set_link_down+0x58>)
 800b13a:	4811      	ldr	r0, [pc, #68]	; (800b180 <netif_set_link_down+0x5c>)
 800b13c:	f004 fa4a 	bl	800f5d4 <iprintf>
 800b140:	e017      	b.n	800b172 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b148:	f003 0304 	and.w	r3, r3, #4
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d010      	beq.n	800b172 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b156:	f023 0304 	bic.w	r3, r3, #4
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	69db      	ldr	r3, [r3, #28]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <netif_set_link_down+0x4e>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	080111f0 	.word	0x080111f0
 800b17c:	080113fc 	.word	0x080113fc
 800b180:	08011240 	.word	0x08011240

0800b184 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	61da      	str	r2, [r3, #28]
  }
}
 800b19a:	bf00      	nop
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b085      	sub	sp, #20
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	60f8      	str	r0, [r7, #12]
 800b1ae:	60b9      	str	r1, [r7, #8]
 800b1b0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b1b2:	f06f 030b 	mvn.w	r3, #11
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3714      	adds	r7, #20
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
	...

0800b1c4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b1ce:	79fb      	ldrb	r3, [r7, #7]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d013      	beq.n	800b1fc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b1d4:	4b0d      	ldr	r3, [pc, #52]	; (800b20c <netif_get_by_index+0x48>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	60fb      	str	r3, [r7, #12]
 800b1da:	e00c      	b.n	800b1f6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	79fa      	ldrb	r2, [r7, #7]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d101      	bne.n	800b1f0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	e006      	b.n	800b1fe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1ef      	bne.n	800b1dc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	2400d720 	.word	0x2400d720

0800b210 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	4611      	mov	r1, r2
 800b21c:	461a      	mov	r2, r3
 800b21e:	460b      	mov	r3, r1
 800b220:	80fb      	strh	r3, [r7, #6]
 800b222:	4613      	mov	r3, r2
 800b224:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	88fa      	ldrh	r2, [r7, #6]
 800b236:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	88ba      	ldrh	r2, [r7, #4]
 800b23c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b23e:	8b3b      	ldrh	r3, [r7, #24]
 800b240:	b2da      	uxtb	r2, r3
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	7f3a      	ldrb	r2, [r7, #28]
 800b24a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2201      	movs	r2, #1
 800b250:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2200      	movs	r2, #0
 800b256:	73da      	strb	r2, [r3, #15]
}
 800b258:	bf00      	nop
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b08c      	sub	sp, #48	; 0x30
 800b268:	af02      	add	r7, sp, #8
 800b26a:	4603      	mov	r3, r0
 800b26c:	71fb      	strb	r3, [r7, #7]
 800b26e:	460b      	mov	r3, r1
 800b270:	80bb      	strh	r3, [r7, #4]
 800b272:	4613      	mov	r3, r2
 800b274:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b276:	79fb      	ldrb	r3, [r7, #7]
 800b278:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b27a:	887b      	ldrh	r3, [r7, #2]
 800b27c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b280:	d07d      	beq.n	800b37e <pbuf_alloc+0x11a>
 800b282:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b286:	f300 80c6 	bgt.w	800b416 <pbuf_alloc+0x1b2>
 800b28a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b28e:	d010      	beq.n	800b2b2 <pbuf_alloc+0x4e>
 800b290:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b294:	f300 80bf 	bgt.w	800b416 <pbuf_alloc+0x1b2>
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d002      	beq.n	800b2a2 <pbuf_alloc+0x3e>
 800b29c:	2b41      	cmp	r3, #65	; 0x41
 800b29e:	f040 80ba 	bne.w	800b416 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b2a2:	887a      	ldrh	r2, [r7, #2]
 800b2a4:	88bb      	ldrh	r3, [r7, #4]
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	f000 f8cf 	bl	800b44c <pbuf_alloc_reference>
 800b2ae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b2b0:	e0bb      	b.n	800b42a <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b2ba:	88bb      	ldrh	r3, [r7, #4]
 800b2bc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b2be:	2009      	movs	r0, #9
 800b2c0:	f7ff fbf8 	bl	800aab4 <memp_malloc>
 800b2c4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d107      	bne.n	800b2dc <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d002      	beq.n	800b2d8 <pbuf_alloc+0x74>
            pbuf_free(p);
 800b2d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2d4:	f000 faa8 	bl	800b828 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	e0a7      	b.n	800b42c <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b2dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2de:	3303      	adds	r3, #3
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	f023 0303 	bic.w	r3, r3, #3
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	8b7a      	ldrh	r2, [r7, #26]
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	bf28      	it	cs
 800b2f4:	4613      	movcs	r3, r2
 800b2f6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b2f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2fa:	3310      	adds	r3, #16
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	4413      	add	r3, r2
 800b300:	3303      	adds	r3, #3
 800b302:	f023 0303 	bic.w	r3, r3, #3
 800b306:	4618      	mov	r0, r3
 800b308:	89f9      	ldrh	r1, [r7, #14]
 800b30a:	8b7a      	ldrh	r2, [r7, #26]
 800b30c:	2300      	movs	r3, #0
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	887b      	ldrh	r3, [r7, #2]
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	460b      	mov	r3, r1
 800b316:	4601      	mov	r1, r0
 800b318:	6938      	ldr	r0, [r7, #16]
 800b31a:	f7ff ff79 	bl	800b210 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f003 0303 	and.w	r3, r3, #3
 800b326:	2b00      	cmp	r3, #0
 800b328:	d006      	beq.n	800b338 <pbuf_alloc+0xd4>
 800b32a:	4b42      	ldr	r3, [pc, #264]	; (800b434 <pbuf_alloc+0x1d0>)
 800b32c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b330:	4941      	ldr	r1, [pc, #260]	; (800b438 <pbuf_alloc+0x1d4>)
 800b332:	4842      	ldr	r0, [pc, #264]	; (800b43c <pbuf_alloc+0x1d8>)
 800b334:	f004 f94e 	bl	800f5d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b338:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b33a:	3303      	adds	r3, #3
 800b33c:	f023 0303 	bic.w	r3, r3, #3
 800b340:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b344:	d106      	bne.n	800b354 <pbuf_alloc+0xf0>
 800b346:	4b3b      	ldr	r3, [pc, #236]	; (800b434 <pbuf_alloc+0x1d0>)
 800b348:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b34c:	493c      	ldr	r1, [pc, #240]	; (800b440 <pbuf_alloc+0x1dc>)
 800b34e:	483b      	ldr	r0, [pc, #236]	; (800b43c <pbuf_alloc+0x1d8>)
 800b350:	f004 f940 	bl	800f5d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b356:	2b00      	cmp	r3, #0
 800b358:	d102      	bne.n	800b360 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	627b      	str	r3, [r7, #36]	; 0x24
 800b35e:	e002      	b.n	800b366 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b36a:	8b7a      	ldrh	r2, [r7, #26]
 800b36c:	89fb      	ldrh	r3, [r7, #14]
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b376:	8b7b      	ldrh	r3, [r7, #26]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1a0      	bne.n	800b2be <pbuf_alloc+0x5a>
      break;
 800b37c:	e055      	b.n	800b42a <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b37e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b380:	3303      	adds	r3, #3
 800b382:	b29b      	uxth	r3, r3
 800b384:	f023 0303 	bic.w	r3, r3, #3
 800b388:	b29a      	uxth	r2, r3
 800b38a:	88bb      	ldrh	r3, [r7, #4]
 800b38c:	3303      	adds	r3, #3
 800b38e:	b29b      	uxth	r3, r3
 800b390:	f023 0303 	bic.w	r3, r3, #3
 800b394:	b29b      	uxth	r3, r3
 800b396:	4413      	add	r3, r2
 800b398:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b39a:	8b3b      	ldrh	r3, [r7, #24]
 800b39c:	3310      	adds	r3, #16
 800b39e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b3a0:	8b3a      	ldrh	r2, [r7, #24]
 800b3a2:	88bb      	ldrh	r3, [r7, #4]
 800b3a4:	3303      	adds	r3, #3
 800b3a6:	f023 0303 	bic.w	r3, r3, #3
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d306      	bcc.n	800b3bc <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b3ae:	8afa      	ldrh	r2, [r7, #22]
 800b3b0:	88bb      	ldrh	r3, [r7, #4]
 800b3b2:	3303      	adds	r3, #3
 800b3b4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d201      	bcs.n	800b3c0 <pbuf_alloc+0x15c>
        return NULL;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	e035      	b.n	800b42c <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b3c0:	8afb      	ldrh	r3, [r7, #22]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7ff f9ce 	bl	800a764 <mem_malloc>
 800b3c8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <pbuf_alloc+0x170>
        return NULL;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	e02b      	b.n	800b42c <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b3d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3d6:	3310      	adds	r3, #16
 800b3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3da:	4413      	add	r3, r2
 800b3dc:	3303      	adds	r3, #3
 800b3de:	f023 0303 	bic.w	r3, r3, #3
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	88b9      	ldrh	r1, [r7, #4]
 800b3e6:	88ba      	ldrh	r2, [r7, #4]
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	9301      	str	r3, [sp, #4]
 800b3ec:	887b      	ldrh	r3, [r7, #2]
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3f6:	f7ff ff0b 	bl	800b210 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	f003 0303 	and.w	r3, r3, #3
 800b402:	2b00      	cmp	r3, #0
 800b404:	d010      	beq.n	800b428 <pbuf_alloc+0x1c4>
 800b406:	4b0b      	ldr	r3, [pc, #44]	; (800b434 <pbuf_alloc+0x1d0>)
 800b408:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b40c:	490d      	ldr	r1, [pc, #52]	; (800b444 <pbuf_alloc+0x1e0>)
 800b40e:	480b      	ldr	r0, [pc, #44]	; (800b43c <pbuf_alloc+0x1d8>)
 800b410:	f004 f8e0 	bl	800f5d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b414:	e008      	b.n	800b428 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b416:	4b07      	ldr	r3, [pc, #28]	; (800b434 <pbuf_alloc+0x1d0>)
 800b418:	f240 1227 	movw	r2, #295	; 0x127
 800b41c:	490a      	ldr	r1, [pc, #40]	; (800b448 <pbuf_alloc+0x1e4>)
 800b41e:	4807      	ldr	r0, [pc, #28]	; (800b43c <pbuf_alloc+0x1d8>)
 800b420:	f004 f8d8 	bl	800f5d4 <iprintf>
      return NULL;
 800b424:	2300      	movs	r3, #0
 800b426:	e001      	b.n	800b42c <pbuf_alloc+0x1c8>
      break;
 800b428:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3728      	adds	r7, #40	; 0x28
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	08011420 	.word	0x08011420
 800b438:	08011450 	.word	0x08011450
 800b43c:	08011480 	.word	0x08011480
 800b440:	080114a8 	.word	0x080114a8
 800b444:	080114dc 	.word	0x080114dc
 800b448:	08011508 	.word	0x08011508

0800b44c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b086      	sub	sp, #24
 800b450:	af02      	add	r7, sp, #8
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	460b      	mov	r3, r1
 800b456:	807b      	strh	r3, [r7, #2]
 800b458:	4613      	mov	r3, r2
 800b45a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b45c:	883b      	ldrh	r3, [r7, #0]
 800b45e:	2b41      	cmp	r3, #65	; 0x41
 800b460:	d009      	beq.n	800b476 <pbuf_alloc_reference+0x2a>
 800b462:	883b      	ldrh	r3, [r7, #0]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d006      	beq.n	800b476 <pbuf_alloc_reference+0x2a>
 800b468:	4b0f      	ldr	r3, [pc, #60]	; (800b4a8 <pbuf_alloc_reference+0x5c>)
 800b46a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b46e:	490f      	ldr	r1, [pc, #60]	; (800b4ac <pbuf_alloc_reference+0x60>)
 800b470:	480f      	ldr	r0, [pc, #60]	; (800b4b0 <pbuf_alloc_reference+0x64>)
 800b472:	f004 f8af 	bl	800f5d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b476:	2008      	movs	r0, #8
 800b478:	f7ff fb1c 	bl	800aab4 <memp_malloc>
 800b47c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b484:	2300      	movs	r3, #0
 800b486:	e00b      	b.n	800b4a0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b488:	8879      	ldrh	r1, [r7, #2]
 800b48a:	887a      	ldrh	r2, [r7, #2]
 800b48c:	2300      	movs	r3, #0
 800b48e:	9301      	str	r3, [sp, #4]
 800b490:	883b      	ldrh	r3, [r7, #0]
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	460b      	mov	r3, r1
 800b496:	6879      	ldr	r1, [r7, #4]
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f7ff feb9 	bl	800b210 <pbuf_init_alloced_pbuf>
  return p;
 800b49e:	68fb      	ldr	r3, [r7, #12]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	08011420 	.word	0x08011420
 800b4ac:	08011524 	.word	0x08011524
 800b4b0:	08011480 	.word	0x08011480

0800b4b4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af02      	add	r7, sp, #8
 800b4ba:	607b      	str	r3, [r7, #4]
 800b4bc:	4603      	mov	r3, r0
 800b4be:	73fb      	strb	r3, [r7, #15]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	81bb      	strh	r3, [r7, #12]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b4cc:	8a7b      	ldrh	r3, [r7, #18]
 800b4ce:	3303      	adds	r3, #3
 800b4d0:	f023 0203 	bic.w	r2, r3, #3
 800b4d4:	89bb      	ldrh	r3, [r7, #12]
 800b4d6:	441a      	add	r2, r3
 800b4d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d901      	bls.n	800b4e2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e018      	b.n	800b514 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d007      	beq.n	800b4f8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b4e8:	8a7b      	ldrh	r3, [r7, #18]
 800b4ea:	3303      	adds	r3, #3
 800b4ec:	f023 0303 	bic.w	r3, r3, #3
 800b4f0:	6a3a      	ldr	r2, [r7, #32]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	617b      	str	r3, [r7, #20]
 800b4f6:	e001      	b.n	800b4fc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	89b9      	ldrh	r1, [r7, #12]
 800b500:	89ba      	ldrh	r2, [r7, #12]
 800b502:	2302      	movs	r3, #2
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	897b      	ldrh	r3, [r7, #10]
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	460b      	mov	r3, r1
 800b50c:	6979      	ldr	r1, [r7, #20]
 800b50e:	f7ff fe7f 	bl	800b210 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b512:	687b      	ldr	r3, [r7, #4]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3718      	adds	r7, #24
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d106      	bne.n	800b53c <pbuf_realloc+0x20>
 800b52e:	4b3a      	ldr	r3, [pc, #232]	; (800b618 <pbuf_realloc+0xfc>)
 800b530:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b534:	4939      	ldr	r1, [pc, #228]	; (800b61c <pbuf_realloc+0x100>)
 800b536:	483a      	ldr	r0, [pc, #232]	; (800b620 <pbuf_realloc+0x104>)
 800b538:	f004 f84c 	bl	800f5d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	891b      	ldrh	r3, [r3, #8]
 800b540:	887a      	ldrh	r2, [r7, #2]
 800b542:	429a      	cmp	r2, r3
 800b544:	d263      	bcs.n	800b60e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	891a      	ldrh	r2, [r3, #8]
 800b54a:	887b      	ldrh	r3, [r7, #2]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b550:	887b      	ldrh	r3, [r7, #2]
 800b552:	817b      	strh	r3, [r7, #10]
  q = p;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b558:	e018      	b.n	800b58c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	895b      	ldrh	r3, [r3, #10]
 800b55e:	897a      	ldrh	r2, [r7, #10]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	891a      	ldrh	r2, [r3, #8]
 800b568:	893b      	ldrh	r3, [r7, #8]
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <pbuf_realloc+0x70>
 800b57e:	4b26      	ldr	r3, [pc, #152]	; (800b618 <pbuf_realloc+0xfc>)
 800b580:	f240 12af 	movw	r2, #431	; 0x1af
 800b584:	4927      	ldr	r1, [pc, #156]	; (800b624 <pbuf_realloc+0x108>)
 800b586:	4826      	ldr	r0, [pc, #152]	; (800b620 <pbuf_realloc+0x104>)
 800b588:	f004 f824 	bl	800f5d4 <iprintf>
  while (rem_len > q->len) {
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	895b      	ldrh	r3, [r3, #10]
 800b590:	897a      	ldrh	r2, [r7, #10]
 800b592:	429a      	cmp	r2, r3
 800b594:	d8e1      	bhi.n	800b55a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	7b1b      	ldrb	r3, [r3, #12]
 800b59a:	f003 030f 	and.w	r3, r3, #15
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d121      	bne.n	800b5e6 <pbuf_realloc+0xca>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	895b      	ldrh	r3, [r3, #10]
 800b5a6:	897a      	ldrh	r2, [r7, #10]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d01c      	beq.n	800b5e6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	7b5b      	ldrb	r3, [r3, #13]
 800b5b0:	f003 0302 	and.w	r3, r3, #2
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d116      	bne.n	800b5e6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	897b      	ldrh	r3, [r7, #10]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f7fe ffba 	bl	800a544 <mem_trim>
 800b5d0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d106      	bne.n	800b5e6 <pbuf_realloc+0xca>
 800b5d8:	4b0f      	ldr	r3, [pc, #60]	; (800b618 <pbuf_realloc+0xfc>)
 800b5da:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b5de:	4912      	ldr	r1, [pc, #72]	; (800b628 <pbuf_realloc+0x10c>)
 800b5e0:	480f      	ldr	r0, [pc, #60]	; (800b620 <pbuf_realloc+0x104>)
 800b5e2:	f003 fff7 	bl	800f5d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	897a      	ldrh	r2, [r7, #10]
 800b5ea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	895a      	ldrh	r2, [r3, #10]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d004      	beq.n	800b606 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4618      	mov	r0, r3
 800b602:	f000 f911 	bl	800b828 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	601a      	str	r2, [r3, #0]
 800b60c:	e000      	b.n	800b610 <pbuf_realloc+0xf4>
    return;
 800b60e:	bf00      	nop

}
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	08011420 	.word	0x08011420
 800b61c:	08011538 	.word	0x08011538
 800b620:	08011480 	.word	0x08011480
 800b624:	08011550 	.word	0x08011550
 800b628:	08011568 	.word	0x08011568

0800b62c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	4613      	mov	r3, r2
 800b638:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d106      	bne.n	800b64e <pbuf_add_header_impl+0x22>
 800b640:	4b2b      	ldr	r3, [pc, #172]	; (800b6f0 <pbuf_add_header_impl+0xc4>)
 800b642:	f240 12df 	movw	r2, #479	; 0x1df
 800b646:	492b      	ldr	r1, [pc, #172]	; (800b6f4 <pbuf_add_header_impl+0xc8>)
 800b648:	482b      	ldr	r0, [pc, #172]	; (800b6f8 <pbuf_add_header_impl+0xcc>)
 800b64a:	f003 ffc3 	bl	800f5d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d003      	beq.n	800b65c <pbuf_add_header_impl+0x30>
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b65a:	d301      	bcc.n	800b660 <pbuf_add_header_impl+0x34>
    return 1;
 800b65c:	2301      	movs	r3, #1
 800b65e:	e043      	b.n	800b6e8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d101      	bne.n	800b66a <pbuf_add_header_impl+0x3e>
    return 0;
 800b666:	2300      	movs	r3, #0
 800b668:	e03e      	b.n	800b6e8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	891a      	ldrh	r2, [r3, #8]
 800b672:	8a7b      	ldrh	r3, [r7, #18]
 800b674:	4413      	add	r3, r2
 800b676:	b29b      	uxth	r3, r3
 800b678:	8a7a      	ldrh	r2, [r7, #18]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d901      	bls.n	800b682 <pbuf_add_header_impl+0x56>
    return 1;
 800b67e:	2301      	movs	r3, #1
 800b680:	e032      	b.n	800b6e8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	7b1b      	ldrb	r3, [r3, #12]
 800b686:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b688:	8a3b      	ldrh	r3, [r7, #16]
 800b68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00c      	beq.n	800b6ac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	425b      	negs	r3, r3
 800b69a:	4413      	add	r3, r2
 800b69c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3310      	adds	r3, #16
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d20d      	bcs.n	800b6c4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e01d      	b.n	800b6e8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b6ac:	79fb      	ldrb	r3, [r7, #7]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d006      	beq.n	800b6c0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	685a      	ldr	r2, [r3, #4]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	425b      	negs	r3, r3
 800b6ba:	4413      	add	r3, r2
 800b6bc:	617b      	str	r3, [r7, #20]
 800b6be:	e001      	b.n	800b6c4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e011      	b.n	800b6e8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	895a      	ldrh	r2, [r3, #10]
 800b6ce:	8a7b      	ldrh	r3, [r7, #18]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	891a      	ldrh	r2, [r3, #8]
 800b6dc:	8a7b      	ldrh	r3, [r7, #18]
 800b6de:	4413      	add	r3, r2
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	811a      	strh	r2, [r3, #8]


  return 0;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3718      	adds	r7, #24
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	08011420 	.word	0x08011420
 800b6f4:	08011584 	.word	0x08011584
 800b6f8:	08011480 	.word	0x08011480

0800b6fc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b706:	2200      	movs	r2, #0
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff ff8e 	bl	800b62c <pbuf_add_header_impl>
 800b710:	4603      	mov	r3, r0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
	...

0800b71c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d106      	bne.n	800b73a <pbuf_remove_header+0x1e>
 800b72c:	4b20      	ldr	r3, [pc, #128]	; (800b7b0 <pbuf_remove_header+0x94>)
 800b72e:	f240 224b 	movw	r2, #587	; 0x24b
 800b732:	4920      	ldr	r1, [pc, #128]	; (800b7b4 <pbuf_remove_header+0x98>)
 800b734:	4820      	ldr	r0, [pc, #128]	; (800b7b8 <pbuf_remove_header+0x9c>)
 800b736:	f003 ff4d 	bl	800f5d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d003      	beq.n	800b748 <pbuf_remove_header+0x2c>
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b746:	d301      	bcc.n	800b74c <pbuf_remove_header+0x30>
    return 1;
 800b748:	2301      	movs	r3, #1
 800b74a:	e02c      	b.n	800b7a6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d101      	bne.n	800b756 <pbuf_remove_header+0x3a>
    return 0;
 800b752:	2300      	movs	r3, #0
 800b754:	e027      	b.n	800b7a6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	895b      	ldrh	r3, [r3, #10]
 800b75e:	89fa      	ldrh	r2, [r7, #14]
 800b760:	429a      	cmp	r2, r3
 800b762:	d908      	bls.n	800b776 <pbuf_remove_header+0x5a>
 800b764:	4b12      	ldr	r3, [pc, #72]	; (800b7b0 <pbuf_remove_header+0x94>)
 800b766:	f240 2255 	movw	r2, #597	; 0x255
 800b76a:	4914      	ldr	r1, [pc, #80]	; (800b7bc <pbuf_remove_header+0xa0>)
 800b76c:	4812      	ldr	r0, [pc, #72]	; (800b7b8 <pbuf_remove_header+0x9c>)
 800b76e:	f003 ff31 	bl	800f5d4 <iprintf>
 800b772:	2301      	movs	r3, #1
 800b774:	e017      	b.n	800b7a6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	441a      	add	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	895a      	ldrh	r2, [r3, #10]
 800b78c:	89fb      	ldrh	r3, [r7, #14]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	b29a      	uxth	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	891a      	ldrh	r2, [r3, #8]
 800b79a:	89fb      	ldrh	r3, [r7, #14]
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	b29a      	uxth	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	08011420 	.word	0x08011420
 800b7b4:	08011584 	.word	0x08011584
 800b7b8:	08011480 	.word	0x08011480
 800b7bc:	08011590 	.word	0x08011590

0800b7c0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	807b      	strh	r3, [r7, #2]
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b7d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	da08      	bge.n	800b7ea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b7d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7dc:	425b      	negs	r3, r3
 800b7de:	4619      	mov	r1, r3
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff ff9b 	bl	800b71c <pbuf_remove_header>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	e007      	b.n	800b7fa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b7ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7ee:	787a      	ldrb	r2, [r7, #1]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff ff1a 	bl	800b62c <pbuf_add_header_impl>
 800b7f8:	4603      	mov	r3, r0
  }
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b082      	sub	sp, #8
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	460b      	mov	r3, r1
 800b80c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b80e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b812:	2201      	movs	r2, #1
 800b814:	4619      	mov	r1, r3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff ffd2 	bl	800b7c0 <pbuf_header_impl>
 800b81c:	4603      	mov	r3, r0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
	...

0800b828 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10b      	bne.n	800b84e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d106      	bne.n	800b84a <pbuf_free+0x22>
 800b83c:	4b3b      	ldr	r3, [pc, #236]	; (800b92c <pbuf_free+0x104>)
 800b83e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b842:	493b      	ldr	r1, [pc, #236]	; (800b930 <pbuf_free+0x108>)
 800b844:	483b      	ldr	r0, [pc, #236]	; (800b934 <pbuf_free+0x10c>)
 800b846:	f003 fec5 	bl	800f5d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	e069      	b.n	800b922 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b852:	e062      	b.n	800b91a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b854:	f003 fda0 	bl	800f398 <sys_arch_protect>
 800b858:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	7b9b      	ldrb	r3, [r3, #14]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d106      	bne.n	800b870 <pbuf_free+0x48>
 800b862:	4b32      	ldr	r3, [pc, #200]	; (800b92c <pbuf_free+0x104>)
 800b864:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b868:	4933      	ldr	r1, [pc, #204]	; (800b938 <pbuf_free+0x110>)
 800b86a:	4832      	ldr	r0, [pc, #200]	; (800b934 <pbuf_free+0x10c>)
 800b86c:	f003 feb2 	bl	800f5d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	7b9b      	ldrb	r3, [r3, #14]
 800b874:	3b01      	subs	r3, #1
 800b876:	b2da      	uxtb	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	739a      	strb	r2, [r3, #14]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	7b9b      	ldrb	r3, [r3, #14]
 800b880:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b882:	69b8      	ldr	r0, [r7, #24]
 800b884:	f003 fd96 	bl	800f3b4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d143      	bne.n	800b916 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	7b1b      	ldrb	r3, [r3, #12]
 800b898:	f003 030f 	and.w	r3, r3, #15
 800b89c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	7b5b      	ldrb	r3, [r3, #13]
 800b8a2:	f003 0302 	and.w	r3, r3, #2
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d011      	beq.n	800b8ce <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d106      	bne.n	800b8c4 <pbuf_free+0x9c>
 800b8b6:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <pbuf_free+0x104>)
 800b8b8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b8bc:	491f      	ldr	r1, [pc, #124]	; (800b93c <pbuf_free+0x114>)
 800b8be:	481d      	ldr	r0, [pc, #116]	; (800b934 <pbuf_free+0x10c>)
 800b8c0:	f003 fe88 	bl	800f5d4 <iprintf>
        pc->custom_free_function(p);
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	691b      	ldr	r3, [r3, #16]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	4798      	blx	r3
 800b8cc:	e01d      	b.n	800b90a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d104      	bne.n	800b8de <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b8d4:	6879      	ldr	r1, [r7, #4]
 800b8d6:	2009      	movs	r0, #9
 800b8d8:	f7ff f962 	bl	800aba0 <memp_free>
 800b8dc:	e015      	b.n	800b90a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d104      	bne.n	800b8ee <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b8e4:	6879      	ldr	r1, [r7, #4]
 800b8e6:	2008      	movs	r0, #8
 800b8e8:	f7ff f95a 	bl	800aba0 <memp_free>
 800b8ec:	e00d      	b.n	800b90a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b8ee:	7bfb      	ldrb	r3, [r7, #15]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d103      	bne.n	800b8fc <pbuf_free+0xd4>
          mem_free(p);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7fe fd95 	bl	800a424 <mem_free>
 800b8fa:	e006      	b.n	800b90a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b8fc:	4b0b      	ldr	r3, [pc, #44]	; (800b92c <pbuf_free+0x104>)
 800b8fe:	f240 320f 	movw	r2, #783	; 0x30f
 800b902:	490f      	ldr	r1, [pc, #60]	; (800b940 <pbuf_free+0x118>)
 800b904:	480b      	ldr	r0, [pc, #44]	; (800b934 <pbuf_free+0x10c>)
 800b906:	f003 fe65 	bl	800f5d4 <iprintf>
        }
      }
      count++;
 800b90a:	7ffb      	ldrb	r3, [r7, #31]
 800b90c:	3301      	adds	r3, #1
 800b90e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	607b      	str	r3, [r7, #4]
 800b914:	e001      	b.n	800b91a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b916:	2300      	movs	r3, #0
 800b918:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d199      	bne.n	800b854 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b920:	7ffb      	ldrb	r3, [r7, #31]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3720      	adds	r7, #32
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	08011420 	.word	0x08011420
 800b930:	08011584 	.word	0x08011584
 800b934:	08011480 	.word	0x08011480
 800b938:	080115b0 	.word	0x080115b0
 800b93c:	080115c8 	.word	0x080115c8
 800b940:	080115ec 	.word	0x080115ec

0800b944 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b950:	e005      	b.n	800b95e <pbuf_clen+0x1a>
    ++len;
 800b952:	89fb      	ldrh	r3, [r7, #14]
 800b954:	3301      	adds	r3, #1
 800b956:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1f6      	bne.n	800b952 <pbuf_clen+0xe>
  }
  return len;
 800b964:	89fb      	ldrh	r3, [r7, #14]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
	...

0800b974 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d016      	beq.n	800b9b0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b982:	f003 fd09 	bl	800f398 <sys_arch_protect>
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	7b9b      	ldrb	r3, [r3, #14]
 800b98c:	3301      	adds	r3, #1
 800b98e:	b2da      	uxtb	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	739a      	strb	r2, [r3, #14]
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f003 fd0d 	bl	800f3b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	7b9b      	ldrb	r3, [r3, #14]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d106      	bne.n	800b9b0 <pbuf_ref+0x3c>
 800b9a2:	4b05      	ldr	r3, [pc, #20]	; (800b9b8 <pbuf_ref+0x44>)
 800b9a4:	f240 3242 	movw	r2, #834	; 0x342
 800b9a8:	4904      	ldr	r1, [pc, #16]	; (800b9bc <pbuf_ref+0x48>)
 800b9aa:	4805      	ldr	r0, [pc, #20]	; (800b9c0 <pbuf_ref+0x4c>)
 800b9ac:	f003 fe12 	bl	800f5d4 <iprintf>
  }
}
 800b9b0:	bf00      	nop
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	08011420 	.word	0x08011420
 800b9bc:	08011600 	.word	0x08011600
 800b9c0:	08011480 	.word	0x08011480

0800b9c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <pbuf_cat+0x16>
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d107      	bne.n	800b9ea <pbuf_cat+0x26>
 800b9da:	4b20      	ldr	r3, [pc, #128]	; (800ba5c <pbuf_cat+0x98>)
 800b9dc:	f240 3259 	movw	r2, #857	; 0x359
 800b9e0:	491f      	ldr	r1, [pc, #124]	; (800ba60 <pbuf_cat+0x9c>)
 800b9e2:	4820      	ldr	r0, [pc, #128]	; (800ba64 <pbuf_cat+0xa0>)
 800b9e4:	f003 fdf6 	bl	800f5d4 <iprintf>
 800b9e8:	e034      	b.n	800ba54 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	60fb      	str	r3, [r7, #12]
 800b9ee:	e00a      	b.n	800ba06 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	891a      	ldrh	r2, [r3, #8]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	891b      	ldrh	r3, [r3, #8]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	60fb      	str	r3, [r7, #12]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1f0      	bne.n	800b9f0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	891a      	ldrh	r2, [r3, #8]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	895b      	ldrh	r3, [r3, #10]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d006      	beq.n	800ba28 <pbuf_cat+0x64>
 800ba1a:	4b10      	ldr	r3, [pc, #64]	; (800ba5c <pbuf_cat+0x98>)
 800ba1c:	f240 3262 	movw	r2, #866	; 0x362
 800ba20:	4911      	ldr	r1, [pc, #68]	; (800ba68 <pbuf_cat+0xa4>)
 800ba22:	4810      	ldr	r0, [pc, #64]	; (800ba64 <pbuf_cat+0xa0>)
 800ba24:	f003 fdd6 	bl	800f5d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d006      	beq.n	800ba3e <pbuf_cat+0x7a>
 800ba30:	4b0a      	ldr	r3, [pc, #40]	; (800ba5c <pbuf_cat+0x98>)
 800ba32:	f240 3263 	movw	r2, #867	; 0x363
 800ba36:	490d      	ldr	r1, [pc, #52]	; (800ba6c <pbuf_cat+0xa8>)
 800ba38:	480a      	ldr	r0, [pc, #40]	; (800ba64 <pbuf_cat+0xa0>)
 800ba3a:	f003 fdcb 	bl	800f5d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	891a      	ldrh	r2, [r3, #8]
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	891b      	ldrh	r3, [r3, #8]
 800ba46:	4413      	add	r3, r2
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	683a      	ldr	r2, [r7, #0]
 800ba52:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	08011420 	.word	0x08011420
 800ba60:	08011614 	.word	0x08011614
 800ba64:	08011480 	.word	0x08011480
 800ba68:	0801164c 	.word	0x0801164c
 800ba6c:	0801167c 	.word	0x0801167c

0800ba70 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7ff ffa1 	bl	800b9c4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ba82:	6838      	ldr	r0, [r7, #0]
 800ba84:	f7ff ff76 	bl	800b974 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	617b      	str	r3, [r7, #20]
 800ba9e:	2300      	movs	r3, #0
 800baa0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d008      	beq.n	800baba <pbuf_copy+0x2a>
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d005      	beq.n	800baba <pbuf_copy+0x2a>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	891a      	ldrh	r2, [r3, #8]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	891b      	ldrh	r3, [r3, #8]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d209      	bcs.n	800bace <pbuf_copy+0x3e>
 800baba:	4b57      	ldr	r3, [pc, #348]	; (800bc18 <pbuf_copy+0x188>)
 800babc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bac0:	4956      	ldr	r1, [pc, #344]	; (800bc1c <pbuf_copy+0x18c>)
 800bac2:	4857      	ldr	r0, [pc, #348]	; (800bc20 <pbuf_copy+0x190>)
 800bac4:	f003 fd86 	bl	800f5d4 <iprintf>
 800bac8:	f06f 030f 	mvn.w	r3, #15
 800bacc:	e09f      	b.n	800bc0e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	895b      	ldrh	r3, [r3, #10]
 800bad2:	461a      	mov	r2, r3
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	1ad2      	subs	r2, r2, r3
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	895b      	ldrh	r3, [r3, #10]
 800badc:	4619      	mov	r1, r3
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	1acb      	subs	r3, r1, r3
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d306      	bcc.n	800baf4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	895b      	ldrh	r3, [r3, #10]
 800baea:	461a      	mov	r2, r3
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	1ad3      	subs	r3, r2, r3
 800baf0:	60fb      	str	r3, [r7, #12]
 800baf2:	e005      	b.n	800bb00 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	895b      	ldrh	r3, [r3, #10]
 800baf8:	461a      	mov	r2, r3
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685a      	ldr	r2, [r3, #4]
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	18d0      	adds	r0, r2, r3
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	685a      	ldr	r2, [r3, #4]
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	4413      	add	r3, r2
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	4619      	mov	r1, r3
 800bb14:	f003 fed1 	bl	800f8ba <memcpy>
    offset_to += len;
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bb20:	693a      	ldr	r2, [r7, #16]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	4413      	add	r3, r2
 800bb26:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	895b      	ldrh	r3, [r3, #10]
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d906      	bls.n	800bb42 <pbuf_copy+0xb2>
 800bb34:	4b38      	ldr	r3, [pc, #224]	; (800bc18 <pbuf_copy+0x188>)
 800bb36:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bb3a:	493a      	ldr	r1, [pc, #232]	; (800bc24 <pbuf_copy+0x194>)
 800bb3c:	4838      	ldr	r0, [pc, #224]	; (800bc20 <pbuf_copy+0x190>)
 800bb3e:	f003 fd49 	bl	800f5d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	895b      	ldrh	r3, [r3, #10]
 800bb46:	461a      	mov	r2, r3
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d906      	bls.n	800bb5c <pbuf_copy+0xcc>
 800bb4e:	4b32      	ldr	r3, [pc, #200]	; (800bc18 <pbuf_copy+0x188>)
 800bb50:	f240 32da 	movw	r2, #986	; 0x3da
 800bb54:	4934      	ldr	r1, [pc, #208]	; (800bc28 <pbuf_copy+0x198>)
 800bb56:	4832      	ldr	r0, [pc, #200]	; (800bc20 <pbuf_copy+0x190>)
 800bb58:	f003 fd3c 	bl	800f5d4 <iprintf>
    if (offset_from >= p_from->len) {
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	895b      	ldrh	r3, [r3, #10]
 800bb60:	461a      	mov	r2, r3
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d304      	bcc.n	800bb72 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	895b      	ldrh	r3, [r3, #10]
 800bb76:	461a      	mov	r2, r3
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d114      	bne.n	800bba8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d10c      	bne.n	800bba8 <pbuf_copy+0x118>
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d009      	beq.n	800bba8 <pbuf_copy+0x118>
 800bb94:	4b20      	ldr	r3, [pc, #128]	; (800bc18 <pbuf_copy+0x188>)
 800bb96:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bb9a:	4924      	ldr	r1, [pc, #144]	; (800bc2c <pbuf_copy+0x19c>)
 800bb9c:	4820      	ldr	r0, [pc, #128]	; (800bc20 <pbuf_copy+0x190>)
 800bb9e:	f003 fd19 	bl	800f5d4 <iprintf>
 800bba2:	f06f 030f 	mvn.w	r3, #15
 800bba6:	e032      	b.n	800bc0e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d013      	beq.n	800bbd6 <pbuf_copy+0x146>
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	895a      	ldrh	r2, [r3, #10]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	891b      	ldrh	r3, [r3, #8]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d10d      	bne.n	800bbd6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d009      	beq.n	800bbd6 <pbuf_copy+0x146>
 800bbc2:	4b15      	ldr	r3, [pc, #84]	; (800bc18 <pbuf_copy+0x188>)
 800bbc4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bbc8:	4919      	ldr	r1, [pc, #100]	; (800bc30 <pbuf_copy+0x1a0>)
 800bbca:	4815      	ldr	r0, [pc, #84]	; (800bc20 <pbuf_copy+0x190>)
 800bbcc:	f003 fd02 	bl	800f5d4 <iprintf>
 800bbd0:	f06f 0305 	mvn.w	r3, #5
 800bbd4:	e01b      	b.n	800bc0e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d013      	beq.n	800bc04 <pbuf_copy+0x174>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	895a      	ldrh	r2, [r3, #10]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	891b      	ldrh	r3, [r3, #8]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d10d      	bne.n	800bc04 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d009      	beq.n	800bc04 <pbuf_copy+0x174>
 800bbf0:	4b09      	ldr	r3, [pc, #36]	; (800bc18 <pbuf_copy+0x188>)
 800bbf2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bbf6:	490e      	ldr	r1, [pc, #56]	; (800bc30 <pbuf_copy+0x1a0>)
 800bbf8:	4809      	ldr	r0, [pc, #36]	; (800bc20 <pbuf_copy+0x190>)
 800bbfa:	f003 fceb 	bl	800f5d4 <iprintf>
 800bbfe:	f06f 0305 	mvn.w	r3, #5
 800bc02:	e004      	b.n	800bc0e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f47f af61 	bne.w	800bace <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bc0c:	2300      	movs	r3, #0
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	08011420 	.word	0x08011420
 800bc1c:	080116c8 	.word	0x080116c8
 800bc20:	08011480 	.word	0x08011480
 800bc24:	080116f8 	.word	0x080116f8
 800bc28:	08011710 	.word	0x08011710
 800bc2c:	0801172c 	.word	0x0801172c
 800bc30:	0801173c 	.word	0x0801173c

0800bc34 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b088      	sub	sp, #32
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800bc42:	88fb      	ldrh	r3, [r7, #6]
 800bc44:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d109      	bne.n	800bc64 <pbuf_take+0x30>
 800bc50:	4b3a      	ldr	r3, [pc, #232]	; (800bd3c <pbuf_take+0x108>)
 800bc52:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800bc56:	493a      	ldr	r1, [pc, #232]	; (800bd40 <pbuf_take+0x10c>)
 800bc58:	483a      	ldr	r0, [pc, #232]	; (800bd44 <pbuf_take+0x110>)
 800bc5a:	f003 fcbb 	bl	800f5d4 <iprintf>
 800bc5e:	f06f 030f 	mvn.w	r3, #15
 800bc62:	e067      	b.n	800bd34 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d109      	bne.n	800bc7e <pbuf_take+0x4a>
 800bc6a:	4b34      	ldr	r3, [pc, #208]	; (800bd3c <pbuf_take+0x108>)
 800bc6c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800bc70:	4935      	ldr	r1, [pc, #212]	; (800bd48 <pbuf_take+0x114>)
 800bc72:	4834      	ldr	r0, [pc, #208]	; (800bd44 <pbuf_take+0x110>)
 800bc74:	f003 fcae 	bl	800f5d4 <iprintf>
 800bc78:	f06f 030f 	mvn.w	r3, #15
 800bc7c:	e05a      	b.n	800bd34 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	891b      	ldrh	r3, [r3, #8]
 800bc82:	88fa      	ldrh	r2, [r7, #6]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d909      	bls.n	800bc9c <pbuf_take+0x68>
 800bc88:	4b2c      	ldr	r3, [pc, #176]	; (800bd3c <pbuf_take+0x108>)
 800bc8a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800bc8e:	492f      	ldr	r1, [pc, #188]	; (800bd4c <pbuf_take+0x118>)
 800bc90:	482c      	ldr	r0, [pc, #176]	; (800bd44 <pbuf_take+0x110>)
 800bc92:	f003 fc9f 	bl	800f5d4 <iprintf>
 800bc96:	f04f 33ff 	mov.w	r3, #4294967295
 800bc9a:	e04b      	b.n	800bd34 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d007      	beq.n	800bcb2 <pbuf_take+0x7e>
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d004      	beq.n	800bcb2 <pbuf_take+0x7e>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	891b      	ldrh	r3, [r3, #8]
 800bcac:	88fa      	ldrh	r2, [r7, #6]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d902      	bls.n	800bcb8 <pbuf_take+0x84>
    return ERR_ARG;
 800bcb2:	f06f 030f 	mvn.w	r3, #15
 800bcb6:	e03d      	b.n	800bd34 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	61fb      	str	r3, [r7, #28]
 800bcbc:	e028      	b.n	800bd10 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d106      	bne.n	800bcd2 <pbuf_take+0x9e>
 800bcc4:	4b1d      	ldr	r3, [pc, #116]	; (800bd3c <pbuf_take+0x108>)
 800bcc6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800bcca:	4921      	ldr	r1, [pc, #132]	; (800bd50 <pbuf_take+0x11c>)
 800bccc:	481d      	ldr	r0, [pc, #116]	; (800bd44 <pbuf_take+0x110>)
 800bcce:	f003 fc81 	bl	800f5d4 <iprintf>
    buf_copy_len = total_copy_len;
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	895b      	ldrh	r3, [r3, #10]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d902      	bls.n	800bce8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	895b      	ldrh	r3, [r3, #10]
 800bce6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	6858      	ldr	r0, [r3, #4]
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	69ba      	ldr	r2, [r7, #24]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	f003 fde0 	bl	800f8ba <memcpy>
    total_copy_len -= buf_copy_len;
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800bd02:	693a      	ldr	r2, [r7, #16]
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	4413      	add	r3, r2
 800bd08:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	61fb      	str	r3, [r7, #28]
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1d3      	bne.n	800bcbe <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d103      	bne.n	800bd24 <pbuf_take+0xf0>
 800bd1c:	88fb      	ldrh	r3, [r7, #6]
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d006      	beq.n	800bd32 <pbuf_take+0xfe>
 800bd24:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <pbuf_take+0x108>)
 800bd26:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800bd2a:	490a      	ldr	r1, [pc, #40]	; (800bd54 <pbuf_take+0x120>)
 800bd2c:	4805      	ldr	r0, [pc, #20]	; (800bd44 <pbuf_take+0x110>)
 800bd2e:	f003 fc51 	bl	800f5d4 <iprintf>
  return ERR_OK;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3720      	adds	r7, #32
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	08011420 	.word	0x08011420
 800bd40:	080117f8 	.word	0x080117f8
 800bd44:	08011480 	.word	0x08011480
 800bd48:	08011810 	.word	0x08011810
 800bd4c:	0801182c 	.word	0x0801182c
 800bd50:	0801184c 	.word	0x0801184c
 800bd54:	08011864 	.word	0x08011864

0800bd58 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	4603      	mov	r3, r0
 800bd60:	603a      	str	r2, [r7, #0]
 800bd62:	71fb      	strb	r3, [r7, #7]
 800bd64:	460b      	mov	r3, r1
 800bd66:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	8919      	ldrh	r1, [r3, #8]
 800bd6c:	88ba      	ldrh	r2, [r7, #4]
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff fa77 	bl	800b264 <pbuf_alloc>
 800bd76:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d101      	bne.n	800bd82 <pbuf_clone+0x2a>
    return NULL;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	e011      	b.n	800bda6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bd82:	6839      	ldr	r1, [r7, #0]
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f7ff fe83 	bl	800ba90 <pbuf_copy>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bd8e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d006      	beq.n	800bda4 <pbuf_clone+0x4c>
 800bd96:	4b06      	ldr	r3, [pc, #24]	; (800bdb0 <pbuf_clone+0x58>)
 800bd98:	f240 5224 	movw	r2, #1316	; 0x524
 800bd9c:	4905      	ldr	r1, [pc, #20]	; (800bdb4 <pbuf_clone+0x5c>)
 800bd9e:	4806      	ldr	r0, [pc, #24]	; (800bdb8 <pbuf_clone+0x60>)
 800bda0:	f003 fc18 	bl	800f5d4 <iprintf>
  return q;
 800bda4:	68fb      	ldr	r3, [r7, #12]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	08011420 	.word	0x08011420
 800bdb4:	08011894 	.word	0x08011894
 800bdb8:	08011480 	.word	0x08011480

0800bdbc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bdc8:	2007      	movs	r0, #7
 800bdca:	f7fe fe73 	bl	800aab4 <memp_malloc>
 800bdce:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d109      	bne.n	800bdea <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d151      	bne.n	800be80 <sys_timeout_abs+0xc4>
 800bddc:	4b2a      	ldr	r3, [pc, #168]	; (800be88 <sys_timeout_abs+0xcc>)
 800bdde:	22be      	movs	r2, #190	; 0xbe
 800bde0:	492a      	ldr	r1, [pc, #168]	; (800be8c <sys_timeout_abs+0xd0>)
 800bde2:	482b      	ldr	r0, [pc, #172]	; (800be90 <sys_timeout_abs+0xd4>)
 800bde4:	f003 fbf6 	bl	800f5d4 <iprintf>
    return;
 800bde8:	e04a      	b.n	800be80 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	2200      	movs	r2, #0
 800bdee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800be02:	4b24      	ldr	r3, [pc, #144]	; (800be94 <sys_timeout_abs+0xd8>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d103      	bne.n	800be12 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800be0a:	4a22      	ldr	r2, [pc, #136]	; (800be94 <sys_timeout_abs+0xd8>)
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	6013      	str	r3, [r2, #0]
    return;
 800be10:	e037      	b.n	800be82 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	4b1f      	ldr	r3, [pc, #124]	; (800be94 <sys_timeout_abs+0xd8>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	0fdb      	lsrs	r3, r3, #31
 800be20:	f003 0301 	and.w	r3, r3, #1
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b00      	cmp	r3, #0
 800be28:	d007      	beq.n	800be3a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800be2a:	4b1a      	ldr	r3, [pc, #104]	; (800be94 <sys_timeout_abs+0xd8>)
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800be32:	4a18      	ldr	r2, [pc, #96]	; (800be94 <sys_timeout_abs+0xd8>)
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	6013      	str	r3, [r2, #0]
 800be38:	e023      	b.n	800be82 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800be3a:	4b16      	ldr	r3, [pc, #88]	; (800be94 <sys_timeout_abs+0xd8>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	617b      	str	r3, [r7, #20]
 800be40:	e01a      	b.n	800be78 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00b      	beq.n	800be62 <sys_timeout_abs+0xa6>
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	0fdb      	lsrs	r3, r3, #31
 800be58:	f003 0301 	and.w	r3, r3, #1
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d007      	beq.n	800be72 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	601a      	str	r2, [r3, #0]
        break;
 800be70:	e007      	b.n	800be82 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	617b      	str	r3, [r7, #20]
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e1      	bne.n	800be42 <sys_timeout_abs+0x86>
 800be7e:	e000      	b.n	800be82 <sys_timeout_abs+0xc6>
    return;
 800be80:	bf00      	nop
      }
    }
  }
}
 800be82:	3718      	adds	r7, #24
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	080118a8 	.word	0x080118a8
 800be8c:	080118dc 	.word	0x080118dc
 800be90:	0801191c 	.word	0x0801191c
 800be94:	24005cb0 	.word	0x24005cb0

0800be98 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	4798      	blx	r3

  now = sys_now();
 800beaa:	f7f9 f859 	bl	8004f60 <sys_now>
 800beae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	4b0f      	ldr	r3, [pc, #60]	; (800bef4 <lwip_cyclic_timer+0x5c>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4413      	add	r3, r2
 800beba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	0fdb      	lsrs	r3, r3, #31
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d009      	beq.n	800bee2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	4413      	add	r3, r2
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	4907      	ldr	r1, [pc, #28]	; (800bef8 <lwip_cyclic_timer+0x60>)
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff ff6e 	bl	800bdbc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bee0:	e004      	b.n	800beec <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	4904      	ldr	r1, [pc, #16]	; (800bef8 <lwip_cyclic_timer+0x60>)
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f7ff ff68 	bl	800bdbc <sys_timeout_abs>
}
 800beec:	bf00      	nop
 800beee:	3718      	adds	r7, #24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	24005cb4 	.word	0x24005cb4
 800bef8:	0800be99 	.word	0x0800be99

0800befc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bf02:	2300      	movs	r3, #0
 800bf04:	607b      	str	r3, [r7, #4]
 800bf06:	e00e      	b.n	800bf26 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bf08:	4a0b      	ldr	r2, [pc, #44]	; (800bf38 <sys_timeouts_init+0x3c>)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	00db      	lsls	r3, r3, #3
 800bf14:	4a08      	ldr	r2, [pc, #32]	; (800bf38 <sys_timeouts_init+0x3c>)
 800bf16:	4413      	add	r3, r2
 800bf18:	461a      	mov	r2, r3
 800bf1a:	4908      	ldr	r1, [pc, #32]	; (800bf3c <sys_timeouts_init+0x40>)
 800bf1c:	f000 f810 	bl	800bf40 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	3301      	adds	r3, #1
 800bf24:	607b      	str	r3, [r7, #4]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d9ed      	bls.n	800bf08 <sys_timeouts_init+0xc>
  }
}
 800bf2c:	bf00      	nop
 800bf2e:	bf00      	nop
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	08012498 	.word	0x08012498
 800bf3c:	0800be99 	.word	0x0800be99

0800bf40 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf52:	d306      	bcc.n	800bf62 <sys_timeout+0x22>
 800bf54:	4b0a      	ldr	r3, [pc, #40]	; (800bf80 <sys_timeout+0x40>)
 800bf56:	f240 1229 	movw	r2, #297	; 0x129
 800bf5a:	490a      	ldr	r1, [pc, #40]	; (800bf84 <sys_timeout+0x44>)
 800bf5c:	480a      	ldr	r0, [pc, #40]	; (800bf88 <sys_timeout+0x48>)
 800bf5e:	f003 fb39 	bl	800f5d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bf62:	f7f8 fffd 	bl	8004f60 <sys_now>
 800bf66:	4602      	mov	r2, r0
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	68b9      	ldr	r1, [r7, #8]
 800bf72:	6978      	ldr	r0, [r7, #20]
 800bf74:	f7ff ff22 	bl	800bdbc <sys_timeout_abs>
#endif
}
 800bf78:	bf00      	nop
 800bf7a:	3718      	adds	r7, #24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	080118a8 	.word	0x080118a8
 800bf84:	08011944 	.word	0x08011944
 800bf88:	0801191c 	.word	0x0801191c

0800bf8c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bf92:	f7f8 ffe5 	bl	8004f60 <sys_now>
 800bf96:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800bf98:	4b17      	ldr	r3, [pc, #92]	; (800bff8 <sys_check_timeouts+0x6c>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d022      	beq.n	800bfea <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	0fdb      	lsrs	r3, r3, #31
 800bfae:	f003 0301 	and.w	r3, r3, #1
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d11a      	bne.n	800bfee <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a0e      	ldr	r2, [pc, #56]	; (800bff8 <sys_check_timeouts+0x6c>)
 800bfbe:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	4a0a      	ldr	r2, [pc, #40]	; (800bffc <sys_check_timeouts+0x70>)
 800bfd2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bfd4:	68b9      	ldr	r1, [r7, #8]
 800bfd6:	2007      	movs	r0, #7
 800bfd8:	f7fe fde2 	bl	800aba0 <memp_free>
    if (handler != NULL) {
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d0da      	beq.n	800bf98 <sys_check_timeouts+0xc>
      handler(arg);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6838      	ldr	r0, [r7, #0]
 800bfe6:	4798      	blx	r3
  do {
 800bfe8:	e7d6      	b.n	800bf98 <sys_check_timeouts+0xc>
      return;
 800bfea:	bf00      	nop
 800bfec:	e000      	b.n	800bff0 <sys_check_timeouts+0x64>
      return;
 800bfee:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	24005cb0 	.word	0x24005cb0
 800bffc:	24005cb4 	.word	0x24005cb4

0800c000 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800c006:	4b16      	ldr	r3, [pc, #88]	; (800c060 <sys_timeouts_sleeptime+0x60>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d102      	bne.n	800c014 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800c00e:	f04f 33ff 	mov.w	r3, #4294967295
 800c012:	e020      	b.n	800c056 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800c014:	f7f8 ffa4 	bl	8004f60 <sys_now>
 800c018:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800c01a:	4b11      	ldr	r3, [pc, #68]	; (800c060 <sys_timeouts_sleeptime+0x60>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	0fdb      	lsrs	r3, r3, #31
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d001      	beq.n	800c034 <sys_timeouts_sleeptime+0x34>
    return 0;
 800c030:	2300      	movs	r3, #0
 800c032:	e010      	b.n	800c056 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800c034:	4b0a      	ldr	r3, [pc, #40]	; (800c060 <sys_timeouts_sleeptime+0x60>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	da06      	bge.n	800c054 <sys_timeouts_sleeptime+0x54>
 800c046:	4b07      	ldr	r3, [pc, #28]	; (800c064 <sys_timeouts_sleeptime+0x64>)
 800c048:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800c04c:	4906      	ldr	r1, [pc, #24]	; (800c068 <sys_timeouts_sleeptime+0x68>)
 800c04e:	4807      	ldr	r0, [pc, #28]	; (800c06c <sys_timeouts_sleeptime+0x6c>)
 800c050:	f003 fac0 	bl	800f5d4 <iprintf>
    return ret;
 800c054:	683b      	ldr	r3, [r7, #0]
  }
}
 800c056:	4618      	mov	r0, r3
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	24005cb0 	.word	0x24005cb0
 800c064:	080118a8 	.word	0x080118a8
 800c068:	0801197c 	.word	0x0801197c
 800c06c:	0801191c 	.word	0x0801191c

0800c070 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c074:	f003 f9ae 	bl	800f3d4 <rand>
 800c078:	4603      	mov	r3, r0
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c080:	b29b      	uxth	r3, r3
 800c082:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c086:	b29a      	uxth	r2, r3
 800c088:	4b01      	ldr	r3, [pc, #4]	; (800c090 <udp_init+0x20>)
 800c08a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c08c:	bf00      	nop
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	24000028 	.word	0x24000028

0800c094 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c09a:	2300      	movs	r3, #0
 800c09c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c09e:	4b17      	ldr	r3, [pc, #92]	; (800c0fc <udp_new_port+0x68>)
 800c0a0:	881b      	ldrh	r3, [r3, #0]
 800c0a2:	1c5a      	adds	r2, r3, #1
 800c0a4:	b291      	uxth	r1, r2
 800c0a6:	4a15      	ldr	r2, [pc, #84]	; (800c0fc <udp_new_port+0x68>)
 800c0a8:	8011      	strh	r1, [r2, #0]
 800c0aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d103      	bne.n	800c0ba <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c0b2:	4b12      	ldr	r3, [pc, #72]	; (800c0fc <udp_new_port+0x68>)
 800c0b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c0b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0ba:	4b11      	ldr	r3, [pc, #68]	; (800c100 <udp_new_port+0x6c>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	603b      	str	r3, [r7, #0]
 800c0c0:	e011      	b.n	800c0e6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	8a5a      	ldrh	r2, [r3, #18]
 800c0c6:	4b0d      	ldr	r3, [pc, #52]	; (800c0fc <udp_new_port+0x68>)
 800c0c8:	881b      	ldrh	r3, [r3, #0]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d108      	bne.n	800c0e0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c0ce:	88fb      	ldrh	r3, [r7, #6]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	80fb      	strh	r3, [r7, #6]
 800c0d4:	88fb      	ldrh	r3, [r7, #6]
 800c0d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0da:	d3e0      	bcc.n	800c09e <udp_new_port+0xa>
        return 0;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	e007      	b.n	800c0f0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	603b      	str	r3, [r7, #0]
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1ea      	bne.n	800c0c2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800c0ec:	4b03      	ldr	r3, [pc, #12]	; (800c0fc <udp_new_port+0x68>)
 800c0ee:	881b      	ldrh	r3, [r3, #0]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	24000028 	.word	0x24000028
 800c100:	2400d728 	.word	0x2400d728

0800c104 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	4613      	mov	r3, r2
 800c110:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d105      	bne.n	800c124 <udp_input_local_match+0x20>
 800c118:	4b27      	ldr	r3, [pc, #156]	; (800c1b8 <udp_input_local_match+0xb4>)
 800c11a:	2287      	movs	r2, #135	; 0x87
 800c11c:	4927      	ldr	r1, [pc, #156]	; (800c1bc <udp_input_local_match+0xb8>)
 800c11e:	4828      	ldr	r0, [pc, #160]	; (800c1c0 <udp_input_local_match+0xbc>)
 800c120:	f003 fa58 	bl	800f5d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d105      	bne.n	800c136 <udp_input_local_match+0x32>
 800c12a:	4b23      	ldr	r3, [pc, #140]	; (800c1b8 <udp_input_local_match+0xb4>)
 800c12c:	2288      	movs	r2, #136	; 0x88
 800c12e:	4925      	ldr	r1, [pc, #148]	; (800c1c4 <udp_input_local_match+0xc0>)
 800c130:	4823      	ldr	r0, [pc, #140]	; (800c1c0 <udp_input_local_match+0xbc>)
 800c132:	f003 fa4f 	bl	800f5d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	7a1b      	ldrb	r3, [r3, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00b      	beq.n	800c156 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	7a1a      	ldrb	r2, [r3, #8]
 800c142:	4b21      	ldr	r3, [pc, #132]	; (800c1c8 <udp_input_local_match+0xc4>)
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c14a:	3301      	adds	r3, #1
 800c14c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c14e:	429a      	cmp	r2, r3
 800c150:	d001      	beq.n	800c156 <udp_input_local_match+0x52>
    return 0;
 800c152:	2300      	movs	r3, #0
 800c154:	e02b      	b.n	800c1ae <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c156:	79fb      	ldrb	r3, [r7, #7]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d018      	beq.n	800c18e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d013      	beq.n	800c18a <udp_input_local_match+0x86>
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00f      	beq.n	800c18a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c16a:	4b17      	ldr	r3, [pc, #92]	; (800c1c8 <udp_input_local_match+0xc4>)
 800c16c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c172:	d00a      	beq.n	800c18a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	4b13      	ldr	r3, [pc, #76]	; (800c1c8 <udp_input_local_match+0xc4>)
 800c17a:	695b      	ldr	r3, [r3, #20]
 800c17c:	405a      	eors	r2, r3
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	3308      	adds	r3, #8
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c186:	2b00      	cmp	r3, #0
 800c188:	d110      	bne.n	800c1ac <udp_input_local_match+0xa8>
          return 1;
 800c18a:	2301      	movs	r3, #1
 800c18c:	e00f      	b.n	800c1ae <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d009      	beq.n	800c1a8 <udp_input_local_match+0xa4>
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d005      	beq.n	800c1a8 <udp_input_local_match+0xa4>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	4b09      	ldr	r3, [pc, #36]	; (800c1c8 <udp_input_local_match+0xc4>)
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d101      	bne.n	800c1ac <udp_input_local_match+0xa8>
        return 1;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e000      	b.n	800c1ae <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	08011990 	.word	0x08011990
 800c1bc:	080119c0 	.word	0x080119c0
 800c1c0:	080119e4 	.word	0x080119e4
 800c1c4:	08011a0c 	.word	0x08011a0c
 800c1c8:	2400abf8 	.word	0x2400abf8

0800c1cc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c1cc:	b590      	push	{r4, r7, lr}
 800c1ce:	b08d      	sub	sp, #52	; 0x34
 800c1d0:	af02      	add	r7, sp, #8
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d105      	bne.n	800c1ec <udp_input+0x20>
 800c1e0:	4b7c      	ldr	r3, [pc, #496]	; (800c3d4 <udp_input+0x208>)
 800c1e2:	22cf      	movs	r2, #207	; 0xcf
 800c1e4:	497c      	ldr	r1, [pc, #496]	; (800c3d8 <udp_input+0x20c>)
 800c1e6:	487d      	ldr	r0, [pc, #500]	; (800c3dc <udp_input+0x210>)
 800c1e8:	f003 f9f4 	bl	800f5d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d105      	bne.n	800c1fe <udp_input+0x32>
 800c1f2:	4b78      	ldr	r3, [pc, #480]	; (800c3d4 <udp_input+0x208>)
 800c1f4:	22d0      	movs	r2, #208	; 0xd0
 800c1f6:	497a      	ldr	r1, [pc, #488]	; (800c3e0 <udp_input+0x214>)
 800c1f8:	4878      	ldr	r0, [pc, #480]	; (800c3dc <udp_input+0x210>)
 800c1fa:	f003 f9eb 	bl	800f5d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	895b      	ldrh	r3, [r3, #10]
 800c202:	2b07      	cmp	r3, #7
 800c204:	d803      	bhi.n	800c20e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7ff fb0e 	bl	800b828 <pbuf_free>
    goto end;
 800c20c:	e0de      	b.n	800c3cc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c214:	4b73      	ldr	r3, [pc, #460]	; (800c3e4 <udp_input+0x218>)
 800c216:	695b      	ldr	r3, [r3, #20]
 800c218:	4a72      	ldr	r2, [pc, #456]	; (800c3e4 <udp_input+0x218>)
 800c21a:	6812      	ldr	r2, [r2, #0]
 800c21c:	4611      	mov	r1, r2
 800c21e:	4618      	mov	r0, r3
 800c220:	f002 f80a 	bl	800e238 <ip4_addr_isbroadcast_u32>
 800c224:	4603      	mov	r3, r0
 800c226:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fd febc 	bl	8009fac <lwip_htons>
 800c234:	4603      	mov	r3, r0
 800c236:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	885b      	ldrh	r3, [r3, #2]
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fd feb4 	bl	8009fac <lwip_htons>
 800c244:	4603      	mov	r3, r0
 800c246:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c248:	2300      	movs	r3, #0
 800c24a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c24c:	2300      	movs	r3, #0
 800c24e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c250:	2300      	movs	r3, #0
 800c252:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c254:	4b64      	ldr	r3, [pc, #400]	; (800c3e8 <udp_input+0x21c>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	627b      	str	r3, [r7, #36]	; 0x24
 800c25a:	e054      	b.n	800c306 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25e:	8a5b      	ldrh	r3, [r3, #18]
 800c260:	89fa      	ldrh	r2, [r7, #14]
 800c262:	429a      	cmp	r2, r3
 800c264:	d14a      	bne.n	800c2fc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c266:	7cfb      	ldrb	r3, [r7, #19]
 800c268:	461a      	mov	r2, r3
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c26e:	f7ff ff49 	bl	800c104 <udp_input_local_match>
 800c272:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c274:	2b00      	cmp	r3, #0
 800c276:	d041      	beq.n	800c2fc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	7c1b      	ldrb	r3, [r3, #16]
 800c27c:	f003 0304 	and.w	r3, r3, #4
 800c280:	2b00      	cmp	r3, #0
 800c282:	d11d      	bne.n	800c2c0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d102      	bne.n	800c290 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28c:	61fb      	str	r3, [r7, #28]
 800c28e:	e017      	b.n	800c2c0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c290:	7cfb      	ldrb	r3, [r7, #19]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d014      	beq.n	800c2c0 <udp_input+0xf4>
 800c296:	4b53      	ldr	r3, [pc, #332]	; (800c3e4 <udp_input+0x218>)
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29e:	d10f      	bne.n	800c2c0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d008      	beq.n	800c2c0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d101      	bne.n	800c2c0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2be:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c2:	8a9b      	ldrh	r3, [r3, #20]
 800c2c4:	8a3a      	ldrh	r2, [r7, #16]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d118      	bne.n	800c2fc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d005      	beq.n	800c2de <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	4b43      	ldr	r3, [pc, #268]	; (800c3e4 <udp_input+0x218>)
 800c2d8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d10e      	bne.n	800c2fc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c2de:	6a3b      	ldr	r3, [r7, #32]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d014      	beq.n	800c30e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e6:	68da      	ldr	r2, [r3, #12]
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c2ec:	4b3e      	ldr	r3, [pc, #248]	; (800c3e8 <udp_input+0x21c>)
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c2f4:	4a3c      	ldr	r2, [pc, #240]	; (800c3e8 <udp_input+0x21c>)
 800c2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c2fa:	e008      	b.n	800c30e <udp_input+0x142>
      }
    }

    prev = pcb;
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	627b      	str	r3, [r7, #36]	; 0x24
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1a7      	bne.n	800c25c <udp_input+0x90>
 800c30c:	e000      	b.n	800c310 <udp_input+0x144>
        break;
 800c30e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	2b00      	cmp	r3, #0
 800c314:	d101      	bne.n	800c31a <udp_input+0x14e>
    pcb = uncon_pcb;
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <udp_input+0x15a>
    for_us = 1;
 800c320:	2301      	movs	r3, #1
 800c322:	76fb      	strb	r3, [r7, #27]
 800c324:	e00a      	b.n	800c33c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	3304      	adds	r3, #4
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	4b2d      	ldr	r3, [pc, #180]	; (800c3e4 <udp_input+0x218>)
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	429a      	cmp	r2, r3
 800c332:	bf0c      	ite	eq
 800c334:	2301      	moveq	r3, #1
 800c336:	2300      	movne	r3, #0
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c33c:	7efb      	ldrb	r3, [r7, #27]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d041      	beq.n	800c3c6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c342:	2108      	movs	r1, #8
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7ff f9e9 	bl	800b71c <pbuf_remove_header>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00a      	beq.n	800c366 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c350:	4b20      	ldr	r3, [pc, #128]	; (800c3d4 <udp_input+0x208>)
 800c352:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c356:	4925      	ldr	r1, [pc, #148]	; (800c3ec <udp_input+0x220>)
 800c358:	4820      	ldr	r0, [pc, #128]	; (800c3dc <udp_input+0x210>)
 800c35a:	f003 f93b 	bl	800f5d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7ff fa62 	bl	800b828 <pbuf_free>
      goto end;
 800c364:	e032      	b.n	800c3cc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d012      	beq.n	800c392 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	699b      	ldr	r3, [r3, #24]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00a      	beq.n	800c38a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	699c      	ldr	r4, [r3, #24]
 800c378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37a:	69d8      	ldr	r0, [r3, #28]
 800c37c:	8a3b      	ldrh	r3, [r7, #16]
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	4b1b      	ldr	r3, [pc, #108]	; (800c3f0 <udp_input+0x224>)
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c386:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c388:	e021      	b.n	800c3ce <udp_input+0x202>
        pbuf_free(p);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7ff fa4c 	bl	800b828 <pbuf_free>
        goto end;
 800c390:	e01c      	b.n	800c3cc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c392:	7cfb      	ldrb	r3, [r7, #19]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d112      	bne.n	800c3be <udp_input+0x1f2>
 800c398:	4b12      	ldr	r3, [pc, #72]	; (800c3e4 <udp_input+0x218>)
 800c39a:	695b      	ldr	r3, [r3, #20]
 800c39c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3a0:	2be0      	cmp	r3, #224	; 0xe0
 800c3a2:	d00c      	beq.n	800c3be <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c3a4:	4b0f      	ldr	r3, [pc, #60]	; (800c3e4 <udp_input+0x218>)
 800c3a6:	899b      	ldrh	r3, [r3, #12]
 800c3a8:	3308      	adds	r3, #8
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	b21b      	sxth	r3, r3
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7ff fa26 	bl	800b802 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c3b6:	2103      	movs	r1, #3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f001 fc1d 	bl	800dbf8 <icmp_dest_unreach>
      pbuf_free(p);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7ff fa32 	bl	800b828 <pbuf_free>
  return;
 800c3c4:	e003      	b.n	800c3ce <udp_input+0x202>
    pbuf_free(p);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7ff fa2e 	bl	800b828 <pbuf_free>
  return;
 800c3cc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c3ce:	372c      	adds	r7, #44	; 0x2c
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd90      	pop	{r4, r7, pc}
 800c3d4:	08011990 	.word	0x08011990
 800c3d8:	08011a34 	.word	0x08011a34
 800c3dc:	080119e4 	.word	0x080119e4
 800c3e0:	08011a4c 	.word	0x08011a4c
 800c3e4:	2400abf8 	.word	0x2400abf8
 800c3e8:	2400d728 	.word	0x2400d728
 800c3ec:	08011a68 	.word	0x08011a68
 800c3f0:	2400ac08 	.word	0x2400ac08

0800c3f4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d109      	bne.n	800c418 <udp_send+0x24>
 800c404:	4b11      	ldr	r3, [pc, #68]	; (800c44c <udp_send+0x58>)
 800c406:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c40a:	4911      	ldr	r1, [pc, #68]	; (800c450 <udp_send+0x5c>)
 800c40c:	4811      	ldr	r0, [pc, #68]	; (800c454 <udp_send+0x60>)
 800c40e:	f003 f8e1 	bl	800f5d4 <iprintf>
 800c412:	f06f 030f 	mvn.w	r3, #15
 800c416:	e015      	b.n	800c444 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d109      	bne.n	800c432 <udp_send+0x3e>
 800c41e:	4b0b      	ldr	r3, [pc, #44]	; (800c44c <udp_send+0x58>)
 800c420:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800c424:	490c      	ldr	r1, [pc, #48]	; (800c458 <udp_send+0x64>)
 800c426:	480b      	ldr	r0, [pc, #44]	; (800c454 <udp_send+0x60>)
 800c428:	f003 f8d4 	bl	800f5d4 <iprintf>
 800c42c:	f06f 030f 	mvn.w	r3, #15
 800c430:	e008      	b.n	800c444 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	1d1a      	adds	r2, r3, #4
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	8a9b      	ldrh	r3, [r3, #20]
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 f80d 	bl	800c45c <udp_sendto>
 800c442:	4603      	mov	r3, r0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	08011990 	.word	0x08011990
 800c450:	08011a84 	.word	0x08011a84
 800c454:	080119e4 	.word	0x080119e4
 800c458:	08011a9c 	.word	0x08011a9c

0800c45c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b088      	sub	sp, #32
 800c460:	af02      	add	r7, sp, #8
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
 800c468:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d109      	bne.n	800c484 <udp_sendto+0x28>
 800c470:	4b23      	ldr	r3, [pc, #140]	; (800c500 <udp_sendto+0xa4>)
 800c472:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c476:	4923      	ldr	r1, [pc, #140]	; (800c504 <udp_sendto+0xa8>)
 800c478:	4823      	ldr	r0, [pc, #140]	; (800c508 <udp_sendto+0xac>)
 800c47a:	f003 f8ab 	bl	800f5d4 <iprintf>
 800c47e:	f06f 030f 	mvn.w	r3, #15
 800c482:	e038      	b.n	800c4f6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d109      	bne.n	800c49e <udp_sendto+0x42>
 800c48a:	4b1d      	ldr	r3, [pc, #116]	; (800c500 <udp_sendto+0xa4>)
 800c48c:	f240 2219 	movw	r2, #537	; 0x219
 800c490:	491e      	ldr	r1, [pc, #120]	; (800c50c <udp_sendto+0xb0>)
 800c492:	481d      	ldr	r0, [pc, #116]	; (800c508 <udp_sendto+0xac>)
 800c494:	f003 f89e 	bl	800f5d4 <iprintf>
 800c498:	f06f 030f 	mvn.w	r3, #15
 800c49c:	e02b      	b.n	800c4f6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d109      	bne.n	800c4b8 <udp_sendto+0x5c>
 800c4a4:	4b16      	ldr	r3, [pc, #88]	; (800c500 <udp_sendto+0xa4>)
 800c4a6:	f240 221a 	movw	r2, #538	; 0x21a
 800c4aa:	4919      	ldr	r1, [pc, #100]	; (800c510 <udp_sendto+0xb4>)
 800c4ac:	4816      	ldr	r0, [pc, #88]	; (800c508 <udp_sendto+0xac>)
 800c4ae:	f003 f891 	bl	800f5d4 <iprintf>
 800c4b2:	f06f 030f 	mvn.w	r3, #15
 800c4b6:	e01e      	b.n	800c4f6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	7a1b      	ldrb	r3, [r3, #8]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d006      	beq.n	800c4ce <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	7a1b      	ldrb	r3, [r3, #8]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fe fe7d 	bl	800b1c4 <netif_get_by_index>
 800c4ca:	6178      	str	r0, [r7, #20]
 800c4cc:	e003      	b.n	800c4d6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f001 fc26 	bl	800dd20 <ip4_route>
 800c4d4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d102      	bne.n	800c4e2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c4dc:	f06f 0303 	mvn.w	r3, #3
 800c4e0:	e009      	b.n	800c4f6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c4e2:	887a      	ldrh	r2, [r7, #2]
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	68b9      	ldr	r1, [r7, #8]
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f000 f810 	bl	800c514 <udp_sendto_if>
 800c4f4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3718      	adds	r7, #24
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	08011990 	.word	0x08011990
 800c504:	08011ab4 	.word	0x08011ab4
 800c508:	080119e4 	.word	0x080119e4
 800c50c:	08011acc 	.word	0x08011acc
 800c510:	08011ae8 	.word	0x08011ae8

0800c514 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b088      	sub	sp, #32
 800c518:	af02      	add	r7, sp, #8
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
 800c520:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d109      	bne.n	800c53c <udp_sendto_if+0x28>
 800c528:	4b2e      	ldr	r3, [pc, #184]	; (800c5e4 <udp_sendto_if+0xd0>)
 800c52a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c52e:	492e      	ldr	r1, [pc, #184]	; (800c5e8 <udp_sendto_if+0xd4>)
 800c530:	482e      	ldr	r0, [pc, #184]	; (800c5ec <udp_sendto_if+0xd8>)
 800c532:	f003 f84f 	bl	800f5d4 <iprintf>
 800c536:	f06f 030f 	mvn.w	r3, #15
 800c53a:	e04f      	b.n	800c5dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d109      	bne.n	800c556 <udp_sendto_if+0x42>
 800c542:	4b28      	ldr	r3, [pc, #160]	; (800c5e4 <udp_sendto_if+0xd0>)
 800c544:	f240 2281 	movw	r2, #641	; 0x281
 800c548:	4929      	ldr	r1, [pc, #164]	; (800c5f0 <udp_sendto_if+0xdc>)
 800c54a:	4828      	ldr	r0, [pc, #160]	; (800c5ec <udp_sendto_if+0xd8>)
 800c54c:	f003 f842 	bl	800f5d4 <iprintf>
 800c550:	f06f 030f 	mvn.w	r3, #15
 800c554:	e042      	b.n	800c5dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d109      	bne.n	800c570 <udp_sendto_if+0x5c>
 800c55c:	4b21      	ldr	r3, [pc, #132]	; (800c5e4 <udp_sendto_if+0xd0>)
 800c55e:	f240 2282 	movw	r2, #642	; 0x282
 800c562:	4924      	ldr	r1, [pc, #144]	; (800c5f4 <udp_sendto_if+0xe0>)
 800c564:	4821      	ldr	r0, [pc, #132]	; (800c5ec <udp_sendto_if+0xd8>)
 800c566:	f003 f835 	bl	800f5d4 <iprintf>
 800c56a:	f06f 030f 	mvn.w	r3, #15
 800c56e:	e035      	b.n	800c5dc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d109      	bne.n	800c58a <udp_sendto_if+0x76>
 800c576:	4b1b      	ldr	r3, [pc, #108]	; (800c5e4 <udp_sendto_if+0xd0>)
 800c578:	f240 2283 	movw	r2, #643	; 0x283
 800c57c:	491e      	ldr	r1, [pc, #120]	; (800c5f8 <udp_sendto_if+0xe4>)
 800c57e:	481b      	ldr	r0, [pc, #108]	; (800c5ec <udp_sendto_if+0xd8>)
 800c580:	f003 f828 	bl	800f5d4 <iprintf>
 800c584:	f06f 030f 	mvn.w	r3, #15
 800c588:	e028      	b.n	800c5dc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d009      	beq.n	800c5a4 <udp_sendto_if+0x90>
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d005      	beq.n	800c5a4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c5a0:	2be0      	cmp	r3, #224	; 0xe0
 800c5a2:	d103      	bne.n	800c5ac <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	617b      	str	r3, [r7, #20]
 800c5aa:	e00b      	b.n	800c5c4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	6a3b      	ldr	r3, [r7, #32]
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d002      	beq.n	800c5c0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c5ba:	f06f 0303 	mvn.w	r3, #3
 800c5be:	e00d      	b.n	800c5dc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c5c4:	887a      	ldrh	r2, [r7, #2]
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	6a3b      	ldr	r3, [r7, #32]
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	68b9      	ldr	r1, [r7, #8]
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f000 f811 	bl	800c5fc <udp_sendto_if_src>
 800c5da:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3718      	adds	r7, #24
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	08011990 	.word	0x08011990
 800c5e8:	08011b04 	.word	0x08011b04
 800c5ec:	080119e4 	.word	0x080119e4
 800c5f0:	08011b20 	.word	0x08011b20
 800c5f4:	08011b3c 	.word	0x08011b3c
 800c5f8:	08011b5c 	.word	0x08011b5c

0800c5fc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b08c      	sub	sp, #48	; 0x30
 800c600:	af04      	add	r7, sp, #16
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
 800c608:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d109      	bne.n	800c624 <udp_sendto_if_src+0x28>
 800c610:	4b65      	ldr	r3, [pc, #404]	; (800c7a8 <udp_sendto_if_src+0x1ac>)
 800c612:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c616:	4965      	ldr	r1, [pc, #404]	; (800c7ac <udp_sendto_if_src+0x1b0>)
 800c618:	4865      	ldr	r0, [pc, #404]	; (800c7b0 <udp_sendto_if_src+0x1b4>)
 800c61a:	f002 ffdb 	bl	800f5d4 <iprintf>
 800c61e:	f06f 030f 	mvn.w	r3, #15
 800c622:	e0bc      	b.n	800c79e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d109      	bne.n	800c63e <udp_sendto_if_src+0x42>
 800c62a:	4b5f      	ldr	r3, [pc, #380]	; (800c7a8 <udp_sendto_if_src+0x1ac>)
 800c62c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c630:	4960      	ldr	r1, [pc, #384]	; (800c7b4 <udp_sendto_if_src+0x1b8>)
 800c632:	485f      	ldr	r0, [pc, #380]	; (800c7b0 <udp_sendto_if_src+0x1b4>)
 800c634:	f002 ffce 	bl	800f5d4 <iprintf>
 800c638:	f06f 030f 	mvn.w	r3, #15
 800c63c:	e0af      	b.n	800c79e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d109      	bne.n	800c658 <udp_sendto_if_src+0x5c>
 800c644:	4b58      	ldr	r3, [pc, #352]	; (800c7a8 <udp_sendto_if_src+0x1ac>)
 800c646:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c64a:	495b      	ldr	r1, [pc, #364]	; (800c7b8 <udp_sendto_if_src+0x1bc>)
 800c64c:	4858      	ldr	r0, [pc, #352]	; (800c7b0 <udp_sendto_if_src+0x1b4>)
 800c64e:	f002 ffc1 	bl	800f5d4 <iprintf>
 800c652:	f06f 030f 	mvn.w	r3, #15
 800c656:	e0a2      	b.n	800c79e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d109      	bne.n	800c672 <udp_sendto_if_src+0x76>
 800c65e:	4b52      	ldr	r3, [pc, #328]	; (800c7a8 <udp_sendto_if_src+0x1ac>)
 800c660:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c664:	4955      	ldr	r1, [pc, #340]	; (800c7bc <udp_sendto_if_src+0x1c0>)
 800c666:	4852      	ldr	r0, [pc, #328]	; (800c7b0 <udp_sendto_if_src+0x1b4>)
 800c668:	f002 ffb4 	bl	800f5d4 <iprintf>
 800c66c:	f06f 030f 	mvn.w	r3, #15
 800c670:	e095      	b.n	800c79e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c674:	2b00      	cmp	r3, #0
 800c676:	d109      	bne.n	800c68c <udp_sendto_if_src+0x90>
 800c678:	4b4b      	ldr	r3, [pc, #300]	; (800c7a8 <udp_sendto_if_src+0x1ac>)
 800c67a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c67e:	4950      	ldr	r1, [pc, #320]	; (800c7c0 <udp_sendto_if_src+0x1c4>)
 800c680:	484b      	ldr	r0, [pc, #300]	; (800c7b0 <udp_sendto_if_src+0x1b4>)
 800c682:	f002 ffa7 	bl	800f5d4 <iprintf>
 800c686:	f06f 030f 	mvn.w	r3, #15
 800c68a:	e088      	b.n	800c79e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	8a5b      	ldrh	r3, [r3, #18]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d10f      	bne.n	800c6b4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c694:	68f9      	ldr	r1, [r7, #12]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	8a5b      	ldrh	r3, [r3, #18]
 800c69a:	461a      	mov	r2, r3
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f000 f893 	bl	800c7c8 <udp_bind>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c6a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d002      	beq.n	800c6b4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c6ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c6b2:	e074      	b.n	800c79e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	891b      	ldrh	r3, [r3, #8]
 800c6b8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d902      	bls.n	800c6c6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c4:	e06b      	b.n	800c79e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c6c6:	2108      	movs	r1, #8
 800c6c8:	68b8      	ldr	r0, [r7, #8]
 800c6ca:	f7ff f817 	bl	800b6fc <pbuf_add_header>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d015      	beq.n	800c700 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c6d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c6d8:	2108      	movs	r1, #8
 800c6da:	2022      	movs	r0, #34	; 0x22
 800c6dc:	f7fe fdc2 	bl	800b264 <pbuf_alloc>
 800c6e0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d102      	bne.n	800c6ee <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ec:	e057      	b.n	800c79e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	891b      	ldrh	r3, [r3, #8]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d006      	beq.n	800c704 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c6f6:	68b9      	ldr	r1, [r7, #8]
 800c6f8:	69f8      	ldr	r0, [r7, #28]
 800c6fa:	f7ff f9b9 	bl	800ba70 <pbuf_chain>
 800c6fe:	e001      	b.n	800c704 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	895b      	ldrh	r3, [r3, #10]
 800c708:	2b07      	cmp	r3, #7
 800c70a:	d806      	bhi.n	800c71a <udp_sendto_if_src+0x11e>
 800c70c:	4b26      	ldr	r3, [pc, #152]	; (800c7a8 <udp_sendto_if_src+0x1ac>)
 800c70e:	f240 320d 	movw	r2, #781	; 0x30d
 800c712:	492c      	ldr	r1, [pc, #176]	; (800c7c4 <udp_sendto_if_src+0x1c8>)
 800c714:	4826      	ldr	r0, [pc, #152]	; (800c7b0 <udp_sendto_if_src+0x1b4>)
 800c716:	f002 ff5d 	bl	800f5d4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	8a5b      	ldrh	r3, [r3, #18]
 800c724:	4618      	mov	r0, r3
 800c726:	f7fd fc41 	bl	8009fac <lwip_htons>
 800c72a:	4603      	mov	r3, r0
 800c72c:	461a      	mov	r2, r3
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c732:	887b      	ldrh	r3, [r7, #2]
 800c734:	4618      	mov	r0, r3
 800c736:	f7fd fc39 	bl	8009fac <lwip_htons>
 800c73a:	4603      	mov	r3, r0
 800c73c:	461a      	mov	r2, r3
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	2200      	movs	r2, #0
 800c746:	719a      	strb	r2, [r3, #6]
 800c748:	2200      	movs	r2, #0
 800c74a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	891b      	ldrh	r3, [r3, #8]
 800c750:	4618      	mov	r0, r3
 800c752:	f7fd fc2b 	bl	8009fac <lwip_htons>
 800c756:	4603      	mov	r3, r0
 800c758:	461a      	mov	r2, r3
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c75e:	2311      	movs	r3, #17
 800c760:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	7adb      	ldrb	r3, [r3, #11]
 800c766:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	7a9b      	ldrb	r3, [r3, #10]
 800c76c:	7cb9      	ldrb	r1, [r7, #18]
 800c76e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c770:	9202      	str	r2, [sp, #8]
 800c772:	7cfa      	ldrb	r2, [r7, #19]
 800c774:	9201      	str	r2, [sp, #4]
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	460b      	mov	r3, r1
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c77e:	69f8      	ldr	r0, [r7, #28]
 800c780:	f001 fcac 	bl	800e0dc <ip4_output_if_src>
 800c784:	4603      	mov	r3, r0
 800c786:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c788:	69fa      	ldr	r2, [r7, #28]
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d004      	beq.n	800c79a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c790:	69f8      	ldr	r0, [r7, #28]
 800c792:	f7ff f849 	bl	800b828 <pbuf_free>
    q = NULL;
 800c796:	2300      	movs	r3, #0
 800c798:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c79a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3720      	adds	r7, #32
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	08011990 	.word	0x08011990
 800c7ac:	08011b7c 	.word	0x08011b7c
 800c7b0:	080119e4 	.word	0x080119e4
 800c7b4:	08011b9c 	.word	0x08011b9c
 800c7b8:	08011bbc 	.word	0x08011bbc
 800c7bc:	08011be0 	.word	0x08011be0
 800c7c0:	08011c04 	.word	0x08011c04
 800c7c4:	08011c28 	.word	0x08011c28

0800c7c8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d101      	bne.n	800c7e0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c7dc:	4b39      	ldr	r3, [pc, #228]	; (800c8c4 <udp_bind+0xfc>)
 800c7de:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d109      	bne.n	800c7fa <udp_bind+0x32>
 800c7e6:	4b38      	ldr	r3, [pc, #224]	; (800c8c8 <udp_bind+0x100>)
 800c7e8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c7ec:	4937      	ldr	r1, [pc, #220]	; (800c8cc <udp_bind+0x104>)
 800c7ee:	4838      	ldr	r0, [pc, #224]	; (800c8d0 <udp_bind+0x108>)
 800c7f0:	f002 fef0 	bl	800f5d4 <iprintf>
 800c7f4:	f06f 030f 	mvn.w	r3, #15
 800c7f8:	e060      	b.n	800c8bc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c7fe:	4b35      	ldr	r3, [pc, #212]	; (800c8d4 <udp_bind+0x10c>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	617b      	str	r3, [r7, #20]
 800c804:	e009      	b.n	800c81a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d102      	bne.n	800c814 <udp_bind+0x4c>
      rebind = 1;
 800c80e:	2301      	movs	r3, #1
 800c810:	74fb      	strb	r3, [r7, #19]
      break;
 800c812:	e005      	b.n	800c820 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	617b      	str	r3, [r7, #20]
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d1f2      	bne.n	800c806 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c820:	88fb      	ldrh	r3, [r7, #6]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d109      	bne.n	800c83a <udp_bind+0x72>
    port = udp_new_port();
 800c826:	f7ff fc35 	bl	800c094 <udp_new_port>
 800c82a:	4603      	mov	r3, r0
 800c82c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c82e:	88fb      	ldrh	r3, [r7, #6]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d12c      	bne.n	800c88e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c834:	f06f 0307 	mvn.w	r3, #7
 800c838:	e040      	b.n	800c8bc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c83a:	4b26      	ldr	r3, [pc, #152]	; (800c8d4 <udp_bind+0x10c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	617b      	str	r3, [r7, #20]
 800c840:	e022      	b.n	800c888 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	429a      	cmp	r2, r3
 800c848:	d01b      	beq.n	800c882 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	8a5b      	ldrh	r3, [r3, #18]
 800c84e:	88fa      	ldrh	r2, [r7, #6]
 800c850:	429a      	cmp	r2, r3
 800c852:	d116      	bne.n	800c882 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d00d      	beq.n	800c87c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00a      	beq.n	800c87c <udp_bind+0xb4>
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d006      	beq.n	800c87c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c86e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c870:	2b00      	cmp	r3, #0
 800c872:	d003      	beq.n	800c87c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d102      	bne.n	800c882 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c87c:	f06f 0307 	mvn.w	r3, #7
 800c880:	e01c      	b.n	800c8bc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	617b      	str	r3, [r7, #20]
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1d9      	bne.n	800c842 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d002      	beq.n	800c89a <udp_bind+0xd2>
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	e000      	b.n	800c89c <udp_bind+0xd4>
 800c89a:	2300      	movs	r3, #0
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	88fa      	ldrh	r2, [r7, #6]
 800c8a4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c8a6:	7cfb      	ldrb	r3, [r7, #19]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d106      	bne.n	800c8ba <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c8ac:	4b09      	ldr	r3, [pc, #36]	; (800c8d4 <udp_bind+0x10c>)
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c8b4:	4a07      	ldr	r2, [pc, #28]	; (800c8d4 <udp_bind+0x10c>)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3718      	adds	r7, #24
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	080124a8 	.word	0x080124a8
 800c8c8:	08011990 	.word	0x08011990
 800c8cc:	08011c58 	.word	0x08011c58
 800c8d0:	080119e4 	.word	0x080119e4
 800c8d4:	2400d728 	.word	0x2400d728

0800c8d8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d109      	bne.n	800c900 <udp_connect+0x28>
 800c8ec:	4b2c      	ldr	r3, [pc, #176]	; (800c9a0 <udp_connect+0xc8>)
 800c8ee:	f240 4235 	movw	r2, #1077	; 0x435
 800c8f2:	492c      	ldr	r1, [pc, #176]	; (800c9a4 <udp_connect+0xcc>)
 800c8f4:	482c      	ldr	r0, [pc, #176]	; (800c9a8 <udp_connect+0xd0>)
 800c8f6:	f002 fe6d 	bl	800f5d4 <iprintf>
 800c8fa:	f06f 030f 	mvn.w	r3, #15
 800c8fe:	e04b      	b.n	800c998 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d109      	bne.n	800c91a <udp_connect+0x42>
 800c906:	4b26      	ldr	r3, [pc, #152]	; (800c9a0 <udp_connect+0xc8>)
 800c908:	f240 4236 	movw	r2, #1078	; 0x436
 800c90c:	4927      	ldr	r1, [pc, #156]	; (800c9ac <udp_connect+0xd4>)
 800c90e:	4826      	ldr	r0, [pc, #152]	; (800c9a8 <udp_connect+0xd0>)
 800c910:	f002 fe60 	bl	800f5d4 <iprintf>
 800c914:	f06f 030f 	mvn.w	r3, #15
 800c918:	e03e      	b.n	800c998 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	8a5b      	ldrh	r3, [r3, #18]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d10f      	bne.n	800c942 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c922:	68f9      	ldr	r1, [r7, #12]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	8a5b      	ldrh	r3, [r3, #18]
 800c928:	461a      	mov	r2, r3
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f7ff ff4c 	bl	800c7c8 <udp_bind>
 800c930:	4603      	mov	r3, r0
 800c932:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c934:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <udp_connect+0x6a>
      return err;
 800c93c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c940:	e02a      	b.n	800c998 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d002      	beq.n	800c94e <udp_connect+0x76>
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	e000      	b.n	800c950 <udp_connect+0x78>
 800c94e:	2300      	movs	r3, #0
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	88fa      	ldrh	r2, [r7, #6]
 800c958:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	7c1b      	ldrb	r3, [r3, #16]
 800c95e:	f043 0304 	orr.w	r3, r3, #4
 800c962:	b2da      	uxtb	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c968:	4b11      	ldr	r3, [pc, #68]	; (800c9b0 <udp_connect+0xd8>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	617b      	str	r3, [r7, #20]
 800c96e:	e008      	b.n	800c982 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	429a      	cmp	r2, r3
 800c976:	d101      	bne.n	800c97c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c978:	2300      	movs	r3, #0
 800c97a:	e00d      	b.n	800c998 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	617b      	str	r3, [r7, #20]
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1f3      	bne.n	800c970 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c988:	4b09      	ldr	r3, [pc, #36]	; (800c9b0 <udp_connect+0xd8>)
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c990:	4a07      	ldr	r2, [pc, #28]	; (800c9b0 <udp_connect+0xd8>)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c996:	2300      	movs	r3, #0
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3718      	adds	r7, #24
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	08011990 	.word	0x08011990
 800c9a4:	08011c70 	.word	0x08011c70
 800c9a8:	080119e4 	.word	0x080119e4
 800c9ac:	08011c8c 	.word	0x08011c8c
 800c9b0:	2400d728 	.word	0x2400d728

0800c9b4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d107      	bne.n	800c9d6 <udp_recv+0x22>
 800c9c6:	4b08      	ldr	r3, [pc, #32]	; (800c9e8 <udp_recv+0x34>)
 800c9c8:	f240 428a 	movw	r2, #1162	; 0x48a
 800c9cc:	4907      	ldr	r1, [pc, #28]	; (800c9ec <udp_recv+0x38>)
 800c9ce:	4808      	ldr	r0, [pc, #32]	; (800c9f0 <udp_recv+0x3c>)
 800c9d0:	f002 fe00 	bl	800f5d4 <iprintf>
 800c9d4:	e005      	b.n	800c9e2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	61da      	str	r2, [r3, #28]
}
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	08011990 	.word	0x08011990
 800c9ec:	08011cc4 	.word	0x08011cc4
 800c9f0:	080119e4 	.word	0x080119e4

0800c9f4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d107      	bne.n	800ca12 <udp_remove+0x1e>
 800ca02:	4b19      	ldr	r3, [pc, #100]	; (800ca68 <udp_remove+0x74>)
 800ca04:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800ca08:	4918      	ldr	r1, [pc, #96]	; (800ca6c <udp_remove+0x78>)
 800ca0a:	4819      	ldr	r0, [pc, #100]	; (800ca70 <udp_remove+0x7c>)
 800ca0c:	f002 fde2 	bl	800f5d4 <iprintf>
 800ca10:	e026      	b.n	800ca60 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ca12:	4b18      	ldr	r3, [pc, #96]	; (800ca74 <udp_remove+0x80>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d105      	bne.n	800ca28 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ca1c:	4b15      	ldr	r3, [pc, #84]	; (800ca74 <udp_remove+0x80>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	4a14      	ldr	r2, [pc, #80]	; (800ca74 <udp_remove+0x80>)
 800ca24:	6013      	str	r3, [r2, #0]
 800ca26:	e017      	b.n	800ca58 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ca28:	4b12      	ldr	r3, [pc, #72]	; (800ca74 <udp_remove+0x80>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	60fb      	str	r3, [r7, #12]
 800ca2e:	e010      	b.n	800ca52 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d009      	beq.n	800ca4c <udp_remove+0x58>
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d104      	bne.n	800ca4c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68da      	ldr	r2, [r3, #12]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	60da      	str	r2, [r3, #12]
        break;
 800ca4a:	e005      	b.n	800ca58 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	60fb      	str	r3, [r7, #12]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1eb      	bne.n	800ca30 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ca58:	6879      	ldr	r1, [r7, #4]
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	f7fe f8a0 	bl	800aba0 <memp_free>
}
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	08011990 	.word	0x08011990
 800ca6c:	08011cdc 	.word	0x08011cdc
 800ca70:	080119e4 	.word	0x080119e4
 800ca74:	2400d728 	.word	0x2400d728

0800ca78 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ca7e:	2000      	movs	r0, #0
 800ca80:	f7fe f818 	bl	800aab4 <memp_malloc>
 800ca84:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d007      	beq.n	800ca9c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ca8c:	2220      	movs	r2, #32
 800ca8e:	2100      	movs	r1, #0
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f002 fe3e 	bl	800f712 <memset>
    pcb->ttl = UDP_TTL;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	22ff      	movs	r2, #255	; 0xff
 800ca9a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800ca9c:	687b      	ldr	r3, [r7, #4]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b084      	sub	sp, #16
 800caaa:	af00      	add	r7, sp, #0
 800caac:	4603      	mov	r3, r0
 800caae:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800cab0:	f7ff ffe2 	bl	800ca78 <udp_new>
 800cab4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800cab6:	68fb      	ldr	r3, [r7, #12]
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d01e      	beq.n	800cb0e <udp_netif_ip_addr_changed+0x4e>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d01a      	beq.n	800cb0e <udp_netif_ip_addr_changed+0x4e>
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d017      	beq.n	800cb0e <udp_netif_ip_addr_changed+0x4e>
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d013      	beq.n	800cb0e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cae6:	4b0d      	ldr	r3, [pc, #52]	; (800cb1c <udp_netif_ip_addr_changed+0x5c>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	e00c      	b.n	800cb08 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d103      	bne.n	800cb02 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	60fb      	str	r3, [r7, #12]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1ef      	bne.n	800caee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cb0e:	bf00      	nop
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	2400d728 	.word	0x2400d728

0800cb20 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cb28:	4915      	ldr	r1, [pc, #84]	; (800cb80 <etharp_free_entry+0x60>)
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	4413      	add	r3, r2
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	440b      	add	r3, r1
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d013      	beq.n	800cb64 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cb3c:	4910      	ldr	r1, [pc, #64]	; (800cb80 <etharp_free_entry+0x60>)
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	4613      	mov	r3, r2
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	4413      	add	r3, r2
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	440b      	add	r3, r1
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7fe fe6b 	bl	800b828 <pbuf_free>
    arp_table[i].q = NULL;
 800cb52:	490b      	ldr	r1, [pc, #44]	; (800cb80 <etharp_free_entry+0x60>)
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	4613      	mov	r3, r2
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	4413      	add	r3, r2
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	440b      	add	r3, r1
 800cb60:	2200      	movs	r2, #0
 800cb62:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cb64:	4906      	ldr	r1, [pc, #24]	; (800cb80 <etharp_free_entry+0x60>)
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	4613      	mov	r3, r2
 800cb6a:	005b      	lsls	r3, r3, #1
 800cb6c:	4413      	add	r3, r2
 800cb6e:	00db      	lsls	r3, r3, #3
 800cb70:	440b      	add	r3, r1
 800cb72:	3314      	adds	r3, #20
 800cb74:	2200      	movs	r2, #0
 800cb76:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cb78:	bf00      	nop
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	24005cb8 	.word	0x24005cb8

0800cb84 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	607b      	str	r3, [r7, #4]
 800cb8e:	e096      	b.n	800ccbe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cb90:	494f      	ldr	r1, [pc, #316]	; (800ccd0 <etharp_tmr+0x14c>)
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	4613      	mov	r3, r2
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	4413      	add	r3, r2
 800cb9a:	00db      	lsls	r3, r3, #3
 800cb9c:	440b      	add	r3, r1
 800cb9e:	3314      	adds	r3, #20
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cba4:	78fb      	ldrb	r3, [r7, #3]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f000 8086 	beq.w	800ccb8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cbac:	4948      	ldr	r1, [pc, #288]	; (800ccd0 <etharp_tmr+0x14c>)
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	005b      	lsls	r3, r3, #1
 800cbb4:	4413      	add	r3, r2
 800cbb6:	00db      	lsls	r3, r3, #3
 800cbb8:	440b      	add	r3, r1
 800cbba:	3312      	adds	r3, #18
 800cbbc:	881b      	ldrh	r3, [r3, #0]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	b298      	uxth	r0, r3
 800cbc2:	4943      	ldr	r1, [pc, #268]	; (800ccd0 <etharp_tmr+0x14c>)
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	4413      	add	r3, r2
 800cbcc:	00db      	lsls	r3, r3, #3
 800cbce:	440b      	add	r3, r1
 800cbd0:	3312      	adds	r3, #18
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cbd6:	493e      	ldr	r1, [pc, #248]	; (800ccd0 <etharp_tmr+0x14c>)
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	4613      	mov	r3, r2
 800cbdc:	005b      	lsls	r3, r3, #1
 800cbde:	4413      	add	r3, r2
 800cbe0:	00db      	lsls	r3, r3, #3
 800cbe2:	440b      	add	r3, r1
 800cbe4:	3312      	adds	r3, #18
 800cbe6:	881b      	ldrh	r3, [r3, #0]
 800cbe8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cbec:	d215      	bcs.n	800cc1a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cbee:	4938      	ldr	r1, [pc, #224]	; (800ccd0 <etharp_tmr+0x14c>)
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	4413      	add	r3, r2
 800cbf8:	00db      	lsls	r3, r3, #3
 800cbfa:	440b      	add	r3, r1
 800cbfc:	3314      	adds	r3, #20
 800cbfe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d10e      	bne.n	800cc22 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cc04:	4932      	ldr	r1, [pc, #200]	; (800ccd0 <etharp_tmr+0x14c>)
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	005b      	lsls	r3, r3, #1
 800cc0c:	4413      	add	r3, r2
 800cc0e:	00db      	lsls	r3, r3, #3
 800cc10:	440b      	add	r3, r1
 800cc12:	3312      	adds	r3, #18
 800cc14:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc16:	2b04      	cmp	r3, #4
 800cc18:	d903      	bls.n	800cc22 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff ff80 	bl	800cb20 <etharp_free_entry>
 800cc20:	e04a      	b.n	800ccb8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cc22:	492b      	ldr	r1, [pc, #172]	; (800ccd0 <etharp_tmr+0x14c>)
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	4613      	mov	r3, r2
 800cc28:	005b      	lsls	r3, r3, #1
 800cc2a:	4413      	add	r3, r2
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	440b      	add	r3, r1
 800cc30:	3314      	adds	r3, #20
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	2b03      	cmp	r3, #3
 800cc36:	d10a      	bne.n	800cc4e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cc38:	4925      	ldr	r1, [pc, #148]	; (800ccd0 <etharp_tmr+0x14c>)
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	005b      	lsls	r3, r3, #1
 800cc40:	4413      	add	r3, r2
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	440b      	add	r3, r1
 800cc46:	3314      	adds	r3, #20
 800cc48:	2204      	movs	r2, #4
 800cc4a:	701a      	strb	r2, [r3, #0]
 800cc4c:	e034      	b.n	800ccb8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cc4e:	4920      	ldr	r1, [pc, #128]	; (800ccd0 <etharp_tmr+0x14c>)
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	4613      	mov	r3, r2
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	4413      	add	r3, r2
 800cc58:	00db      	lsls	r3, r3, #3
 800cc5a:	440b      	add	r3, r1
 800cc5c:	3314      	adds	r3, #20
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	2b04      	cmp	r3, #4
 800cc62:	d10a      	bne.n	800cc7a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cc64:	491a      	ldr	r1, [pc, #104]	; (800ccd0 <etharp_tmr+0x14c>)
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	4613      	mov	r3, r2
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	4413      	add	r3, r2
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	440b      	add	r3, r1
 800cc72:	3314      	adds	r3, #20
 800cc74:	2202      	movs	r2, #2
 800cc76:	701a      	strb	r2, [r3, #0]
 800cc78:	e01e      	b.n	800ccb8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cc7a:	4915      	ldr	r1, [pc, #84]	; (800ccd0 <etharp_tmr+0x14c>)
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	4413      	add	r3, r2
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	440b      	add	r3, r1
 800cc88:	3314      	adds	r3, #20
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d113      	bne.n	800ccb8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cc90:	490f      	ldr	r1, [pc, #60]	; (800ccd0 <etharp_tmr+0x14c>)
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	4613      	mov	r3, r2
 800cc96:	005b      	lsls	r3, r3, #1
 800cc98:	4413      	add	r3, r2
 800cc9a:	00db      	lsls	r3, r3, #3
 800cc9c:	440b      	add	r3, r1
 800cc9e:	3308      	adds	r3, #8
 800cca0:	6818      	ldr	r0, [r3, #0]
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	4613      	mov	r3, r2
 800cca6:	005b      	lsls	r3, r3, #1
 800cca8:	4413      	add	r3, r2
 800ccaa:	00db      	lsls	r3, r3, #3
 800ccac:	4a08      	ldr	r2, [pc, #32]	; (800ccd0 <etharp_tmr+0x14c>)
 800ccae:	4413      	add	r3, r2
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	f000 fe6e 	bl	800d994 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	607b      	str	r3, [r7, #4]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b09      	cmp	r3, #9
 800ccc2:	f77f af65 	ble.w	800cb90 <etharp_tmr+0xc>
      }
    }
  }
}
 800ccc6:	bf00      	nop
 800ccc8:	bf00      	nop
 800ccca:	3708      	adds	r7, #8
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	24005cb8 	.word	0x24005cb8

0800ccd4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b08a      	sub	sp, #40	; 0x28
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	607a      	str	r2, [r7, #4]
 800cce0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cce2:	230a      	movs	r3, #10
 800cce4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cce6:	230a      	movs	r3, #10
 800cce8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ccea:	230a      	movs	r3, #10
 800ccec:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ccf2:	230a      	movs	r3, #10
 800ccf4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	83bb      	strh	r3, [r7, #28]
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	837b      	strh	r3, [r7, #26]
 800ccfe:	2300      	movs	r3, #0
 800cd00:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd02:	2300      	movs	r3, #0
 800cd04:	843b      	strh	r3, [r7, #32]
 800cd06:	e0ae      	b.n	800ce66 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cd08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd0c:	49a6      	ldr	r1, [pc, #664]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800cd0e:	4613      	mov	r3, r2
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	4413      	add	r3, r2
 800cd14:	00db      	lsls	r3, r3, #3
 800cd16:	440b      	add	r3, r1
 800cd18:	3314      	adds	r3, #20
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cd1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cd22:	2b0a      	cmp	r3, #10
 800cd24:	d105      	bne.n	800cd32 <etharp_find_entry+0x5e>
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d102      	bne.n	800cd32 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cd2c:	8c3b      	ldrh	r3, [r7, #32]
 800cd2e:	847b      	strh	r3, [r7, #34]	; 0x22
 800cd30:	e095      	b.n	800ce5e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cd32:	7dfb      	ldrb	r3, [r7, #23]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	f000 8092 	beq.w	800ce5e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d009      	beq.n	800cd54 <etharp_find_entry+0x80>
 800cd40:	7dfb      	ldrb	r3, [r7, #23]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d806      	bhi.n	800cd54 <etharp_find_entry+0x80>
 800cd46:	4b99      	ldr	r3, [pc, #612]	; (800cfac <etharp_find_entry+0x2d8>)
 800cd48:	f240 1223 	movw	r2, #291	; 0x123
 800cd4c:	4998      	ldr	r1, [pc, #608]	; (800cfb0 <etharp_find_entry+0x2dc>)
 800cd4e:	4899      	ldr	r0, [pc, #612]	; (800cfb4 <etharp_find_entry+0x2e0>)
 800cd50:	f002 fc40 	bl	800f5d4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d020      	beq.n	800cd9c <etharp_find_entry+0xc8>
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6819      	ldr	r1, [r3, #0]
 800cd5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd62:	4891      	ldr	r0, [pc, #580]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800cd64:	4613      	mov	r3, r2
 800cd66:	005b      	lsls	r3, r3, #1
 800cd68:	4413      	add	r3, r2
 800cd6a:	00db      	lsls	r3, r3, #3
 800cd6c:	4403      	add	r3, r0
 800cd6e:	3304      	adds	r3, #4
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4299      	cmp	r1, r3
 800cd74:	d112      	bne.n	800cd9c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d00c      	beq.n	800cd96 <etharp_find_entry+0xc2>
 800cd7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd80:	4989      	ldr	r1, [pc, #548]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800cd82:	4613      	mov	r3, r2
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	4413      	add	r3, r2
 800cd88:	00db      	lsls	r3, r3, #3
 800cd8a:	440b      	add	r3, r1
 800cd8c:	3308      	adds	r3, #8
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d102      	bne.n	800cd9c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cd96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd9a:	e100      	b.n	800cf9e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cd9c:	7dfb      	ldrb	r3, [r7, #23]
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d140      	bne.n	800ce24 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cda2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cda6:	4980      	ldr	r1, [pc, #512]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800cda8:	4613      	mov	r3, r2
 800cdaa:	005b      	lsls	r3, r3, #1
 800cdac:	4413      	add	r3, r2
 800cdae:	00db      	lsls	r3, r3, #3
 800cdb0:	440b      	add	r3, r1
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d01a      	beq.n	800cdee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cdb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdbc:	497a      	ldr	r1, [pc, #488]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	005b      	lsls	r3, r3, #1
 800cdc2:	4413      	add	r3, r2
 800cdc4:	00db      	lsls	r3, r3, #3
 800cdc6:	440b      	add	r3, r1
 800cdc8:	3312      	adds	r3, #18
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	8bba      	ldrh	r2, [r7, #28]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d845      	bhi.n	800ce5e <etharp_find_entry+0x18a>
            old_queue = i;
 800cdd2:	8c3b      	ldrh	r3, [r7, #32]
 800cdd4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cdd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdda:	4973      	ldr	r1, [pc, #460]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800cddc:	4613      	mov	r3, r2
 800cdde:	005b      	lsls	r3, r3, #1
 800cde0:	4413      	add	r3, r2
 800cde2:	00db      	lsls	r3, r3, #3
 800cde4:	440b      	add	r3, r1
 800cde6:	3312      	adds	r3, #18
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	83bb      	strh	r3, [r7, #28]
 800cdec:	e037      	b.n	800ce5e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cdee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdf2:	496d      	ldr	r1, [pc, #436]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	4413      	add	r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	440b      	add	r3, r1
 800cdfe:	3312      	adds	r3, #18
 800ce00:	881b      	ldrh	r3, [r3, #0]
 800ce02:	8b7a      	ldrh	r2, [r7, #26]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d82a      	bhi.n	800ce5e <etharp_find_entry+0x18a>
            old_pending = i;
 800ce08:	8c3b      	ldrh	r3, [r7, #32]
 800ce0a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ce0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce10:	4965      	ldr	r1, [pc, #404]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800ce12:	4613      	mov	r3, r2
 800ce14:	005b      	lsls	r3, r3, #1
 800ce16:	4413      	add	r3, r2
 800ce18:	00db      	lsls	r3, r3, #3
 800ce1a:	440b      	add	r3, r1
 800ce1c:	3312      	adds	r3, #18
 800ce1e:	881b      	ldrh	r3, [r3, #0]
 800ce20:	837b      	strh	r3, [r7, #26]
 800ce22:	e01c      	b.n	800ce5e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ce24:	7dfb      	ldrb	r3, [r7, #23]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d919      	bls.n	800ce5e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ce2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce2e:	495e      	ldr	r1, [pc, #376]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800ce30:	4613      	mov	r3, r2
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	4413      	add	r3, r2
 800ce36:	00db      	lsls	r3, r3, #3
 800ce38:	440b      	add	r3, r1
 800ce3a:	3312      	adds	r3, #18
 800ce3c:	881b      	ldrh	r3, [r3, #0]
 800ce3e:	8b3a      	ldrh	r2, [r7, #24]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d80c      	bhi.n	800ce5e <etharp_find_entry+0x18a>
            old_stable = i;
 800ce44:	8c3b      	ldrh	r3, [r7, #32]
 800ce46:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ce48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce4c:	4956      	ldr	r1, [pc, #344]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800ce4e:	4613      	mov	r3, r2
 800ce50:	005b      	lsls	r3, r3, #1
 800ce52:	4413      	add	r3, r2
 800ce54:	00db      	lsls	r3, r3, #3
 800ce56:	440b      	add	r3, r1
 800ce58:	3312      	adds	r3, #18
 800ce5a:	881b      	ldrh	r3, [r3, #0]
 800ce5c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce5e:	8c3b      	ldrh	r3, [r7, #32]
 800ce60:	3301      	adds	r3, #1
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	843b      	strh	r3, [r7, #32]
 800ce66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce6a:	2b09      	cmp	r3, #9
 800ce6c:	f77f af4c 	ble.w	800cd08 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ce70:	7afb      	ldrb	r3, [r7, #11]
 800ce72:	f003 0302 	and.w	r3, r3, #2
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d108      	bne.n	800ce8c <etharp_find_entry+0x1b8>
 800ce7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ce7e:	2b0a      	cmp	r3, #10
 800ce80:	d107      	bne.n	800ce92 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ce82:	7afb      	ldrb	r3, [r7, #11]
 800ce84:	f003 0301 	and.w	r3, r3, #1
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d102      	bne.n	800ce92 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ce8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce90:	e085      	b.n	800cf9e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ce92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ce96:	2b09      	cmp	r3, #9
 800ce98:	dc02      	bgt.n	800cea0 <etharp_find_entry+0x1cc>
    i = empty;
 800ce9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce9c:	843b      	strh	r3, [r7, #32]
 800ce9e:	e039      	b.n	800cf14 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cea0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cea4:	2b09      	cmp	r3, #9
 800cea6:	dc14      	bgt.n	800ced2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cea8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceaa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ceac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ceb0:	493d      	ldr	r1, [pc, #244]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	005b      	lsls	r3, r3, #1
 800ceb6:	4413      	add	r3, r2
 800ceb8:	00db      	lsls	r3, r3, #3
 800ceba:	440b      	add	r3, r1
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d018      	beq.n	800cef4 <etharp_find_entry+0x220>
 800cec2:	4b3a      	ldr	r3, [pc, #232]	; (800cfac <etharp_find_entry+0x2d8>)
 800cec4:	f240 126d 	movw	r2, #365	; 0x16d
 800cec8:	493b      	ldr	r1, [pc, #236]	; (800cfb8 <etharp_find_entry+0x2e4>)
 800ceca:	483a      	ldr	r0, [pc, #232]	; (800cfb4 <etharp_find_entry+0x2e0>)
 800cecc:	f002 fb82 	bl	800f5d4 <iprintf>
 800ced0:	e010      	b.n	800cef4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ced2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ced6:	2b09      	cmp	r3, #9
 800ced8:	dc02      	bgt.n	800cee0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ceda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cedc:	843b      	strh	r3, [r7, #32]
 800cede:	e009      	b.n	800cef4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cee0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cee4:	2b09      	cmp	r3, #9
 800cee6:	dc02      	bgt.n	800ceee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cee8:	8bfb      	ldrh	r3, [r7, #30]
 800ceea:	843b      	strh	r3, [r7, #32]
 800ceec:	e002      	b.n	800cef4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ceee:	f04f 33ff 	mov.w	r3, #4294967295
 800cef2:	e054      	b.n	800cf9e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cef4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cef8:	2b09      	cmp	r3, #9
 800cefa:	dd06      	ble.n	800cf0a <etharp_find_entry+0x236>
 800cefc:	4b2b      	ldr	r3, [pc, #172]	; (800cfac <etharp_find_entry+0x2d8>)
 800cefe:	f240 127f 	movw	r2, #383	; 0x17f
 800cf02:	492e      	ldr	r1, [pc, #184]	; (800cfbc <etharp_find_entry+0x2e8>)
 800cf04:	482b      	ldr	r0, [pc, #172]	; (800cfb4 <etharp_find_entry+0x2e0>)
 800cf06:	f002 fb65 	bl	800f5d4 <iprintf>
    etharp_free_entry(i);
 800cf0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7ff fe06 	bl	800cb20 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf18:	2b09      	cmp	r3, #9
 800cf1a:	dd06      	ble.n	800cf2a <etharp_find_entry+0x256>
 800cf1c:	4b23      	ldr	r3, [pc, #140]	; (800cfac <etharp_find_entry+0x2d8>)
 800cf1e:	f240 1283 	movw	r2, #387	; 0x183
 800cf22:	4926      	ldr	r1, [pc, #152]	; (800cfbc <etharp_find_entry+0x2e8>)
 800cf24:	4823      	ldr	r0, [pc, #140]	; (800cfb4 <etharp_find_entry+0x2e0>)
 800cf26:	f002 fb55 	bl	800f5d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cf2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf2e:	491e      	ldr	r1, [pc, #120]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800cf30:	4613      	mov	r3, r2
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	4413      	add	r3, r2
 800cf36:	00db      	lsls	r3, r3, #3
 800cf38:	440b      	add	r3, r1
 800cf3a:	3314      	adds	r3, #20
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d006      	beq.n	800cf50 <etharp_find_entry+0x27c>
 800cf42:	4b1a      	ldr	r3, [pc, #104]	; (800cfac <etharp_find_entry+0x2d8>)
 800cf44:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cf48:	491d      	ldr	r1, [pc, #116]	; (800cfc0 <etharp_find_entry+0x2ec>)
 800cf4a:	481a      	ldr	r0, [pc, #104]	; (800cfb4 <etharp_find_entry+0x2e0>)
 800cf4c:	f002 fb42 	bl	800f5d4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d00b      	beq.n	800cf6e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cf56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6819      	ldr	r1, [r3, #0]
 800cf5e:	4812      	ldr	r0, [pc, #72]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800cf60:	4613      	mov	r3, r2
 800cf62:	005b      	lsls	r3, r3, #1
 800cf64:	4413      	add	r3, r2
 800cf66:	00db      	lsls	r3, r3, #3
 800cf68:	4403      	add	r3, r0
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cf6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf72:	490d      	ldr	r1, [pc, #52]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800cf74:	4613      	mov	r3, r2
 800cf76:	005b      	lsls	r3, r3, #1
 800cf78:	4413      	add	r3, r2
 800cf7a:	00db      	lsls	r3, r3, #3
 800cf7c:	440b      	add	r3, r1
 800cf7e:	3312      	adds	r3, #18
 800cf80:	2200      	movs	r2, #0
 800cf82:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cf84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf88:	4907      	ldr	r1, [pc, #28]	; (800cfa8 <etharp_find_entry+0x2d4>)
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	4413      	add	r3, r2
 800cf90:	00db      	lsls	r3, r3, #3
 800cf92:	440b      	add	r3, r1
 800cf94:	3308      	adds	r3, #8
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cf9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3728      	adds	r7, #40	; 0x28
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	24005cb8 	.word	0x24005cb8
 800cfac:	08011cf4 	.word	0x08011cf4
 800cfb0:	08011d2c 	.word	0x08011d2c
 800cfb4:	08011d6c 	.word	0x08011d6c
 800cfb8:	08011d94 	.word	0x08011d94
 800cfbc:	08011dac 	.word	0x08011dac
 800cfc0:	08011dc0 	.word	0x08011dc0

0800cfc4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b088      	sub	sp, #32
 800cfc8:	af02      	add	r7, sp, #8
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
 800cfd0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cfd8:	2b06      	cmp	r3, #6
 800cfda:	d006      	beq.n	800cfea <etharp_update_arp_entry+0x26>
 800cfdc:	4b48      	ldr	r3, [pc, #288]	; (800d100 <etharp_update_arp_entry+0x13c>)
 800cfde:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cfe2:	4948      	ldr	r1, [pc, #288]	; (800d104 <etharp_update_arp_entry+0x140>)
 800cfe4:	4848      	ldr	r0, [pc, #288]	; (800d108 <etharp_update_arp_entry+0x144>)
 800cfe6:	f002 faf5 	bl	800f5d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d012      	beq.n	800d016 <etharp_update_arp_entry+0x52>
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00e      	beq.n	800d016 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	68f9      	ldr	r1, [r7, #12]
 800cffe:	4618      	mov	r0, r3
 800d000:	f001 f91a 	bl	800e238 <ip4_addr_isbroadcast_u32>
 800d004:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d006:	2b00      	cmp	r3, #0
 800d008:	d105      	bne.n	800d016 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d012:	2be0      	cmp	r3, #224	; 0xe0
 800d014:	d102      	bne.n	800d01c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d016:	f06f 030f 	mvn.w	r3, #15
 800d01a:	e06c      	b.n	800d0f6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d01c:	78fb      	ldrb	r3, [r7, #3]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	4619      	mov	r1, r3
 800d022:	68b8      	ldr	r0, [r7, #8]
 800d024:	f7ff fe56 	bl	800ccd4 <etharp_find_entry>
 800d028:	4603      	mov	r3, r0
 800d02a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d02c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d030:	2b00      	cmp	r3, #0
 800d032:	da02      	bge.n	800d03a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d034:	8afb      	ldrh	r3, [r7, #22]
 800d036:	b25b      	sxtb	r3, r3
 800d038:	e05d      	b.n	800d0f6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d03a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d03e:	4933      	ldr	r1, [pc, #204]	; (800d10c <etharp_update_arp_entry+0x148>)
 800d040:	4613      	mov	r3, r2
 800d042:	005b      	lsls	r3, r3, #1
 800d044:	4413      	add	r3, r2
 800d046:	00db      	lsls	r3, r3, #3
 800d048:	440b      	add	r3, r1
 800d04a:	3314      	adds	r3, #20
 800d04c:	2202      	movs	r2, #2
 800d04e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d050:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d054:	492d      	ldr	r1, [pc, #180]	; (800d10c <etharp_update_arp_entry+0x148>)
 800d056:	4613      	mov	r3, r2
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	4413      	add	r3, r2
 800d05c:	00db      	lsls	r3, r3, #3
 800d05e:	440b      	add	r3, r1
 800d060:	3308      	adds	r3, #8
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d066:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d06a:	4613      	mov	r3, r2
 800d06c:	005b      	lsls	r3, r3, #1
 800d06e:	4413      	add	r3, r2
 800d070:	00db      	lsls	r3, r3, #3
 800d072:	3308      	adds	r3, #8
 800d074:	4a25      	ldr	r2, [pc, #148]	; (800d10c <etharp_update_arp_entry+0x148>)
 800d076:	4413      	add	r3, r2
 800d078:	3304      	adds	r3, #4
 800d07a:	2206      	movs	r2, #6
 800d07c:	6879      	ldr	r1, [r7, #4]
 800d07e:	4618      	mov	r0, r3
 800d080:	f002 fc1b 	bl	800f8ba <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d084:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d088:	4920      	ldr	r1, [pc, #128]	; (800d10c <etharp_update_arp_entry+0x148>)
 800d08a:	4613      	mov	r3, r2
 800d08c:	005b      	lsls	r3, r3, #1
 800d08e:	4413      	add	r3, r2
 800d090:	00db      	lsls	r3, r3, #3
 800d092:	440b      	add	r3, r1
 800d094:	3312      	adds	r3, #18
 800d096:	2200      	movs	r2, #0
 800d098:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d09a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d09e:	491b      	ldr	r1, [pc, #108]	; (800d10c <etharp_update_arp_entry+0x148>)
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	4413      	add	r3, r2
 800d0a6:	00db      	lsls	r3, r3, #3
 800d0a8:	440b      	add	r3, r1
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d021      	beq.n	800d0f4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d0b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0b4:	4915      	ldr	r1, [pc, #84]	; (800d10c <etharp_update_arp_entry+0x148>)
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	005b      	lsls	r3, r3, #1
 800d0ba:	4413      	add	r3, r2
 800d0bc:	00db      	lsls	r3, r3, #3
 800d0be:	440b      	add	r3, r1
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d0c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0c8:	4910      	ldr	r1, [pc, #64]	; (800d10c <etharp_update_arp_entry+0x148>)
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	005b      	lsls	r3, r3, #1
 800d0ce:	4413      	add	r3, r2
 800d0d0:	00db      	lsls	r3, r3, #3
 800d0d2:	440b      	add	r3, r1
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d0de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6939      	ldr	r1, [r7, #16]
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f001 ffb3 	bl	800f054 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d0ee:	6938      	ldr	r0, [r7, #16]
 800d0f0:	f7fe fb9a 	bl	800b828 <pbuf_free>
  }
  return ERR_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3718      	adds	r7, #24
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	08011cf4 	.word	0x08011cf4
 800d104:	08011dec 	.word	0x08011dec
 800d108:	08011d6c 	.word	0x08011d6c
 800d10c:	24005cb8 	.word	0x24005cb8

0800d110 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d118:	2300      	movs	r3, #0
 800d11a:	60fb      	str	r3, [r7, #12]
 800d11c:	e01e      	b.n	800d15c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d11e:	4913      	ldr	r1, [pc, #76]	; (800d16c <etharp_cleanup_netif+0x5c>)
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	4613      	mov	r3, r2
 800d124:	005b      	lsls	r3, r3, #1
 800d126:	4413      	add	r3, r2
 800d128:	00db      	lsls	r3, r3, #3
 800d12a:	440b      	add	r3, r1
 800d12c:	3314      	adds	r3, #20
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d132:	7afb      	ldrb	r3, [r7, #11]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00e      	beq.n	800d156 <etharp_cleanup_netif+0x46>
 800d138:	490c      	ldr	r1, [pc, #48]	; (800d16c <etharp_cleanup_netif+0x5c>)
 800d13a:	68fa      	ldr	r2, [r7, #12]
 800d13c:	4613      	mov	r3, r2
 800d13e:	005b      	lsls	r3, r3, #1
 800d140:	4413      	add	r3, r2
 800d142:	00db      	lsls	r3, r3, #3
 800d144:	440b      	add	r3, r1
 800d146:	3308      	adds	r3, #8
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d102      	bne.n	800d156 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f7ff fce5 	bl	800cb20 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	3301      	adds	r3, #1
 800d15a:	60fb      	str	r3, [r7, #12]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2b09      	cmp	r3, #9
 800d160:	dddd      	ble.n	800d11e <etharp_cleanup_netif+0xe>
    }
  }
}
 800d162:	bf00      	nop
 800d164:	bf00      	nop
 800d166:	3710      	adds	r7, #16
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	24005cb8 	.word	0x24005cb8

0800d170 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d170:	b5b0      	push	{r4, r5, r7, lr}
 800d172:	b08a      	sub	sp, #40	; 0x28
 800d174:	af04      	add	r7, sp, #16
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d107      	bne.n	800d190 <etharp_input+0x20>
 800d180:	4b3d      	ldr	r3, [pc, #244]	; (800d278 <etharp_input+0x108>)
 800d182:	f240 228a 	movw	r2, #650	; 0x28a
 800d186:	493d      	ldr	r1, [pc, #244]	; (800d27c <etharp_input+0x10c>)
 800d188:	483d      	ldr	r0, [pc, #244]	; (800d280 <etharp_input+0x110>)
 800d18a:	f002 fa23 	bl	800f5d4 <iprintf>
 800d18e:	e06f      	b.n	800d270 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	881b      	ldrh	r3, [r3, #0]
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1a0:	d10c      	bne.n	800d1bc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d1a6:	2b06      	cmp	r3, #6
 800d1a8:	d108      	bne.n	800d1bc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d1ae:	2b04      	cmp	r3, #4
 800d1b0:	d104      	bne.n	800d1bc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	885b      	ldrh	r3, [r3, #2]
 800d1b6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d1b8:	2b08      	cmp	r3, #8
 800d1ba:	d003      	beq.n	800d1c4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f7fe fb33 	bl	800b828 <pbuf_free>
    return;
 800d1c2:	e055      	b.n	800d270 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	330e      	adds	r3, #14
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	3318      	adds	r3, #24
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d102      	bne.n	800d1e4 <etharp_input+0x74>
    for_us = 0;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	75fb      	strb	r3, [r7, #23]
 800d1e2:	e009      	b.n	800d1f8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	bf0c      	ite	eq
 800d1f0:	2301      	moveq	r3, #1
 800d1f2:	2300      	movne	r3, #0
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	f103 0208 	add.w	r2, r3, #8
 800d1fe:	7dfb      	ldrb	r3, [r7, #23]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d001      	beq.n	800d208 <etharp_input+0x98>
 800d204:	2301      	movs	r3, #1
 800d206:	e000      	b.n	800d20a <etharp_input+0x9a>
 800d208:	2302      	movs	r3, #2
 800d20a:	f107 010c 	add.w	r1, r7, #12
 800d20e:	6838      	ldr	r0, [r7, #0]
 800d210:	f7ff fed8 	bl	800cfc4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	88db      	ldrh	r3, [r3, #6]
 800d218:	b29b      	uxth	r3, r3
 800d21a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d21e:	d003      	beq.n	800d228 <etharp_input+0xb8>
 800d220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d224:	d01e      	beq.n	800d264 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d226:	e020      	b.n	800d26a <etharp_input+0xfa>
      if (for_us) {
 800d228:	7dfb      	ldrb	r3, [r7, #23]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d01c      	beq.n	800d268 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d244:	693a      	ldr	r2, [r7, #16]
 800d246:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d248:	2102      	movs	r1, #2
 800d24a:	9103      	str	r1, [sp, #12]
 800d24c:	f107 010c 	add.w	r1, r7, #12
 800d250:	9102      	str	r1, [sp, #8]
 800d252:	9201      	str	r2, [sp, #4]
 800d254:	9300      	str	r3, [sp, #0]
 800d256:	462b      	mov	r3, r5
 800d258:	4622      	mov	r2, r4
 800d25a:	4601      	mov	r1, r0
 800d25c:	6838      	ldr	r0, [r7, #0]
 800d25e:	f000 faeb 	bl	800d838 <etharp_raw>
      break;
 800d262:	e001      	b.n	800d268 <etharp_input+0xf8>
      break;
 800d264:	bf00      	nop
 800d266:	e000      	b.n	800d26a <etharp_input+0xfa>
      break;
 800d268:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7fe fadc 	bl	800b828 <pbuf_free>
}
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bdb0      	pop	{r4, r5, r7, pc}
 800d276:	bf00      	nop
 800d278:	08011cf4 	.word	0x08011cf4
 800d27c:	08011e44 	.word	0x08011e44
 800d280:	08011d6c 	.word	0x08011d6c

0800d284 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b086      	sub	sp, #24
 800d288:	af02      	add	r7, sp, #8
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	4613      	mov	r3, r2
 800d290:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d292:	79fa      	ldrb	r2, [r7, #7]
 800d294:	4944      	ldr	r1, [pc, #272]	; (800d3a8 <etharp_output_to_arp_index+0x124>)
 800d296:	4613      	mov	r3, r2
 800d298:	005b      	lsls	r3, r3, #1
 800d29a:	4413      	add	r3, r2
 800d29c:	00db      	lsls	r3, r3, #3
 800d29e:	440b      	add	r3, r1
 800d2a0:	3314      	adds	r3, #20
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d806      	bhi.n	800d2b6 <etharp_output_to_arp_index+0x32>
 800d2a8:	4b40      	ldr	r3, [pc, #256]	; (800d3ac <etharp_output_to_arp_index+0x128>)
 800d2aa:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d2ae:	4940      	ldr	r1, [pc, #256]	; (800d3b0 <etharp_output_to_arp_index+0x12c>)
 800d2b0:	4840      	ldr	r0, [pc, #256]	; (800d3b4 <etharp_output_to_arp_index+0x130>)
 800d2b2:	f002 f98f 	bl	800f5d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d2b6:	79fa      	ldrb	r2, [r7, #7]
 800d2b8:	493b      	ldr	r1, [pc, #236]	; (800d3a8 <etharp_output_to_arp_index+0x124>)
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	005b      	lsls	r3, r3, #1
 800d2be:	4413      	add	r3, r2
 800d2c0:	00db      	lsls	r3, r3, #3
 800d2c2:	440b      	add	r3, r1
 800d2c4:	3314      	adds	r3, #20
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d153      	bne.n	800d374 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d2cc:	79fa      	ldrb	r2, [r7, #7]
 800d2ce:	4936      	ldr	r1, [pc, #216]	; (800d3a8 <etharp_output_to_arp_index+0x124>)
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	4413      	add	r3, r2
 800d2d6:	00db      	lsls	r3, r3, #3
 800d2d8:	440b      	add	r3, r1
 800d2da:	3312      	adds	r3, #18
 800d2dc:	881b      	ldrh	r3, [r3, #0]
 800d2de:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d2e2:	d919      	bls.n	800d318 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d2e4:	79fa      	ldrb	r2, [r7, #7]
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	005b      	lsls	r3, r3, #1
 800d2ea:	4413      	add	r3, r2
 800d2ec:	00db      	lsls	r3, r3, #3
 800d2ee:	4a2e      	ldr	r2, [pc, #184]	; (800d3a8 <etharp_output_to_arp_index+0x124>)
 800d2f0:	4413      	add	r3, r2
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f000 fb4c 	bl	800d994 <etharp_request>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d138      	bne.n	800d374 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d302:	79fa      	ldrb	r2, [r7, #7]
 800d304:	4928      	ldr	r1, [pc, #160]	; (800d3a8 <etharp_output_to_arp_index+0x124>)
 800d306:	4613      	mov	r3, r2
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	4413      	add	r3, r2
 800d30c:	00db      	lsls	r3, r3, #3
 800d30e:	440b      	add	r3, r1
 800d310:	3314      	adds	r3, #20
 800d312:	2203      	movs	r2, #3
 800d314:	701a      	strb	r2, [r3, #0]
 800d316:	e02d      	b.n	800d374 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d318:	79fa      	ldrb	r2, [r7, #7]
 800d31a:	4923      	ldr	r1, [pc, #140]	; (800d3a8 <etharp_output_to_arp_index+0x124>)
 800d31c:	4613      	mov	r3, r2
 800d31e:	005b      	lsls	r3, r3, #1
 800d320:	4413      	add	r3, r2
 800d322:	00db      	lsls	r3, r3, #3
 800d324:	440b      	add	r3, r1
 800d326:	3312      	adds	r3, #18
 800d328:	881b      	ldrh	r3, [r3, #0]
 800d32a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d32e:	d321      	bcc.n	800d374 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d330:	79fa      	ldrb	r2, [r7, #7]
 800d332:	4613      	mov	r3, r2
 800d334:	005b      	lsls	r3, r3, #1
 800d336:	4413      	add	r3, r2
 800d338:	00db      	lsls	r3, r3, #3
 800d33a:	4a1b      	ldr	r2, [pc, #108]	; (800d3a8 <etharp_output_to_arp_index+0x124>)
 800d33c:	4413      	add	r3, r2
 800d33e:	1d19      	adds	r1, r3, #4
 800d340:	79fa      	ldrb	r2, [r7, #7]
 800d342:	4613      	mov	r3, r2
 800d344:	005b      	lsls	r3, r3, #1
 800d346:	4413      	add	r3, r2
 800d348:	00db      	lsls	r3, r3, #3
 800d34a:	3308      	adds	r3, #8
 800d34c:	4a16      	ldr	r2, [pc, #88]	; (800d3a8 <etharp_output_to_arp_index+0x124>)
 800d34e:	4413      	add	r3, r2
 800d350:	3304      	adds	r3, #4
 800d352:	461a      	mov	r2, r3
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f000 fafb 	bl	800d950 <etharp_request_dst>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d109      	bne.n	800d374 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d360:	79fa      	ldrb	r2, [r7, #7]
 800d362:	4911      	ldr	r1, [pc, #68]	; (800d3a8 <etharp_output_to_arp_index+0x124>)
 800d364:	4613      	mov	r3, r2
 800d366:	005b      	lsls	r3, r3, #1
 800d368:	4413      	add	r3, r2
 800d36a:	00db      	lsls	r3, r3, #3
 800d36c:	440b      	add	r3, r1
 800d36e:	3314      	adds	r3, #20
 800d370:	2203      	movs	r2, #3
 800d372:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d37a:	79fa      	ldrb	r2, [r7, #7]
 800d37c:	4613      	mov	r3, r2
 800d37e:	005b      	lsls	r3, r3, #1
 800d380:	4413      	add	r3, r2
 800d382:	00db      	lsls	r3, r3, #3
 800d384:	3308      	adds	r3, #8
 800d386:	4a08      	ldr	r2, [pc, #32]	; (800d3a8 <etharp_output_to_arp_index+0x124>)
 800d388:	4413      	add	r3, r2
 800d38a:	3304      	adds	r3, #4
 800d38c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d390:	9200      	str	r2, [sp, #0]
 800d392:	460a      	mov	r2, r1
 800d394:	68b9      	ldr	r1, [r7, #8]
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f001 fe5c 	bl	800f054 <ethernet_output>
 800d39c:	4603      	mov	r3, r0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	24005cb8 	.word	0x24005cb8
 800d3ac:	08011cf4 	.word	0x08011cf4
 800d3b0:	08011e64 	.word	0x08011e64
 800d3b4:	08011d6c 	.word	0x08011d6c

0800d3b8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08a      	sub	sp, #40	; 0x28
 800d3bc:	af02      	add	r7, sp, #8
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d106      	bne.n	800d3dc <etharp_output+0x24>
 800d3ce:	4b73      	ldr	r3, [pc, #460]	; (800d59c <etharp_output+0x1e4>)
 800d3d0:	f240 321e 	movw	r2, #798	; 0x31e
 800d3d4:	4972      	ldr	r1, [pc, #456]	; (800d5a0 <etharp_output+0x1e8>)
 800d3d6:	4873      	ldr	r0, [pc, #460]	; (800d5a4 <etharp_output+0x1ec>)
 800d3d8:	f002 f8fc 	bl	800f5d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d106      	bne.n	800d3f0 <etharp_output+0x38>
 800d3e2:	4b6e      	ldr	r3, [pc, #440]	; (800d59c <etharp_output+0x1e4>)
 800d3e4:	f240 321f 	movw	r2, #799	; 0x31f
 800d3e8:	496f      	ldr	r1, [pc, #444]	; (800d5a8 <etharp_output+0x1f0>)
 800d3ea:	486e      	ldr	r0, [pc, #440]	; (800d5a4 <etharp_output+0x1ec>)
 800d3ec:	f002 f8f2 	bl	800f5d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d106      	bne.n	800d404 <etharp_output+0x4c>
 800d3f6:	4b69      	ldr	r3, [pc, #420]	; (800d59c <etharp_output+0x1e4>)
 800d3f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d3fc:	496b      	ldr	r1, [pc, #428]	; (800d5ac <etharp_output+0x1f4>)
 800d3fe:	4869      	ldr	r0, [pc, #420]	; (800d5a4 <etharp_output+0x1ec>)
 800d400:	f002 f8e8 	bl	800f5d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	68f9      	ldr	r1, [r7, #12]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 ff14 	bl	800e238 <ip4_addr_isbroadcast_u32>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d416:	4b66      	ldr	r3, [pc, #408]	; (800d5b0 <etharp_output+0x1f8>)
 800d418:	61fb      	str	r3, [r7, #28]
 800d41a:	e0af      	b.n	800d57c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d424:	2be0      	cmp	r3, #224	; 0xe0
 800d426:	d118      	bne.n	800d45a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d428:	2301      	movs	r3, #1
 800d42a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d42c:	2300      	movs	r3, #0
 800d42e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d430:	235e      	movs	r3, #94	; 0x5e
 800d432:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	3301      	adds	r3, #1
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3302      	adds	r3, #2
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	3303      	adds	r3, #3
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d452:	f107 0310 	add.w	r3, r7, #16
 800d456:	61fb      	str	r3, [r7, #28]
 800d458:	e090      	b.n	800d57c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	3304      	adds	r3, #4
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	405a      	eors	r2, r3
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	3308      	adds	r3, #8
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4013      	ands	r3, r2
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d012      	beq.n	800d498 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d478:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d00b      	beq.n	800d498 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	330c      	adds	r3, #12
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d003      	beq.n	800d492 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	330c      	adds	r3, #12
 800d48e:	61bb      	str	r3, [r7, #24]
 800d490:	e002      	b.n	800d498 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d492:	f06f 0303 	mvn.w	r3, #3
 800d496:	e07d      	b.n	800d594 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d498:	4b46      	ldr	r3, [pc, #280]	; (800d5b4 <etharp_output+0x1fc>)
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	4619      	mov	r1, r3
 800d49e:	4a46      	ldr	r2, [pc, #280]	; (800d5b8 <etharp_output+0x200>)
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	440b      	add	r3, r1
 800d4a6:	00db      	lsls	r3, r3, #3
 800d4a8:	4413      	add	r3, r2
 800d4aa:	3314      	adds	r3, #20
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d925      	bls.n	800d4fe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d4b2:	4b40      	ldr	r3, [pc, #256]	; (800d5b4 <etharp_output+0x1fc>)
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	4a3f      	ldr	r2, [pc, #252]	; (800d5b8 <etharp_output+0x200>)
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	005b      	lsls	r3, r3, #1
 800d4be:	440b      	add	r3, r1
 800d4c0:	00db      	lsls	r3, r3, #3
 800d4c2:	4413      	add	r3, r2
 800d4c4:	3308      	adds	r3, #8
 800d4c6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d117      	bne.n	800d4fe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	4b38      	ldr	r3, [pc, #224]	; (800d5b4 <etharp_output+0x1fc>)
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	4937      	ldr	r1, [pc, #220]	; (800d5b8 <etharp_output+0x200>)
 800d4da:	4603      	mov	r3, r0
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	4403      	add	r3, r0
 800d4e0:	00db      	lsls	r3, r3, #3
 800d4e2:	440b      	add	r3, r1
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d108      	bne.n	800d4fe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d4ec:	4b31      	ldr	r3, [pc, #196]	; (800d5b4 <etharp_output+0x1fc>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	68b9      	ldr	r1, [r7, #8]
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f7ff fec5 	bl	800d284 <etharp_output_to_arp_index>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	e04a      	b.n	800d594 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d4fe:	2300      	movs	r3, #0
 800d500:	75fb      	strb	r3, [r7, #23]
 800d502:	e031      	b.n	800d568 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d504:	7dfa      	ldrb	r2, [r7, #23]
 800d506:	492c      	ldr	r1, [pc, #176]	; (800d5b8 <etharp_output+0x200>)
 800d508:	4613      	mov	r3, r2
 800d50a:	005b      	lsls	r3, r3, #1
 800d50c:	4413      	add	r3, r2
 800d50e:	00db      	lsls	r3, r3, #3
 800d510:	440b      	add	r3, r1
 800d512:	3314      	adds	r3, #20
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	2b01      	cmp	r3, #1
 800d518:	d923      	bls.n	800d562 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d51a:	7dfa      	ldrb	r2, [r7, #23]
 800d51c:	4926      	ldr	r1, [pc, #152]	; (800d5b8 <etharp_output+0x200>)
 800d51e:	4613      	mov	r3, r2
 800d520:	005b      	lsls	r3, r3, #1
 800d522:	4413      	add	r3, r2
 800d524:	00db      	lsls	r3, r3, #3
 800d526:	440b      	add	r3, r1
 800d528:	3308      	adds	r3, #8
 800d52a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d117      	bne.n	800d562 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	6819      	ldr	r1, [r3, #0]
 800d536:	7dfa      	ldrb	r2, [r7, #23]
 800d538:	481f      	ldr	r0, [pc, #124]	; (800d5b8 <etharp_output+0x200>)
 800d53a:	4613      	mov	r3, r2
 800d53c:	005b      	lsls	r3, r3, #1
 800d53e:	4413      	add	r3, r2
 800d540:	00db      	lsls	r3, r3, #3
 800d542:	4403      	add	r3, r0
 800d544:	3304      	adds	r3, #4
 800d546:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d548:	4299      	cmp	r1, r3
 800d54a:	d10a      	bne.n	800d562 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d54c:	4a19      	ldr	r2, [pc, #100]	; (800d5b4 <etharp_output+0x1fc>)
 800d54e:	7dfb      	ldrb	r3, [r7, #23]
 800d550:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d552:	7dfb      	ldrb	r3, [r7, #23]
 800d554:	461a      	mov	r2, r3
 800d556:	68b9      	ldr	r1, [r7, #8]
 800d558:	68f8      	ldr	r0, [r7, #12]
 800d55a:	f7ff fe93 	bl	800d284 <etharp_output_to_arp_index>
 800d55e:	4603      	mov	r3, r0
 800d560:	e018      	b.n	800d594 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d562:	7dfb      	ldrb	r3, [r7, #23]
 800d564:	3301      	adds	r3, #1
 800d566:	75fb      	strb	r3, [r7, #23]
 800d568:	7dfb      	ldrb	r3, [r7, #23]
 800d56a:	2b09      	cmp	r3, #9
 800d56c:	d9ca      	bls.n	800d504 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d56e:	68ba      	ldr	r2, [r7, #8]
 800d570:	69b9      	ldr	r1, [r7, #24]
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f000 f822 	bl	800d5bc <etharp_query>
 800d578:	4603      	mov	r3, r0
 800d57a:	e00b      	b.n	800d594 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d582:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d586:	9300      	str	r3, [sp, #0]
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	68b9      	ldr	r1, [r7, #8]
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f001 fd61 	bl	800f054 <ethernet_output>
 800d592:	4603      	mov	r3, r0
}
 800d594:	4618      	mov	r0, r3
 800d596:	3720      	adds	r7, #32
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	08011cf4 	.word	0x08011cf4
 800d5a0:	08011e44 	.word	0x08011e44
 800d5a4:	08011d6c 	.word	0x08011d6c
 800d5a8:	08011e94 	.word	0x08011e94
 800d5ac:	08011e34 	.word	0x08011e34
 800d5b0:	080124ac 	.word	0x080124ac
 800d5b4:	24005da8 	.word	0x24005da8
 800d5b8:	24005cb8 	.word	0x24005cb8

0800d5bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08c      	sub	sp, #48	; 0x30
 800d5c0:	af02      	add	r7, sp, #8
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	3326      	adds	r3, #38	; 0x26
 800d5cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d5ce:	23ff      	movs	r3, #255	; 0xff
 800d5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68f9      	ldr	r1, [r7, #12]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f000 fe2a 	bl	800e238 <ip4_addr_isbroadcast_u32>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d10c      	bne.n	800d604 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d5f2:	2be0      	cmp	r3, #224	; 0xe0
 800d5f4:	d006      	beq.n	800d604 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d003      	beq.n	800d604 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d102      	bne.n	800d60a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d604:	f06f 030f 	mvn.w	r3, #15
 800d608:	e101      	b.n	800d80e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	2101      	movs	r1, #1
 800d60e:	68b8      	ldr	r0, [r7, #8]
 800d610:	f7ff fb60 	bl	800ccd4 <etharp_find_entry>
 800d614:	4603      	mov	r3, r0
 800d616:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d618:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	da02      	bge.n	800d626 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d620:	8a7b      	ldrh	r3, [r7, #18]
 800d622:	b25b      	sxtb	r3, r3
 800d624:	e0f3      	b.n	800d80e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d626:	8a7b      	ldrh	r3, [r7, #18]
 800d628:	2b7e      	cmp	r3, #126	; 0x7e
 800d62a:	d906      	bls.n	800d63a <etharp_query+0x7e>
 800d62c:	4b7a      	ldr	r3, [pc, #488]	; (800d818 <etharp_query+0x25c>)
 800d62e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d632:	497a      	ldr	r1, [pc, #488]	; (800d81c <etharp_query+0x260>)
 800d634:	487a      	ldr	r0, [pc, #488]	; (800d820 <etharp_query+0x264>)
 800d636:	f001 ffcd 	bl	800f5d4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d63a:	8a7b      	ldrh	r3, [r7, #18]
 800d63c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d63e:	7c7a      	ldrb	r2, [r7, #17]
 800d640:	4978      	ldr	r1, [pc, #480]	; (800d824 <etharp_query+0x268>)
 800d642:	4613      	mov	r3, r2
 800d644:	005b      	lsls	r3, r3, #1
 800d646:	4413      	add	r3, r2
 800d648:	00db      	lsls	r3, r3, #3
 800d64a:	440b      	add	r3, r1
 800d64c:	3314      	adds	r3, #20
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d115      	bne.n	800d680 <etharp_query+0xc4>
    is_new_entry = 1;
 800d654:	2301      	movs	r3, #1
 800d656:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d658:	7c7a      	ldrb	r2, [r7, #17]
 800d65a:	4972      	ldr	r1, [pc, #456]	; (800d824 <etharp_query+0x268>)
 800d65c:	4613      	mov	r3, r2
 800d65e:	005b      	lsls	r3, r3, #1
 800d660:	4413      	add	r3, r2
 800d662:	00db      	lsls	r3, r3, #3
 800d664:	440b      	add	r3, r1
 800d666:	3314      	adds	r3, #20
 800d668:	2201      	movs	r2, #1
 800d66a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d66c:	7c7a      	ldrb	r2, [r7, #17]
 800d66e:	496d      	ldr	r1, [pc, #436]	; (800d824 <etharp_query+0x268>)
 800d670:	4613      	mov	r3, r2
 800d672:	005b      	lsls	r3, r3, #1
 800d674:	4413      	add	r3, r2
 800d676:	00db      	lsls	r3, r3, #3
 800d678:	440b      	add	r3, r1
 800d67a:	3308      	adds	r3, #8
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d680:	7c7a      	ldrb	r2, [r7, #17]
 800d682:	4968      	ldr	r1, [pc, #416]	; (800d824 <etharp_query+0x268>)
 800d684:	4613      	mov	r3, r2
 800d686:	005b      	lsls	r3, r3, #1
 800d688:	4413      	add	r3, r2
 800d68a:	00db      	lsls	r3, r3, #3
 800d68c:	440b      	add	r3, r1
 800d68e:	3314      	adds	r3, #20
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	2b01      	cmp	r3, #1
 800d694:	d011      	beq.n	800d6ba <etharp_query+0xfe>
 800d696:	7c7a      	ldrb	r2, [r7, #17]
 800d698:	4962      	ldr	r1, [pc, #392]	; (800d824 <etharp_query+0x268>)
 800d69a:	4613      	mov	r3, r2
 800d69c:	005b      	lsls	r3, r3, #1
 800d69e:	4413      	add	r3, r2
 800d6a0:	00db      	lsls	r3, r3, #3
 800d6a2:	440b      	add	r3, r1
 800d6a4:	3314      	adds	r3, #20
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d806      	bhi.n	800d6ba <etharp_query+0xfe>
 800d6ac:	4b5a      	ldr	r3, [pc, #360]	; (800d818 <etharp_query+0x25c>)
 800d6ae:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d6b2:	495d      	ldr	r1, [pc, #372]	; (800d828 <etharp_query+0x26c>)
 800d6b4:	485a      	ldr	r0, [pc, #360]	; (800d820 <etharp_query+0x264>)
 800d6b6:	f001 ff8d 	bl	800f5d4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d6ba:	6a3b      	ldr	r3, [r7, #32]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d102      	bne.n	800d6c6 <etharp_query+0x10a>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d10c      	bne.n	800d6e0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d6c6:	68b9      	ldr	r1, [r7, #8]
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f000 f963 	bl	800d994 <etharp_request>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d102      	bne.n	800d6e0 <etharp_query+0x124>
      return result;
 800d6da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6de:	e096      	b.n	800d80e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d106      	bne.n	800d6f4 <etharp_query+0x138>
 800d6e6:	4b4c      	ldr	r3, [pc, #304]	; (800d818 <etharp_query+0x25c>)
 800d6e8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d6ec:	494f      	ldr	r1, [pc, #316]	; (800d82c <etharp_query+0x270>)
 800d6ee:	484c      	ldr	r0, [pc, #304]	; (800d820 <etharp_query+0x264>)
 800d6f0:	f001 ff70 	bl	800f5d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d6f4:	7c7a      	ldrb	r2, [r7, #17]
 800d6f6:	494b      	ldr	r1, [pc, #300]	; (800d824 <etharp_query+0x268>)
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	005b      	lsls	r3, r3, #1
 800d6fc:	4413      	add	r3, r2
 800d6fe:	00db      	lsls	r3, r3, #3
 800d700:	440b      	add	r3, r1
 800d702:	3314      	adds	r3, #20
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	2b01      	cmp	r3, #1
 800d708:	d917      	bls.n	800d73a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d70a:	4a49      	ldr	r2, [pc, #292]	; (800d830 <etharp_query+0x274>)
 800d70c:	7c7b      	ldrb	r3, [r7, #17]
 800d70e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d710:	7c7a      	ldrb	r2, [r7, #17]
 800d712:	4613      	mov	r3, r2
 800d714:	005b      	lsls	r3, r3, #1
 800d716:	4413      	add	r3, r2
 800d718:	00db      	lsls	r3, r3, #3
 800d71a:	3308      	adds	r3, #8
 800d71c:	4a41      	ldr	r2, [pc, #260]	; (800d824 <etharp_query+0x268>)
 800d71e:	4413      	add	r3, r2
 800d720:	3304      	adds	r3, #4
 800d722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d726:	9200      	str	r2, [sp, #0]
 800d728:	697a      	ldr	r2, [r7, #20]
 800d72a:	6879      	ldr	r1, [r7, #4]
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f001 fc91 	bl	800f054 <ethernet_output>
 800d732:	4603      	mov	r3, r0
 800d734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d738:	e067      	b.n	800d80a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d73a:	7c7a      	ldrb	r2, [r7, #17]
 800d73c:	4939      	ldr	r1, [pc, #228]	; (800d824 <etharp_query+0x268>)
 800d73e:	4613      	mov	r3, r2
 800d740:	005b      	lsls	r3, r3, #1
 800d742:	4413      	add	r3, r2
 800d744:	00db      	lsls	r3, r3, #3
 800d746:	440b      	add	r3, r1
 800d748:	3314      	adds	r3, #20
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d15c      	bne.n	800d80a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d750:	2300      	movs	r3, #0
 800d752:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d758:	e01c      	b.n	800d794 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	895a      	ldrh	r2, [r3, #10]
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	891b      	ldrh	r3, [r3, #8]
 800d762:	429a      	cmp	r2, r3
 800d764:	d10a      	bne.n	800d77c <etharp_query+0x1c0>
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d006      	beq.n	800d77c <etharp_query+0x1c0>
 800d76e:	4b2a      	ldr	r3, [pc, #168]	; (800d818 <etharp_query+0x25c>)
 800d770:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d774:	492f      	ldr	r1, [pc, #188]	; (800d834 <etharp_query+0x278>)
 800d776:	482a      	ldr	r0, [pc, #168]	; (800d820 <etharp_query+0x264>)
 800d778:	f001 ff2c 	bl	800f5d4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	7b1b      	ldrb	r3, [r3, #12]
 800d780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d784:	2b00      	cmp	r3, #0
 800d786:	d002      	beq.n	800d78e <etharp_query+0x1d2>
        copy_needed = 1;
 800d788:	2301      	movs	r3, #1
 800d78a:	61bb      	str	r3, [r7, #24]
        break;
 800d78c:	e005      	b.n	800d79a <etharp_query+0x1de>
      }
      p = p->next;
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1df      	bne.n	800d75a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d007      	beq.n	800d7b0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d7a6:	200e      	movs	r0, #14
 800d7a8:	f7fe fad6 	bl	800bd58 <pbuf_clone>
 800d7ac:	61f8      	str	r0, [r7, #28]
 800d7ae:	e004      	b.n	800d7ba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d7b4:	69f8      	ldr	r0, [r7, #28]
 800d7b6:	f7fe f8dd 	bl	800b974 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d021      	beq.n	800d804 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d7c0:	7c7a      	ldrb	r2, [r7, #17]
 800d7c2:	4918      	ldr	r1, [pc, #96]	; (800d824 <etharp_query+0x268>)
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	005b      	lsls	r3, r3, #1
 800d7c8:	4413      	add	r3, r2
 800d7ca:	00db      	lsls	r3, r3, #3
 800d7cc:	440b      	add	r3, r1
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00a      	beq.n	800d7ea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d7d4:	7c7a      	ldrb	r2, [r7, #17]
 800d7d6:	4913      	ldr	r1, [pc, #76]	; (800d824 <etharp_query+0x268>)
 800d7d8:	4613      	mov	r3, r2
 800d7da:	005b      	lsls	r3, r3, #1
 800d7dc:	4413      	add	r3, r2
 800d7de:	00db      	lsls	r3, r3, #3
 800d7e0:	440b      	add	r3, r1
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7fe f81f 	bl	800b828 <pbuf_free>
      }
      arp_table[i].q = p;
 800d7ea:	7c7a      	ldrb	r2, [r7, #17]
 800d7ec:	490d      	ldr	r1, [pc, #52]	; (800d824 <etharp_query+0x268>)
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	005b      	lsls	r3, r3, #1
 800d7f2:	4413      	add	r3, r2
 800d7f4:	00db      	lsls	r3, r3, #3
 800d7f6:	440b      	add	r3, r1
 800d7f8:	69fa      	ldr	r2, [r7, #28]
 800d7fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d802:	e002      	b.n	800d80a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d804:	23ff      	movs	r3, #255	; 0xff
 800d806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d80a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3728      	adds	r7, #40	; 0x28
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	08011cf4 	.word	0x08011cf4
 800d81c:	08011ea0 	.word	0x08011ea0
 800d820:	08011d6c 	.word	0x08011d6c
 800d824:	24005cb8 	.word	0x24005cb8
 800d828:	08011eb0 	.word	0x08011eb0
 800d82c:	08011e94 	.word	0x08011e94
 800d830:	24005da8 	.word	0x24005da8
 800d834:	08011ed8 	.word	0x08011ed8

0800d838 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b08a      	sub	sp, #40	; 0x28
 800d83c:	af02      	add	r7, sp, #8
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	607a      	str	r2, [r7, #4]
 800d844:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d846:	2300      	movs	r3, #0
 800d848:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d106      	bne.n	800d85e <etharp_raw+0x26>
 800d850:	4b3a      	ldr	r3, [pc, #232]	; (800d93c <etharp_raw+0x104>)
 800d852:	f240 4257 	movw	r2, #1111	; 0x457
 800d856:	493a      	ldr	r1, [pc, #232]	; (800d940 <etharp_raw+0x108>)
 800d858:	483a      	ldr	r0, [pc, #232]	; (800d944 <etharp_raw+0x10c>)
 800d85a:	f001 febb 	bl	800f5d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d85e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d862:	211c      	movs	r1, #28
 800d864:	200e      	movs	r0, #14
 800d866:	f7fd fcfd 	bl	800b264 <pbuf_alloc>
 800d86a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d102      	bne.n	800d878 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d872:	f04f 33ff 	mov.w	r3, #4294967295
 800d876:	e05d      	b.n	800d934 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	895b      	ldrh	r3, [r3, #10]
 800d87c:	2b1b      	cmp	r3, #27
 800d87e:	d806      	bhi.n	800d88e <etharp_raw+0x56>
 800d880:	4b2e      	ldr	r3, [pc, #184]	; (800d93c <etharp_raw+0x104>)
 800d882:	f240 4262 	movw	r2, #1122	; 0x462
 800d886:	4930      	ldr	r1, [pc, #192]	; (800d948 <etharp_raw+0x110>)
 800d888:	482e      	ldr	r0, [pc, #184]	; (800d944 <etharp_raw+0x10c>)
 800d88a:	f001 fea3 	bl	800f5d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d894:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d896:	4618      	mov	r0, r3
 800d898:	f7fc fb88 	bl	8009fac <lwip_htons>
 800d89c:	4603      	mov	r3, r0
 800d89e:	461a      	mov	r2, r3
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d8aa:	2b06      	cmp	r3, #6
 800d8ac:	d006      	beq.n	800d8bc <etharp_raw+0x84>
 800d8ae:	4b23      	ldr	r3, [pc, #140]	; (800d93c <etharp_raw+0x104>)
 800d8b0:	f240 4269 	movw	r2, #1129	; 0x469
 800d8b4:	4925      	ldr	r1, [pc, #148]	; (800d94c <etharp_raw+0x114>)
 800d8b6:	4823      	ldr	r0, [pc, #140]	; (800d944 <etharp_raw+0x10c>)
 800d8b8:	f001 fe8c 	bl	800f5d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	3308      	adds	r3, #8
 800d8c0:	2206      	movs	r2, #6
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f001 fff8 	bl	800f8ba <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	3312      	adds	r3, #18
 800d8ce:	2206      	movs	r2, #6
 800d8d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f001 fff1 	bl	800f8ba <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	330e      	adds	r3, #14
 800d8dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8de:	6812      	ldr	r2, [r2, #0]
 800d8e0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	3318      	adds	r3, #24
 800d8e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8e8:	6812      	ldr	r2, [r2, #0]
 800d8ea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	701a      	strb	r2, [r3, #0]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f042 0201 	orr.w	r2, r2, #1
 800d8f8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f042 0208 	orr.w	r2, r2, #8
 800d902:	709a      	strb	r2, [r3, #2]
 800d904:	2200      	movs	r2, #0
 800d906:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	2206      	movs	r2, #6
 800d90c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	2204      	movs	r2, #4
 800d912:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d914:	f640 0306 	movw	r3, #2054	; 0x806
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	69b9      	ldr	r1, [r7, #24]
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	f001 fb97 	bl	800f054 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d926:	69b8      	ldr	r0, [r7, #24]
 800d928:	f7fd ff7e 	bl	800b828 <pbuf_free>
  p = NULL;
 800d92c:	2300      	movs	r3, #0
 800d92e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d930:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3720      	adds	r7, #32
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	08011cf4 	.word	0x08011cf4
 800d940:	08011e44 	.word	0x08011e44
 800d944:	08011d6c 	.word	0x08011d6c
 800d948:	08011ef4 	.word	0x08011ef4
 800d94c:	08011f28 	.word	0x08011f28

0800d950 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b088      	sub	sp, #32
 800d954:	af04      	add	r7, sp, #16
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d96c:	2201      	movs	r2, #1
 800d96e:	9203      	str	r2, [sp, #12]
 800d970:	68ba      	ldr	r2, [r7, #8]
 800d972:	9202      	str	r2, [sp, #8]
 800d974:	4a06      	ldr	r2, [pc, #24]	; (800d990 <etharp_request_dst+0x40>)
 800d976:	9201      	str	r2, [sp, #4]
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	4603      	mov	r3, r0
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f7ff ff5a 	bl	800d838 <etharp_raw>
 800d984:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d986:	4618      	mov	r0, r3
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	080124b4 	.word	0x080124b4

0800d994 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d99e:	4a05      	ldr	r2, [pc, #20]	; (800d9b4 <etharp_request+0x20>)
 800d9a0:	6839      	ldr	r1, [r7, #0]
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f7ff ffd4 	bl	800d950 <etharp_request_dst>
 800d9a8:	4603      	mov	r3, r0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	080124ac 	.word	0x080124ac

0800d9b8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08e      	sub	sp, #56	; 0x38
 800d9bc:	af04      	add	r7, sp, #16
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d9c2:	4b87      	ldr	r3, [pc, #540]	; (800dbe0 <icmp_input+0x228>)
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	f003 030f 	and.w	r3, r3, #15
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d9d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9da:	2b13      	cmp	r3, #19
 800d9dc:	f240 80e8 	bls.w	800dbb0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	895b      	ldrh	r3, [r3, #10]
 800d9e4:	2b03      	cmp	r3, #3
 800d9e6:	f240 80e5 	bls.w	800dbb4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d9f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f000 80d2 	beq.w	800dba2 <icmp_input+0x1ea>
 800d9fe:	2b08      	cmp	r3, #8
 800da00:	f040 80d2 	bne.w	800dba8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800da04:	4b77      	ldr	r3, [pc, #476]	; (800dbe4 <icmp_input+0x22c>)
 800da06:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da08:	4b75      	ldr	r3, [pc, #468]	; (800dbe0 <icmp_input+0x228>)
 800da0a:	695b      	ldr	r3, [r3, #20]
 800da0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da10:	2be0      	cmp	r3, #224	; 0xe0
 800da12:	f000 80d6 	beq.w	800dbc2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800da16:	4b72      	ldr	r3, [pc, #456]	; (800dbe0 <icmp_input+0x228>)
 800da18:	695b      	ldr	r3, [r3, #20]
 800da1a:	4a71      	ldr	r2, [pc, #452]	; (800dbe0 <icmp_input+0x228>)
 800da1c:	6812      	ldr	r2, [r2, #0]
 800da1e:	4611      	mov	r1, r2
 800da20:	4618      	mov	r0, r3
 800da22:	f000 fc09 	bl	800e238 <ip4_addr_isbroadcast_u32>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	f040 80cc 	bne.w	800dbc6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	891b      	ldrh	r3, [r3, #8]
 800da32:	2b07      	cmp	r3, #7
 800da34:	f240 80c0 	bls.w	800dbb8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7fc fb3b 	bl	800a0b4 <inet_chksum_pbuf>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d003      	beq.n	800da4c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7fd feef 	bl	800b828 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800da4a:	e0c5      	b.n	800dbd8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800da4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da4e:	330e      	adds	r3, #14
 800da50:	4619      	mov	r1, r3
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7fd fe52 	bl	800b6fc <pbuf_add_header>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d04b      	beq.n	800daf6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	891a      	ldrh	r2, [r3, #8]
 800da62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da64:	4413      	add	r3, r2
 800da66:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	891b      	ldrh	r3, [r3, #8]
 800da6c:	8b7a      	ldrh	r2, [r7, #26]
 800da6e:	429a      	cmp	r2, r3
 800da70:	f0c0 80ab 	bcc.w	800dbca <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800da74:	8b7b      	ldrh	r3, [r7, #26]
 800da76:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da7a:	4619      	mov	r1, r3
 800da7c:	200e      	movs	r0, #14
 800da7e:	f7fd fbf1 	bl	800b264 <pbuf_alloc>
 800da82:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2b00      	cmp	r3, #0
 800da88:	f000 80a1 	beq.w	800dbce <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	895b      	ldrh	r3, [r3, #10]
 800da90:	461a      	mov	r2, r3
 800da92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da94:	3308      	adds	r3, #8
 800da96:	429a      	cmp	r2, r3
 800da98:	d203      	bcs.n	800daa2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800da9a:	6978      	ldr	r0, [r7, #20]
 800da9c:	f7fd fec4 	bl	800b828 <pbuf_free>
          goto icmperr;
 800daa0:	e096      	b.n	800dbd0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800daa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daaa:	4618      	mov	r0, r3
 800daac:	f001 ff05 	bl	800f8ba <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dab2:	4619      	mov	r1, r3
 800dab4:	6978      	ldr	r0, [r7, #20]
 800dab6:	f7fd fe31 	bl	800b71c <pbuf_remove_header>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d009      	beq.n	800dad4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dac0:	4b49      	ldr	r3, [pc, #292]	; (800dbe8 <icmp_input+0x230>)
 800dac2:	22b6      	movs	r2, #182	; 0xb6
 800dac4:	4949      	ldr	r1, [pc, #292]	; (800dbec <icmp_input+0x234>)
 800dac6:	484a      	ldr	r0, [pc, #296]	; (800dbf0 <icmp_input+0x238>)
 800dac8:	f001 fd84 	bl	800f5d4 <iprintf>
          pbuf_free(r);
 800dacc:	6978      	ldr	r0, [r7, #20]
 800dace:	f7fd feab 	bl	800b828 <pbuf_free>
          goto icmperr;
 800dad2:	e07d      	b.n	800dbd0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800dad4:	6879      	ldr	r1, [r7, #4]
 800dad6:	6978      	ldr	r0, [r7, #20]
 800dad8:	f7fd ffda 	bl	800ba90 <pbuf_copy>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d003      	beq.n	800daea <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dae2:	6978      	ldr	r0, [r7, #20]
 800dae4:	f7fd fea0 	bl	800b828 <pbuf_free>
          goto icmperr;
 800dae8:	e072      	b.n	800dbd0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7fd fe9c 	bl	800b828 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	607b      	str	r3, [r7, #4]
 800daf4:	e00f      	b.n	800db16 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800daf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800daf8:	330e      	adds	r3, #14
 800dafa:	4619      	mov	r1, r3
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7fd fe0d 	bl	800b71c <pbuf_remove_header>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d006      	beq.n	800db16 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800db08:	4b37      	ldr	r3, [pc, #220]	; (800dbe8 <icmp_input+0x230>)
 800db0a:	22c7      	movs	r2, #199	; 0xc7
 800db0c:	4939      	ldr	r1, [pc, #228]	; (800dbf4 <icmp_input+0x23c>)
 800db0e:	4838      	ldr	r0, [pc, #224]	; (800dbf0 <icmp_input+0x238>)
 800db10:	f001 fd60 	bl	800f5d4 <iprintf>
          goto icmperr;
 800db14:	e05c      	b.n	800dbd0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800db1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db1e:	4619      	mov	r1, r3
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f7fd fdeb 	bl	800b6fc <pbuf_add_header>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d13c      	bne.n	800dba6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800db3a:	4b29      	ldr	r3, [pc, #164]	; (800dbe0 <icmp_input+0x228>)
 800db3c:	691a      	ldr	r2, [r3, #16]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	2200      	movs	r2, #0
 800db46:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	885b      	ldrh	r3, [r3, #2]
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800db52:	4293      	cmp	r3, r2
 800db54:	d907      	bls.n	800db66 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	885b      	ldrh	r3, [r3, #2]
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	3309      	adds	r3, #9
 800db5e:	b29a      	uxth	r2, r3
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	805a      	strh	r2, [r3, #2]
 800db64:	e006      	b.n	800db74 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	885b      	ldrh	r3, [r3, #2]
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	3308      	adds	r3, #8
 800db6e:	b29a      	uxth	r2, r3
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	22ff      	movs	r2, #255	; 0xff
 800db78:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2200      	movs	r2, #0
 800db7e:	729a      	strb	r2, [r3, #10]
 800db80:	2200      	movs	r2, #0
 800db82:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	9302      	str	r3, [sp, #8]
 800db88:	2301      	movs	r3, #1
 800db8a:	9301      	str	r3, [sp, #4]
 800db8c:	2300      	movs	r3, #0
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	23ff      	movs	r3, #255	; 0xff
 800db92:	2200      	movs	r2, #0
 800db94:	69f9      	ldr	r1, [r7, #28]
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 fa76 	bl	800e088 <ip4_output_if>
 800db9c:	4603      	mov	r3, r0
 800db9e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dba0:	e001      	b.n	800dba6 <icmp_input+0x1ee>
      break;
 800dba2:	bf00      	nop
 800dba4:	e000      	b.n	800dba8 <icmp_input+0x1f0>
      break;
 800dba6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7fd fe3d 	bl	800b828 <pbuf_free>
  return;
 800dbae:	e013      	b.n	800dbd8 <icmp_input+0x220>
    goto lenerr;
 800dbb0:	bf00      	nop
 800dbb2:	e002      	b.n	800dbba <icmp_input+0x202>
    goto lenerr;
 800dbb4:	bf00      	nop
 800dbb6:	e000      	b.n	800dbba <icmp_input+0x202>
        goto lenerr;
 800dbb8:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7fd fe34 	bl	800b828 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dbc0:	e00a      	b.n	800dbd8 <icmp_input+0x220>
        goto icmperr;
 800dbc2:	bf00      	nop
 800dbc4:	e004      	b.n	800dbd0 <icmp_input+0x218>
        goto icmperr;
 800dbc6:	bf00      	nop
 800dbc8:	e002      	b.n	800dbd0 <icmp_input+0x218>
          goto icmperr;
 800dbca:	bf00      	nop
 800dbcc:	e000      	b.n	800dbd0 <icmp_input+0x218>
          goto icmperr;
 800dbce:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f7fd fe29 	bl	800b828 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dbd6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dbd8:	3728      	adds	r7, #40	; 0x28
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	2400abf8 	.word	0x2400abf8
 800dbe4:	2400ac0c 	.word	0x2400ac0c
 800dbe8:	08011f6c 	.word	0x08011f6c
 800dbec:	08011fa4 	.word	0x08011fa4
 800dbf0:	08011fdc 	.word	0x08011fdc
 800dbf4:	08012004 	.word	0x08012004

0800dbf8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	460b      	mov	r3, r1
 800dc02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dc04:	78fb      	ldrb	r3, [r7, #3]
 800dc06:	461a      	mov	r2, r3
 800dc08:	2103      	movs	r1, #3
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f814 	bl	800dc38 <icmp_send_response>
}
 800dc10:	bf00      	nop
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	460b      	mov	r3, r1
 800dc22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dc24:	78fb      	ldrb	r3, [r7, #3]
 800dc26:	461a      	mov	r2, r3
 800dc28:	210b      	movs	r1, #11
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 f804 	bl	800dc38 <icmp_send_response>
}
 800dc30:	bf00      	nop
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08c      	sub	sp, #48	; 0x30
 800dc3c:	af04      	add	r7, sp, #16
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	460b      	mov	r3, r1
 800dc42:	70fb      	strb	r3, [r7, #3]
 800dc44:	4613      	mov	r3, r2
 800dc46:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dc48:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc4c:	2124      	movs	r1, #36	; 0x24
 800dc4e:	2022      	movs	r0, #34	; 0x22
 800dc50:	f7fd fb08 	bl	800b264 <pbuf_alloc>
 800dc54:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dc56:	69fb      	ldr	r3, [r7, #28]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d056      	beq.n	800dd0a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	895b      	ldrh	r3, [r3, #10]
 800dc60:	2b23      	cmp	r3, #35	; 0x23
 800dc62:	d806      	bhi.n	800dc72 <icmp_send_response+0x3a>
 800dc64:	4b2b      	ldr	r3, [pc, #172]	; (800dd14 <icmp_send_response+0xdc>)
 800dc66:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800dc6a:	492b      	ldr	r1, [pc, #172]	; (800dd18 <icmp_send_response+0xe0>)
 800dc6c:	482b      	ldr	r0, [pc, #172]	; (800dd1c <icmp_send_response+0xe4>)
 800dc6e:	f001 fcb1 	bl	800f5d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	78fa      	ldrb	r2, [r7, #3]
 800dc82:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	78ba      	ldrb	r2, [r7, #2]
 800dc88:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	711a      	strb	r2, [r3, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	2200      	movs	r2, #0
 800dc98:	719a      	strb	r2, [r3, #6]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	f103 0008 	add.w	r0, r3, #8
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	221c      	movs	r2, #28
 800dcac:	4619      	mov	r1, r3
 800dcae:	f001 fe04 	bl	800f8ba <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dcb8:	f107 030c 	add.w	r3, r7, #12
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f000 f82f 	bl	800dd20 <ip4_route>
 800dcc2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d01b      	beq.n	800dd02 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	2200      	movs	r2, #0
 800dcce:	709a      	strb	r2, [r3, #2]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	895b      	ldrh	r3, [r3, #10]
 800dcd8:	4619      	mov	r1, r3
 800dcda:	6978      	ldr	r0, [r7, #20]
 800dcdc:	f7fc f9d8 	bl	800a090 <inet_chksum>
 800dce0:	4603      	mov	r3, r0
 800dce2:	461a      	mov	r2, r3
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dce8:	f107 020c 	add.w	r2, r7, #12
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	9302      	str	r3, [sp, #8]
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	9301      	str	r3, [sp, #4]
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	9300      	str	r3, [sp, #0]
 800dcf8:	23ff      	movs	r3, #255	; 0xff
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	69f8      	ldr	r0, [r7, #28]
 800dcfe:	f000 f9c3 	bl	800e088 <ip4_output_if>
  }
  pbuf_free(q);
 800dd02:	69f8      	ldr	r0, [r7, #28]
 800dd04:	f7fd fd90 	bl	800b828 <pbuf_free>
 800dd08:	e000      	b.n	800dd0c <icmp_send_response+0xd4>
    return;
 800dd0a:	bf00      	nop
}
 800dd0c:	3720      	adds	r7, #32
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	08011f6c 	.word	0x08011f6c
 800dd18:	08012038 	.word	0x08012038
 800dd1c:	08011fdc 	.word	0x08011fdc

0800dd20 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b085      	sub	sp, #20
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dd28:	4b33      	ldr	r3, [pc, #204]	; (800ddf8 <ip4_route+0xd8>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	60fb      	str	r3, [r7, #12]
 800dd2e:	e036      	b.n	800dd9e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd36:	f003 0301 	and.w	r3, r3, #1
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d02b      	beq.n	800dd98 <ip4_route+0x78>
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd46:	089b      	lsrs	r3, r3, #2
 800dd48:	f003 0301 	and.w	r3, r3, #1
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d022      	beq.n	800dd98 <ip4_route+0x78>
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	3304      	adds	r3, #4
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d01d      	beq.n	800dd98 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	3304      	adds	r3, #4
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	405a      	eors	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	3308      	adds	r3, #8
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4013      	ands	r3, r2
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d101      	bne.n	800dd78 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	e038      	b.n	800ddea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd7e:	f003 0302 	and.w	r3, r3, #2
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d108      	bne.n	800dd98 <ip4_route+0x78>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	330c      	adds	r3, #12
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d101      	bne.n	800dd98 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	e028      	b.n	800ddea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	60fb      	str	r3, [r7, #12]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d1c5      	bne.n	800dd30 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dda4:	4b15      	ldr	r3, [pc, #84]	; (800ddfc <ip4_route+0xdc>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d01a      	beq.n	800dde2 <ip4_route+0xc2>
 800ddac:	4b13      	ldr	r3, [pc, #76]	; (800ddfc <ip4_route+0xdc>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d012      	beq.n	800dde2 <ip4_route+0xc2>
 800ddbc:	4b0f      	ldr	r3, [pc, #60]	; (800ddfc <ip4_route+0xdc>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddc4:	f003 0304 	and.w	r3, r3, #4
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00a      	beq.n	800dde2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ddcc:	4b0b      	ldr	r3, [pc, #44]	; (800ddfc <ip4_route+0xdc>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d004      	beq.n	800dde2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	2b7f      	cmp	r3, #127	; 0x7f
 800dde0:	d101      	bne.n	800dde6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dde2:	2300      	movs	r3, #0
 800dde4:	e001      	b.n	800ddea <ip4_route+0xca>
  }

  return netif_default;
 800dde6:	4b05      	ldr	r3, [pc, #20]	; (800ddfc <ip4_route+0xdc>)
 800dde8:	681b      	ldr	r3, [r3, #0]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	2400d720 	.word	0x2400d720
 800ddfc:	2400d724 	.word	0x2400d724

0800de00 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de0e:	f003 0301 	and.w	r3, r3, #1
 800de12:	b2db      	uxtb	r3, r3
 800de14:	2b00      	cmp	r3, #0
 800de16:	d016      	beq.n	800de46 <ip4_input_accept+0x46>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	3304      	adds	r3, #4
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d011      	beq.n	800de46 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de22:	4b0b      	ldr	r3, [pc, #44]	; (800de50 <ip4_input_accept+0x50>)
 800de24:	695a      	ldr	r2, [r3, #20]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	3304      	adds	r3, #4
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d008      	beq.n	800de42 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800de30:	4b07      	ldr	r3, [pc, #28]	; (800de50 <ip4_input_accept+0x50>)
 800de32:	695b      	ldr	r3, [r3, #20]
 800de34:	6879      	ldr	r1, [r7, #4]
 800de36:	4618      	mov	r0, r3
 800de38:	f000 f9fe 	bl	800e238 <ip4_addr_isbroadcast_u32>
 800de3c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d001      	beq.n	800de46 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800de42:	2301      	movs	r3, #1
 800de44:	e000      	b.n	800de48 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	2400abf8 	.word	0x2400abf8

0800de54 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	091b      	lsrs	r3, r3, #4
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	2b04      	cmp	r3, #4
 800de6e:	d004      	beq.n	800de7a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f7fd fcd9 	bl	800b828 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800de76:	2300      	movs	r3, #0
 800de78:	e0fd      	b.n	800e076 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	f003 030f 	and.w	r3, r3, #15
 800de82:	b2db      	uxtb	r3, r3
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	b2db      	uxtb	r3, r3
 800de88:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	885b      	ldrh	r3, [r3, #2]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	4618      	mov	r0, r3
 800de92:	f7fc f88b 	bl	8009fac <lwip_htons>
 800de96:	4603      	mov	r3, r0
 800de98:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	891b      	ldrh	r3, [r3, #8]
 800de9e:	89ba      	ldrh	r2, [r7, #12]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d204      	bcs.n	800deae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dea4:	89bb      	ldrh	r3, [r7, #12]
 800dea6:	4619      	mov	r1, r3
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f7fd fb37 	bl	800b51c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	895b      	ldrh	r3, [r3, #10]
 800deb2:	89fa      	ldrh	r2, [r7, #14]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d807      	bhi.n	800dec8 <ip4_input+0x74>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	891b      	ldrh	r3, [r3, #8]
 800debc:	89ba      	ldrh	r2, [r7, #12]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d802      	bhi.n	800dec8 <ip4_input+0x74>
 800dec2:	89fb      	ldrh	r3, [r7, #14]
 800dec4:	2b13      	cmp	r3, #19
 800dec6:	d804      	bhi.n	800ded2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f7fd fcad 	bl	800b828 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dece:	2300      	movs	r3, #0
 800ded0:	e0d1      	b.n	800e076 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	4a6a      	ldr	r2, [pc, #424]	; (800e080 <ip4_input+0x22c>)
 800ded8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	4a68      	ldr	r2, [pc, #416]	; (800e080 <ip4_input+0x22c>)
 800dee0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dee2:	4b67      	ldr	r3, [pc, #412]	; (800e080 <ip4_input+0x22c>)
 800dee4:	695b      	ldr	r3, [r3, #20]
 800dee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800deea:	2be0      	cmp	r3, #224	; 0xe0
 800deec:	d112      	bne.n	800df14 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800def4:	f003 0301 	and.w	r3, r3, #1
 800def8:	b2db      	uxtb	r3, r3
 800defa:	2b00      	cmp	r3, #0
 800defc:	d007      	beq.n	800df0e <ip4_input+0xba>
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	3304      	adds	r3, #4
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <ip4_input+0xba>
      netif = inp;
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	613b      	str	r3, [r7, #16]
 800df0c:	e02a      	b.n	800df64 <ip4_input+0x110>
    } else {
      netif = NULL;
 800df0e:	2300      	movs	r3, #0
 800df10:	613b      	str	r3, [r7, #16]
 800df12:	e027      	b.n	800df64 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800df14:	6838      	ldr	r0, [r7, #0]
 800df16:	f7ff ff73 	bl	800de00 <ip4_input_accept>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <ip4_input+0xd2>
      netif = inp;
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	613b      	str	r3, [r7, #16]
 800df24:	e01e      	b.n	800df64 <ip4_input+0x110>
    } else {
      netif = NULL;
 800df26:	2300      	movs	r3, #0
 800df28:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800df2a:	4b55      	ldr	r3, [pc, #340]	; (800e080 <ip4_input+0x22c>)
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	2b7f      	cmp	r3, #127	; 0x7f
 800df32:	d017      	beq.n	800df64 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800df34:	4b53      	ldr	r3, [pc, #332]	; (800e084 <ip4_input+0x230>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	613b      	str	r3, [r7, #16]
 800df3a:	e00e      	b.n	800df5a <ip4_input+0x106>
          if (netif == inp) {
 800df3c:	693a      	ldr	r2, [r7, #16]
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	429a      	cmp	r2, r3
 800df42:	d006      	beq.n	800df52 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800df44:	6938      	ldr	r0, [r7, #16]
 800df46:	f7ff ff5b 	bl	800de00 <ip4_input_accept>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d108      	bne.n	800df62 <ip4_input+0x10e>
 800df50:	e000      	b.n	800df54 <ip4_input+0x100>
            continue;
 800df52:	bf00      	nop
        NETIF_FOREACH(netif) {
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	613b      	str	r3, [r7, #16]
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d1ed      	bne.n	800df3c <ip4_input+0xe8>
 800df60:	e000      	b.n	800df64 <ip4_input+0x110>
            break;
 800df62:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800df64:	4b46      	ldr	r3, [pc, #280]	; (800e080 <ip4_input+0x22c>)
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	6839      	ldr	r1, [r7, #0]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f000 f964 	bl	800e238 <ip4_addr_isbroadcast_u32>
 800df70:	4603      	mov	r3, r0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d105      	bne.n	800df82 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800df76:	4b42      	ldr	r3, [pc, #264]	; (800e080 <ip4_input+0x22c>)
 800df78:	691b      	ldr	r3, [r3, #16]
 800df7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800df7e:	2be0      	cmp	r3, #224	; 0xe0
 800df80:	d104      	bne.n	800df8c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7fd fc50 	bl	800b828 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800df88:	2300      	movs	r3, #0
 800df8a:	e074      	b.n	800e076 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d104      	bne.n	800df9c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7fd fc48 	bl	800b828 <pbuf_free>
    return ERR_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	e06c      	b.n	800e076 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	88db      	ldrh	r3, [r3, #6]
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800dfa8:	4013      	ands	r3, r2
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00b      	beq.n	800dfc6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 fc88 	bl	800e8c4 <ip4_reass>
 800dfb4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d101      	bne.n	800dfc0 <ip4_input+0x16c>
      return ERR_OK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	e05a      	b.n	800e076 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dfc6:	4a2e      	ldr	r2, [pc, #184]	; (800e080 <ip4_input+0x22c>)
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dfcc:	4a2c      	ldr	r2, [pc, #176]	; (800e080 <ip4_input+0x22c>)
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dfd2:	4a2b      	ldr	r2, [pc, #172]	; (800e080 <ip4_input+0x22c>)
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	f003 030f 	and.w	r3, r3, #15
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	4b25      	ldr	r3, [pc, #148]	; (800e080 <ip4_input+0x22c>)
 800dfea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dfec:	89fb      	ldrh	r3, [r7, #14]
 800dfee:	4619      	mov	r1, r3
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f7fd fb93 	bl	800b71c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	7a5b      	ldrb	r3, [r3, #9]
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d006      	beq.n	800e00c <ip4_input+0x1b8>
 800dffe:	2b11      	cmp	r3, #17
 800e000:	d109      	bne.n	800e016 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e002:	6839      	ldr	r1, [r7, #0]
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7fe f8e1 	bl	800c1cc <udp_input>
        break;
 800e00a:	e021      	b.n	800e050 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e00c:	6839      	ldr	r1, [r7, #0]
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7ff fcd2 	bl	800d9b8 <icmp_input>
        break;
 800e014:	e01c      	b.n	800e050 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e016:	4b1a      	ldr	r3, [pc, #104]	; (800e080 <ip4_input+0x22c>)
 800e018:	695b      	ldr	r3, [r3, #20]
 800e01a:	6939      	ldr	r1, [r7, #16]
 800e01c:	4618      	mov	r0, r3
 800e01e:	f000 f90b 	bl	800e238 <ip4_addr_isbroadcast_u32>
 800e022:	4603      	mov	r3, r0
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10f      	bne.n	800e048 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e028:	4b15      	ldr	r3, [pc, #84]	; (800e080 <ip4_input+0x22c>)
 800e02a:	695b      	ldr	r3, [r3, #20]
 800e02c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e030:	2be0      	cmp	r3, #224	; 0xe0
 800e032:	d009      	beq.n	800e048 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e034:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e038:	4619      	mov	r1, r3
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7fd fbe1 	bl	800b802 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e040:	2102      	movs	r1, #2
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f7ff fdd8 	bl	800dbf8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7fd fbed 	bl	800b828 <pbuf_free>
        break;
 800e04e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e050:	4b0b      	ldr	r3, [pc, #44]	; (800e080 <ip4_input+0x22c>)
 800e052:	2200      	movs	r2, #0
 800e054:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e056:	4b0a      	ldr	r3, [pc, #40]	; (800e080 <ip4_input+0x22c>)
 800e058:	2200      	movs	r2, #0
 800e05a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e05c:	4b08      	ldr	r3, [pc, #32]	; (800e080 <ip4_input+0x22c>)
 800e05e:	2200      	movs	r2, #0
 800e060:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e062:	4b07      	ldr	r3, [pc, #28]	; (800e080 <ip4_input+0x22c>)
 800e064:	2200      	movs	r2, #0
 800e066:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e068:	4b05      	ldr	r3, [pc, #20]	; (800e080 <ip4_input+0x22c>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e06e:	4b04      	ldr	r3, [pc, #16]	; (800e080 <ip4_input+0x22c>)
 800e070:	2200      	movs	r2, #0
 800e072:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3718      	adds	r7, #24
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	2400abf8 	.word	0x2400abf8
 800e084:	2400d720 	.word	0x2400d720

0800e088 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b08a      	sub	sp, #40	; 0x28
 800e08c:	af04      	add	r7, sp, #16
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
 800e094:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d009      	beq.n	800e0b4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d003      	beq.n	800e0ae <ip4_output_if+0x26>
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d102      	bne.n	800e0b4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b0:	3304      	adds	r3, #4
 800e0b2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e0b4:	78fa      	ldrb	r2, [r7, #3]
 800e0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b8:	9302      	str	r3, [sp, #8]
 800e0ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e0be:	9301      	str	r3, [sp, #4]
 800e0c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	6979      	ldr	r1, [r7, #20]
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f000 f805 	bl	800e0dc <ip4_output_if_src>
 800e0d2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3718      	adds	r7, #24
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b088      	sub	sp, #32
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	607a      	str	r2, [r7, #4]
 800e0e8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	7b9b      	ldrb	r3, [r3, #14]
 800e0ee:	2b01      	cmp	r3, #1
 800e0f0:	d006      	beq.n	800e100 <ip4_output_if_src+0x24>
 800e0f2:	4b4b      	ldr	r3, [pc, #300]	; (800e220 <ip4_output_if_src+0x144>)
 800e0f4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e0f8:	494a      	ldr	r1, [pc, #296]	; (800e224 <ip4_output_if_src+0x148>)
 800e0fa:	484b      	ldr	r0, [pc, #300]	; (800e228 <ip4_output_if_src+0x14c>)
 800e0fc:	f001 fa6a 	bl	800f5d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d060      	beq.n	800e1c8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e106:	2314      	movs	r3, #20
 800e108:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e10a:	2114      	movs	r1, #20
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f7fd faf5 	bl	800b6fc <pbuf_add_header>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d002      	beq.n	800e11e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e118:	f06f 0301 	mvn.w	r3, #1
 800e11c:	e07c      	b.n	800e218 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	895b      	ldrh	r3, [r3, #10]
 800e128:	2b13      	cmp	r3, #19
 800e12a:	d806      	bhi.n	800e13a <ip4_output_if_src+0x5e>
 800e12c:	4b3c      	ldr	r3, [pc, #240]	; (800e220 <ip4_output_if_src+0x144>)
 800e12e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e132:	493e      	ldr	r1, [pc, #248]	; (800e22c <ip4_output_if_src+0x150>)
 800e134:	483c      	ldr	r0, [pc, #240]	; (800e228 <ip4_output_if_src+0x14c>)
 800e136:	f001 fa4d 	bl	800f5d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e13a:	69fb      	ldr	r3, [r7, #28]
 800e13c:	78fa      	ldrb	r2, [r7, #3]
 800e13e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e146:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e150:	8b7b      	ldrh	r3, [r7, #26]
 800e152:	089b      	lsrs	r3, r3, #2
 800e154:	b29b      	uxth	r3, r3
 800e156:	b2db      	uxtb	r3, r3
 800e158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e168:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	891b      	ldrh	r3, [r3, #8]
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fb ff1c 	bl	8009fac <lwip_htons>
 800e174:	4603      	mov	r3, r0
 800e176:	461a      	mov	r2, r3
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	2200      	movs	r2, #0
 800e180:	719a      	strb	r2, [r3, #6]
 800e182:	2200      	movs	r2, #0
 800e184:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e186:	4b2a      	ldr	r3, [pc, #168]	; (800e230 <ip4_output_if_src+0x154>)
 800e188:	881b      	ldrh	r3, [r3, #0]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fb ff0e 	bl	8009fac <lwip_htons>
 800e190:	4603      	mov	r3, r0
 800e192:	461a      	mov	r2, r3
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e198:	4b25      	ldr	r3, [pc, #148]	; (800e230 <ip4_output_if_src+0x154>)
 800e19a:	881b      	ldrh	r3, [r3, #0]
 800e19c:	3301      	adds	r3, #1
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	4b23      	ldr	r3, [pc, #140]	; (800e230 <ip4_output_if_src+0x154>)
 800e1a2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d104      	bne.n	800e1b4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e1aa:	4b22      	ldr	r3, [pc, #136]	; (800e234 <ip4_output_if_src+0x158>)
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	60da      	str	r2, [r3, #12]
 800e1b2:	e003      	b.n	800e1bc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	729a      	strb	r2, [r3, #10]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	72da      	strb	r2, [r3, #11]
 800e1c6:	e00f      	b.n	800e1e8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	895b      	ldrh	r3, [r3, #10]
 800e1cc:	2b13      	cmp	r3, #19
 800e1ce:	d802      	bhi.n	800e1d6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e1d0:	f06f 0301 	mvn.w	r3, #1
 800e1d4:	e020      	b.n	800e218 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	691b      	ldr	r3, [r3, #16]
 800e1e0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e1e2:	f107 0314 	add.w	r3, r7, #20
 800e1e6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00c      	beq.n	800e20a <ip4_output_if_src+0x12e>
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	891a      	ldrh	r2, [r3, #8]
 800e1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d906      	bls.n	800e20a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f000 fd53 	bl	800ecac <ip4_frag>
 800e206:	4603      	mov	r3, r0
 800e208:	e006      	b.n	800e218 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20c:	695b      	ldr	r3, [r3, #20]
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	68f9      	ldr	r1, [r7, #12]
 800e212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e214:	4798      	blx	r3
 800e216:	4603      	mov	r3, r0
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3720      	adds	r7, #32
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	08012064 	.word	0x08012064
 800e224:	08012098 	.word	0x08012098
 800e228:	080120a4 	.word	0x080120a4
 800e22c:	080120cc 	.word	0x080120cc
 800e230:	24005daa 	.word	0x24005daa
 800e234:	080124a8 	.word	0x080124a8

0800e238 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e238:	b480      	push	{r7}
 800e23a:	b085      	sub	sp, #20
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e24c:	d002      	beq.n	800e254 <ip4_addr_isbroadcast_u32+0x1c>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d101      	bne.n	800e258 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e254:	2301      	movs	r3, #1
 800e256:	e02a      	b.n	800e2ae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e25e:	f003 0302 	and.w	r3, r3, #2
 800e262:	2b00      	cmp	r3, #0
 800e264:	d101      	bne.n	800e26a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e266:	2300      	movs	r3, #0
 800e268:	e021      	b.n	800e2ae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	3304      	adds	r3, #4
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	429a      	cmp	r2, r3
 800e274:	d101      	bne.n	800e27a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e276:	2300      	movs	r3, #0
 800e278:	e019      	b.n	800e2ae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	3304      	adds	r3, #4
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	405a      	eors	r2, r3
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	3308      	adds	r3, #8
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4013      	ands	r3, r2
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10d      	bne.n	800e2ac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	3308      	adds	r3, #8
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	43da      	mvns	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	3308      	adds	r3, #8
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d101      	bne.n	800e2ac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e000      	b.n	800e2ae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e2ac:	2300      	movs	r3, #0
  }
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3714      	adds	r7, #20
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr
	...

0800e2bc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e2c6:	4b12      	ldr	r3, [pc, #72]	; (800e310 <ip_reass_tmr+0x54>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e2cc:	e018      	b.n	800e300 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	7fdb      	ldrb	r3, [r3, #31]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00b      	beq.n	800e2ee <ip_reass_tmr+0x32>
      r->timer--;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	7fdb      	ldrb	r3, [r3, #31]
 800e2da:	3b01      	subs	r3, #1
 800e2dc:	b2da      	uxtb	r2, r3
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	60fb      	str	r3, [r7, #12]
 800e2ec:	e008      	b.n	800e300 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e2f8:	68b9      	ldr	r1, [r7, #8]
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 f80a 	bl	800e314 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1e3      	bne.n	800e2ce <ip_reass_tmr+0x12>
    }
  }
}
 800e306:	bf00      	nop
 800e308:	bf00      	nop
 800e30a:	3710      	adds	r7, #16
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	24005dac 	.word	0x24005dac

0800e314 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b088      	sub	sp, #32
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e322:	683a      	ldr	r2, [r7, #0]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	429a      	cmp	r2, r3
 800e328:	d105      	bne.n	800e336 <ip_reass_free_complete_datagram+0x22>
 800e32a:	4b45      	ldr	r3, [pc, #276]	; (800e440 <ip_reass_free_complete_datagram+0x12c>)
 800e32c:	22ab      	movs	r2, #171	; 0xab
 800e32e:	4945      	ldr	r1, [pc, #276]	; (800e444 <ip_reass_free_complete_datagram+0x130>)
 800e330:	4845      	ldr	r0, [pc, #276]	; (800e448 <ip_reass_free_complete_datagram+0x134>)
 800e332:	f001 f94f 	bl	800f5d4 <iprintf>
  if (prev != NULL) {
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00a      	beq.n	800e352 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	429a      	cmp	r2, r3
 800e344:	d005      	beq.n	800e352 <ip_reass_free_complete_datagram+0x3e>
 800e346:	4b3e      	ldr	r3, [pc, #248]	; (800e440 <ip_reass_free_complete_datagram+0x12c>)
 800e348:	22ad      	movs	r2, #173	; 0xad
 800e34a:	4940      	ldr	r1, [pc, #256]	; (800e44c <ip_reass_free_complete_datagram+0x138>)
 800e34c:	483e      	ldr	r0, [pc, #248]	; (800e448 <ip_reass_free_complete_datagram+0x134>)
 800e34e:	f001 f941 	bl	800f5d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	889b      	ldrh	r3, [r3, #4]
 800e35e:	b29b      	uxth	r3, r3
 800e360:	2b00      	cmp	r3, #0
 800e362:	d12a      	bne.n	800e3ba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e372:	69bb      	ldr	r3, [r7, #24]
 800e374:	6858      	ldr	r0, [r3, #4]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	3308      	adds	r3, #8
 800e37a:	2214      	movs	r2, #20
 800e37c:	4619      	mov	r1, r3
 800e37e:	f001 fa9c 	bl	800f8ba <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e382:	2101      	movs	r1, #1
 800e384:	69b8      	ldr	r0, [r7, #24]
 800e386:	f7ff fc47 	bl	800dc18 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e38a:	69b8      	ldr	r0, [r7, #24]
 800e38c:	f7fd fada 	bl	800b944 <pbuf_clen>
 800e390:	4603      	mov	r3, r0
 800e392:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e394:	8bfa      	ldrh	r2, [r7, #30]
 800e396:	8a7b      	ldrh	r3, [r7, #18]
 800e398:	4413      	add	r3, r2
 800e39a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e39e:	db05      	blt.n	800e3ac <ip_reass_free_complete_datagram+0x98>
 800e3a0:	4b27      	ldr	r3, [pc, #156]	; (800e440 <ip_reass_free_complete_datagram+0x12c>)
 800e3a2:	22bc      	movs	r2, #188	; 0xbc
 800e3a4:	492a      	ldr	r1, [pc, #168]	; (800e450 <ip_reass_free_complete_datagram+0x13c>)
 800e3a6:	4828      	ldr	r0, [pc, #160]	; (800e448 <ip_reass_free_complete_datagram+0x134>)
 800e3a8:	f001 f914 	bl	800f5d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e3ac:	8bfa      	ldrh	r2, [r7, #30]
 800e3ae:	8a7b      	ldrh	r3, [r7, #18]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e3b4:	69b8      	ldr	r0, [r7, #24]
 800e3b6:	f7fd fa37 	bl	800b828 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e3c0:	e01f      	b.n	800e402 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f7fd fab6 	bl	800b944 <pbuf_clen>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3dc:	8bfa      	ldrh	r2, [r7, #30]
 800e3de:	8a7b      	ldrh	r3, [r7, #18]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3e6:	db05      	blt.n	800e3f4 <ip_reass_free_complete_datagram+0xe0>
 800e3e8:	4b15      	ldr	r3, [pc, #84]	; (800e440 <ip_reass_free_complete_datagram+0x12c>)
 800e3ea:	22cc      	movs	r2, #204	; 0xcc
 800e3ec:	4918      	ldr	r1, [pc, #96]	; (800e450 <ip_reass_free_complete_datagram+0x13c>)
 800e3ee:	4816      	ldr	r0, [pc, #88]	; (800e448 <ip_reass_free_complete_datagram+0x134>)
 800e3f0:	f001 f8f0 	bl	800f5d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e3f4:	8bfa      	ldrh	r2, [r7, #30]
 800e3f6:	8a7b      	ldrh	r3, [r7, #18]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f7fd fa13 	bl	800b828 <pbuf_free>
  while (p != NULL) {
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1dc      	bne.n	800e3c2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e408:	6839      	ldr	r1, [r7, #0]
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 f8c2 	bl	800e594 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e410:	4b10      	ldr	r3, [pc, #64]	; (800e454 <ip_reass_free_complete_datagram+0x140>)
 800e412:	881b      	ldrh	r3, [r3, #0]
 800e414:	8bfa      	ldrh	r2, [r7, #30]
 800e416:	429a      	cmp	r2, r3
 800e418:	d905      	bls.n	800e426 <ip_reass_free_complete_datagram+0x112>
 800e41a:	4b09      	ldr	r3, [pc, #36]	; (800e440 <ip_reass_free_complete_datagram+0x12c>)
 800e41c:	22d2      	movs	r2, #210	; 0xd2
 800e41e:	490e      	ldr	r1, [pc, #56]	; (800e458 <ip_reass_free_complete_datagram+0x144>)
 800e420:	4809      	ldr	r0, [pc, #36]	; (800e448 <ip_reass_free_complete_datagram+0x134>)
 800e422:	f001 f8d7 	bl	800f5d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e426:	4b0b      	ldr	r3, [pc, #44]	; (800e454 <ip_reass_free_complete_datagram+0x140>)
 800e428:	881a      	ldrh	r2, [r3, #0]
 800e42a:	8bfb      	ldrh	r3, [r7, #30]
 800e42c:	1ad3      	subs	r3, r2, r3
 800e42e:	b29a      	uxth	r2, r3
 800e430:	4b08      	ldr	r3, [pc, #32]	; (800e454 <ip_reass_free_complete_datagram+0x140>)
 800e432:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e434:	8bfb      	ldrh	r3, [r7, #30]
}
 800e436:	4618      	mov	r0, r3
 800e438:	3720      	adds	r7, #32
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	080120fc 	.word	0x080120fc
 800e444:	08012138 	.word	0x08012138
 800e448:	08012144 	.word	0x08012144
 800e44c:	0801216c 	.word	0x0801216c
 800e450:	08012180 	.word	0x08012180
 800e454:	24005db0 	.word	0x24005db0
 800e458:	080121a0 	.word	0x080121a0

0800e45c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b08a      	sub	sp, #40	; 0x28
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e466:	2300      	movs	r3, #0
 800e468:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e46e:	2300      	movs	r3, #0
 800e470:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e472:	2300      	movs	r3, #0
 800e474:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e476:	2300      	movs	r3, #0
 800e478:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e47a:	4b28      	ldr	r3, [pc, #160]	; (800e51c <ip_reass_remove_oldest_datagram+0xc0>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e480:	e030      	b.n	800e4e4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e484:	695a      	ldr	r2, [r3, #20]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d10c      	bne.n	800e4a8 <ip_reass_remove_oldest_datagram+0x4c>
 800e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e490:	699a      	ldr	r2, [r3, #24]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	691b      	ldr	r3, [r3, #16]
 800e496:	429a      	cmp	r2, r3
 800e498:	d106      	bne.n	800e4a8 <ip_reass_remove_oldest_datagram+0x4c>
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	899a      	ldrh	r2, [r3, #12]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	889b      	ldrh	r3, [r3, #4]
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d014      	beq.n	800e4d2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e4ae:	6a3b      	ldr	r3, [r7, #32]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d104      	bne.n	800e4be <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	61bb      	str	r3, [r7, #24]
 800e4bc:	e009      	b.n	800e4d2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c0:	7fda      	ldrb	r2, [r3, #31]
 800e4c2:	6a3b      	ldr	r3, [r7, #32]
 800e4c4:	7fdb      	ldrb	r3, [r3, #31]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d803      	bhi.n	800e4d2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4cc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d001      	beq.n	800e4de <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4dc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d1cb      	bne.n	800e482 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e4ea:	6a3b      	ldr	r3, [r7, #32]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d008      	beq.n	800e502 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e4f0:	69b9      	ldr	r1, [r7, #24]
 800e4f2:	6a38      	ldr	r0, [r7, #32]
 800e4f4:	f7ff ff0e 	bl	800e314 <ip_reass_free_complete_datagram>
 800e4f8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e4fa:	697a      	ldr	r2, [r7, #20]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	4413      	add	r3, r2
 800e500:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e502:	697a      	ldr	r2, [r7, #20]
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	429a      	cmp	r2, r3
 800e508:	da02      	bge.n	800e510 <ip_reass_remove_oldest_datagram+0xb4>
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	dcac      	bgt.n	800e46a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e510:	697b      	ldr	r3, [r7, #20]
}
 800e512:	4618      	mov	r0, r3
 800e514:	3728      	adds	r7, #40	; 0x28
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	24005dac 	.word	0x24005dac

0800e520 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e52a:	2001      	movs	r0, #1
 800e52c:	f7fc fac2 	bl	800aab4 <memp_malloc>
 800e530:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d110      	bne.n	800e55a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e538:	6839      	ldr	r1, [r7, #0]
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7ff ff8e 	bl	800e45c <ip_reass_remove_oldest_datagram>
 800e540:	4602      	mov	r2, r0
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	4293      	cmp	r3, r2
 800e546:	dc03      	bgt.n	800e550 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e548:	2001      	movs	r0, #1
 800e54a:	f7fc fab3 	bl	800aab4 <memp_malloc>
 800e54e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d101      	bne.n	800e55a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e556:	2300      	movs	r3, #0
 800e558:	e016      	b.n	800e588 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e55a:	2220      	movs	r2, #32
 800e55c:	2100      	movs	r1, #0
 800e55e:	68f8      	ldr	r0, [r7, #12]
 800e560:	f001 f8d7 	bl	800f712 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	220f      	movs	r2, #15
 800e568:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e56a:	4b09      	ldr	r3, [pc, #36]	; (800e590 <ip_reass_enqueue_new_datagram+0x70>)
 800e56c:	681a      	ldr	r2, [r3, #0]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e572:	4a07      	ldr	r2, [pc, #28]	; (800e590 <ip_reass_enqueue_new_datagram+0x70>)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	3308      	adds	r3, #8
 800e57c:	2214      	movs	r2, #20
 800e57e:	6879      	ldr	r1, [r7, #4]
 800e580:	4618      	mov	r0, r3
 800e582:	f001 f99a 	bl	800f8ba <memcpy>
  return ipr;
 800e586:	68fb      	ldr	r3, [r7, #12]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3710      	adds	r7, #16
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	24005dac 	.word	0x24005dac

0800e594 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e59e:	4b10      	ldr	r3, [pc, #64]	; (800e5e0 <ip_reass_dequeue_datagram+0x4c>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d104      	bne.n	800e5b2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a0c      	ldr	r2, [pc, #48]	; (800e5e0 <ip_reass_dequeue_datagram+0x4c>)
 800e5ae:	6013      	str	r3, [r2, #0]
 800e5b0:	e00d      	b.n	800e5ce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d106      	bne.n	800e5c6 <ip_reass_dequeue_datagram+0x32>
 800e5b8:	4b0a      	ldr	r3, [pc, #40]	; (800e5e4 <ip_reass_dequeue_datagram+0x50>)
 800e5ba:	f240 1245 	movw	r2, #325	; 0x145
 800e5be:	490a      	ldr	r1, [pc, #40]	; (800e5e8 <ip_reass_dequeue_datagram+0x54>)
 800e5c0:	480a      	ldr	r0, [pc, #40]	; (800e5ec <ip_reass_dequeue_datagram+0x58>)
 800e5c2:	f001 f807 	bl	800f5d4 <iprintf>
    prev->next = ipr->next;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e5ce:	6879      	ldr	r1, [r7, #4]
 800e5d0:	2001      	movs	r0, #1
 800e5d2:	f7fc fae5 	bl	800aba0 <memp_free>
}
 800e5d6:	bf00      	nop
 800e5d8:	3708      	adds	r7, #8
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	24005dac 	.word	0x24005dac
 800e5e4:	080120fc 	.word	0x080120fc
 800e5e8:	080121c4 	.word	0x080121c4
 800e5ec:	08012144 	.word	0x08012144

0800e5f0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b08c      	sub	sp, #48	; 0x30
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e600:	2301      	movs	r3, #1
 800e602:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e60a:	69fb      	ldr	r3, [r7, #28]
 800e60c:	885b      	ldrh	r3, [r3, #2]
 800e60e:	b29b      	uxth	r3, r3
 800e610:	4618      	mov	r0, r3
 800e612:	f7fb fccb 	bl	8009fac <lwip_htons>
 800e616:	4603      	mov	r3, r0
 800e618:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	f003 030f 	and.w	r3, r3, #15
 800e622:	b2db      	uxtb	r3, r3
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e628:	7e7b      	ldrb	r3, [r7, #25]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	8b7a      	ldrh	r2, [r7, #26]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d202      	bcs.n	800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e632:	f04f 33ff 	mov.w	r3, #4294967295
 800e636:	e135      	b.n	800e8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e638:	7e7b      	ldrb	r3, [r7, #25]
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	8b7a      	ldrh	r2, [r7, #26]
 800e63e:	1ad3      	subs	r3, r2, r3
 800e640:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	88db      	ldrh	r3, [r3, #6]
 800e646:	b29b      	uxth	r3, r3
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fb fcaf 	bl	8009fac <lwip_htons>
 800e64e:	4603      	mov	r3, r0
 800e650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e654:	b29b      	uxth	r3, r3
 800e656:	00db      	lsls	r3, r3, #3
 800e658:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e662:	2200      	movs	r2, #0
 800e664:	701a      	strb	r2, [r3, #0]
 800e666:	2200      	movs	r2, #0
 800e668:	705a      	strb	r2, [r3, #1]
 800e66a:	2200      	movs	r2, #0
 800e66c:	709a      	strb	r2, [r3, #2]
 800e66e:	2200      	movs	r2, #0
 800e670:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e674:	8afa      	ldrh	r2, [r7, #22]
 800e676:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e678:	8afa      	ldrh	r2, [r7, #22]
 800e67a:	8b7b      	ldrh	r3, [r7, #26]
 800e67c:	4413      	add	r3, r2
 800e67e:	b29a      	uxth	r2, r3
 800e680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e682:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e686:	88db      	ldrh	r3, [r3, #6]
 800e688:	b29b      	uxth	r3, r3
 800e68a:	8afa      	ldrh	r2, [r7, #22]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d902      	bls.n	800e696 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e690:	f04f 33ff 	mov.w	r3, #4294967295
 800e694:	e106      	b.n	800e8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	627b      	str	r3, [r7, #36]	; 0x24
 800e69c:	e068      	b.n	800e770 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a6:	889b      	ldrh	r3, [r3, #4]
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	889b      	ldrh	r3, [r3, #4]
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d235      	bcs.n	800e720 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d020      	beq.n	800e702 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c2:	889b      	ldrh	r3, [r3, #4]
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c8:	88db      	ldrh	r3, [r3, #6]
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d307      	bcc.n	800e6e0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d2:	88db      	ldrh	r3, [r3, #6]
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	889b      	ldrh	r3, [r3, #4]
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d902      	bls.n	800e6e6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6e4:	e0de      	b.n	800e8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e8:	68ba      	ldr	r2, [r7, #8]
 800e6ea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ee:	88db      	ldrh	r3, [r3, #6]
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f4:	889b      	ldrh	r3, [r3, #4]
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d03d      	beq.n	800e778 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e700:	e03a      	b.n	800e778 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e704:	88db      	ldrh	r3, [r3, #6]
 800e706:	b29a      	uxth	r2, r3
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	889b      	ldrh	r3, [r3, #4]
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	429a      	cmp	r2, r3
 800e710:	d902      	bls.n	800e718 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e712:	f04f 33ff 	mov.w	r3, #4294967295
 800e716:	e0c5      	b.n	800e8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	68ba      	ldr	r2, [r7, #8]
 800e71c:	605a      	str	r2, [r3, #4]
      break;
 800e71e:	e02b      	b.n	800e778 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e722:	889b      	ldrh	r3, [r3, #4]
 800e724:	b29a      	uxth	r2, r3
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	889b      	ldrh	r3, [r3, #4]
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d102      	bne.n	800e736 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e730:	f04f 33ff 	mov.w	r3, #4294967295
 800e734:	e0b6      	b.n	800e8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	889b      	ldrh	r3, [r3, #4]
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	88db      	ldrh	r3, [r3, #6]
 800e740:	b29b      	uxth	r3, r3
 800e742:	429a      	cmp	r2, r3
 800e744:	d202      	bcs.n	800e74c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e746:	f04f 33ff 	mov.w	r3, #4294967295
 800e74a:	e0ab      	b.n	800e8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d009      	beq.n	800e766 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e754:	88db      	ldrh	r3, [r3, #6]
 800e756:	b29a      	uxth	r2, r3
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	889b      	ldrh	r3, [r3, #4]
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	429a      	cmp	r2, r3
 800e760:	d001      	beq.n	800e766 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e762:	2300      	movs	r3, #0
 800e764:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	2b00      	cmp	r3, #0
 800e774:	d193      	bne.n	800e69e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e776:	e000      	b.n	800e77a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e778:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d12d      	bne.n	800e7dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e782:	2b00      	cmp	r3, #0
 800e784:	d01c      	beq.n	800e7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e788:	88db      	ldrh	r3, [r3, #6]
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78e:	889b      	ldrh	r3, [r3, #4]
 800e790:	b29b      	uxth	r3, r3
 800e792:	429a      	cmp	r2, r3
 800e794:	d906      	bls.n	800e7a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e796:	4b45      	ldr	r3, [pc, #276]	; (800e8ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e798:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e79c:	4944      	ldr	r1, [pc, #272]	; (800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e79e:	4845      	ldr	r0, [pc, #276]	; (800e8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7a0:	f000 ff18 	bl	800f5d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a6:	68ba      	ldr	r2, [r7, #8]
 800e7a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ac:	88db      	ldrh	r3, [r3, #6]
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b2:	889b      	ldrh	r3, [r3, #4]
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d010      	beq.n	800e7dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	623b      	str	r3, [r7, #32]
 800e7be:	e00d      	b.n	800e7dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d006      	beq.n	800e7d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e7c8:	4b38      	ldr	r3, [pc, #224]	; (800e8ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7ca:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e7ce:	493a      	ldr	r1, [pc, #232]	; (800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e7d0:	4838      	ldr	r0, [pc, #224]	; (800e8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7d2:	f000 feff 	bl	800f5d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	68ba      	ldr	r2, [r7, #8]
 800e7da:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d105      	bne.n	800e7ee <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	7f9b      	ldrb	r3, [r3, #30]
 800e7e6:	f003 0301 	and.w	r3, r3, #1
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d059      	beq.n	800e8a2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e7ee:	6a3b      	ldr	r3, [r7, #32]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d04f      	beq.n	800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d006      	beq.n	800e80a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	889b      	ldrh	r3, [r3, #4]
 800e804:	b29b      	uxth	r3, r3
 800e806:	2b00      	cmp	r3, #0
 800e808:	d002      	beq.n	800e810 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e80a:	2300      	movs	r3, #0
 800e80c:	623b      	str	r3, [r7, #32]
 800e80e:	e041      	b.n	800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e81a:	e012      	b.n	800e842 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	88db      	ldrh	r3, [r3, #6]
 800e826:	b29a      	uxth	r2, r3
 800e828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82a:	889b      	ldrh	r3, [r3, #4]
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	429a      	cmp	r2, r3
 800e830:	d002      	beq.n	800e838 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e832:	2300      	movs	r3, #0
 800e834:	623b      	str	r3, [r7, #32]
            break;
 800e836:	e007      	b.n	800e848 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1e9      	bne.n	800e81c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e848:	6a3b      	ldr	r3, [r7, #32]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d022      	beq.n	800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	685b      	ldr	r3, [r3, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d106      	bne.n	800e864 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e856:	4b15      	ldr	r3, [pc, #84]	; (800e8ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e858:	f240 12df 	movw	r2, #479	; 0x1df
 800e85c:	4917      	ldr	r1, [pc, #92]	; (800e8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e85e:	4815      	ldr	r0, [pc, #84]	; (800e8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e860:	f000 feb8 	bl	800f5d4 <iprintf>
          LWIP_ASSERT("sanity check",
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d106      	bne.n	800e87e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e870:	4b0e      	ldr	r3, [pc, #56]	; (800e8ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e872:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e876:	4911      	ldr	r1, [pc, #68]	; (800e8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e878:	480e      	ldr	r0, [pc, #56]	; (800e8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e87a:	f000 feab 	bl	800f5d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d006      	beq.n	800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e886:	4b09      	ldr	r3, [pc, #36]	; (800e8ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e888:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e88c:	490c      	ldr	r1, [pc, #48]	; (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e88e:	4809      	ldr	r0, [pc, #36]	; (800e8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e890:	f000 fea0 	bl	800f5d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e894:	6a3b      	ldr	r3, [r7, #32]
 800e896:	2b00      	cmp	r3, #0
 800e898:	bf14      	ite	ne
 800e89a:	2301      	movne	r3, #1
 800e89c:	2300      	moveq	r3, #0
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	e000      	b.n	800e8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e8a2:	2300      	movs	r3, #0
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3730      	adds	r7, #48	; 0x30
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	080120fc 	.word	0x080120fc
 800e8b0:	080121e0 	.word	0x080121e0
 800e8b4:	08012144 	.word	0x08012144
 800e8b8:	08012200 	.word	0x08012200
 800e8bc:	08012238 	.word	0x08012238
 800e8c0:	08012248 	.word	0x08012248

0800e8c4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b08e      	sub	sp, #56	; 0x38
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	f003 030f 	and.w	r3, r3, #15
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	2b14      	cmp	r3, #20
 800e8e2:	f040 8171 	bne.w	800ebc8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e8:	88db      	ldrh	r3, [r3, #6]
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7fb fb5d 	bl	8009fac <lwip_htons>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	00db      	lsls	r3, r3, #3
 800e8fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e900:	885b      	ldrh	r3, [r3, #2]
 800e902:	b29b      	uxth	r3, r3
 800e904:	4618      	mov	r0, r3
 800e906:	f7fb fb51 	bl	8009fac <lwip_htons>
 800e90a:	4603      	mov	r3, r0
 800e90c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	f003 030f 	and.w	r3, r3, #15
 800e916:	b2db      	uxtb	r3, r3
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e91e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e922:	b29b      	uxth	r3, r3
 800e924:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e926:	429a      	cmp	r2, r3
 800e928:	f0c0 8150 	bcc.w	800ebcc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e92c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e930:	b29b      	uxth	r3, r3
 800e932:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e934:	1ad3      	subs	r3, r2, r3
 800e936:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f7fd f803 	bl	800b944 <pbuf_clen>
 800e93e:	4603      	mov	r3, r0
 800e940:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e942:	4b8c      	ldr	r3, [pc, #560]	; (800eb74 <ip4_reass+0x2b0>)
 800e944:	881b      	ldrh	r3, [r3, #0]
 800e946:	461a      	mov	r2, r3
 800e948:	8c3b      	ldrh	r3, [r7, #32]
 800e94a:	4413      	add	r3, r2
 800e94c:	2b0a      	cmp	r3, #10
 800e94e:	dd10      	ble.n	800e972 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e950:	8c3b      	ldrh	r3, [r7, #32]
 800e952:	4619      	mov	r1, r3
 800e954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e956:	f7ff fd81 	bl	800e45c <ip_reass_remove_oldest_datagram>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f000 8137 	beq.w	800ebd0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e962:	4b84      	ldr	r3, [pc, #528]	; (800eb74 <ip4_reass+0x2b0>)
 800e964:	881b      	ldrh	r3, [r3, #0]
 800e966:	461a      	mov	r2, r3
 800e968:	8c3b      	ldrh	r3, [r7, #32]
 800e96a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e96c:	2b0a      	cmp	r3, #10
 800e96e:	f300 812f 	bgt.w	800ebd0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e972:	4b81      	ldr	r3, [pc, #516]	; (800eb78 <ip4_reass+0x2b4>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	633b      	str	r3, [r7, #48]	; 0x30
 800e978:	e015      	b.n	800e9a6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97c:	695a      	ldr	r2, [r3, #20]
 800e97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	429a      	cmp	r2, r3
 800e984:	d10c      	bne.n	800e9a0 <ip4_reass+0xdc>
 800e986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e988:	699a      	ldr	r2, [r3, #24]
 800e98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98c:	691b      	ldr	r3, [r3, #16]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d106      	bne.n	800e9a0 <ip4_reass+0xdc>
 800e992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e994:	899a      	ldrh	r2, [r3, #12]
 800e996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e998:	889b      	ldrh	r3, [r3, #4]
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d006      	beq.n	800e9ae <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	633b      	str	r3, [r7, #48]	; 0x30
 800e9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1e6      	bne.n	800e97a <ip4_reass+0xb6>
 800e9ac:	e000      	b.n	800e9b0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e9ae:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d109      	bne.n	800e9ca <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e9b6:	8c3b      	ldrh	r3, [r7, #32]
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9bc:	f7ff fdb0 	bl	800e520 <ip_reass_enqueue_new_datagram>
 800e9c0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d11c      	bne.n	800ea02 <ip4_reass+0x13e>
      goto nullreturn;
 800e9c8:	e105      	b.n	800ebd6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9cc:	88db      	ldrh	r3, [r3, #6]
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7fb faeb 	bl	8009fac <lwip_htons>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d110      	bne.n	800ea02 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e2:	89db      	ldrh	r3, [r3, #14]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7fb fae1 	bl	8009fac <lwip_htons>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d006      	beq.n	800ea02 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f6:	3308      	adds	r3, #8
 800e9f8:	2214      	movs	r2, #20
 800e9fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f000 ff5c 	bl	800f8ba <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	88db      	ldrh	r3, [r3, #6]
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	f003 0320 	and.w	r3, r3, #32
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	bf0c      	ite	eq
 800ea10:	2301      	moveq	r3, #1
 800ea12:	2300      	movne	r3, #0
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00e      	beq.n	800ea3c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea22:	4413      	add	r3, r2
 800ea24:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ea26:	8b7a      	ldrh	r2, [r7, #26]
 800ea28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	f0c0 80a0 	bcc.w	800eb70 <ip4_reass+0x2ac>
 800ea30:	8b7b      	ldrh	r3, [r7, #26]
 800ea32:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ea36:	4293      	cmp	r3, r2
 800ea38:	f200 809a 	bhi.w	800eb70 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ea3c:	69fa      	ldr	r2, [r7, #28]
 800ea3e:	6879      	ldr	r1, [r7, #4]
 800ea40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea42:	f7ff fdd5 	bl	800e5f0 <ip_reass_chain_frag_into_datagram_and_validate>
 800ea46:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea4e:	f000 809b 	beq.w	800eb88 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ea52:	4b48      	ldr	r3, [pc, #288]	; (800eb74 <ip4_reass+0x2b0>)
 800ea54:	881a      	ldrh	r2, [r3, #0]
 800ea56:	8c3b      	ldrh	r3, [r7, #32]
 800ea58:	4413      	add	r3, r2
 800ea5a:	b29a      	uxth	r2, r3
 800ea5c:	4b45      	ldr	r3, [pc, #276]	; (800eb74 <ip4_reass+0x2b0>)
 800ea5e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00d      	beq.n	800ea82 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea6a:	4413      	add	r3, r2
 800ea6c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea70:	8a7a      	ldrh	r2, [r7, #18]
 800ea72:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ea74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea76:	7f9b      	ldrb	r3, [r3, #30]
 800ea78:	f043 0301 	orr.w	r3, r3, #1
 800ea7c:	b2da      	uxtb	r2, r3
 800ea7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea80:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d171      	bne.n	800eb6c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ea88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8a:	8b9b      	ldrh	r3, [r3, #28]
 800ea8c:	3314      	adds	r3, #20
 800ea8e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ea90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	685b      	ldr	r3, [r3, #4]
 800eaa0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800eaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa4:	3308      	adds	r3, #8
 800eaa6:	2214      	movs	r2, #20
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaac:	f000 ff05 	bl	800f8ba <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800eab0:	8a3b      	ldrh	r3, [r7, #16]
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fb fa7a 	bl	8009fac <lwip_htons>
 800eab8:	4603      	mov	r3, r0
 800eaba:	461a      	mov	r2, r3
 800eabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eabe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800eac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac2:	2200      	movs	r2, #0
 800eac4:	719a      	strb	r2, [r3, #6]
 800eac6:	2200      	movs	r2, #0
 800eac8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eacc:	2200      	movs	r2, #0
 800eace:	729a      	strb	r2, [r3, #10]
 800ead0:	2200      	movs	r2, #0
 800ead2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ead4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eada:	e00d      	b.n	800eaf8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800eadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eae2:	2114      	movs	r1, #20
 800eae4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eae6:	f7fc fe19 	bl	800b71c <pbuf_remove_header>
      pbuf_cat(p, r);
 800eaea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7fc ff69 	bl	800b9c4 <pbuf_cat>
      r = iprh->next_pbuf;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800eaf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1ee      	bne.n	800eadc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eafe:	4b1e      	ldr	r3, [pc, #120]	; (800eb78 <ip4_reass+0x2b4>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d102      	bne.n	800eb0e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb0c:	e010      	b.n	800eb30 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb0e:	4b1a      	ldr	r3, [pc, #104]	; (800eb78 <ip4_reass+0x2b4>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb14:	e007      	b.n	800eb26 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800eb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d006      	beq.n	800eb2e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1f4      	bne.n	800eb16 <ip4_reass+0x252>
 800eb2c:	e000      	b.n	800eb30 <ip4_reass+0x26c>
          break;
 800eb2e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eb30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb34:	f7ff fd2e 	bl	800e594 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7fc ff03 	bl	800b944 <pbuf_clen>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eb42:	4b0c      	ldr	r3, [pc, #48]	; (800eb74 <ip4_reass+0x2b0>)
 800eb44:	881b      	ldrh	r3, [r3, #0]
 800eb46:	8c3a      	ldrh	r2, [r7, #32]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d906      	bls.n	800eb5a <ip4_reass+0x296>
 800eb4c:	4b0b      	ldr	r3, [pc, #44]	; (800eb7c <ip4_reass+0x2b8>)
 800eb4e:	f240 229b 	movw	r2, #667	; 0x29b
 800eb52:	490b      	ldr	r1, [pc, #44]	; (800eb80 <ip4_reass+0x2bc>)
 800eb54:	480b      	ldr	r0, [pc, #44]	; (800eb84 <ip4_reass+0x2c0>)
 800eb56:	f000 fd3d 	bl	800f5d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800eb5a:	4b06      	ldr	r3, [pc, #24]	; (800eb74 <ip4_reass+0x2b0>)
 800eb5c:	881a      	ldrh	r2, [r3, #0]
 800eb5e:	8c3b      	ldrh	r3, [r7, #32]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	4b03      	ldr	r3, [pc, #12]	; (800eb74 <ip4_reass+0x2b0>)
 800eb66:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	e038      	b.n	800ebde <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	e036      	b.n	800ebde <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800eb70:	bf00      	nop
 800eb72:	e00a      	b.n	800eb8a <ip4_reass+0x2c6>
 800eb74:	24005db0 	.word	0x24005db0
 800eb78:	24005dac 	.word	0x24005dac
 800eb7c:	080120fc 	.word	0x080120fc
 800eb80:	0801226c 	.word	0x0801226c
 800eb84:	08012144 	.word	0x08012144
    goto nullreturn_ipr;
 800eb88:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d106      	bne.n	800eb9e <ip4_reass+0x2da>
 800eb90:	4b15      	ldr	r3, [pc, #84]	; (800ebe8 <ip4_reass+0x324>)
 800eb92:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800eb96:	4915      	ldr	r1, [pc, #84]	; (800ebec <ip4_reass+0x328>)
 800eb98:	4815      	ldr	r0, [pc, #84]	; (800ebf0 <ip4_reass+0x32c>)
 800eb9a:	f000 fd1b 	bl	800f5d4 <iprintf>
  if (ipr->p == NULL) {
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d116      	bne.n	800ebd4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800eba6:	4b13      	ldr	r3, [pc, #76]	; (800ebf4 <ip4_reass+0x330>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d006      	beq.n	800ebbe <ip4_reass+0x2fa>
 800ebb0:	4b0d      	ldr	r3, [pc, #52]	; (800ebe8 <ip4_reass+0x324>)
 800ebb2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ebb6:	4910      	ldr	r1, [pc, #64]	; (800ebf8 <ip4_reass+0x334>)
 800ebb8:	480d      	ldr	r0, [pc, #52]	; (800ebf0 <ip4_reass+0x32c>)
 800ebba:	f000 fd0b 	bl	800f5d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ebbe:	2100      	movs	r1, #0
 800ebc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebc2:	f7ff fce7 	bl	800e594 <ip_reass_dequeue_datagram>
 800ebc6:	e006      	b.n	800ebd6 <ip4_reass+0x312>
    goto nullreturn;
 800ebc8:	bf00      	nop
 800ebca:	e004      	b.n	800ebd6 <ip4_reass+0x312>
    goto nullreturn;
 800ebcc:	bf00      	nop
 800ebce:	e002      	b.n	800ebd6 <ip4_reass+0x312>
      goto nullreturn;
 800ebd0:	bf00      	nop
 800ebd2:	e000      	b.n	800ebd6 <ip4_reass+0x312>
  }

nullreturn:
 800ebd4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f7fc fe26 	bl	800b828 <pbuf_free>
  return NULL;
 800ebdc:	2300      	movs	r3, #0
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3738      	adds	r7, #56	; 0x38
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	080120fc 	.word	0x080120fc
 800ebec:	08012288 	.word	0x08012288
 800ebf0:	08012144 	.word	0x08012144
 800ebf4:	24005dac 	.word	0x24005dac
 800ebf8:	08012294 	.word	0x08012294

0800ebfc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ec00:	2002      	movs	r0, #2
 800ec02:	f7fb ff57 	bl	800aab4 <memp_malloc>
 800ec06:	4603      	mov	r3, r0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d106      	bne.n	800ec28 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ec1a:	4b07      	ldr	r3, [pc, #28]	; (800ec38 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ec1c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ec20:	4906      	ldr	r1, [pc, #24]	; (800ec3c <ip_frag_free_pbuf_custom_ref+0x30>)
 800ec22:	4807      	ldr	r0, [pc, #28]	; (800ec40 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ec24:	f000 fcd6 	bl	800f5d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ec28:	6879      	ldr	r1, [r7, #4]
 800ec2a:	2002      	movs	r0, #2
 800ec2c:	f7fb ffb8 	bl	800aba0 <memp_free>
}
 800ec30:	bf00      	nop
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	080120fc 	.word	0x080120fc
 800ec3c:	080122b4 	.word	0x080122b4
 800ec40:	08012144 	.word	0x08012144

0800ec44 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d106      	bne.n	800ec64 <ipfrag_free_pbuf_custom+0x20>
 800ec56:	4b11      	ldr	r3, [pc, #68]	; (800ec9c <ipfrag_free_pbuf_custom+0x58>)
 800ec58:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ec5c:	4910      	ldr	r1, [pc, #64]	; (800eca0 <ipfrag_free_pbuf_custom+0x5c>)
 800ec5e:	4811      	ldr	r0, [pc, #68]	; (800eca4 <ipfrag_free_pbuf_custom+0x60>)
 800ec60:	f000 fcb8 	bl	800f5d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d006      	beq.n	800ec7a <ipfrag_free_pbuf_custom+0x36>
 800ec6c:	4b0b      	ldr	r3, [pc, #44]	; (800ec9c <ipfrag_free_pbuf_custom+0x58>)
 800ec6e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ec72:	490d      	ldr	r1, [pc, #52]	; (800eca8 <ipfrag_free_pbuf_custom+0x64>)
 800ec74:	480b      	ldr	r0, [pc, #44]	; (800eca4 <ipfrag_free_pbuf_custom+0x60>)
 800ec76:	f000 fcad 	bl	800f5d4 <iprintf>
  if (pcr->original != NULL) {
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	695b      	ldr	r3, [r3, #20]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d004      	beq.n	800ec8c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	695b      	ldr	r3, [r3, #20]
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7fc fdce 	bl	800b828 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	f7ff ffbd 	bl	800ec0c <ip_frag_free_pbuf_custom_ref>
}
 800ec92:	bf00      	nop
 800ec94:	3710      	adds	r7, #16
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	080120fc 	.word	0x080120fc
 800eca0:	080122c0 	.word	0x080122c0
 800eca4:	08012144 	.word	0x08012144
 800eca8:	080122cc 	.word	0x080122cc

0800ecac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b094      	sub	sp, #80	; 0x50
 800ecb0:	af02      	add	r7, sp, #8
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	60b9      	str	r1, [r7, #8]
 800ecb6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ecc2:	3b14      	subs	r3, #20
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	da00      	bge.n	800ecca <ip4_frag+0x1e>
 800ecc8:	3307      	adds	r3, #7
 800ecca:	10db      	asrs	r3, r3, #3
 800eccc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ecce:	2314      	movs	r3, #20
 800ecd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ecd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecda:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ecdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	f003 030f 	and.w	r3, r3, #15
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	2b14      	cmp	r3, #20
 800ecec:	d002      	beq.n	800ecf4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ecee:	f06f 0305 	mvn.w	r3, #5
 800ecf2:	e110      	b.n	800ef16 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	895b      	ldrh	r3, [r3, #10]
 800ecf8:	2b13      	cmp	r3, #19
 800ecfa:	d809      	bhi.n	800ed10 <ip4_frag+0x64>
 800ecfc:	4b88      	ldr	r3, [pc, #544]	; (800ef20 <ip4_frag+0x274>)
 800ecfe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ed02:	4988      	ldr	r1, [pc, #544]	; (800ef24 <ip4_frag+0x278>)
 800ed04:	4888      	ldr	r0, [pc, #544]	; (800ef28 <ip4_frag+0x27c>)
 800ed06:	f000 fc65 	bl	800f5d4 <iprintf>
 800ed0a:	f06f 0305 	mvn.w	r3, #5
 800ed0e:	e102      	b.n	800ef16 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ed10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed12:	88db      	ldrh	r3, [r3, #6]
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fb f948 	bl	8009fac <lwip_htons>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ed20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ed2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed30:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	891b      	ldrh	r3, [r3, #8]
 800ed36:	3b14      	subs	r3, #20
 800ed38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ed3c:	e0e1      	b.n	800ef02 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed40:	00db      	lsls	r3, r3, #3
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	bf28      	it	cs
 800ed4c:	4613      	movcs	r3, r2
 800ed4e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ed50:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed54:	2114      	movs	r1, #20
 800ed56:	200e      	movs	r0, #14
 800ed58:	f7fc fa84 	bl	800b264 <pbuf_alloc>
 800ed5c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ed5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f000 80d5 	beq.w	800ef10 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ed66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed68:	895b      	ldrh	r3, [r3, #10]
 800ed6a:	2b13      	cmp	r3, #19
 800ed6c:	d806      	bhi.n	800ed7c <ip4_frag+0xd0>
 800ed6e:	4b6c      	ldr	r3, [pc, #432]	; (800ef20 <ip4_frag+0x274>)
 800ed70:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ed74:	496d      	ldr	r1, [pc, #436]	; (800ef2c <ip4_frag+0x280>)
 800ed76:	486c      	ldr	r0, [pc, #432]	; (800ef28 <ip4_frag+0x27c>)
 800ed78:	f000 fc2c 	bl	800f5d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ed7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	2214      	movs	r2, #20
 800ed82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ed84:	4618      	mov	r0, r3
 800ed86:	f000 fd98 	bl	800f8ba <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ed8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ed90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ed96:	e064      	b.n	800ee62 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	895a      	ldrh	r2, [r3, #10]
 800ed9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ed9e:	1ad3      	subs	r3, r2, r3
 800eda0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	895b      	ldrh	r3, [r3, #10]
 800eda6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d906      	bls.n	800edba <ip4_frag+0x10e>
 800edac:	4b5c      	ldr	r3, [pc, #368]	; (800ef20 <ip4_frag+0x274>)
 800edae:	f240 322d 	movw	r2, #813	; 0x32d
 800edb2:	495f      	ldr	r1, [pc, #380]	; (800ef30 <ip4_frag+0x284>)
 800edb4:	485c      	ldr	r0, [pc, #368]	; (800ef28 <ip4_frag+0x27c>)
 800edb6:	f000 fc0d 	bl	800f5d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800edba:	8bfa      	ldrh	r2, [r7, #30]
 800edbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800edc0:	4293      	cmp	r3, r2
 800edc2:	bf28      	it	cs
 800edc4:	4613      	movcs	r3, r2
 800edc6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800edca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d105      	bne.n	800edde <ip4_frag+0x132>
        poff = 0;
 800edd2:	2300      	movs	r3, #0
 800edd4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	60fb      	str	r3, [r7, #12]
        continue;
 800eddc:	e041      	b.n	800ee62 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800edde:	f7ff ff0d 	bl	800ebfc <ip_frag_alloc_pbuf_custom_ref>
 800ede2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d103      	bne.n	800edf2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800edea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edec:	f7fc fd1c 	bl	800b828 <pbuf_free>
        goto memerr;
 800edf0:	e08f      	b.n	800ef12 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800edf2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800edf8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800edfa:	4413      	add	r3, r2
 800edfc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ee00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ee04:	9201      	str	r2, [sp, #4]
 800ee06:	9300      	str	r3, [sp, #0]
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2241      	movs	r2, #65	; 0x41
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	f7fc fb51 	bl	800b4b4 <pbuf_alloced_custom>
 800ee12:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d106      	bne.n	800ee28 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ee1a:	69b8      	ldr	r0, [r7, #24]
 800ee1c:	f7ff fef6 	bl	800ec0c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ee20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee22:	f7fc fd01 	bl	800b828 <pbuf_free>
        goto memerr;
 800ee26:	e074      	b.n	800ef12 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f7fc fda3 	bl	800b974 <pbuf_ref>
      pcr->original = p;
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	4a3f      	ldr	r2, [pc, #252]	; (800ef34 <ip4_frag+0x288>)
 800ee38:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ee3a:	6979      	ldr	r1, [r7, #20]
 800ee3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee3e:	f7fc fdc1 	bl	800b9c4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ee42:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ee46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee4a:	1ad3      	subs	r3, r2, r3
 800ee4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ee50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d004      	beq.n	800ee62 <ip4_frag+0x1b6>
        poff = 0;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ee62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d196      	bne.n	800ed98 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ee6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ee6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee70:	4413      	add	r3, r2
 800ee72:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee78:	f1a3 0213 	sub.w	r2, r3, #19
 800ee7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee80:	429a      	cmp	r2, r3
 800ee82:	bfcc      	ite	gt
 800ee84:	2301      	movgt	r3, #1
 800ee86:	2300      	movle	r3, #0
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ee8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ee90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee94:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ee96:	6a3b      	ldr	r3, [r7, #32]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d002      	beq.n	800eea2 <ip4_frag+0x1f6>
 800ee9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d003      	beq.n	800eeaa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800eea2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eea4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eea8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800eeaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7fb f87d 	bl	8009fac <lwip_htons>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800eeba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eebc:	3314      	adds	r3, #20
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fb f873 	bl	8009fac <lwip_htons>
 800eec6:	4603      	mov	r3, r0
 800eec8:	461a      	mov	r2, r3
 800eeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eecc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	2200      	movs	r2, #0
 800eed2:	729a      	strb	r2, [r3, #10]
 800eed4:	2200      	movs	r2, #0
 800eed6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	695b      	ldr	r3, [r3, #20]
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eee0:	68b8      	ldr	r0, [r7, #8]
 800eee2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800eee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eee6:	f7fc fc9f 	bl	800b828 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800eeea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eeee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eef0:	1ad3      	subs	r3, r2, r3
 800eef2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800eef6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800eefa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eefc:	4413      	add	r3, r2
 800eefe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ef02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f47f af19 	bne.w	800ed3e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	e002      	b.n	800ef16 <ip4_frag+0x26a>
      goto memerr;
 800ef10:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ef12:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3748      	adds	r7, #72	; 0x48
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	080120fc 	.word	0x080120fc
 800ef24:	080122d8 	.word	0x080122d8
 800ef28:	08012144 	.word	0x08012144
 800ef2c:	080122f4 	.word	0x080122f4
 800ef30:	08012314 	.word	0x08012314
 800ef34:	0800ec45 	.word	0x0800ec45

0800ef38 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b086      	sub	sp, #24
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ef42:	230e      	movs	r3, #14
 800ef44:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	895b      	ldrh	r3, [r3, #10]
 800ef4a:	2b0e      	cmp	r3, #14
 800ef4c:	d96e      	bls.n	800f02c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	7bdb      	ldrb	r3, [r3, #15]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d106      	bne.n	800ef64 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	b2da      	uxtb	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	7b1a      	ldrb	r2, [r3, #12]
 800ef6e:	7b5b      	ldrb	r3, [r3, #13]
 800ef70:	021b      	lsls	r3, r3, #8
 800ef72:	4313      	orrs	r3, r2
 800ef74:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	f003 0301 	and.w	r3, r3, #1
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d023      	beq.n	800efca <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	d10f      	bne.n	800efaa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	785b      	ldrb	r3, [r3, #1]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d11b      	bne.n	800efca <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef96:	2b5e      	cmp	r3, #94	; 0x5e
 800ef98:	d117      	bne.n	800efca <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	7b5b      	ldrb	r3, [r3, #13]
 800ef9e:	f043 0310 	orr.w	r3, r3, #16
 800efa2:	b2da      	uxtb	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	735a      	strb	r2, [r3, #13]
 800efa8:	e00f      	b.n	800efca <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	2206      	movs	r2, #6
 800efae:	4928      	ldr	r1, [pc, #160]	; (800f050 <ethernet_input+0x118>)
 800efb0:	4618      	mov	r0, r3
 800efb2:	f000 fb84 	bl	800f6be <memcmp>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d106      	bne.n	800efca <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	7b5b      	ldrb	r3, [r3, #13]
 800efc0:	f043 0308 	orr.w	r3, r3, #8
 800efc4:	b2da      	uxtb	r2, r3
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800efca:	89fb      	ldrh	r3, [r7, #14]
 800efcc:	2b08      	cmp	r3, #8
 800efce:	d003      	beq.n	800efd8 <ethernet_input+0xa0>
 800efd0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800efd4:	d014      	beq.n	800f000 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800efd6:	e032      	b.n	800f03e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efde:	f003 0308 	and.w	r3, r3, #8
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d024      	beq.n	800f030 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800efe6:	8afb      	ldrh	r3, [r7, #22]
 800efe8:	4619      	mov	r1, r3
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f7fc fb96 	bl	800b71c <pbuf_remove_header>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d11e      	bne.n	800f034 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800eff6:	6839      	ldr	r1, [r7, #0]
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f7fe ff2b 	bl	800de54 <ip4_input>
      break;
 800effe:	e013      	b.n	800f028 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f006:	f003 0308 	and.w	r3, r3, #8
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d014      	beq.n	800f038 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f00e:	8afb      	ldrh	r3, [r7, #22]
 800f010:	4619      	mov	r1, r3
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f7fc fb82 	bl	800b71c <pbuf_remove_header>
 800f018:	4603      	mov	r3, r0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d10e      	bne.n	800f03c <ethernet_input+0x104>
        etharp_input(p, netif);
 800f01e:	6839      	ldr	r1, [r7, #0]
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f7fe f8a5 	bl	800d170 <etharp_input>
      break;
 800f026:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f028:	2300      	movs	r3, #0
 800f02a:	e00c      	b.n	800f046 <ethernet_input+0x10e>
    goto free_and_return;
 800f02c:	bf00      	nop
 800f02e:	e006      	b.n	800f03e <ethernet_input+0x106>
        goto free_and_return;
 800f030:	bf00      	nop
 800f032:	e004      	b.n	800f03e <ethernet_input+0x106>
        goto free_and_return;
 800f034:	bf00      	nop
 800f036:	e002      	b.n	800f03e <ethernet_input+0x106>
        goto free_and_return;
 800f038:	bf00      	nop
 800f03a:	e000      	b.n	800f03e <ethernet_input+0x106>
        goto free_and_return;
 800f03c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f7fc fbf2 	bl	800b828 <pbuf_free>
  return ERR_OK;
 800f044:	2300      	movs	r3, #0
}
 800f046:	4618      	mov	r0, r3
 800f048:	3718      	adds	r7, #24
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	080124ac 	.word	0x080124ac

0800f054 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f054:	b580      	push	{r7, lr}
 800f056:	b086      	sub	sp, #24
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	607a      	str	r2, [r7, #4]
 800f060:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f062:	8c3b      	ldrh	r3, [r7, #32]
 800f064:	4618      	mov	r0, r3
 800f066:	f7fa ffa1 	bl	8009fac <lwip_htons>
 800f06a:	4603      	mov	r3, r0
 800f06c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f06e:	210e      	movs	r1, #14
 800f070:	68b8      	ldr	r0, [r7, #8]
 800f072:	f7fc fb43 	bl	800b6fc <pbuf_add_header>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d125      	bne.n	800f0c8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	8afa      	ldrh	r2, [r7, #22]
 800f086:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	2206      	movs	r2, #6
 800f08c:	6839      	ldr	r1, [r7, #0]
 800f08e:	4618      	mov	r0, r3
 800f090:	f000 fc13 	bl	800f8ba <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	3306      	adds	r3, #6
 800f098:	2206      	movs	r2, #6
 800f09a:	6879      	ldr	r1, [r7, #4]
 800f09c:	4618      	mov	r0, r3
 800f09e:	f000 fc0c 	bl	800f8ba <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f0a8:	2b06      	cmp	r3, #6
 800f0aa:	d006      	beq.n	800f0ba <ethernet_output+0x66>
 800f0ac:	4b0a      	ldr	r3, [pc, #40]	; (800f0d8 <ethernet_output+0x84>)
 800f0ae:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f0b2:	490a      	ldr	r1, [pc, #40]	; (800f0dc <ethernet_output+0x88>)
 800f0b4:	480a      	ldr	r0, [pc, #40]	; (800f0e0 <ethernet_output+0x8c>)
 800f0b6:	f000 fa8d 	bl	800f5d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	699b      	ldr	r3, [r3, #24]
 800f0be:	68b9      	ldr	r1, [r7, #8]
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	4798      	blx	r3
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	e002      	b.n	800f0ce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f0c8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f0ca:	f06f 0301 	mvn.w	r3, #1
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3718      	adds	r7, #24
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	08012324 	.word	0x08012324
 800f0dc:	0801235c 	.word	0x0801235c
 800f0e0:	08012390 	.word	0x08012390

0800f0e4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	2104      	movs	r1, #4
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7f6 fd41 	bl	8005b7c <osMessageQueueNew>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d102      	bne.n	800f10e <sys_mbox_new+0x2a>
    return ERR_MEM;
 800f108:	f04f 33ff 	mov.w	r3, #4294967295
 800f10c:	e000      	b.n	800f110 <sys_mbox_new+0x2c>

  return ERR_OK;
 800f10e:	2300      	movs	r3, #0
}
 800f110:	4618      	mov	r0, r3
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4618      	mov	r0, r3
 800f126:	f7f6 fe5b 	bl	8005de0 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	4618      	mov	r0, r3
 800f130:	f7f6 fe76 	bl	8005e20 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800f134:	bf00      	nop
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6818      	ldr	r0, [r3, #0]
 800f14a:	4639      	mov	r1, r7
 800f14c:	2300      	movs	r3, #0
 800f14e:	2200      	movs	r2, #0
 800f150:	f7f6 fd88 	bl	8005c64 <osMessageQueuePut>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d102      	bne.n	800f160 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 800f15a:	2300      	movs	r3, #0
 800f15c:	73fb      	strb	r3, [r7, #15]
 800f15e:	e001      	b.n	800f164 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800f160:	23ff      	movs	r3, #255	; 0xff
 800f162:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800f164:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b086      	sub	sp, #24
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800f17c:	f7f6 f9ea 	bl	8005554 <osKernelGetTickCount>
 800f180:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d013      	beq.n	800f1b0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6818      	ldr	r0, [r3, #0]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	68b9      	ldr	r1, [r7, #8]
 800f192:	f7f6 fdc7 	bl	8005d24 <osMessageQueueGet>
 800f196:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d105      	bne.n	800f1aa <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 800f19e:	f7f6 f9d9 	bl	8005554 <osKernelGetTickCount>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	e00f      	b.n	800f1ca <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800f1aa:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ae:	e00c      	b.n	800f1ca <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6818      	ldr	r0, [r3, #0]
 800f1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	68b9      	ldr	r1, [r7, #8]
 800f1bc:	f7f6 fdb2 	bl	8005d24 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800f1c0:	f7f6 f9c8 	bl	8005554 <osKernelGetTickCount>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3718      	adds	r7, #24
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b082      	sub	sp, #8
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
 800f1da:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6818      	ldr	r0, [r3, #0]
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	6839      	ldr	r1, [r7, #0]
 800f1e6:	f7f6 fd9d 	bl	8005d24 <osMessageQueueGet>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d101      	bne.n	800f1f4 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	e001      	b.n	800f1f8 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800f1f4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3708      	adds	r7, #8
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d101      	bne.n	800f214 <sys_mbox_valid+0x14>
    return 0;
 800f210:	2300      	movs	r3, #0
 800f212:	e000      	b.n	800f216 <sys_mbox_valid+0x16>
  else
    return 1;
 800f214:	2301      	movs	r3, #1
}
 800f216:	4618      	mov	r0, r3
 800f218:	370c      	adds	r7, #12
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr

0800f222 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 800f222:	b480      	push	{r7}
 800f224:	b083      	sub	sp, #12
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2200      	movs	r2, #0
 800f22e:	601a      	str	r2, [r3, #0]
}
 800f230:	bf00      	nop
 800f232:	370c      	adds	r7, #12
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr

0800f23c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	460b      	mov	r3, r1
 800f246:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 800f248:	78fb      	ldrb	r3, [r7, #3]
 800f24a:	2200      	movs	r2, #0
 800f24c:	4619      	mov	r1, r3
 800f24e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f252:	f7f6 fb50 	bl	80058f6 <osSemaphoreNew>
 800f256:	4602      	mov	r2, r0
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d102      	bne.n	800f26a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800f264:	f04f 33ff 	mov.w	r3, #4294967295
 800f268:	e009      	b.n	800f27e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 800f26a:	78fb      	ldrb	r3, [r7, #3]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d105      	bne.n	800f27c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2100      	movs	r1, #0
 800f276:	4618      	mov	r0, r3
 800f278:	f7f6 fbc6 	bl	8005a08 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3708      	adds	r7, #8
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}

0800f286 <sys_sem_free>:
}

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800f286:	b580      	push	{r7, lr}
 800f288:	b082      	sub	sp, #8
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	4618      	mov	r0, r3
 800f294:	f7f6 fc4e 	bl	8005b34 <osSemaphoreDelete>
}
 800f298:	bf00      	nop
 800f29a:	3708      	adds	r7, #8
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d101      	bne.n	800f2b4 <sys_sem_valid+0x14>
    return 0;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	e000      	b.n	800f2b6 <sys_sem_valid+0x16>
  else
    return 1;
 800f2b4:	2301      	movs	r3, #1
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	370c      	adds	r7, #12
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr

0800f2c2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 800f2c2:	b480      	push	{r7}
 800f2c4:	b083      	sub	sp, #12
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	601a      	str	r2, [r3, #0]
}
 800f2d0:	bf00      	nop
 800f2d2:	370c      	adds	r7, #12
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr

0800f2dc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800f2e0:	2000      	movs	r0, #0
 800f2e2:	f7f6 f9fa 	bl	80056da <osMutexNew>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	4a01      	ldr	r2, [pc, #4]	; (800f2f0 <sys_init+0x14>)
 800f2ea:	6013      	str	r3, [r2, #0]
#endif
}
 800f2ec:	bf00      	nop
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	2400d72c 	.word	0x2400d72c

0800f2f4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800f2fc:	2000      	movs	r0, #0
 800f2fe:	f7f6 f9ec 	bl	80056da <osMutexNew>
 800f302:	4602      	mov	r2, r0
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d102      	bne.n	800f316 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800f310:	f04f 33ff 	mov.w	r3, #4294967295
 800f314:	e000      	b.n	800f318 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800f316:	2300      	movs	r3, #0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3708      	adds	r7, #8
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f04f 31ff 	mov.w	r1, #4294967295
 800f330:	4618      	mov	r0, r3
 800f332:	f7f6 fa58 	bl	80057e6 <osMutexAcquire>
#endif
}
 800f336:	bf00      	nop
 800f338:	3708      	adds	r7, #8
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}

0800f33e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800f33e:	b580      	push	{r7, lr}
 800f340:	b082      	sub	sp, #8
 800f342:	af00      	add	r7, sp, #0
 800f344:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7f6 fa96 	bl	800587c <osMutexRelease>
}
 800f350:	bf00      	nop
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b08e      	sub	sp, #56	; 0x38
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]
 800f364:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800f366:	f107 0314 	add.w	r3, r7, #20
 800f36a:	2224      	movs	r2, #36	; 0x24
 800f36c:	2100      	movs	r1, #0
 800f36e:	4618      	mov	r0, r3
 800f370:	f000 f9cf 	bl	800f712 <memset>
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	617b      	str	r3, [r7, #20]
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f37c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f37e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800f380:	f107 0314 	add.w	r3, r7, #20
 800f384:	461a      	mov	r2, r3
 800f386:	6879      	ldr	r1, [r7, #4]
 800f388:	68b8      	ldr	r0, [r7, #8]
 800f38a:	f7f6 f8f8 	bl	800557e <osThreadNew>
 800f38e:	4603      	mov	r3, r0
#endif
}
 800f390:	4618      	mov	r0, r3
 800f392:	3738      	adds	r7, #56	; 0x38
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800f39c:	4b04      	ldr	r3, [pc, #16]	; (800f3b0 <sys_arch_protect+0x18>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f04f 31ff 	mov.w	r1, #4294967295
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7f6 fa1e 	bl	80057e6 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 800f3aa:	2301      	movs	r3, #1
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	2400d72c 	.word	0x2400d72c

0800f3b4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800f3bc:	4b04      	ldr	r3, [pc, #16]	; (800f3d0 <sys_arch_unprotect+0x1c>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7f6 fa5b 	bl	800587c <osMutexRelease>
}
 800f3c6:	bf00      	nop
 800f3c8:	3708      	adds	r7, #8
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	2400d72c 	.word	0x2400d72c

0800f3d4 <rand>:
 800f3d4:	4b16      	ldr	r3, [pc, #88]	; (800f430 <rand+0x5c>)
 800f3d6:	b510      	push	{r4, lr}
 800f3d8:	681c      	ldr	r4, [r3, #0]
 800f3da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f3dc:	b9b3      	cbnz	r3, 800f40c <rand+0x38>
 800f3de:	2018      	movs	r0, #24
 800f3e0:	f000 fae4 	bl	800f9ac <malloc>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	6320      	str	r0, [r4, #48]	; 0x30
 800f3e8:	b920      	cbnz	r0, 800f3f4 <rand+0x20>
 800f3ea:	4b12      	ldr	r3, [pc, #72]	; (800f434 <rand+0x60>)
 800f3ec:	4812      	ldr	r0, [pc, #72]	; (800f438 <rand+0x64>)
 800f3ee:	2152      	movs	r1, #82	; 0x52
 800f3f0:	f000 fa72 	bl	800f8d8 <__assert_func>
 800f3f4:	4911      	ldr	r1, [pc, #68]	; (800f43c <rand+0x68>)
 800f3f6:	4b12      	ldr	r3, [pc, #72]	; (800f440 <rand+0x6c>)
 800f3f8:	e9c0 1300 	strd	r1, r3, [r0]
 800f3fc:	4b11      	ldr	r3, [pc, #68]	; (800f444 <rand+0x70>)
 800f3fe:	6083      	str	r3, [r0, #8]
 800f400:	230b      	movs	r3, #11
 800f402:	8183      	strh	r3, [r0, #12]
 800f404:	2100      	movs	r1, #0
 800f406:	2001      	movs	r0, #1
 800f408:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f40c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f40e:	480e      	ldr	r0, [pc, #56]	; (800f448 <rand+0x74>)
 800f410:	690b      	ldr	r3, [r1, #16]
 800f412:	694c      	ldr	r4, [r1, #20]
 800f414:	4a0d      	ldr	r2, [pc, #52]	; (800f44c <rand+0x78>)
 800f416:	4358      	muls	r0, r3
 800f418:	fb02 0004 	mla	r0, r2, r4, r0
 800f41c:	fba3 3202 	umull	r3, r2, r3, r2
 800f420:	3301      	adds	r3, #1
 800f422:	eb40 0002 	adc.w	r0, r0, r2
 800f426:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f42a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f42e:	bd10      	pop	{r4, pc}
 800f430:	24000084 	.word	0x24000084
 800f434:	080124ba 	.word	0x080124ba
 800f438:	080124d1 	.word	0x080124d1
 800f43c:	abcd330e 	.word	0xabcd330e
 800f440:	e66d1234 	.word	0xe66d1234
 800f444:	0005deec 	.word	0x0005deec
 800f448:	5851f42d 	.word	0x5851f42d
 800f44c:	4c957f2d 	.word	0x4c957f2d

0800f450 <std>:
 800f450:	2300      	movs	r3, #0
 800f452:	b510      	push	{r4, lr}
 800f454:	4604      	mov	r4, r0
 800f456:	e9c0 3300 	strd	r3, r3, [r0]
 800f45a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f45e:	6083      	str	r3, [r0, #8]
 800f460:	8181      	strh	r1, [r0, #12]
 800f462:	6643      	str	r3, [r0, #100]	; 0x64
 800f464:	81c2      	strh	r2, [r0, #14]
 800f466:	6183      	str	r3, [r0, #24]
 800f468:	4619      	mov	r1, r3
 800f46a:	2208      	movs	r2, #8
 800f46c:	305c      	adds	r0, #92	; 0x5c
 800f46e:	f000 f950 	bl	800f712 <memset>
 800f472:	4b0d      	ldr	r3, [pc, #52]	; (800f4a8 <std+0x58>)
 800f474:	6263      	str	r3, [r4, #36]	; 0x24
 800f476:	4b0d      	ldr	r3, [pc, #52]	; (800f4ac <std+0x5c>)
 800f478:	62a3      	str	r3, [r4, #40]	; 0x28
 800f47a:	4b0d      	ldr	r3, [pc, #52]	; (800f4b0 <std+0x60>)
 800f47c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f47e:	4b0d      	ldr	r3, [pc, #52]	; (800f4b4 <std+0x64>)
 800f480:	6323      	str	r3, [r4, #48]	; 0x30
 800f482:	4b0d      	ldr	r3, [pc, #52]	; (800f4b8 <std+0x68>)
 800f484:	6224      	str	r4, [r4, #32]
 800f486:	429c      	cmp	r4, r3
 800f488:	d006      	beq.n	800f498 <std+0x48>
 800f48a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f48e:	4294      	cmp	r4, r2
 800f490:	d002      	beq.n	800f498 <std+0x48>
 800f492:	33d0      	adds	r3, #208	; 0xd0
 800f494:	429c      	cmp	r4, r3
 800f496:	d105      	bne.n	800f4a4 <std+0x54>
 800f498:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4a0:	f000 ba00 	b.w	800f8a4 <__retarget_lock_init_recursive>
 800f4a4:	bd10      	pop	{r4, pc}
 800f4a6:	bf00      	nop
 800f4a8:	0800f639 	.word	0x0800f639
 800f4ac:	0800f65b 	.word	0x0800f65b
 800f4b0:	0800f693 	.word	0x0800f693
 800f4b4:	0800f6b7 	.word	0x0800f6b7
 800f4b8:	24005db4 	.word	0x24005db4

0800f4bc <stdio_exit_handler>:
 800f4bc:	4a02      	ldr	r2, [pc, #8]	; (800f4c8 <stdio_exit_handler+0xc>)
 800f4be:	4903      	ldr	r1, [pc, #12]	; (800f4cc <stdio_exit_handler+0x10>)
 800f4c0:	4803      	ldr	r0, [pc, #12]	; (800f4d0 <stdio_exit_handler+0x14>)
 800f4c2:	f000 b869 	b.w	800f598 <_fwalk_sglue>
 800f4c6:	bf00      	nop
 800f4c8:	2400002c 	.word	0x2400002c
 800f4cc:	08010479 	.word	0x08010479
 800f4d0:	24000038 	.word	0x24000038

0800f4d4 <cleanup_stdio>:
 800f4d4:	6841      	ldr	r1, [r0, #4]
 800f4d6:	4b0c      	ldr	r3, [pc, #48]	; (800f508 <cleanup_stdio+0x34>)
 800f4d8:	4299      	cmp	r1, r3
 800f4da:	b510      	push	{r4, lr}
 800f4dc:	4604      	mov	r4, r0
 800f4de:	d001      	beq.n	800f4e4 <cleanup_stdio+0x10>
 800f4e0:	f000 ffca 	bl	8010478 <_fflush_r>
 800f4e4:	68a1      	ldr	r1, [r4, #8]
 800f4e6:	4b09      	ldr	r3, [pc, #36]	; (800f50c <cleanup_stdio+0x38>)
 800f4e8:	4299      	cmp	r1, r3
 800f4ea:	d002      	beq.n	800f4f2 <cleanup_stdio+0x1e>
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	f000 ffc3 	bl	8010478 <_fflush_r>
 800f4f2:	68e1      	ldr	r1, [r4, #12]
 800f4f4:	4b06      	ldr	r3, [pc, #24]	; (800f510 <cleanup_stdio+0x3c>)
 800f4f6:	4299      	cmp	r1, r3
 800f4f8:	d004      	beq.n	800f504 <cleanup_stdio+0x30>
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f500:	f000 bfba 	b.w	8010478 <_fflush_r>
 800f504:	bd10      	pop	{r4, pc}
 800f506:	bf00      	nop
 800f508:	24005db4 	.word	0x24005db4
 800f50c:	24005e1c 	.word	0x24005e1c
 800f510:	24005e84 	.word	0x24005e84

0800f514 <global_stdio_init.part.0>:
 800f514:	b510      	push	{r4, lr}
 800f516:	4b0b      	ldr	r3, [pc, #44]	; (800f544 <global_stdio_init.part.0+0x30>)
 800f518:	4c0b      	ldr	r4, [pc, #44]	; (800f548 <global_stdio_init.part.0+0x34>)
 800f51a:	4a0c      	ldr	r2, [pc, #48]	; (800f54c <global_stdio_init.part.0+0x38>)
 800f51c:	601a      	str	r2, [r3, #0]
 800f51e:	4620      	mov	r0, r4
 800f520:	2200      	movs	r2, #0
 800f522:	2104      	movs	r1, #4
 800f524:	f7ff ff94 	bl	800f450 <std>
 800f528:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f52c:	2201      	movs	r2, #1
 800f52e:	2109      	movs	r1, #9
 800f530:	f7ff ff8e 	bl	800f450 <std>
 800f534:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f538:	2202      	movs	r2, #2
 800f53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f53e:	2112      	movs	r1, #18
 800f540:	f7ff bf86 	b.w	800f450 <std>
 800f544:	24005eec 	.word	0x24005eec
 800f548:	24005db4 	.word	0x24005db4
 800f54c:	0800f4bd 	.word	0x0800f4bd

0800f550 <__sfp_lock_acquire>:
 800f550:	4801      	ldr	r0, [pc, #4]	; (800f558 <__sfp_lock_acquire+0x8>)
 800f552:	f000 b9a8 	b.w	800f8a6 <__retarget_lock_acquire_recursive>
 800f556:	bf00      	nop
 800f558:	24005ef5 	.word	0x24005ef5

0800f55c <__sfp_lock_release>:
 800f55c:	4801      	ldr	r0, [pc, #4]	; (800f564 <__sfp_lock_release+0x8>)
 800f55e:	f000 b9a3 	b.w	800f8a8 <__retarget_lock_release_recursive>
 800f562:	bf00      	nop
 800f564:	24005ef5 	.word	0x24005ef5

0800f568 <__sinit>:
 800f568:	b510      	push	{r4, lr}
 800f56a:	4604      	mov	r4, r0
 800f56c:	f7ff fff0 	bl	800f550 <__sfp_lock_acquire>
 800f570:	6a23      	ldr	r3, [r4, #32]
 800f572:	b11b      	cbz	r3, 800f57c <__sinit+0x14>
 800f574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f578:	f7ff bff0 	b.w	800f55c <__sfp_lock_release>
 800f57c:	4b04      	ldr	r3, [pc, #16]	; (800f590 <__sinit+0x28>)
 800f57e:	6223      	str	r3, [r4, #32]
 800f580:	4b04      	ldr	r3, [pc, #16]	; (800f594 <__sinit+0x2c>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d1f5      	bne.n	800f574 <__sinit+0xc>
 800f588:	f7ff ffc4 	bl	800f514 <global_stdio_init.part.0>
 800f58c:	e7f2      	b.n	800f574 <__sinit+0xc>
 800f58e:	bf00      	nop
 800f590:	0800f4d5 	.word	0x0800f4d5
 800f594:	24005eec 	.word	0x24005eec

0800f598 <_fwalk_sglue>:
 800f598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f59c:	4607      	mov	r7, r0
 800f59e:	4688      	mov	r8, r1
 800f5a0:	4614      	mov	r4, r2
 800f5a2:	2600      	movs	r6, #0
 800f5a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5a8:	f1b9 0901 	subs.w	r9, r9, #1
 800f5ac:	d505      	bpl.n	800f5ba <_fwalk_sglue+0x22>
 800f5ae:	6824      	ldr	r4, [r4, #0]
 800f5b0:	2c00      	cmp	r4, #0
 800f5b2:	d1f7      	bne.n	800f5a4 <_fwalk_sglue+0xc>
 800f5b4:	4630      	mov	r0, r6
 800f5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ba:	89ab      	ldrh	r3, [r5, #12]
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d907      	bls.n	800f5d0 <_fwalk_sglue+0x38>
 800f5c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	d003      	beq.n	800f5d0 <_fwalk_sglue+0x38>
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	4638      	mov	r0, r7
 800f5cc:	47c0      	blx	r8
 800f5ce:	4306      	orrs	r6, r0
 800f5d0:	3568      	adds	r5, #104	; 0x68
 800f5d2:	e7e9      	b.n	800f5a8 <_fwalk_sglue+0x10>

0800f5d4 <iprintf>:
 800f5d4:	b40f      	push	{r0, r1, r2, r3}
 800f5d6:	b507      	push	{r0, r1, r2, lr}
 800f5d8:	4906      	ldr	r1, [pc, #24]	; (800f5f4 <iprintf+0x20>)
 800f5da:	ab04      	add	r3, sp, #16
 800f5dc:	6808      	ldr	r0, [r1, #0]
 800f5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5e2:	6881      	ldr	r1, [r0, #8]
 800f5e4:	9301      	str	r3, [sp, #4]
 800f5e6:	f000 fc17 	bl	800fe18 <_vfiprintf_r>
 800f5ea:	b003      	add	sp, #12
 800f5ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5f0:	b004      	add	sp, #16
 800f5f2:	4770      	bx	lr
 800f5f4:	24000084 	.word	0x24000084

0800f5f8 <siprintf>:
 800f5f8:	b40e      	push	{r1, r2, r3}
 800f5fa:	b500      	push	{lr}
 800f5fc:	b09c      	sub	sp, #112	; 0x70
 800f5fe:	ab1d      	add	r3, sp, #116	; 0x74
 800f600:	9002      	str	r0, [sp, #8]
 800f602:	9006      	str	r0, [sp, #24]
 800f604:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f608:	4809      	ldr	r0, [pc, #36]	; (800f630 <siprintf+0x38>)
 800f60a:	9107      	str	r1, [sp, #28]
 800f60c:	9104      	str	r1, [sp, #16]
 800f60e:	4909      	ldr	r1, [pc, #36]	; (800f634 <siprintf+0x3c>)
 800f610:	f853 2b04 	ldr.w	r2, [r3], #4
 800f614:	9105      	str	r1, [sp, #20]
 800f616:	6800      	ldr	r0, [r0, #0]
 800f618:	9301      	str	r3, [sp, #4]
 800f61a:	a902      	add	r1, sp, #8
 800f61c:	f000 fad4 	bl	800fbc8 <_svfiprintf_r>
 800f620:	9b02      	ldr	r3, [sp, #8]
 800f622:	2200      	movs	r2, #0
 800f624:	701a      	strb	r2, [r3, #0]
 800f626:	b01c      	add	sp, #112	; 0x70
 800f628:	f85d eb04 	ldr.w	lr, [sp], #4
 800f62c:	b003      	add	sp, #12
 800f62e:	4770      	bx	lr
 800f630:	24000084 	.word	0x24000084
 800f634:	ffff0208 	.word	0xffff0208

0800f638 <__sread>:
 800f638:	b510      	push	{r4, lr}
 800f63a:	460c      	mov	r4, r1
 800f63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f640:	f000 f8e8 	bl	800f814 <_read_r>
 800f644:	2800      	cmp	r0, #0
 800f646:	bfab      	itete	ge
 800f648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f64a:	89a3      	ldrhlt	r3, [r4, #12]
 800f64c:	181b      	addge	r3, r3, r0
 800f64e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f652:	bfac      	ite	ge
 800f654:	6563      	strge	r3, [r4, #84]	; 0x54
 800f656:	81a3      	strhlt	r3, [r4, #12]
 800f658:	bd10      	pop	{r4, pc}

0800f65a <__swrite>:
 800f65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f65e:	461f      	mov	r7, r3
 800f660:	898b      	ldrh	r3, [r1, #12]
 800f662:	05db      	lsls	r3, r3, #23
 800f664:	4605      	mov	r5, r0
 800f666:	460c      	mov	r4, r1
 800f668:	4616      	mov	r6, r2
 800f66a:	d505      	bpl.n	800f678 <__swrite+0x1e>
 800f66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f670:	2302      	movs	r3, #2
 800f672:	2200      	movs	r2, #0
 800f674:	f000 f8bc 	bl	800f7f0 <_lseek_r>
 800f678:	89a3      	ldrh	r3, [r4, #12]
 800f67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f67e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f682:	81a3      	strh	r3, [r4, #12]
 800f684:	4632      	mov	r2, r6
 800f686:	463b      	mov	r3, r7
 800f688:	4628      	mov	r0, r5
 800f68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f68e:	f000 b8d3 	b.w	800f838 <_write_r>

0800f692 <__sseek>:
 800f692:	b510      	push	{r4, lr}
 800f694:	460c      	mov	r4, r1
 800f696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f69a:	f000 f8a9 	bl	800f7f0 <_lseek_r>
 800f69e:	1c43      	adds	r3, r0, #1
 800f6a0:	89a3      	ldrh	r3, [r4, #12]
 800f6a2:	bf15      	itete	ne
 800f6a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f6ae:	81a3      	strheq	r3, [r4, #12]
 800f6b0:	bf18      	it	ne
 800f6b2:	81a3      	strhne	r3, [r4, #12]
 800f6b4:	bd10      	pop	{r4, pc}

0800f6b6 <__sclose>:
 800f6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ba:	f000 b833 	b.w	800f724 <_close_r>

0800f6be <memcmp>:
 800f6be:	b510      	push	{r4, lr}
 800f6c0:	3901      	subs	r1, #1
 800f6c2:	4402      	add	r2, r0
 800f6c4:	4290      	cmp	r0, r2
 800f6c6:	d101      	bne.n	800f6cc <memcmp+0xe>
 800f6c8:	2000      	movs	r0, #0
 800f6ca:	e005      	b.n	800f6d8 <memcmp+0x1a>
 800f6cc:	7803      	ldrb	r3, [r0, #0]
 800f6ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f6d2:	42a3      	cmp	r3, r4
 800f6d4:	d001      	beq.n	800f6da <memcmp+0x1c>
 800f6d6:	1b18      	subs	r0, r3, r4
 800f6d8:	bd10      	pop	{r4, pc}
 800f6da:	3001      	adds	r0, #1
 800f6dc:	e7f2      	b.n	800f6c4 <memcmp+0x6>

0800f6de <memmove>:
 800f6de:	4288      	cmp	r0, r1
 800f6e0:	b510      	push	{r4, lr}
 800f6e2:	eb01 0402 	add.w	r4, r1, r2
 800f6e6:	d902      	bls.n	800f6ee <memmove+0x10>
 800f6e8:	4284      	cmp	r4, r0
 800f6ea:	4623      	mov	r3, r4
 800f6ec:	d807      	bhi.n	800f6fe <memmove+0x20>
 800f6ee:	1e43      	subs	r3, r0, #1
 800f6f0:	42a1      	cmp	r1, r4
 800f6f2:	d008      	beq.n	800f706 <memmove+0x28>
 800f6f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6fc:	e7f8      	b.n	800f6f0 <memmove+0x12>
 800f6fe:	4402      	add	r2, r0
 800f700:	4601      	mov	r1, r0
 800f702:	428a      	cmp	r2, r1
 800f704:	d100      	bne.n	800f708 <memmove+0x2a>
 800f706:	bd10      	pop	{r4, pc}
 800f708:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f70c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f710:	e7f7      	b.n	800f702 <memmove+0x24>

0800f712 <memset>:
 800f712:	4402      	add	r2, r0
 800f714:	4603      	mov	r3, r0
 800f716:	4293      	cmp	r3, r2
 800f718:	d100      	bne.n	800f71c <memset+0xa>
 800f71a:	4770      	bx	lr
 800f71c:	f803 1b01 	strb.w	r1, [r3], #1
 800f720:	e7f9      	b.n	800f716 <memset+0x4>
	...

0800f724 <_close_r>:
 800f724:	b538      	push	{r3, r4, r5, lr}
 800f726:	4d06      	ldr	r5, [pc, #24]	; (800f740 <_close_r+0x1c>)
 800f728:	2300      	movs	r3, #0
 800f72a:	4604      	mov	r4, r0
 800f72c:	4608      	mov	r0, r1
 800f72e:	602b      	str	r3, [r5, #0]
 800f730:	f7f1 fbb1 	bl	8000e96 <_close>
 800f734:	1c43      	adds	r3, r0, #1
 800f736:	d102      	bne.n	800f73e <_close_r+0x1a>
 800f738:	682b      	ldr	r3, [r5, #0]
 800f73a:	b103      	cbz	r3, 800f73e <_close_r+0x1a>
 800f73c:	6023      	str	r3, [r4, #0]
 800f73e:	bd38      	pop	{r3, r4, r5, pc}
 800f740:	24005ef0 	.word	0x24005ef0

0800f744 <_reclaim_reent>:
 800f744:	4b29      	ldr	r3, [pc, #164]	; (800f7ec <_reclaim_reent+0xa8>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4283      	cmp	r3, r0
 800f74a:	b570      	push	{r4, r5, r6, lr}
 800f74c:	4604      	mov	r4, r0
 800f74e:	d04b      	beq.n	800f7e8 <_reclaim_reent+0xa4>
 800f750:	69c3      	ldr	r3, [r0, #28]
 800f752:	b143      	cbz	r3, 800f766 <_reclaim_reent+0x22>
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d144      	bne.n	800f7e4 <_reclaim_reent+0xa0>
 800f75a:	69e3      	ldr	r3, [r4, #28]
 800f75c:	6819      	ldr	r1, [r3, #0]
 800f75e:	b111      	cbz	r1, 800f766 <_reclaim_reent+0x22>
 800f760:	4620      	mov	r0, r4
 800f762:	f000 f8d7 	bl	800f914 <_free_r>
 800f766:	6961      	ldr	r1, [r4, #20]
 800f768:	b111      	cbz	r1, 800f770 <_reclaim_reent+0x2c>
 800f76a:	4620      	mov	r0, r4
 800f76c:	f000 f8d2 	bl	800f914 <_free_r>
 800f770:	69e1      	ldr	r1, [r4, #28]
 800f772:	b111      	cbz	r1, 800f77a <_reclaim_reent+0x36>
 800f774:	4620      	mov	r0, r4
 800f776:	f000 f8cd 	bl	800f914 <_free_r>
 800f77a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f77c:	b111      	cbz	r1, 800f784 <_reclaim_reent+0x40>
 800f77e:	4620      	mov	r0, r4
 800f780:	f000 f8c8 	bl	800f914 <_free_r>
 800f784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f786:	b111      	cbz	r1, 800f78e <_reclaim_reent+0x4a>
 800f788:	4620      	mov	r0, r4
 800f78a:	f000 f8c3 	bl	800f914 <_free_r>
 800f78e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f790:	b111      	cbz	r1, 800f798 <_reclaim_reent+0x54>
 800f792:	4620      	mov	r0, r4
 800f794:	f000 f8be 	bl	800f914 <_free_r>
 800f798:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f79a:	b111      	cbz	r1, 800f7a2 <_reclaim_reent+0x5e>
 800f79c:	4620      	mov	r0, r4
 800f79e:	f000 f8b9 	bl	800f914 <_free_r>
 800f7a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f7a4:	b111      	cbz	r1, 800f7ac <_reclaim_reent+0x68>
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	f000 f8b4 	bl	800f914 <_free_r>
 800f7ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f7ae:	b111      	cbz	r1, 800f7b6 <_reclaim_reent+0x72>
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f000 f8af 	bl	800f914 <_free_r>
 800f7b6:	6a23      	ldr	r3, [r4, #32]
 800f7b8:	b1b3      	cbz	r3, 800f7e8 <_reclaim_reent+0xa4>
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7c0:	4718      	bx	r3
 800f7c2:	5949      	ldr	r1, [r1, r5]
 800f7c4:	b941      	cbnz	r1, 800f7d8 <_reclaim_reent+0x94>
 800f7c6:	3504      	adds	r5, #4
 800f7c8:	69e3      	ldr	r3, [r4, #28]
 800f7ca:	2d80      	cmp	r5, #128	; 0x80
 800f7cc:	68d9      	ldr	r1, [r3, #12]
 800f7ce:	d1f8      	bne.n	800f7c2 <_reclaim_reent+0x7e>
 800f7d0:	4620      	mov	r0, r4
 800f7d2:	f000 f89f 	bl	800f914 <_free_r>
 800f7d6:	e7c0      	b.n	800f75a <_reclaim_reent+0x16>
 800f7d8:	680e      	ldr	r6, [r1, #0]
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f000 f89a 	bl	800f914 <_free_r>
 800f7e0:	4631      	mov	r1, r6
 800f7e2:	e7ef      	b.n	800f7c4 <_reclaim_reent+0x80>
 800f7e4:	2500      	movs	r5, #0
 800f7e6:	e7ef      	b.n	800f7c8 <_reclaim_reent+0x84>
 800f7e8:	bd70      	pop	{r4, r5, r6, pc}
 800f7ea:	bf00      	nop
 800f7ec:	24000084 	.word	0x24000084

0800f7f0 <_lseek_r>:
 800f7f0:	b538      	push	{r3, r4, r5, lr}
 800f7f2:	4d07      	ldr	r5, [pc, #28]	; (800f810 <_lseek_r+0x20>)
 800f7f4:	4604      	mov	r4, r0
 800f7f6:	4608      	mov	r0, r1
 800f7f8:	4611      	mov	r1, r2
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	602a      	str	r2, [r5, #0]
 800f7fe:	461a      	mov	r2, r3
 800f800:	f7f1 fb70 	bl	8000ee4 <_lseek>
 800f804:	1c43      	adds	r3, r0, #1
 800f806:	d102      	bne.n	800f80e <_lseek_r+0x1e>
 800f808:	682b      	ldr	r3, [r5, #0]
 800f80a:	b103      	cbz	r3, 800f80e <_lseek_r+0x1e>
 800f80c:	6023      	str	r3, [r4, #0]
 800f80e:	bd38      	pop	{r3, r4, r5, pc}
 800f810:	24005ef0 	.word	0x24005ef0

0800f814 <_read_r>:
 800f814:	b538      	push	{r3, r4, r5, lr}
 800f816:	4d07      	ldr	r5, [pc, #28]	; (800f834 <_read_r+0x20>)
 800f818:	4604      	mov	r4, r0
 800f81a:	4608      	mov	r0, r1
 800f81c:	4611      	mov	r1, r2
 800f81e:	2200      	movs	r2, #0
 800f820:	602a      	str	r2, [r5, #0]
 800f822:	461a      	mov	r2, r3
 800f824:	f7f1 fafe 	bl	8000e24 <_read>
 800f828:	1c43      	adds	r3, r0, #1
 800f82a:	d102      	bne.n	800f832 <_read_r+0x1e>
 800f82c:	682b      	ldr	r3, [r5, #0]
 800f82e:	b103      	cbz	r3, 800f832 <_read_r+0x1e>
 800f830:	6023      	str	r3, [r4, #0]
 800f832:	bd38      	pop	{r3, r4, r5, pc}
 800f834:	24005ef0 	.word	0x24005ef0

0800f838 <_write_r>:
 800f838:	b538      	push	{r3, r4, r5, lr}
 800f83a:	4d07      	ldr	r5, [pc, #28]	; (800f858 <_write_r+0x20>)
 800f83c:	4604      	mov	r4, r0
 800f83e:	4608      	mov	r0, r1
 800f840:	4611      	mov	r1, r2
 800f842:	2200      	movs	r2, #0
 800f844:	602a      	str	r2, [r5, #0]
 800f846:	461a      	mov	r2, r3
 800f848:	f7f1 fb09 	bl	8000e5e <_write>
 800f84c:	1c43      	adds	r3, r0, #1
 800f84e:	d102      	bne.n	800f856 <_write_r+0x1e>
 800f850:	682b      	ldr	r3, [r5, #0]
 800f852:	b103      	cbz	r3, 800f856 <_write_r+0x1e>
 800f854:	6023      	str	r3, [r4, #0]
 800f856:	bd38      	pop	{r3, r4, r5, pc}
 800f858:	24005ef0 	.word	0x24005ef0

0800f85c <__libc_init_array>:
 800f85c:	b570      	push	{r4, r5, r6, lr}
 800f85e:	4d0d      	ldr	r5, [pc, #52]	; (800f894 <__libc_init_array+0x38>)
 800f860:	4c0d      	ldr	r4, [pc, #52]	; (800f898 <__libc_init_array+0x3c>)
 800f862:	1b64      	subs	r4, r4, r5
 800f864:	10a4      	asrs	r4, r4, #2
 800f866:	2600      	movs	r6, #0
 800f868:	42a6      	cmp	r6, r4
 800f86a:	d109      	bne.n	800f880 <__libc_init_array+0x24>
 800f86c:	4d0b      	ldr	r5, [pc, #44]	; (800f89c <__libc_init_array+0x40>)
 800f86e:	4c0c      	ldr	r4, [pc, #48]	; (800f8a0 <__libc_init_array+0x44>)
 800f870:	f000 ffe8 	bl	8010844 <_init>
 800f874:	1b64      	subs	r4, r4, r5
 800f876:	10a4      	asrs	r4, r4, #2
 800f878:	2600      	movs	r6, #0
 800f87a:	42a6      	cmp	r6, r4
 800f87c:	d105      	bne.n	800f88a <__libc_init_array+0x2e>
 800f87e:	bd70      	pop	{r4, r5, r6, pc}
 800f880:	f855 3b04 	ldr.w	r3, [r5], #4
 800f884:	4798      	blx	r3
 800f886:	3601      	adds	r6, #1
 800f888:	e7ee      	b.n	800f868 <__libc_init_array+0xc>
 800f88a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f88e:	4798      	blx	r3
 800f890:	3601      	adds	r6, #1
 800f892:	e7f2      	b.n	800f87a <__libc_init_array+0x1e>
 800f894:	08012598 	.word	0x08012598
 800f898:	08012598 	.word	0x08012598
 800f89c:	08012598 	.word	0x08012598
 800f8a0:	0801259c 	.word	0x0801259c

0800f8a4 <__retarget_lock_init_recursive>:
 800f8a4:	4770      	bx	lr

0800f8a6 <__retarget_lock_acquire_recursive>:
 800f8a6:	4770      	bx	lr

0800f8a8 <__retarget_lock_release_recursive>:
 800f8a8:	4770      	bx	lr

0800f8aa <strcpy>:
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8b0:	f803 2b01 	strb.w	r2, [r3], #1
 800f8b4:	2a00      	cmp	r2, #0
 800f8b6:	d1f9      	bne.n	800f8ac <strcpy+0x2>
 800f8b8:	4770      	bx	lr

0800f8ba <memcpy>:
 800f8ba:	440a      	add	r2, r1
 800f8bc:	4291      	cmp	r1, r2
 800f8be:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8c2:	d100      	bne.n	800f8c6 <memcpy+0xc>
 800f8c4:	4770      	bx	lr
 800f8c6:	b510      	push	{r4, lr}
 800f8c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8d0:	4291      	cmp	r1, r2
 800f8d2:	d1f9      	bne.n	800f8c8 <memcpy+0xe>
 800f8d4:	bd10      	pop	{r4, pc}
	...

0800f8d8 <__assert_func>:
 800f8d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8da:	4614      	mov	r4, r2
 800f8dc:	461a      	mov	r2, r3
 800f8de:	4b09      	ldr	r3, [pc, #36]	; (800f904 <__assert_func+0x2c>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	4605      	mov	r5, r0
 800f8e4:	68d8      	ldr	r0, [r3, #12]
 800f8e6:	b14c      	cbz	r4, 800f8fc <__assert_func+0x24>
 800f8e8:	4b07      	ldr	r3, [pc, #28]	; (800f908 <__assert_func+0x30>)
 800f8ea:	9100      	str	r1, [sp, #0]
 800f8ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8f0:	4906      	ldr	r1, [pc, #24]	; (800f90c <__assert_func+0x34>)
 800f8f2:	462b      	mov	r3, r5
 800f8f4:	f000 fde8 	bl	80104c8 <fiprintf>
 800f8f8:	f000 fe9e 	bl	8010638 <abort>
 800f8fc:	4b04      	ldr	r3, [pc, #16]	; (800f910 <__assert_func+0x38>)
 800f8fe:	461c      	mov	r4, r3
 800f900:	e7f3      	b.n	800f8ea <__assert_func+0x12>
 800f902:	bf00      	nop
 800f904:	24000084 	.word	0x24000084
 800f908:	08012529 	.word	0x08012529
 800f90c:	08012536 	.word	0x08012536
 800f910:	08012564 	.word	0x08012564

0800f914 <_free_r>:
 800f914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f916:	2900      	cmp	r1, #0
 800f918:	d044      	beq.n	800f9a4 <_free_r+0x90>
 800f91a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f91e:	9001      	str	r0, [sp, #4]
 800f920:	2b00      	cmp	r3, #0
 800f922:	f1a1 0404 	sub.w	r4, r1, #4
 800f926:	bfb8      	it	lt
 800f928:	18e4      	addlt	r4, r4, r3
 800f92a:	f000 f8e7 	bl	800fafc <__malloc_lock>
 800f92e:	4a1e      	ldr	r2, [pc, #120]	; (800f9a8 <_free_r+0x94>)
 800f930:	9801      	ldr	r0, [sp, #4]
 800f932:	6813      	ldr	r3, [r2, #0]
 800f934:	b933      	cbnz	r3, 800f944 <_free_r+0x30>
 800f936:	6063      	str	r3, [r4, #4]
 800f938:	6014      	str	r4, [r2, #0]
 800f93a:	b003      	add	sp, #12
 800f93c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f940:	f000 b8e2 	b.w	800fb08 <__malloc_unlock>
 800f944:	42a3      	cmp	r3, r4
 800f946:	d908      	bls.n	800f95a <_free_r+0x46>
 800f948:	6825      	ldr	r5, [r4, #0]
 800f94a:	1961      	adds	r1, r4, r5
 800f94c:	428b      	cmp	r3, r1
 800f94e:	bf01      	itttt	eq
 800f950:	6819      	ldreq	r1, [r3, #0]
 800f952:	685b      	ldreq	r3, [r3, #4]
 800f954:	1949      	addeq	r1, r1, r5
 800f956:	6021      	streq	r1, [r4, #0]
 800f958:	e7ed      	b.n	800f936 <_free_r+0x22>
 800f95a:	461a      	mov	r2, r3
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	b10b      	cbz	r3, 800f964 <_free_r+0x50>
 800f960:	42a3      	cmp	r3, r4
 800f962:	d9fa      	bls.n	800f95a <_free_r+0x46>
 800f964:	6811      	ldr	r1, [r2, #0]
 800f966:	1855      	adds	r5, r2, r1
 800f968:	42a5      	cmp	r5, r4
 800f96a:	d10b      	bne.n	800f984 <_free_r+0x70>
 800f96c:	6824      	ldr	r4, [r4, #0]
 800f96e:	4421      	add	r1, r4
 800f970:	1854      	adds	r4, r2, r1
 800f972:	42a3      	cmp	r3, r4
 800f974:	6011      	str	r1, [r2, #0]
 800f976:	d1e0      	bne.n	800f93a <_free_r+0x26>
 800f978:	681c      	ldr	r4, [r3, #0]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	6053      	str	r3, [r2, #4]
 800f97e:	440c      	add	r4, r1
 800f980:	6014      	str	r4, [r2, #0]
 800f982:	e7da      	b.n	800f93a <_free_r+0x26>
 800f984:	d902      	bls.n	800f98c <_free_r+0x78>
 800f986:	230c      	movs	r3, #12
 800f988:	6003      	str	r3, [r0, #0]
 800f98a:	e7d6      	b.n	800f93a <_free_r+0x26>
 800f98c:	6825      	ldr	r5, [r4, #0]
 800f98e:	1961      	adds	r1, r4, r5
 800f990:	428b      	cmp	r3, r1
 800f992:	bf04      	itt	eq
 800f994:	6819      	ldreq	r1, [r3, #0]
 800f996:	685b      	ldreq	r3, [r3, #4]
 800f998:	6063      	str	r3, [r4, #4]
 800f99a:	bf04      	itt	eq
 800f99c:	1949      	addeq	r1, r1, r5
 800f99e:	6021      	streq	r1, [r4, #0]
 800f9a0:	6054      	str	r4, [r2, #4]
 800f9a2:	e7ca      	b.n	800f93a <_free_r+0x26>
 800f9a4:	b003      	add	sp, #12
 800f9a6:	bd30      	pop	{r4, r5, pc}
 800f9a8:	24005ef8 	.word	0x24005ef8

0800f9ac <malloc>:
 800f9ac:	4b02      	ldr	r3, [pc, #8]	; (800f9b8 <malloc+0xc>)
 800f9ae:	4601      	mov	r1, r0
 800f9b0:	6818      	ldr	r0, [r3, #0]
 800f9b2:	f000 b823 	b.w	800f9fc <_malloc_r>
 800f9b6:	bf00      	nop
 800f9b8:	24000084 	.word	0x24000084

0800f9bc <sbrk_aligned>:
 800f9bc:	b570      	push	{r4, r5, r6, lr}
 800f9be:	4e0e      	ldr	r6, [pc, #56]	; (800f9f8 <sbrk_aligned+0x3c>)
 800f9c0:	460c      	mov	r4, r1
 800f9c2:	6831      	ldr	r1, [r6, #0]
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	b911      	cbnz	r1, 800f9ce <sbrk_aligned+0x12>
 800f9c8:	f000 fe26 	bl	8010618 <_sbrk_r>
 800f9cc:	6030      	str	r0, [r6, #0]
 800f9ce:	4621      	mov	r1, r4
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	f000 fe21 	bl	8010618 <_sbrk_r>
 800f9d6:	1c43      	adds	r3, r0, #1
 800f9d8:	d00a      	beq.n	800f9f0 <sbrk_aligned+0x34>
 800f9da:	1cc4      	adds	r4, r0, #3
 800f9dc:	f024 0403 	bic.w	r4, r4, #3
 800f9e0:	42a0      	cmp	r0, r4
 800f9e2:	d007      	beq.n	800f9f4 <sbrk_aligned+0x38>
 800f9e4:	1a21      	subs	r1, r4, r0
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	f000 fe16 	bl	8010618 <_sbrk_r>
 800f9ec:	3001      	adds	r0, #1
 800f9ee:	d101      	bne.n	800f9f4 <sbrk_aligned+0x38>
 800f9f0:	f04f 34ff 	mov.w	r4, #4294967295
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	bd70      	pop	{r4, r5, r6, pc}
 800f9f8:	24005efc 	.word	0x24005efc

0800f9fc <_malloc_r>:
 800f9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa00:	1ccd      	adds	r5, r1, #3
 800fa02:	f025 0503 	bic.w	r5, r5, #3
 800fa06:	3508      	adds	r5, #8
 800fa08:	2d0c      	cmp	r5, #12
 800fa0a:	bf38      	it	cc
 800fa0c:	250c      	movcc	r5, #12
 800fa0e:	2d00      	cmp	r5, #0
 800fa10:	4607      	mov	r7, r0
 800fa12:	db01      	blt.n	800fa18 <_malloc_r+0x1c>
 800fa14:	42a9      	cmp	r1, r5
 800fa16:	d905      	bls.n	800fa24 <_malloc_r+0x28>
 800fa18:	230c      	movs	r3, #12
 800fa1a:	603b      	str	r3, [r7, #0]
 800fa1c:	2600      	movs	r6, #0
 800fa1e:	4630      	mov	r0, r6
 800fa20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800faf8 <_malloc_r+0xfc>
 800fa28:	f000 f868 	bl	800fafc <__malloc_lock>
 800fa2c:	f8d8 3000 	ldr.w	r3, [r8]
 800fa30:	461c      	mov	r4, r3
 800fa32:	bb5c      	cbnz	r4, 800fa8c <_malloc_r+0x90>
 800fa34:	4629      	mov	r1, r5
 800fa36:	4638      	mov	r0, r7
 800fa38:	f7ff ffc0 	bl	800f9bc <sbrk_aligned>
 800fa3c:	1c43      	adds	r3, r0, #1
 800fa3e:	4604      	mov	r4, r0
 800fa40:	d155      	bne.n	800faee <_malloc_r+0xf2>
 800fa42:	f8d8 4000 	ldr.w	r4, [r8]
 800fa46:	4626      	mov	r6, r4
 800fa48:	2e00      	cmp	r6, #0
 800fa4a:	d145      	bne.n	800fad8 <_malloc_r+0xdc>
 800fa4c:	2c00      	cmp	r4, #0
 800fa4e:	d048      	beq.n	800fae2 <_malloc_r+0xe6>
 800fa50:	6823      	ldr	r3, [r4, #0]
 800fa52:	4631      	mov	r1, r6
 800fa54:	4638      	mov	r0, r7
 800fa56:	eb04 0903 	add.w	r9, r4, r3
 800fa5a:	f000 fddd 	bl	8010618 <_sbrk_r>
 800fa5e:	4581      	cmp	r9, r0
 800fa60:	d13f      	bne.n	800fae2 <_malloc_r+0xe6>
 800fa62:	6821      	ldr	r1, [r4, #0]
 800fa64:	1a6d      	subs	r5, r5, r1
 800fa66:	4629      	mov	r1, r5
 800fa68:	4638      	mov	r0, r7
 800fa6a:	f7ff ffa7 	bl	800f9bc <sbrk_aligned>
 800fa6e:	3001      	adds	r0, #1
 800fa70:	d037      	beq.n	800fae2 <_malloc_r+0xe6>
 800fa72:	6823      	ldr	r3, [r4, #0]
 800fa74:	442b      	add	r3, r5
 800fa76:	6023      	str	r3, [r4, #0]
 800fa78:	f8d8 3000 	ldr.w	r3, [r8]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d038      	beq.n	800faf2 <_malloc_r+0xf6>
 800fa80:	685a      	ldr	r2, [r3, #4]
 800fa82:	42a2      	cmp	r2, r4
 800fa84:	d12b      	bne.n	800fade <_malloc_r+0xe2>
 800fa86:	2200      	movs	r2, #0
 800fa88:	605a      	str	r2, [r3, #4]
 800fa8a:	e00f      	b.n	800faac <_malloc_r+0xb0>
 800fa8c:	6822      	ldr	r2, [r4, #0]
 800fa8e:	1b52      	subs	r2, r2, r5
 800fa90:	d41f      	bmi.n	800fad2 <_malloc_r+0xd6>
 800fa92:	2a0b      	cmp	r2, #11
 800fa94:	d917      	bls.n	800fac6 <_malloc_r+0xca>
 800fa96:	1961      	adds	r1, r4, r5
 800fa98:	42a3      	cmp	r3, r4
 800fa9a:	6025      	str	r5, [r4, #0]
 800fa9c:	bf18      	it	ne
 800fa9e:	6059      	strne	r1, [r3, #4]
 800faa0:	6863      	ldr	r3, [r4, #4]
 800faa2:	bf08      	it	eq
 800faa4:	f8c8 1000 	streq.w	r1, [r8]
 800faa8:	5162      	str	r2, [r4, r5]
 800faaa:	604b      	str	r3, [r1, #4]
 800faac:	4638      	mov	r0, r7
 800faae:	f104 060b 	add.w	r6, r4, #11
 800fab2:	f000 f829 	bl	800fb08 <__malloc_unlock>
 800fab6:	f026 0607 	bic.w	r6, r6, #7
 800faba:	1d23      	adds	r3, r4, #4
 800fabc:	1af2      	subs	r2, r6, r3
 800fabe:	d0ae      	beq.n	800fa1e <_malloc_r+0x22>
 800fac0:	1b9b      	subs	r3, r3, r6
 800fac2:	50a3      	str	r3, [r4, r2]
 800fac4:	e7ab      	b.n	800fa1e <_malloc_r+0x22>
 800fac6:	42a3      	cmp	r3, r4
 800fac8:	6862      	ldr	r2, [r4, #4]
 800faca:	d1dd      	bne.n	800fa88 <_malloc_r+0x8c>
 800facc:	f8c8 2000 	str.w	r2, [r8]
 800fad0:	e7ec      	b.n	800faac <_malloc_r+0xb0>
 800fad2:	4623      	mov	r3, r4
 800fad4:	6864      	ldr	r4, [r4, #4]
 800fad6:	e7ac      	b.n	800fa32 <_malloc_r+0x36>
 800fad8:	4634      	mov	r4, r6
 800fada:	6876      	ldr	r6, [r6, #4]
 800fadc:	e7b4      	b.n	800fa48 <_malloc_r+0x4c>
 800fade:	4613      	mov	r3, r2
 800fae0:	e7cc      	b.n	800fa7c <_malloc_r+0x80>
 800fae2:	230c      	movs	r3, #12
 800fae4:	603b      	str	r3, [r7, #0]
 800fae6:	4638      	mov	r0, r7
 800fae8:	f000 f80e 	bl	800fb08 <__malloc_unlock>
 800faec:	e797      	b.n	800fa1e <_malloc_r+0x22>
 800faee:	6025      	str	r5, [r4, #0]
 800faf0:	e7dc      	b.n	800faac <_malloc_r+0xb0>
 800faf2:	605b      	str	r3, [r3, #4]
 800faf4:	deff      	udf	#255	; 0xff
 800faf6:	bf00      	nop
 800faf8:	24005ef8 	.word	0x24005ef8

0800fafc <__malloc_lock>:
 800fafc:	4801      	ldr	r0, [pc, #4]	; (800fb04 <__malloc_lock+0x8>)
 800fafe:	f7ff bed2 	b.w	800f8a6 <__retarget_lock_acquire_recursive>
 800fb02:	bf00      	nop
 800fb04:	24005ef4 	.word	0x24005ef4

0800fb08 <__malloc_unlock>:
 800fb08:	4801      	ldr	r0, [pc, #4]	; (800fb10 <__malloc_unlock+0x8>)
 800fb0a:	f7ff becd 	b.w	800f8a8 <__retarget_lock_release_recursive>
 800fb0e:	bf00      	nop
 800fb10:	24005ef4 	.word	0x24005ef4

0800fb14 <__ssputs_r>:
 800fb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb18:	688e      	ldr	r6, [r1, #8]
 800fb1a:	461f      	mov	r7, r3
 800fb1c:	42be      	cmp	r6, r7
 800fb1e:	680b      	ldr	r3, [r1, #0]
 800fb20:	4682      	mov	sl, r0
 800fb22:	460c      	mov	r4, r1
 800fb24:	4690      	mov	r8, r2
 800fb26:	d82c      	bhi.n	800fb82 <__ssputs_r+0x6e>
 800fb28:	898a      	ldrh	r2, [r1, #12]
 800fb2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fb2e:	d026      	beq.n	800fb7e <__ssputs_r+0x6a>
 800fb30:	6965      	ldr	r5, [r4, #20]
 800fb32:	6909      	ldr	r1, [r1, #16]
 800fb34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fb38:	eba3 0901 	sub.w	r9, r3, r1
 800fb3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fb40:	1c7b      	adds	r3, r7, #1
 800fb42:	444b      	add	r3, r9
 800fb44:	106d      	asrs	r5, r5, #1
 800fb46:	429d      	cmp	r5, r3
 800fb48:	bf38      	it	cc
 800fb4a:	461d      	movcc	r5, r3
 800fb4c:	0553      	lsls	r3, r2, #21
 800fb4e:	d527      	bpl.n	800fba0 <__ssputs_r+0x8c>
 800fb50:	4629      	mov	r1, r5
 800fb52:	f7ff ff53 	bl	800f9fc <_malloc_r>
 800fb56:	4606      	mov	r6, r0
 800fb58:	b360      	cbz	r0, 800fbb4 <__ssputs_r+0xa0>
 800fb5a:	6921      	ldr	r1, [r4, #16]
 800fb5c:	464a      	mov	r2, r9
 800fb5e:	f7ff feac 	bl	800f8ba <memcpy>
 800fb62:	89a3      	ldrh	r3, [r4, #12]
 800fb64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fb68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb6c:	81a3      	strh	r3, [r4, #12]
 800fb6e:	6126      	str	r6, [r4, #16]
 800fb70:	6165      	str	r5, [r4, #20]
 800fb72:	444e      	add	r6, r9
 800fb74:	eba5 0509 	sub.w	r5, r5, r9
 800fb78:	6026      	str	r6, [r4, #0]
 800fb7a:	60a5      	str	r5, [r4, #8]
 800fb7c:	463e      	mov	r6, r7
 800fb7e:	42be      	cmp	r6, r7
 800fb80:	d900      	bls.n	800fb84 <__ssputs_r+0x70>
 800fb82:	463e      	mov	r6, r7
 800fb84:	6820      	ldr	r0, [r4, #0]
 800fb86:	4632      	mov	r2, r6
 800fb88:	4641      	mov	r1, r8
 800fb8a:	f7ff fda8 	bl	800f6de <memmove>
 800fb8e:	68a3      	ldr	r3, [r4, #8]
 800fb90:	1b9b      	subs	r3, r3, r6
 800fb92:	60a3      	str	r3, [r4, #8]
 800fb94:	6823      	ldr	r3, [r4, #0]
 800fb96:	4433      	add	r3, r6
 800fb98:	6023      	str	r3, [r4, #0]
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fba0:	462a      	mov	r2, r5
 800fba2:	f000 fd50 	bl	8010646 <_realloc_r>
 800fba6:	4606      	mov	r6, r0
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	d1e0      	bne.n	800fb6e <__ssputs_r+0x5a>
 800fbac:	6921      	ldr	r1, [r4, #16]
 800fbae:	4650      	mov	r0, sl
 800fbb0:	f7ff feb0 	bl	800f914 <_free_r>
 800fbb4:	230c      	movs	r3, #12
 800fbb6:	f8ca 3000 	str.w	r3, [sl]
 800fbba:	89a3      	ldrh	r3, [r4, #12]
 800fbbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbc0:	81a3      	strh	r3, [r4, #12]
 800fbc2:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc6:	e7e9      	b.n	800fb9c <__ssputs_r+0x88>

0800fbc8 <_svfiprintf_r>:
 800fbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbcc:	4698      	mov	r8, r3
 800fbce:	898b      	ldrh	r3, [r1, #12]
 800fbd0:	061b      	lsls	r3, r3, #24
 800fbd2:	b09d      	sub	sp, #116	; 0x74
 800fbd4:	4607      	mov	r7, r0
 800fbd6:	460d      	mov	r5, r1
 800fbd8:	4614      	mov	r4, r2
 800fbda:	d50e      	bpl.n	800fbfa <_svfiprintf_r+0x32>
 800fbdc:	690b      	ldr	r3, [r1, #16]
 800fbde:	b963      	cbnz	r3, 800fbfa <_svfiprintf_r+0x32>
 800fbe0:	2140      	movs	r1, #64	; 0x40
 800fbe2:	f7ff ff0b 	bl	800f9fc <_malloc_r>
 800fbe6:	6028      	str	r0, [r5, #0]
 800fbe8:	6128      	str	r0, [r5, #16]
 800fbea:	b920      	cbnz	r0, 800fbf6 <_svfiprintf_r+0x2e>
 800fbec:	230c      	movs	r3, #12
 800fbee:	603b      	str	r3, [r7, #0]
 800fbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbf4:	e0d0      	b.n	800fd98 <_svfiprintf_r+0x1d0>
 800fbf6:	2340      	movs	r3, #64	; 0x40
 800fbf8:	616b      	str	r3, [r5, #20]
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	9309      	str	r3, [sp, #36]	; 0x24
 800fbfe:	2320      	movs	r3, #32
 800fc00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc04:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc08:	2330      	movs	r3, #48	; 0x30
 800fc0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fdb0 <_svfiprintf_r+0x1e8>
 800fc0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc12:	f04f 0901 	mov.w	r9, #1
 800fc16:	4623      	mov	r3, r4
 800fc18:	469a      	mov	sl, r3
 800fc1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc1e:	b10a      	cbz	r2, 800fc24 <_svfiprintf_r+0x5c>
 800fc20:	2a25      	cmp	r2, #37	; 0x25
 800fc22:	d1f9      	bne.n	800fc18 <_svfiprintf_r+0x50>
 800fc24:	ebba 0b04 	subs.w	fp, sl, r4
 800fc28:	d00b      	beq.n	800fc42 <_svfiprintf_r+0x7a>
 800fc2a:	465b      	mov	r3, fp
 800fc2c:	4622      	mov	r2, r4
 800fc2e:	4629      	mov	r1, r5
 800fc30:	4638      	mov	r0, r7
 800fc32:	f7ff ff6f 	bl	800fb14 <__ssputs_r>
 800fc36:	3001      	adds	r0, #1
 800fc38:	f000 80a9 	beq.w	800fd8e <_svfiprintf_r+0x1c6>
 800fc3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc3e:	445a      	add	r2, fp
 800fc40:	9209      	str	r2, [sp, #36]	; 0x24
 800fc42:	f89a 3000 	ldrb.w	r3, [sl]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	f000 80a1 	beq.w	800fd8e <_svfiprintf_r+0x1c6>
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc56:	f10a 0a01 	add.w	sl, sl, #1
 800fc5a:	9304      	str	r3, [sp, #16]
 800fc5c:	9307      	str	r3, [sp, #28]
 800fc5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc62:	931a      	str	r3, [sp, #104]	; 0x68
 800fc64:	4654      	mov	r4, sl
 800fc66:	2205      	movs	r2, #5
 800fc68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc6c:	4850      	ldr	r0, [pc, #320]	; (800fdb0 <_svfiprintf_r+0x1e8>)
 800fc6e:	f7f0 fb4f 	bl	8000310 <memchr>
 800fc72:	9a04      	ldr	r2, [sp, #16]
 800fc74:	b9d8      	cbnz	r0, 800fcae <_svfiprintf_r+0xe6>
 800fc76:	06d0      	lsls	r0, r2, #27
 800fc78:	bf44      	itt	mi
 800fc7a:	2320      	movmi	r3, #32
 800fc7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc80:	0711      	lsls	r1, r2, #28
 800fc82:	bf44      	itt	mi
 800fc84:	232b      	movmi	r3, #43	; 0x2b
 800fc86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc8a:	f89a 3000 	ldrb.w	r3, [sl]
 800fc8e:	2b2a      	cmp	r3, #42	; 0x2a
 800fc90:	d015      	beq.n	800fcbe <_svfiprintf_r+0xf6>
 800fc92:	9a07      	ldr	r2, [sp, #28]
 800fc94:	4654      	mov	r4, sl
 800fc96:	2000      	movs	r0, #0
 800fc98:	f04f 0c0a 	mov.w	ip, #10
 800fc9c:	4621      	mov	r1, r4
 800fc9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fca2:	3b30      	subs	r3, #48	; 0x30
 800fca4:	2b09      	cmp	r3, #9
 800fca6:	d94d      	bls.n	800fd44 <_svfiprintf_r+0x17c>
 800fca8:	b1b0      	cbz	r0, 800fcd8 <_svfiprintf_r+0x110>
 800fcaa:	9207      	str	r2, [sp, #28]
 800fcac:	e014      	b.n	800fcd8 <_svfiprintf_r+0x110>
 800fcae:	eba0 0308 	sub.w	r3, r0, r8
 800fcb2:	fa09 f303 	lsl.w	r3, r9, r3
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	9304      	str	r3, [sp, #16]
 800fcba:	46a2      	mov	sl, r4
 800fcbc:	e7d2      	b.n	800fc64 <_svfiprintf_r+0x9c>
 800fcbe:	9b03      	ldr	r3, [sp, #12]
 800fcc0:	1d19      	adds	r1, r3, #4
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	9103      	str	r1, [sp, #12]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	bfbb      	ittet	lt
 800fcca:	425b      	neglt	r3, r3
 800fccc:	f042 0202 	orrlt.w	r2, r2, #2
 800fcd0:	9307      	strge	r3, [sp, #28]
 800fcd2:	9307      	strlt	r3, [sp, #28]
 800fcd4:	bfb8      	it	lt
 800fcd6:	9204      	strlt	r2, [sp, #16]
 800fcd8:	7823      	ldrb	r3, [r4, #0]
 800fcda:	2b2e      	cmp	r3, #46	; 0x2e
 800fcdc:	d10c      	bne.n	800fcf8 <_svfiprintf_r+0x130>
 800fcde:	7863      	ldrb	r3, [r4, #1]
 800fce0:	2b2a      	cmp	r3, #42	; 0x2a
 800fce2:	d134      	bne.n	800fd4e <_svfiprintf_r+0x186>
 800fce4:	9b03      	ldr	r3, [sp, #12]
 800fce6:	1d1a      	adds	r2, r3, #4
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	9203      	str	r2, [sp, #12]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	bfb8      	it	lt
 800fcf0:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcf4:	3402      	adds	r4, #2
 800fcf6:	9305      	str	r3, [sp, #20]
 800fcf8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fdc0 <_svfiprintf_r+0x1f8>
 800fcfc:	7821      	ldrb	r1, [r4, #0]
 800fcfe:	2203      	movs	r2, #3
 800fd00:	4650      	mov	r0, sl
 800fd02:	f7f0 fb05 	bl	8000310 <memchr>
 800fd06:	b138      	cbz	r0, 800fd18 <_svfiprintf_r+0x150>
 800fd08:	9b04      	ldr	r3, [sp, #16]
 800fd0a:	eba0 000a 	sub.w	r0, r0, sl
 800fd0e:	2240      	movs	r2, #64	; 0x40
 800fd10:	4082      	lsls	r2, r0
 800fd12:	4313      	orrs	r3, r2
 800fd14:	3401      	adds	r4, #1
 800fd16:	9304      	str	r3, [sp, #16]
 800fd18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd1c:	4825      	ldr	r0, [pc, #148]	; (800fdb4 <_svfiprintf_r+0x1ec>)
 800fd1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd22:	2206      	movs	r2, #6
 800fd24:	f7f0 faf4 	bl	8000310 <memchr>
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	d038      	beq.n	800fd9e <_svfiprintf_r+0x1d6>
 800fd2c:	4b22      	ldr	r3, [pc, #136]	; (800fdb8 <_svfiprintf_r+0x1f0>)
 800fd2e:	bb1b      	cbnz	r3, 800fd78 <_svfiprintf_r+0x1b0>
 800fd30:	9b03      	ldr	r3, [sp, #12]
 800fd32:	3307      	adds	r3, #7
 800fd34:	f023 0307 	bic.w	r3, r3, #7
 800fd38:	3308      	adds	r3, #8
 800fd3a:	9303      	str	r3, [sp, #12]
 800fd3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd3e:	4433      	add	r3, r6
 800fd40:	9309      	str	r3, [sp, #36]	; 0x24
 800fd42:	e768      	b.n	800fc16 <_svfiprintf_r+0x4e>
 800fd44:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd48:	460c      	mov	r4, r1
 800fd4a:	2001      	movs	r0, #1
 800fd4c:	e7a6      	b.n	800fc9c <_svfiprintf_r+0xd4>
 800fd4e:	2300      	movs	r3, #0
 800fd50:	3401      	adds	r4, #1
 800fd52:	9305      	str	r3, [sp, #20]
 800fd54:	4619      	mov	r1, r3
 800fd56:	f04f 0c0a 	mov.w	ip, #10
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd60:	3a30      	subs	r2, #48	; 0x30
 800fd62:	2a09      	cmp	r2, #9
 800fd64:	d903      	bls.n	800fd6e <_svfiprintf_r+0x1a6>
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d0c6      	beq.n	800fcf8 <_svfiprintf_r+0x130>
 800fd6a:	9105      	str	r1, [sp, #20]
 800fd6c:	e7c4      	b.n	800fcf8 <_svfiprintf_r+0x130>
 800fd6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd72:	4604      	mov	r4, r0
 800fd74:	2301      	movs	r3, #1
 800fd76:	e7f0      	b.n	800fd5a <_svfiprintf_r+0x192>
 800fd78:	ab03      	add	r3, sp, #12
 800fd7a:	9300      	str	r3, [sp, #0]
 800fd7c:	462a      	mov	r2, r5
 800fd7e:	4b0f      	ldr	r3, [pc, #60]	; (800fdbc <_svfiprintf_r+0x1f4>)
 800fd80:	a904      	add	r1, sp, #16
 800fd82:	4638      	mov	r0, r7
 800fd84:	f3af 8000 	nop.w
 800fd88:	1c42      	adds	r2, r0, #1
 800fd8a:	4606      	mov	r6, r0
 800fd8c:	d1d6      	bne.n	800fd3c <_svfiprintf_r+0x174>
 800fd8e:	89ab      	ldrh	r3, [r5, #12]
 800fd90:	065b      	lsls	r3, r3, #25
 800fd92:	f53f af2d 	bmi.w	800fbf0 <_svfiprintf_r+0x28>
 800fd96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd98:	b01d      	add	sp, #116	; 0x74
 800fd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9e:	ab03      	add	r3, sp, #12
 800fda0:	9300      	str	r3, [sp, #0]
 800fda2:	462a      	mov	r2, r5
 800fda4:	4b05      	ldr	r3, [pc, #20]	; (800fdbc <_svfiprintf_r+0x1f4>)
 800fda6:	a904      	add	r1, sp, #16
 800fda8:	4638      	mov	r0, r7
 800fdaa:	f000 f9bd 	bl	8010128 <_printf_i>
 800fdae:	e7eb      	b.n	800fd88 <_svfiprintf_r+0x1c0>
 800fdb0:	08012565 	.word	0x08012565
 800fdb4:	0801256f 	.word	0x0801256f
 800fdb8:	00000000 	.word	0x00000000
 800fdbc:	0800fb15 	.word	0x0800fb15
 800fdc0:	0801256b 	.word	0x0801256b

0800fdc4 <__sfputc_r>:
 800fdc4:	6893      	ldr	r3, [r2, #8]
 800fdc6:	3b01      	subs	r3, #1
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	b410      	push	{r4}
 800fdcc:	6093      	str	r3, [r2, #8]
 800fdce:	da08      	bge.n	800fde2 <__sfputc_r+0x1e>
 800fdd0:	6994      	ldr	r4, [r2, #24]
 800fdd2:	42a3      	cmp	r3, r4
 800fdd4:	db01      	blt.n	800fdda <__sfputc_r+0x16>
 800fdd6:	290a      	cmp	r1, #10
 800fdd8:	d103      	bne.n	800fde2 <__sfputc_r+0x1e>
 800fdda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdde:	f000 bb85 	b.w	80104ec <__swbuf_r>
 800fde2:	6813      	ldr	r3, [r2, #0]
 800fde4:	1c58      	adds	r0, r3, #1
 800fde6:	6010      	str	r0, [r2, #0]
 800fde8:	7019      	strb	r1, [r3, #0]
 800fdea:	4608      	mov	r0, r1
 800fdec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdf0:	4770      	bx	lr

0800fdf2 <__sfputs_r>:
 800fdf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdf4:	4606      	mov	r6, r0
 800fdf6:	460f      	mov	r7, r1
 800fdf8:	4614      	mov	r4, r2
 800fdfa:	18d5      	adds	r5, r2, r3
 800fdfc:	42ac      	cmp	r4, r5
 800fdfe:	d101      	bne.n	800fe04 <__sfputs_r+0x12>
 800fe00:	2000      	movs	r0, #0
 800fe02:	e007      	b.n	800fe14 <__sfputs_r+0x22>
 800fe04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe08:	463a      	mov	r2, r7
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	f7ff ffda 	bl	800fdc4 <__sfputc_r>
 800fe10:	1c43      	adds	r3, r0, #1
 800fe12:	d1f3      	bne.n	800fdfc <__sfputs_r+0xa>
 800fe14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe18 <_vfiprintf_r>:
 800fe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe1c:	460d      	mov	r5, r1
 800fe1e:	b09d      	sub	sp, #116	; 0x74
 800fe20:	4614      	mov	r4, r2
 800fe22:	4698      	mov	r8, r3
 800fe24:	4606      	mov	r6, r0
 800fe26:	b118      	cbz	r0, 800fe30 <_vfiprintf_r+0x18>
 800fe28:	6a03      	ldr	r3, [r0, #32]
 800fe2a:	b90b      	cbnz	r3, 800fe30 <_vfiprintf_r+0x18>
 800fe2c:	f7ff fb9c 	bl	800f568 <__sinit>
 800fe30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe32:	07d9      	lsls	r1, r3, #31
 800fe34:	d405      	bmi.n	800fe42 <_vfiprintf_r+0x2a>
 800fe36:	89ab      	ldrh	r3, [r5, #12]
 800fe38:	059a      	lsls	r2, r3, #22
 800fe3a:	d402      	bmi.n	800fe42 <_vfiprintf_r+0x2a>
 800fe3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe3e:	f7ff fd32 	bl	800f8a6 <__retarget_lock_acquire_recursive>
 800fe42:	89ab      	ldrh	r3, [r5, #12]
 800fe44:	071b      	lsls	r3, r3, #28
 800fe46:	d501      	bpl.n	800fe4c <_vfiprintf_r+0x34>
 800fe48:	692b      	ldr	r3, [r5, #16]
 800fe4a:	b99b      	cbnz	r3, 800fe74 <_vfiprintf_r+0x5c>
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	4630      	mov	r0, r6
 800fe50:	f000 fb8a 	bl	8010568 <__swsetup_r>
 800fe54:	b170      	cbz	r0, 800fe74 <_vfiprintf_r+0x5c>
 800fe56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe58:	07dc      	lsls	r4, r3, #31
 800fe5a:	d504      	bpl.n	800fe66 <_vfiprintf_r+0x4e>
 800fe5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe60:	b01d      	add	sp, #116	; 0x74
 800fe62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe66:	89ab      	ldrh	r3, [r5, #12]
 800fe68:	0598      	lsls	r0, r3, #22
 800fe6a:	d4f7      	bmi.n	800fe5c <_vfiprintf_r+0x44>
 800fe6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe6e:	f7ff fd1b 	bl	800f8a8 <__retarget_lock_release_recursive>
 800fe72:	e7f3      	b.n	800fe5c <_vfiprintf_r+0x44>
 800fe74:	2300      	movs	r3, #0
 800fe76:	9309      	str	r3, [sp, #36]	; 0x24
 800fe78:	2320      	movs	r3, #32
 800fe7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe82:	2330      	movs	r3, #48	; 0x30
 800fe84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010038 <_vfiprintf_r+0x220>
 800fe88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe8c:	f04f 0901 	mov.w	r9, #1
 800fe90:	4623      	mov	r3, r4
 800fe92:	469a      	mov	sl, r3
 800fe94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe98:	b10a      	cbz	r2, 800fe9e <_vfiprintf_r+0x86>
 800fe9a:	2a25      	cmp	r2, #37	; 0x25
 800fe9c:	d1f9      	bne.n	800fe92 <_vfiprintf_r+0x7a>
 800fe9e:	ebba 0b04 	subs.w	fp, sl, r4
 800fea2:	d00b      	beq.n	800febc <_vfiprintf_r+0xa4>
 800fea4:	465b      	mov	r3, fp
 800fea6:	4622      	mov	r2, r4
 800fea8:	4629      	mov	r1, r5
 800feaa:	4630      	mov	r0, r6
 800feac:	f7ff ffa1 	bl	800fdf2 <__sfputs_r>
 800feb0:	3001      	adds	r0, #1
 800feb2:	f000 80a9 	beq.w	8010008 <_vfiprintf_r+0x1f0>
 800feb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800feb8:	445a      	add	r2, fp
 800feba:	9209      	str	r2, [sp, #36]	; 0x24
 800febc:	f89a 3000 	ldrb.w	r3, [sl]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	f000 80a1 	beq.w	8010008 <_vfiprintf_r+0x1f0>
 800fec6:	2300      	movs	r3, #0
 800fec8:	f04f 32ff 	mov.w	r2, #4294967295
 800fecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fed0:	f10a 0a01 	add.w	sl, sl, #1
 800fed4:	9304      	str	r3, [sp, #16]
 800fed6:	9307      	str	r3, [sp, #28]
 800fed8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fedc:	931a      	str	r3, [sp, #104]	; 0x68
 800fede:	4654      	mov	r4, sl
 800fee0:	2205      	movs	r2, #5
 800fee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fee6:	4854      	ldr	r0, [pc, #336]	; (8010038 <_vfiprintf_r+0x220>)
 800fee8:	f7f0 fa12 	bl	8000310 <memchr>
 800feec:	9a04      	ldr	r2, [sp, #16]
 800feee:	b9d8      	cbnz	r0, 800ff28 <_vfiprintf_r+0x110>
 800fef0:	06d1      	lsls	r1, r2, #27
 800fef2:	bf44      	itt	mi
 800fef4:	2320      	movmi	r3, #32
 800fef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fefa:	0713      	lsls	r3, r2, #28
 800fefc:	bf44      	itt	mi
 800fefe:	232b      	movmi	r3, #43	; 0x2b
 800ff00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff04:	f89a 3000 	ldrb.w	r3, [sl]
 800ff08:	2b2a      	cmp	r3, #42	; 0x2a
 800ff0a:	d015      	beq.n	800ff38 <_vfiprintf_r+0x120>
 800ff0c:	9a07      	ldr	r2, [sp, #28]
 800ff0e:	4654      	mov	r4, sl
 800ff10:	2000      	movs	r0, #0
 800ff12:	f04f 0c0a 	mov.w	ip, #10
 800ff16:	4621      	mov	r1, r4
 800ff18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff1c:	3b30      	subs	r3, #48	; 0x30
 800ff1e:	2b09      	cmp	r3, #9
 800ff20:	d94d      	bls.n	800ffbe <_vfiprintf_r+0x1a6>
 800ff22:	b1b0      	cbz	r0, 800ff52 <_vfiprintf_r+0x13a>
 800ff24:	9207      	str	r2, [sp, #28]
 800ff26:	e014      	b.n	800ff52 <_vfiprintf_r+0x13a>
 800ff28:	eba0 0308 	sub.w	r3, r0, r8
 800ff2c:	fa09 f303 	lsl.w	r3, r9, r3
 800ff30:	4313      	orrs	r3, r2
 800ff32:	9304      	str	r3, [sp, #16]
 800ff34:	46a2      	mov	sl, r4
 800ff36:	e7d2      	b.n	800fede <_vfiprintf_r+0xc6>
 800ff38:	9b03      	ldr	r3, [sp, #12]
 800ff3a:	1d19      	adds	r1, r3, #4
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	9103      	str	r1, [sp, #12]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	bfbb      	ittet	lt
 800ff44:	425b      	neglt	r3, r3
 800ff46:	f042 0202 	orrlt.w	r2, r2, #2
 800ff4a:	9307      	strge	r3, [sp, #28]
 800ff4c:	9307      	strlt	r3, [sp, #28]
 800ff4e:	bfb8      	it	lt
 800ff50:	9204      	strlt	r2, [sp, #16]
 800ff52:	7823      	ldrb	r3, [r4, #0]
 800ff54:	2b2e      	cmp	r3, #46	; 0x2e
 800ff56:	d10c      	bne.n	800ff72 <_vfiprintf_r+0x15a>
 800ff58:	7863      	ldrb	r3, [r4, #1]
 800ff5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ff5c:	d134      	bne.n	800ffc8 <_vfiprintf_r+0x1b0>
 800ff5e:	9b03      	ldr	r3, [sp, #12]
 800ff60:	1d1a      	adds	r2, r3, #4
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	9203      	str	r2, [sp, #12]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	bfb8      	it	lt
 800ff6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff6e:	3402      	adds	r4, #2
 800ff70:	9305      	str	r3, [sp, #20]
 800ff72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010048 <_vfiprintf_r+0x230>
 800ff76:	7821      	ldrb	r1, [r4, #0]
 800ff78:	2203      	movs	r2, #3
 800ff7a:	4650      	mov	r0, sl
 800ff7c:	f7f0 f9c8 	bl	8000310 <memchr>
 800ff80:	b138      	cbz	r0, 800ff92 <_vfiprintf_r+0x17a>
 800ff82:	9b04      	ldr	r3, [sp, #16]
 800ff84:	eba0 000a 	sub.w	r0, r0, sl
 800ff88:	2240      	movs	r2, #64	; 0x40
 800ff8a:	4082      	lsls	r2, r0
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	3401      	adds	r4, #1
 800ff90:	9304      	str	r3, [sp, #16]
 800ff92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff96:	4829      	ldr	r0, [pc, #164]	; (801003c <_vfiprintf_r+0x224>)
 800ff98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff9c:	2206      	movs	r2, #6
 800ff9e:	f7f0 f9b7 	bl	8000310 <memchr>
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	d03f      	beq.n	8010026 <_vfiprintf_r+0x20e>
 800ffa6:	4b26      	ldr	r3, [pc, #152]	; (8010040 <_vfiprintf_r+0x228>)
 800ffa8:	bb1b      	cbnz	r3, 800fff2 <_vfiprintf_r+0x1da>
 800ffaa:	9b03      	ldr	r3, [sp, #12]
 800ffac:	3307      	adds	r3, #7
 800ffae:	f023 0307 	bic.w	r3, r3, #7
 800ffb2:	3308      	adds	r3, #8
 800ffb4:	9303      	str	r3, [sp, #12]
 800ffb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffb8:	443b      	add	r3, r7
 800ffba:	9309      	str	r3, [sp, #36]	; 0x24
 800ffbc:	e768      	b.n	800fe90 <_vfiprintf_r+0x78>
 800ffbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffc2:	460c      	mov	r4, r1
 800ffc4:	2001      	movs	r0, #1
 800ffc6:	e7a6      	b.n	800ff16 <_vfiprintf_r+0xfe>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	3401      	adds	r4, #1
 800ffcc:	9305      	str	r3, [sp, #20]
 800ffce:	4619      	mov	r1, r3
 800ffd0:	f04f 0c0a 	mov.w	ip, #10
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffda:	3a30      	subs	r2, #48	; 0x30
 800ffdc:	2a09      	cmp	r2, #9
 800ffde:	d903      	bls.n	800ffe8 <_vfiprintf_r+0x1d0>
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d0c6      	beq.n	800ff72 <_vfiprintf_r+0x15a>
 800ffe4:	9105      	str	r1, [sp, #20]
 800ffe6:	e7c4      	b.n	800ff72 <_vfiprintf_r+0x15a>
 800ffe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffec:	4604      	mov	r4, r0
 800ffee:	2301      	movs	r3, #1
 800fff0:	e7f0      	b.n	800ffd4 <_vfiprintf_r+0x1bc>
 800fff2:	ab03      	add	r3, sp, #12
 800fff4:	9300      	str	r3, [sp, #0]
 800fff6:	462a      	mov	r2, r5
 800fff8:	4b12      	ldr	r3, [pc, #72]	; (8010044 <_vfiprintf_r+0x22c>)
 800fffa:	a904      	add	r1, sp, #16
 800fffc:	4630      	mov	r0, r6
 800fffe:	f3af 8000 	nop.w
 8010002:	4607      	mov	r7, r0
 8010004:	1c78      	adds	r0, r7, #1
 8010006:	d1d6      	bne.n	800ffb6 <_vfiprintf_r+0x19e>
 8010008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801000a:	07d9      	lsls	r1, r3, #31
 801000c:	d405      	bmi.n	801001a <_vfiprintf_r+0x202>
 801000e:	89ab      	ldrh	r3, [r5, #12]
 8010010:	059a      	lsls	r2, r3, #22
 8010012:	d402      	bmi.n	801001a <_vfiprintf_r+0x202>
 8010014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010016:	f7ff fc47 	bl	800f8a8 <__retarget_lock_release_recursive>
 801001a:	89ab      	ldrh	r3, [r5, #12]
 801001c:	065b      	lsls	r3, r3, #25
 801001e:	f53f af1d 	bmi.w	800fe5c <_vfiprintf_r+0x44>
 8010022:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010024:	e71c      	b.n	800fe60 <_vfiprintf_r+0x48>
 8010026:	ab03      	add	r3, sp, #12
 8010028:	9300      	str	r3, [sp, #0]
 801002a:	462a      	mov	r2, r5
 801002c:	4b05      	ldr	r3, [pc, #20]	; (8010044 <_vfiprintf_r+0x22c>)
 801002e:	a904      	add	r1, sp, #16
 8010030:	4630      	mov	r0, r6
 8010032:	f000 f879 	bl	8010128 <_printf_i>
 8010036:	e7e4      	b.n	8010002 <_vfiprintf_r+0x1ea>
 8010038:	08012565 	.word	0x08012565
 801003c:	0801256f 	.word	0x0801256f
 8010040:	00000000 	.word	0x00000000
 8010044:	0800fdf3 	.word	0x0800fdf3
 8010048:	0801256b 	.word	0x0801256b

0801004c <_printf_common>:
 801004c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010050:	4616      	mov	r6, r2
 8010052:	4699      	mov	r9, r3
 8010054:	688a      	ldr	r2, [r1, #8]
 8010056:	690b      	ldr	r3, [r1, #16]
 8010058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801005c:	4293      	cmp	r3, r2
 801005e:	bfb8      	it	lt
 8010060:	4613      	movlt	r3, r2
 8010062:	6033      	str	r3, [r6, #0]
 8010064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010068:	4607      	mov	r7, r0
 801006a:	460c      	mov	r4, r1
 801006c:	b10a      	cbz	r2, 8010072 <_printf_common+0x26>
 801006e:	3301      	adds	r3, #1
 8010070:	6033      	str	r3, [r6, #0]
 8010072:	6823      	ldr	r3, [r4, #0]
 8010074:	0699      	lsls	r1, r3, #26
 8010076:	bf42      	ittt	mi
 8010078:	6833      	ldrmi	r3, [r6, #0]
 801007a:	3302      	addmi	r3, #2
 801007c:	6033      	strmi	r3, [r6, #0]
 801007e:	6825      	ldr	r5, [r4, #0]
 8010080:	f015 0506 	ands.w	r5, r5, #6
 8010084:	d106      	bne.n	8010094 <_printf_common+0x48>
 8010086:	f104 0a19 	add.w	sl, r4, #25
 801008a:	68e3      	ldr	r3, [r4, #12]
 801008c:	6832      	ldr	r2, [r6, #0]
 801008e:	1a9b      	subs	r3, r3, r2
 8010090:	42ab      	cmp	r3, r5
 8010092:	dc26      	bgt.n	80100e2 <_printf_common+0x96>
 8010094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010098:	1e13      	subs	r3, r2, #0
 801009a:	6822      	ldr	r2, [r4, #0]
 801009c:	bf18      	it	ne
 801009e:	2301      	movne	r3, #1
 80100a0:	0692      	lsls	r2, r2, #26
 80100a2:	d42b      	bmi.n	80100fc <_printf_common+0xb0>
 80100a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100a8:	4649      	mov	r1, r9
 80100aa:	4638      	mov	r0, r7
 80100ac:	47c0      	blx	r8
 80100ae:	3001      	adds	r0, #1
 80100b0:	d01e      	beq.n	80100f0 <_printf_common+0xa4>
 80100b2:	6823      	ldr	r3, [r4, #0]
 80100b4:	6922      	ldr	r2, [r4, #16]
 80100b6:	f003 0306 	and.w	r3, r3, #6
 80100ba:	2b04      	cmp	r3, #4
 80100bc:	bf02      	ittt	eq
 80100be:	68e5      	ldreq	r5, [r4, #12]
 80100c0:	6833      	ldreq	r3, [r6, #0]
 80100c2:	1aed      	subeq	r5, r5, r3
 80100c4:	68a3      	ldr	r3, [r4, #8]
 80100c6:	bf0c      	ite	eq
 80100c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100cc:	2500      	movne	r5, #0
 80100ce:	4293      	cmp	r3, r2
 80100d0:	bfc4      	itt	gt
 80100d2:	1a9b      	subgt	r3, r3, r2
 80100d4:	18ed      	addgt	r5, r5, r3
 80100d6:	2600      	movs	r6, #0
 80100d8:	341a      	adds	r4, #26
 80100da:	42b5      	cmp	r5, r6
 80100dc:	d11a      	bne.n	8010114 <_printf_common+0xc8>
 80100de:	2000      	movs	r0, #0
 80100e0:	e008      	b.n	80100f4 <_printf_common+0xa8>
 80100e2:	2301      	movs	r3, #1
 80100e4:	4652      	mov	r2, sl
 80100e6:	4649      	mov	r1, r9
 80100e8:	4638      	mov	r0, r7
 80100ea:	47c0      	blx	r8
 80100ec:	3001      	adds	r0, #1
 80100ee:	d103      	bne.n	80100f8 <_printf_common+0xac>
 80100f0:	f04f 30ff 	mov.w	r0, #4294967295
 80100f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100f8:	3501      	adds	r5, #1
 80100fa:	e7c6      	b.n	801008a <_printf_common+0x3e>
 80100fc:	18e1      	adds	r1, r4, r3
 80100fe:	1c5a      	adds	r2, r3, #1
 8010100:	2030      	movs	r0, #48	; 0x30
 8010102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010106:	4422      	add	r2, r4
 8010108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801010c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010110:	3302      	adds	r3, #2
 8010112:	e7c7      	b.n	80100a4 <_printf_common+0x58>
 8010114:	2301      	movs	r3, #1
 8010116:	4622      	mov	r2, r4
 8010118:	4649      	mov	r1, r9
 801011a:	4638      	mov	r0, r7
 801011c:	47c0      	blx	r8
 801011e:	3001      	adds	r0, #1
 8010120:	d0e6      	beq.n	80100f0 <_printf_common+0xa4>
 8010122:	3601      	adds	r6, #1
 8010124:	e7d9      	b.n	80100da <_printf_common+0x8e>
	...

08010128 <_printf_i>:
 8010128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801012c:	7e0f      	ldrb	r7, [r1, #24]
 801012e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010130:	2f78      	cmp	r7, #120	; 0x78
 8010132:	4691      	mov	r9, r2
 8010134:	4680      	mov	r8, r0
 8010136:	460c      	mov	r4, r1
 8010138:	469a      	mov	sl, r3
 801013a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801013e:	d807      	bhi.n	8010150 <_printf_i+0x28>
 8010140:	2f62      	cmp	r7, #98	; 0x62
 8010142:	d80a      	bhi.n	801015a <_printf_i+0x32>
 8010144:	2f00      	cmp	r7, #0
 8010146:	f000 80d4 	beq.w	80102f2 <_printf_i+0x1ca>
 801014a:	2f58      	cmp	r7, #88	; 0x58
 801014c:	f000 80c0 	beq.w	80102d0 <_printf_i+0x1a8>
 8010150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010158:	e03a      	b.n	80101d0 <_printf_i+0xa8>
 801015a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801015e:	2b15      	cmp	r3, #21
 8010160:	d8f6      	bhi.n	8010150 <_printf_i+0x28>
 8010162:	a101      	add	r1, pc, #4	; (adr r1, 8010168 <_printf_i+0x40>)
 8010164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010168:	080101c1 	.word	0x080101c1
 801016c:	080101d5 	.word	0x080101d5
 8010170:	08010151 	.word	0x08010151
 8010174:	08010151 	.word	0x08010151
 8010178:	08010151 	.word	0x08010151
 801017c:	08010151 	.word	0x08010151
 8010180:	080101d5 	.word	0x080101d5
 8010184:	08010151 	.word	0x08010151
 8010188:	08010151 	.word	0x08010151
 801018c:	08010151 	.word	0x08010151
 8010190:	08010151 	.word	0x08010151
 8010194:	080102d9 	.word	0x080102d9
 8010198:	08010201 	.word	0x08010201
 801019c:	08010293 	.word	0x08010293
 80101a0:	08010151 	.word	0x08010151
 80101a4:	08010151 	.word	0x08010151
 80101a8:	080102fb 	.word	0x080102fb
 80101ac:	08010151 	.word	0x08010151
 80101b0:	08010201 	.word	0x08010201
 80101b4:	08010151 	.word	0x08010151
 80101b8:	08010151 	.word	0x08010151
 80101bc:	0801029b 	.word	0x0801029b
 80101c0:	682b      	ldr	r3, [r5, #0]
 80101c2:	1d1a      	adds	r2, r3, #4
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	602a      	str	r2, [r5, #0]
 80101c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80101d0:	2301      	movs	r3, #1
 80101d2:	e09f      	b.n	8010314 <_printf_i+0x1ec>
 80101d4:	6820      	ldr	r0, [r4, #0]
 80101d6:	682b      	ldr	r3, [r5, #0]
 80101d8:	0607      	lsls	r7, r0, #24
 80101da:	f103 0104 	add.w	r1, r3, #4
 80101de:	6029      	str	r1, [r5, #0]
 80101e0:	d501      	bpl.n	80101e6 <_printf_i+0xbe>
 80101e2:	681e      	ldr	r6, [r3, #0]
 80101e4:	e003      	b.n	80101ee <_printf_i+0xc6>
 80101e6:	0646      	lsls	r6, r0, #25
 80101e8:	d5fb      	bpl.n	80101e2 <_printf_i+0xba>
 80101ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80101ee:	2e00      	cmp	r6, #0
 80101f0:	da03      	bge.n	80101fa <_printf_i+0xd2>
 80101f2:	232d      	movs	r3, #45	; 0x2d
 80101f4:	4276      	negs	r6, r6
 80101f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101fa:	485a      	ldr	r0, [pc, #360]	; (8010364 <_printf_i+0x23c>)
 80101fc:	230a      	movs	r3, #10
 80101fe:	e012      	b.n	8010226 <_printf_i+0xfe>
 8010200:	682b      	ldr	r3, [r5, #0]
 8010202:	6820      	ldr	r0, [r4, #0]
 8010204:	1d19      	adds	r1, r3, #4
 8010206:	6029      	str	r1, [r5, #0]
 8010208:	0605      	lsls	r5, r0, #24
 801020a:	d501      	bpl.n	8010210 <_printf_i+0xe8>
 801020c:	681e      	ldr	r6, [r3, #0]
 801020e:	e002      	b.n	8010216 <_printf_i+0xee>
 8010210:	0641      	lsls	r1, r0, #25
 8010212:	d5fb      	bpl.n	801020c <_printf_i+0xe4>
 8010214:	881e      	ldrh	r6, [r3, #0]
 8010216:	4853      	ldr	r0, [pc, #332]	; (8010364 <_printf_i+0x23c>)
 8010218:	2f6f      	cmp	r7, #111	; 0x6f
 801021a:	bf0c      	ite	eq
 801021c:	2308      	moveq	r3, #8
 801021e:	230a      	movne	r3, #10
 8010220:	2100      	movs	r1, #0
 8010222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010226:	6865      	ldr	r5, [r4, #4]
 8010228:	60a5      	str	r5, [r4, #8]
 801022a:	2d00      	cmp	r5, #0
 801022c:	bfa2      	ittt	ge
 801022e:	6821      	ldrge	r1, [r4, #0]
 8010230:	f021 0104 	bicge.w	r1, r1, #4
 8010234:	6021      	strge	r1, [r4, #0]
 8010236:	b90e      	cbnz	r6, 801023c <_printf_i+0x114>
 8010238:	2d00      	cmp	r5, #0
 801023a:	d04b      	beq.n	80102d4 <_printf_i+0x1ac>
 801023c:	4615      	mov	r5, r2
 801023e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010242:	fb03 6711 	mls	r7, r3, r1, r6
 8010246:	5dc7      	ldrb	r7, [r0, r7]
 8010248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801024c:	4637      	mov	r7, r6
 801024e:	42bb      	cmp	r3, r7
 8010250:	460e      	mov	r6, r1
 8010252:	d9f4      	bls.n	801023e <_printf_i+0x116>
 8010254:	2b08      	cmp	r3, #8
 8010256:	d10b      	bne.n	8010270 <_printf_i+0x148>
 8010258:	6823      	ldr	r3, [r4, #0]
 801025a:	07de      	lsls	r6, r3, #31
 801025c:	d508      	bpl.n	8010270 <_printf_i+0x148>
 801025e:	6923      	ldr	r3, [r4, #16]
 8010260:	6861      	ldr	r1, [r4, #4]
 8010262:	4299      	cmp	r1, r3
 8010264:	bfde      	ittt	le
 8010266:	2330      	movle	r3, #48	; 0x30
 8010268:	f805 3c01 	strble.w	r3, [r5, #-1]
 801026c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010270:	1b52      	subs	r2, r2, r5
 8010272:	6122      	str	r2, [r4, #16]
 8010274:	f8cd a000 	str.w	sl, [sp]
 8010278:	464b      	mov	r3, r9
 801027a:	aa03      	add	r2, sp, #12
 801027c:	4621      	mov	r1, r4
 801027e:	4640      	mov	r0, r8
 8010280:	f7ff fee4 	bl	801004c <_printf_common>
 8010284:	3001      	adds	r0, #1
 8010286:	d14a      	bne.n	801031e <_printf_i+0x1f6>
 8010288:	f04f 30ff 	mov.w	r0, #4294967295
 801028c:	b004      	add	sp, #16
 801028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010292:	6823      	ldr	r3, [r4, #0]
 8010294:	f043 0320 	orr.w	r3, r3, #32
 8010298:	6023      	str	r3, [r4, #0]
 801029a:	4833      	ldr	r0, [pc, #204]	; (8010368 <_printf_i+0x240>)
 801029c:	2778      	movs	r7, #120	; 0x78
 801029e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80102a2:	6823      	ldr	r3, [r4, #0]
 80102a4:	6829      	ldr	r1, [r5, #0]
 80102a6:	061f      	lsls	r7, r3, #24
 80102a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80102ac:	d402      	bmi.n	80102b4 <_printf_i+0x18c>
 80102ae:	065f      	lsls	r7, r3, #25
 80102b0:	bf48      	it	mi
 80102b2:	b2b6      	uxthmi	r6, r6
 80102b4:	07df      	lsls	r7, r3, #31
 80102b6:	bf48      	it	mi
 80102b8:	f043 0320 	orrmi.w	r3, r3, #32
 80102bc:	6029      	str	r1, [r5, #0]
 80102be:	bf48      	it	mi
 80102c0:	6023      	strmi	r3, [r4, #0]
 80102c2:	b91e      	cbnz	r6, 80102cc <_printf_i+0x1a4>
 80102c4:	6823      	ldr	r3, [r4, #0]
 80102c6:	f023 0320 	bic.w	r3, r3, #32
 80102ca:	6023      	str	r3, [r4, #0]
 80102cc:	2310      	movs	r3, #16
 80102ce:	e7a7      	b.n	8010220 <_printf_i+0xf8>
 80102d0:	4824      	ldr	r0, [pc, #144]	; (8010364 <_printf_i+0x23c>)
 80102d2:	e7e4      	b.n	801029e <_printf_i+0x176>
 80102d4:	4615      	mov	r5, r2
 80102d6:	e7bd      	b.n	8010254 <_printf_i+0x12c>
 80102d8:	682b      	ldr	r3, [r5, #0]
 80102da:	6826      	ldr	r6, [r4, #0]
 80102dc:	6961      	ldr	r1, [r4, #20]
 80102de:	1d18      	adds	r0, r3, #4
 80102e0:	6028      	str	r0, [r5, #0]
 80102e2:	0635      	lsls	r5, r6, #24
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	d501      	bpl.n	80102ec <_printf_i+0x1c4>
 80102e8:	6019      	str	r1, [r3, #0]
 80102ea:	e002      	b.n	80102f2 <_printf_i+0x1ca>
 80102ec:	0670      	lsls	r0, r6, #25
 80102ee:	d5fb      	bpl.n	80102e8 <_printf_i+0x1c0>
 80102f0:	8019      	strh	r1, [r3, #0]
 80102f2:	2300      	movs	r3, #0
 80102f4:	6123      	str	r3, [r4, #16]
 80102f6:	4615      	mov	r5, r2
 80102f8:	e7bc      	b.n	8010274 <_printf_i+0x14c>
 80102fa:	682b      	ldr	r3, [r5, #0]
 80102fc:	1d1a      	adds	r2, r3, #4
 80102fe:	602a      	str	r2, [r5, #0]
 8010300:	681d      	ldr	r5, [r3, #0]
 8010302:	6862      	ldr	r2, [r4, #4]
 8010304:	2100      	movs	r1, #0
 8010306:	4628      	mov	r0, r5
 8010308:	f7f0 f802 	bl	8000310 <memchr>
 801030c:	b108      	cbz	r0, 8010312 <_printf_i+0x1ea>
 801030e:	1b40      	subs	r0, r0, r5
 8010310:	6060      	str	r0, [r4, #4]
 8010312:	6863      	ldr	r3, [r4, #4]
 8010314:	6123      	str	r3, [r4, #16]
 8010316:	2300      	movs	r3, #0
 8010318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801031c:	e7aa      	b.n	8010274 <_printf_i+0x14c>
 801031e:	6923      	ldr	r3, [r4, #16]
 8010320:	462a      	mov	r2, r5
 8010322:	4649      	mov	r1, r9
 8010324:	4640      	mov	r0, r8
 8010326:	47d0      	blx	sl
 8010328:	3001      	adds	r0, #1
 801032a:	d0ad      	beq.n	8010288 <_printf_i+0x160>
 801032c:	6823      	ldr	r3, [r4, #0]
 801032e:	079b      	lsls	r3, r3, #30
 8010330:	d413      	bmi.n	801035a <_printf_i+0x232>
 8010332:	68e0      	ldr	r0, [r4, #12]
 8010334:	9b03      	ldr	r3, [sp, #12]
 8010336:	4298      	cmp	r0, r3
 8010338:	bfb8      	it	lt
 801033a:	4618      	movlt	r0, r3
 801033c:	e7a6      	b.n	801028c <_printf_i+0x164>
 801033e:	2301      	movs	r3, #1
 8010340:	4632      	mov	r2, r6
 8010342:	4649      	mov	r1, r9
 8010344:	4640      	mov	r0, r8
 8010346:	47d0      	blx	sl
 8010348:	3001      	adds	r0, #1
 801034a:	d09d      	beq.n	8010288 <_printf_i+0x160>
 801034c:	3501      	adds	r5, #1
 801034e:	68e3      	ldr	r3, [r4, #12]
 8010350:	9903      	ldr	r1, [sp, #12]
 8010352:	1a5b      	subs	r3, r3, r1
 8010354:	42ab      	cmp	r3, r5
 8010356:	dcf2      	bgt.n	801033e <_printf_i+0x216>
 8010358:	e7eb      	b.n	8010332 <_printf_i+0x20a>
 801035a:	2500      	movs	r5, #0
 801035c:	f104 0619 	add.w	r6, r4, #25
 8010360:	e7f5      	b.n	801034e <_printf_i+0x226>
 8010362:	bf00      	nop
 8010364:	08012576 	.word	0x08012576
 8010368:	08012587 	.word	0x08012587

0801036c <__sflush_r>:
 801036c:	898a      	ldrh	r2, [r1, #12]
 801036e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010372:	4605      	mov	r5, r0
 8010374:	0710      	lsls	r0, r2, #28
 8010376:	460c      	mov	r4, r1
 8010378:	d458      	bmi.n	801042c <__sflush_r+0xc0>
 801037a:	684b      	ldr	r3, [r1, #4]
 801037c:	2b00      	cmp	r3, #0
 801037e:	dc05      	bgt.n	801038c <__sflush_r+0x20>
 8010380:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010382:	2b00      	cmp	r3, #0
 8010384:	dc02      	bgt.n	801038c <__sflush_r+0x20>
 8010386:	2000      	movs	r0, #0
 8010388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801038c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801038e:	2e00      	cmp	r6, #0
 8010390:	d0f9      	beq.n	8010386 <__sflush_r+0x1a>
 8010392:	2300      	movs	r3, #0
 8010394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010398:	682f      	ldr	r7, [r5, #0]
 801039a:	6a21      	ldr	r1, [r4, #32]
 801039c:	602b      	str	r3, [r5, #0]
 801039e:	d032      	beq.n	8010406 <__sflush_r+0x9a>
 80103a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80103a2:	89a3      	ldrh	r3, [r4, #12]
 80103a4:	075a      	lsls	r2, r3, #29
 80103a6:	d505      	bpl.n	80103b4 <__sflush_r+0x48>
 80103a8:	6863      	ldr	r3, [r4, #4]
 80103aa:	1ac0      	subs	r0, r0, r3
 80103ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80103ae:	b10b      	cbz	r3, 80103b4 <__sflush_r+0x48>
 80103b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80103b2:	1ac0      	subs	r0, r0, r3
 80103b4:	2300      	movs	r3, #0
 80103b6:	4602      	mov	r2, r0
 80103b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80103ba:	6a21      	ldr	r1, [r4, #32]
 80103bc:	4628      	mov	r0, r5
 80103be:	47b0      	blx	r6
 80103c0:	1c43      	adds	r3, r0, #1
 80103c2:	89a3      	ldrh	r3, [r4, #12]
 80103c4:	d106      	bne.n	80103d4 <__sflush_r+0x68>
 80103c6:	6829      	ldr	r1, [r5, #0]
 80103c8:	291d      	cmp	r1, #29
 80103ca:	d82b      	bhi.n	8010424 <__sflush_r+0xb8>
 80103cc:	4a29      	ldr	r2, [pc, #164]	; (8010474 <__sflush_r+0x108>)
 80103ce:	410a      	asrs	r2, r1
 80103d0:	07d6      	lsls	r6, r2, #31
 80103d2:	d427      	bmi.n	8010424 <__sflush_r+0xb8>
 80103d4:	2200      	movs	r2, #0
 80103d6:	6062      	str	r2, [r4, #4]
 80103d8:	04d9      	lsls	r1, r3, #19
 80103da:	6922      	ldr	r2, [r4, #16]
 80103dc:	6022      	str	r2, [r4, #0]
 80103de:	d504      	bpl.n	80103ea <__sflush_r+0x7e>
 80103e0:	1c42      	adds	r2, r0, #1
 80103e2:	d101      	bne.n	80103e8 <__sflush_r+0x7c>
 80103e4:	682b      	ldr	r3, [r5, #0]
 80103e6:	b903      	cbnz	r3, 80103ea <__sflush_r+0x7e>
 80103e8:	6560      	str	r0, [r4, #84]	; 0x54
 80103ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103ec:	602f      	str	r7, [r5, #0]
 80103ee:	2900      	cmp	r1, #0
 80103f0:	d0c9      	beq.n	8010386 <__sflush_r+0x1a>
 80103f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103f6:	4299      	cmp	r1, r3
 80103f8:	d002      	beq.n	8010400 <__sflush_r+0x94>
 80103fa:	4628      	mov	r0, r5
 80103fc:	f7ff fa8a 	bl	800f914 <_free_r>
 8010400:	2000      	movs	r0, #0
 8010402:	6360      	str	r0, [r4, #52]	; 0x34
 8010404:	e7c0      	b.n	8010388 <__sflush_r+0x1c>
 8010406:	2301      	movs	r3, #1
 8010408:	4628      	mov	r0, r5
 801040a:	47b0      	blx	r6
 801040c:	1c41      	adds	r1, r0, #1
 801040e:	d1c8      	bne.n	80103a2 <__sflush_r+0x36>
 8010410:	682b      	ldr	r3, [r5, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d0c5      	beq.n	80103a2 <__sflush_r+0x36>
 8010416:	2b1d      	cmp	r3, #29
 8010418:	d001      	beq.n	801041e <__sflush_r+0xb2>
 801041a:	2b16      	cmp	r3, #22
 801041c:	d101      	bne.n	8010422 <__sflush_r+0xb6>
 801041e:	602f      	str	r7, [r5, #0]
 8010420:	e7b1      	b.n	8010386 <__sflush_r+0x1a>
 8010422:	89a3      	ldrh	r3, [r4, #12]
 8010424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010428:	81a3      	strh	r3, [r4, #12]
 801042a:	e7ad      	b.n	8010388 <__sflush_r+0x1c>
 801042c:	690f      	ldr	r7, [r1, #16]
 801042e:	2f00      	cmp	r7, #0
 8010430:	d0a9      	beq.n	8010386 <__sflush_r+0x1a>
 8010432:	0793      	lsls	r3, r2, #30
 8010434:	680e      	ldr	r6, [r1, #0]
 8010436:	bf08      	it	eq
 8010438:	694b      	ldreq	r3, [r1, #20]
 801043a:	600f      	str	r7, [r1, #0]
 801043c:	bf18      	it	ne
 801043e:	2300      	movne	r3, #0
 8010440:	eba6 0807 	sub.w	r8, r6, r7
 8010444:	608b      	str	r3, [r1, #8]
 8010446:	f1b8 0f00 	cmp.w	r8, #0
 801044a:	dd9c      	ble.n	8010386 <__sflush_r+0x1a>
 801044c:	6a21      	ldr	r1, [r4, #32]
 801044e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010450:	4643      	mov	r3, r8
 8010452:	463a      	mov	r2, r7
 8010454:	4628      	mov	r0, r5
 8010456:	47b0      	blx	r6
 8010458:	2800      	cmp	r0, #0
 801045a:	dc06      	bgt.n	801046a <__sflush_r+0xfe>
 801045c:	89a3      	ldrh	r3, [r4, #12]
 801045e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010462:	81a3      	strh	r3, [r4, #12]
 8010464:	f04f 30ff 	mov.w	r0, #4294967295
 8010468:	e78e      	b.n	8010388 <__sflush_r+0x1c>
 801046a:	4407      	add	r7, r0
 801046c:	eba8 0800 	sub.w	r8, r8, r0
 8010470:	e7e9      	b.n	8010446 <__sflush_r+0xda>
 8010472:	bf00      	nop
 8010474:	dfbffffe 	.word	0xdfbffffe

08010478 <_fflush_r>:
 8010478:	b538      	push	{r3, r4, r5, lr}
 801047a:	690b      	ldr	r3, [r1, #16]
 801047c:	4605      	mov	r5, r0
 801047e:	460c      	mov	r4, r1
 8010480:	b913      	cbnz	r3, 8010488 <_fflush_r+0x10>
 8010482:	2500      	movs	r5, #0
 8010484:	4628      	mov	r0, r5
 8010486:	bd38      	pop	{r3, r4, r5, pc}
 8010488:	b118      	cbz	r0, 8010492 <_fflush_r+0x1a>
 801048a:	6a03      	ldr	r3, [r0, #32]
 801048c:	b90b      	cbnz	r3, 8010492 <_fflush_r+0x1a>
 801048e:	f7ff f86b 	bl	800f568 <__sinit>
 8010492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d0f3      	beq.n	8010482 <_fflush_r+0xa>
 801049a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801049c:	07d0      	lsls	r0, r2, #31
 801049e:	d404      	bmi.n	80104aa <_fflush_r+0x32>
 80104a0:	0599      	lsls	r1, r3, #22
 80104a2:	d402      	bmi.n	80104aa <_fflush_r+0x32>
 80104a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104a6:	f7ff f9fe 	bl	800f8a6 <__retarget_lock_acquire_recursive>
 80104aa:	4628      	mov	r0, r5
 80104ac:	4621      	mov	r1, r4
 80104ae:	f7ff ff5d 	bl	801036c <__sflush_r>
 80104b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104b4:	07da      	lsls	r2, r3, #31
 80104b6:	4605      	mov	r5, r0
 80104b8:	d4e4      	bmi.n	8010484 <_fflush_r+0xc>
 80104ba:	89a3      	ldrh	r3, [r4, #12]
 80104bc:	059b      	lsls	r3, r3, #22
 80104be:	d4e1      	bmi.n	8010484 <_fflush_r+0xc>
 80104c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104c2:	f7ff f9f1 	bl	800f8a8 <__retarget_lock_release_recursive>
 80104c6:	e7dd      	b.n	8010484 <_fflush_r+0xc>

080104c8 <fiprintf>:
 80104c8:	b40e      	push	{r1, r2, r3}
 80104ca:	b503      	push	{r0, r1, lr}
 80104cc:	4601      	mov	r1, r0
 80104ce:	ab03      	add	r3, sp, #12
 80104d0:	4805      	ldr	r0, [pc, #20]	; (80104e8 <fiprintf+0x20>)
 80104d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80104d6:	6800      	ldr	r0, [r0, #0]
 80104d8:	9301      	str	r3, [sp, #4]
 80104da:	f7ff fc9d 	bl	800fe18 <_vfiprintf_r>
 80104de:	b002      	add	sp, #8
 80104e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80104e4:	b003      	add	sp, #12
 80104e6:	4770      	bx	lr
 80104e8:	24000084 	.word	0x24000084

080104ec <__swbuf_r>:
 80104ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ee:	460e      	mov	r6, r1
 80104f0:	4614      	mov	r4, r2
 80104f2:	4605      	mov	r5, r0
 80104f4:	b118      	cbz	r0, 80104fe <__swbuf_r+0x12>
 80104f6:	6a03      	ldr	r3, [r0, #32]
 80104f8:	b90b      	cbnz	r3, 80104fe <__swbuf_r+0x12>
 80104fa:	f7ff f835 	bl	800f568 <__sinit>
 80104fe:	69a3      	ldr	r3, [r4, #24]
 8010500:	60a3      	str	r3, [r4, #8]
 8010502:	89a3      	ldrh	r3, [r4, #12]
 8010504:	071a      	lsls	r2, r3, #28
 8010506:	d525      	bpl.n	8010554 <__swbuf_r+0x68>
 8010508:	6923      	ldr	r3, [r4, #16]
 801050a:	b31b      	cbz	r3, 8010554 <__swbuf_r+0x68>
 801050c:	6823      	ldr	r3, [r4, #0]
 801050e:	6922      	ldr	r2, [r4, #16]
 8010510:	1a98      	subs	r0, r3, r2
 8010512:	6963      	ldr	r3, [r4, #20]
 8010514:	b2f6      	uxtb	r6, r6
 8010516:	4283      	cmp	r3, r0
 8010518:	4637      	mov	r7, r6
 801051a:	dc04      	bgt.n	8010526 <__swbuf_r+0x3a>
 801051c:	4621      	mov	r1, r4
 801051e:	4628      	mov	r0, r5
 8010520:	f7ff ffaa 	bl	8010478 <_fflush_r>
 8010524:	b9e0      	cbnz	r0, 8010560 <__swbuf_r+0x74>
 8010526:	68a3      	ldr	r3, [r4, #8]
 8010528:	3b01      	subs	r3, #1
 801052a:	60a3      	str	r3, [r4, #8]
 801052c:	6823      	ldr	r3, [r4, #0]
 801052e:	1c5a      	adds	r2, r3, #1
 8010530:	6022      	str	r2, [r4, #0]
 8010532:	701e      	strb	r6, [r3, #0]
 8010534:	6962      	ldr	r2, [r4, #20]
 8010536:	1c43      	adds	r3, r0, #1
 8010538:	429a      	cmp	r2, r3
 801053a:	d004      	beq.n	8010546 <__swbuf_r+0x5a>
 801053c:	89a3      	ldrh	r3, [r4, #12]
 801053e:	07db      	lsls	r3, r3, #31
 8010540:	d506      	bpl.n	8010550 <__swbuf_r+0x64>
 8010542:	2e0a      	cmp	r6, #10
 8010544:	d104      	bne.n	8010550 <__swbuf_r+0x64>
 8010546:	4621      	mov	r1, r4
 8010548:	4628      	mov	r0, r5
 801054a:	f7ff ff95 	bl	8010478 <_fflush_r>
 801054e:	b938      	cbnz	r0, 8010560 <__swbuf_r+0x74>
 8010550:	4638      	mov	r0, r7
 8010552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010554:	4621      	mov	r1, r4
 8010556:	4628      	mov	r0, r5
 8010558:	f000 f806 	bl	8010568 <__swsetup_r>
 801055c:	2800      	cmp	r0, #0
 801055e:	d0d5      	beq.n	801050c <__swbuf_r+0x20>
 8010560:	f04f 37ff 	mov.w	r7, #4294967295
 8010564:	e7f4      	b.n	8010550 <__swbuf_r+0x64>
	...

08010568 <__swsetup_r>:
 8010568:	b538      	push	{r3, r4, r5, lr}
 801056a:	4b2a      	ldr	r3, [pc, #168]	; (8010614 <__swsetup_r+0xac>)
 801056c:	4605      	mov	r5, r0
 801056e:	6818      	ldr	r0, [r3, #0]
 8010570:	460c      	mov	r4, r1
 8010572:	b118      	cbz	r0, 801057c <__swsetup_r+0x14>
 8010574:	6a03      	ldr	r3, [r0, #32]
 8010576:	b90b      	cbnz	r3, 801057c <__swsetup_r+0x14>
 8010578:	f7fe fff6 	bl	800f568 <__sinit>
 801057c:	89a3      	ldrh	r3, [r4, #12]
 801057e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010582:	0718      	lsls	r0, r3, #28
 8010584:	d422      	bmi.n	80105cc <__swsetup_r+0x64>
 8010586:	06d9      	lsls	r1, r3, #27
 8010588:	d407      	bmi.n	801059a <__swsetup_r+0x32>
 801058a:	2309      	movs	r3, #9
 801058c:	602b      	str	r3, [r5, #0]
 801058e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010592:	81a3      	strh	r3, [r4, #12]
 8010594:	f04f 30ff 	mov.w	r0, #4294967295
 8010598:	e034      	b.n	8010604 <__swsetup_r+0x9c>
 801059a:	0758      	lsls	r0, r3, #29
 801059c:	d512      	bpl.n	80105c4 <__swsetup_r+0x5c>
 801059e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105a0:	b141      	cbz	r1, 80105b4 <__swsetup_r+0x4c>
 80105a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105a6:	4299      	cmp	r1, r3
 80105a8:	d002      	beq.n	80105b0 <__swsetup_r+0x48>
 80105aa:	4628      	mov	r0, r5
 80105ac:	f7ff f9b2 	bl	800f914 <_free_r>
 80105b0:	2300      	movs	r3, #0
 80105b2:	6363      	str	r3, [r4, #52]	; 0x34
 80105b4:	89a3      	ldrh	r3, [r4, #12]
 80105b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80105ba:	81a3      	strh	r3, [r4, #12]
 80105bc:	2300      	movs	r3, #0
 80105be:	6063      	str	r3, [r4, #4]
 80105c0:	6923      	ldr	r3, [r4, #16]
 80105c2:	6023      	str	r3, [r4, #0]
 80105c4:	89a3      	ldrh	r3, [r4, #12]
 80105c6:	f043 0308 	orr.w	r3, r3, #8
 80105ca:	81a3      	strh	r3, [r4, #12]
 80105cc:	6923      	ldr	r3, [r4, #16]
 80105ce:	b94b      	cbnz	r3, 80105e4 <__swsetup_r+0x7c>
 80105d0:	89a3      	ldrh	r3, [r4, #12]
 80105d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80105d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105da:	d003      	beq.n	80105e4 <__swsetup_r+0x7c>
 80105dc:	4621      	mov	r1, r4
 80105de:	4628      	mov	r0, r5
 80105e0:	f000 f886 	bl	80106f0 <__smakebuf_r>
 80105e4:	89a0      	ldrh	r0, [r4, #12]
 80105e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80105ea:	f010 0301 	ands.w	r3, r0, #1
 80105ee:	d00a      	beq.n	8010606 <__swsetup_r+0x9e>
 80105f0:	2300      	movs	r3, #0
 80105f2:	60a3      	str	r3, [r4, #8]
 80105f4:	6963      	ldr	r3, [r4, #20]
 80105f6:	425b      	negs	r3, r3
 80105f8:	61a3      	str	r3, [r4, #24]
 80105fa:	6923      	ldr	r3, [r4, #16]
 80105fc:	b943      	cbnz	r3, 8010610 <__swsetup_r+0xa8>
 80105fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010602:	d1c4      	bne.n	801058e <__swsetup_r+0x26>
 8010604:	bd38      	pop	{r3, r4, r5, pc}
 8010606:	0781      	lsls	r1, r0, #30
 8010608:	bf58      	it	pl
 801060a:	6963      	ldrpl	r3, [r4, #20]
 801060c:	60a3      	str	r3, [r4, #8]
 801060e:	e7f4      	b.n	80105fa <__swsetup_r+0x92>
 8010610:	2000      	movs	r0, #0
 8010612:	e7f7      	b.n	8010604 <__swsetup_r+0x9c>
 8010614:	24000084 	.word	0x24000084

08010618 <_sbrk_r>:
 8010618:	b538      	push	{r3, r4, r5, lr}
 801061a:	4d06      	ldr	r5, [pc, #24]	; (8010634 <_sbrk_r+0x1c>)
 801061c:	2300      	movs	r3, #0
 801061e:	4604      	mov	r4, r0
 8010620:	4608      	mov	r0, r1
 8010622:	602b      	str	r3, [r5, #0]
 8010624:	f7f0 fc6c 	bl	8000f00 <_sbrk>
 8010628:	1c43      	adds	r3, r0, #1
 801062a:	d102      	bne.n	8010632 <_sbrk_r+0x1a>
 801062c:	682b      	ldr	r3, [r5, #0]
 801062e:	b103      	cbz	r3, 8010632 <_sbrk_r+0x1a>
 8010630:	6023      	str	r3, [r4, #0]
 8010632:	bd38      	pop	{r3, r4, r5, pc}
 8010634:	24005ef0 	.word	0x24005ef0

08010638 <abort>:
 8010638:	b508      	push	{r3, lr}
 801063a:	2006      	movs	r0, #6
 801063c:	f000 f8bc 	bl	80107b8 <raise>
 8010640:	2001      	movs	r0, #1
 8010642:	f7f0 fbe5 	bl	8000e10 <_exit>

08010646 <_realloc_r>:
 8010646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801064a:	4680      	mov	r8, r0
 801064c:	4614      	mov	r4, r2
 801064e:	460e      	mov	r6, r1
 8010650:	b921      	cbnz	r1, 801065c <_realloc_r+0x16>
 8010652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010656:	4611      	mov	r1, r2
 8010658:	f7ff b9d0 	b.w	800f9fc <_malloc_r>
 801065c:	b92a      	cbnz	r2, 801066a <_realloc_r+0x24>
 801065e:	f7ff f959 	bl	800f914 <_free_r>
 8010662:	4625      	mov	r5, r4
 8010664:	4628      	mov	r0, r5
 8010666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801066a:	f000 f8e3 	bl	8010834 <_malloc_usable_size_r>
 801066e:	4284      	cmp	r4, r0
 8010670:	4607      	mov	r7, r0
 8010672:	d802      	bhi.n	801067a <_realloc_r+0x34>
 8010674:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010678:	d812      	bhi.n	80106a0 <_realloc_r+0x5a>
 801067a:	4621      	mov	r1, r4
 801067c:	4640      	mov	r0, r8
 801067e:	f7ff f9bd 	bl	800f9fc <_malloc_r>
 8010682:	4605      	mov	r5, r0
 8010684:	2800      	cmp	r0, #0
 8010686:	d0ed      	beq.n	8010664 <_realloc_r+0x1e>
 8010688:	42bc      	cmp	r4, r7
 801068a:	4622      	mov	r2, r4
 801068c:	4631      	mov	r1, r6
 801068e:	bf28      	it	cs
 8010690:	463a      	movcs	r2, r7
 8010692:	f7ff f912 	bl	800f8ba <memcpy>
 8010696:	4631      	mov	r1, r6
 8010698:	4640      	mov	r0, r8
 801069a:	f7ff f93b 	bl	800f914 <_free_r>
 801069e:	e7e1      	b.n	8010664 <_realloc_r+0x1e>
 80106a0:	4635      	mov	r5, r6
 80106a2:	e7df      	b.n	8010664 <_realloc_r+0x1e>

080106a4 <__swhatbuf_r>:
 80106a4:	b570      	push	{r4, r5, r6, lr}
 80106a6:	460c      	mov	r4, r1
 80106a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ac:	2900      	cmp	r1, #0
 80106ae:	b096      	sub	sp, #88	; 0x58
 80106b0:	4615      	mov	r5, r2
 80106b2:	461e      	mov	r6, r3
 80106b4:	da0d      	bge.n	80106d2 <__swhatbuf_r+0x2e>
 80106b6:	89a3      	ldrh	r3, [r4, #12]
 80106b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80106bc:	f04f 0100 	mov.w	r1, #0
 80106c0:	bf0c      	ite	eq
 80106c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80106c6:	2340      	movne	r3, #64	; 0x40
 80106c8:	2000      	movs	r0, #0
 80106ca:	6031      	str	r1, [r6, #0]
 80106cc:	602b      	str	r3, [r5, #0]
 80106ce:	b016      	add	sp, #88	; 0x58
 80106d0:	bd70      	pop	{r4, r5, r6, pc}
 80106d2:	466a      	mov	r2, sp
 80106d4:	f000 f878 	bl	80107c8 <_fstat_r>
 80106d8:	2800      	cmp	r0, #0
 80106da:	dbec      	blt.n	80106b6 <__swhatbuf_r+0x12>
 80106dc:	9901      	ldr	r1, [sp, #4]
 80106de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80106e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80106e6:	4259      	negs	r1, r3
 80106e8:	4159      	adcs	r1, r3
 80106ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106ee:	e7eb      	b.n	80106c8 <__swhatbuf_r+0x24>

080106f0 <__smakebuf_r>:
 80106f0:	898b      	ldrh	r3, [r1, #12]
 80106f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80106f4:	079d      	lsls	r5, r3, #30
 80106f6:	4606      	mov	r6, r0
 80106f8:	460c      	mov	r4, r1
 80106fa:	d507      	bpl.n	801070c <__smakebuf_r+0x1c>
 80106fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010700:	6023      	str	r3, [r4, #0]
 8010702:	6123      	str	r3, [r4, #16]
 8010704:	2301      	movs	r3, #1
 8010706:	6163      	str	r3, [r4, #20]
 8010708:	b002      	add	sp, #8
 801070a:	bd70      	pop	{r4, r5, r6, pc}
 801070c:	ab01      	add	r3, sp, #4
 801070e:	466a      	mov	r2, sp
 8010710:	f7ff ffc8 	bl	80106a4 <__swhatbuf_r>
 8010714:	9900      	ldr	r1, [sp, #0]
 8010716:	4605      	mov	r5, r0
 8010718:	4630      	mov	r0, r6
 801071a:	f7ff f96f 	bl	800f9fc <_malloc_r>
 801071e:	b948      	cbnz	r0, 8010734 <__smakebuf_r+0x44>
 8010720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010724:	059a      	lsls	r2, r3, #22
 8010726:	d4ef      	bmi.n	8010708 <__smakebuf_r+0x18>
 8010728:	f023 0303 	bic.w	r3, r3, #3
 801072c:	f043 0302 	orr.w	r3, r3, #2
 8010730:	81a3      	strh	r3, [r4, #12]
 8010732:	e7e3      	b.n	80106fc <__smakebuf_r+0xc>
 8010734:	89a3      	ldrh	r3, [r4, #12]
 8010736:	6020      	str	r0, [r4, #0]
 8010738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801073c:	81a3      	strh	r3, [r4, #12]
 801073e:	9b00      	ldr	r3, [sp, #0]
 8010740:	6163      	str	r3, [r4, #20]
 8010742:	9b01      	ldr	r3, [sp, #4]
 8010744:	6120      	str	r0, [r4, #16]
 8010746:	b15b      	cbz	r3, 8010760 <__smakebuf_r+0x70>
 8010748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801074c:	4630      	mov	r0, r6
 801074e:	f000 f84d 	bl	80107ec <_isatty_r>
 8010752:	b128      	cbz	r0, 8010760 <__smakebuf_r+0x70>
 8010754:	89a3      	ldrh	r3, [r4, #12]
 8010756:	f023 0303 	bic.w	r3, r3, #3
 801075a:	f043 0301 	orr.w	r3, r3, #1
 801075e:	81a3      	strh	r3, [r4, #12]
 8010760:	89a3      	ldrh	r3, [r4, #12]
 8010762:	431d      	orrs	r5, r3
 8010764:	81a5      	strh	r5, [r4, #12]
 8010766:	e7cf      	b.n	8010708 <__smakebuf_r+0x18>

08010768 <_raise_r>:
 8010768:	291f      	cmp	r1, #31
 801076a:	b538      	push	{r3, r4, r5, lr}
 801076c:	4604      	mov	r4, r0
 801076e:	460d      	mov	r5, r1
 8010770:	d904      	bls.n	801077c <_raise_r+0x14>
 8010772:	2316      	movs	r3, #22
 8010774:	6003      	str	r3, [r0, #0]
 8010776:	f04f 30ff 	mov.w	r0, #4294967295
 801077a:	bd38      	pop	{r3, r4, r5, pc}
 801077c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801077e:	b112      	cbz	r2, 8010786 <_raise_r+0x1e>
 8010780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010784:	b94b      	cbnz	r3, 801079a <_raise_r+0x32>
 8010786:	4620      	mov	r0, r4
 8010788:	f000 f852 	bl	8010830 <_getpid_r>
 801078c:	462a      	mov	r2, r5
 801078e:	4601      	mov	r1, r0
 8010790:	4620      	mov	r0, r4
 8010792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010796:	f000 b839 	b.w	801080c <_kill_r>
 801079a:	2b01      	cmp	r3, #1
 801079c:	d00a      	beq.n	80107b4 <_raise_r+0x4c>
 801079e:	1c59      	adds	r1, r3, #1
 80107a0:	d103      	bne.n	80107aa <_raise_r+0x42>
 80107a2:	2316      	movs	r3, #22
 80107a4:	6003      	str	r3, [r0, #0]
 80107a6:	2001      	movs	r0, #1
 80107a8:	e7e7      	b.n	801077a <_raise_r+0x12>
 80107aa:	2400      	movs	r4, #0
 80107ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80107b0:	4628      	mov	r0, r5
 80107b2:	4798      	blx	r3
 80107b4:	2000      	movs	r0, #0
 80107b6:	e7e0      	b.n	801077a <_raise_r+0x12>

080107b8 <raise>:
 80107b8:	4b02      	ldr	r3, [pc, #8]	; (80107c4 <raise+0xc>)
 80107ba:	4601      	mov	r1, r0
 80107bc:	6818      	ldr	r0, [r3, #0]
 80107be:	f7ff bfd3 	b.w	8010768 <_raise_r>
 80107c2:	bf00      	nop
 80107c4:	24000084 	.word	0x24000084

080107c8 <_fstat_r>:
 80107c8:	b538      	push	{r3, r4, r5, lr}
 80107ca:	4d07      	ldr	r5, [pc, #28]	; (80107e8 <_fstat_r+0x20>)
 80107cc:	2300      	movs	r3, #0
 80107ce:	4604      	mov	r4, r0
 80107d0:	4608      	mov	r0, r1
 80107d2:	4611      	mov	r1, r2
 80107d4:	602b      	str	r3, [r5, #0]
 80107d6:	f7f0 fb6a 	bl	8000eae <_fstat>
 80107da:	1c43      	adds	r3, r0, #1
 80107dc:	d102      	bne.n	80107e4 <_fstat_r+0x1c>
 80107de:	682b      	ldr	r3, [r5, #0]
 80107e0:	b103      	cbz	r3, 80107e4 <_fstat_r+0x1c>
 80107e2:	6023      	str	r3, [r4, #0]
 80107e4:	bd38      	pop	{r3, r4, r5, pc}
 80107e6:	bf00      	nop
 80107e8:	24005ef0 	.word	0x24005ef0

080107ec <_isatty_r>:
 80107ec:	b538      	push	{r3, r4, r5, lr}
 80107ee:	4d06      	ldr	r5, [pc, #24]	; (8010808 <_isatty_r+0x1c>)
 80107f0:	2300      	movs	r3, #0
 80107f2:	4604      	mov	r4, r0
 80107f4:	4608      	mov	r0, r1
 80107f6:	602b      	str	r3, [r5, #0]
 80107f8:	f7f0 fb69 	bl	8000ece <_isatty>
 80107fc:	1c43      	adds	r3, r0, #1
 80107fe:	d102      	bne.n	8010806 <_isatty_r+0x1a>
 8010800:	682b      	ldr	r3, [r5, #0]
 8010802:	b103      	cbz	r3, 8010806 <_isatty_r+0x1a>
 8010804:	6023      	str	r3, [r4, #0]
 8010806:	bd38      	pop	{r3, r4, r5, pc}
 8010808:	24005ef0 	.word	0x24005ef0

0801080c <_kill_r>:
 801080c:	b538      	push	{r3, r4, r5, lr}
 801080e:	4d07      	ldr	r5, [pc, #28]	; (801082c <_kill_r+0x20>)
 8010810:	2300      	movs	r3, #0
 8010812:	4604      	mov	r4, r0
 8010814:	4608      	mov	r0, r1
 8010816:	4611      	mov	r1, r2
 8010818:	602b      	str	r3, [r5, #0]
 801081a:	f7f0 fae7 	bl	8000dec <_kill>
 801081e:	1c43      	adds	r3, r0, #1
 8010820:	d102      	bne.n	8010828 <_kill_r+0x1c>
 8010822:	682b      	ldr	r3, [r5, #0]
 8010824:	b103      	cbz	r3, 8010828 <_kill_r+0x1c>
 8010826:	6023      	str	r3, [r4, #0]
 8010828:	bd38      	pop	{r3, r4, r5, pc}
 801082a:	bf00      	nop
 801082c:	24005ef0 	.word	0x24005ef0

08010830 <_getpid_r>:
 8010830:	f7f0 bad4 	b.w	8000ddc <_getpid>

08010834 <_malloc_usable_size_r>:
 8010834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010838:	1f18      	subs	r0, r3, #4
 801083a:	2b00      	cmp	r3, #0
 801083c:	bfbc      	itt	lt
 801083e:	580b      	ldrlt	r3, [r1, r0]
 8010840:	18c0      	addlt	r0, r0, r3
 8010842:	4770      	bx	lr

08010844 <_init>:
 8010844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010846:	bf00      	nop
 8010848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801084a:	bc08      	pop	{r3}
 801084c:	469e      	mov	lr, r3
 801084e:	4770      	bx	lr

08010850 <_fini>:
 8010850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010852:	bf00      	nop
 8010854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010856:	bc08      	pop	{r3}
 8010858:	469e      	mov	lr, r3
 801085a:	4770      	bx	lr
